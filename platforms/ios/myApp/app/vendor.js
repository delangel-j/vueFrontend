(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/@nativescript/core/color/color-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/@nativescript/core/utils/types.js");

var knownColors = __webpack_require__("../node_modules/@nativescript/core/color/known-colors.js");

var parser_1 = __webpack_require__("../node_modules/@nativescript/core/css/parser.js");

var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;

var Color = function () {
  function Color() {
    if (arguments.length === 1) {
      var arg = arguments[0];

      if (types.isString(arg)) {
        if (isRgbOrRgba(arg)) {
          this._argb = argbFromRgbOrRgba(arg);
        } else if (isHslOrHsla(arg)) {
          this._argb = argbFromHslOrHsla(arg);
        } else if (knownColors.isKnownName(arg)) {
          var hex = knownColors.getKnownColor(arg);
          this._name = arg;
          this._argb = this._argbFromString(hex);
        } else if (HEX_REGEX.test(arg)) {
          var hex = this._normalizeHex(arg);

          this._argb = this._argbFromString(hex);
        } else {
          throw new Error("Invalid color: " + arg);
        }
      } else if (types.isNumber(arg)) {
        this._argb = arg >>> 0;
      } else {
        throw new Error("Expected 1 or 4 constructor parameters.");
      }
    } else if (arguments.length === 4) {
      this._argb = (arguments[0] & 0xFF) * 0x01000000 + (arguments[1] & 0xFF) * 0x00010000 + (arguments[2] & 0xFF) * 0x00000100 + (arguments[3] & 0xFF) * 0x00000001;
    } else {
      throw new Error("Expected 1 or 4 constructor parameters.");
    }
  }

  Object.defineProperty(Color.prototype, "a", {
    get: function get() {
      return this._argb / 0x01000000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "r", {
    get: function get() {
      return this._argb / 0x00010000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "g", {
    get: function get() {
      return this._argb / 0x00000100 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "b", {
    get: function get() {
      return this._argb / 0x00000001 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "argb", {
    get: function get() {
      return this._argb;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "hex", {
    get: function get() {
      if (this.a === 0xFF) {
        return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      } else {
        return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "name", {
    get: function get() {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "ios", {
    get: function get() {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "android", {
    get: function get() {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });

  Color.prototype._argbFromString = function (hex) {
    if (hex.charAt(0) === "#") {
      hex = hex.substr(1);
    }

    if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    } else if (hex.length === 4) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
    }

    var intVal = parseInt(hex, 16);

    if (hex.length === 6) {
      intVal = (intVal & 0x00FFFFFF) + 0xFF000000;
    }

    return intVal;
  };

  Color.prototype.equals = function (value) {
    return value && this.argb === value.argb;
  };

  Color.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.equals(value2);
  };

  Color.isValid = function (value) {
    if (types.isNullOrUndefined(value) || value instanceof Color) {
      return true;
    }

    if (!types.isString(value)) {
      return false;
    }

    if (knownColors.isKnownName(value)) {
      return true;
    }

    return HEX_REGEX.test(value) || isRgbOrRgba(value) || isHslOrHsla(value);
  };

  Color.prototype._componentToHex = function (component) {
    var hex = component.toString(16);

    if (hex.length === 1) {
      hex = "0" + hex;
    }

    return hex;
  };

  Color.prototype._normalizeHex = function (hexStr) {
    if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
      hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
    }

    return hexStr;
  };

  Color.prototype.toString = function () {
    return this.hex;
  };

  Color.fromIosColor = function (value) {
    return undefined;
  };

  return Color;
}();

exports.Color = Color;

function isRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}

function isHslOrHsla(value) {
  var toLower = value.toLowerCase();
  return (toLower.indexOf("hsl(") === 0 || toLower.indexOf("hsla(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}

function parseColorWithAlpha(value) {
  var toLower = value.toLowerCase();
  var parts = toLower.replace(/(rgb|hsl)a?\(/, "").replace(")", "").trim().split(",");
  var f = 255;
  var s = 255;
  var t = 255;
  var a = 255;

  if (parts[0]) {
    f = parseInt(parts[0].trim());
  }

  if (parts[1]) {
    s = parseInt(parts[1].trim());
  }

  if (parts[2]) {
    t = parseInt(parts[2].trim());
  }

  if (parts[3]) {
    a = Math.round(parseFloat(parts[3].trim()) * 255);
  }

  return {
    f: f,
    s: s,
    t: t,
    a: a
  };
}

function argbFromRgbOrRgba(value) {
  var _a = parseColorWithAlpha(value),
      r = _a.f,
      g = _a.s,
      b = _a.t,
      a = _a.a;

  return (a & 0xFF) * 0x01000000 + (r & 0xFF) * 0x00010000 + (g & 0xFF) * 0x00000100 + (b & 0xFF);
}

function argbFromHslOrHsla(value) {
  var _a = parseColorWithAlpha(value),
      h = _a.f,
      s = _a.s,
      l = _a.t,
      a = _a.a;

  var _b = parser_1.convertHSLToRGBColor(h, s, l),
      r = _b.r,
      g = _b.g,
      b = _b.b;

  return (a & 0xFF) * 0x01000000 + (r & 0xFF) * 0x00010000 + (g & 0xFF) * 0x00000100 + (b & 0xFF);
}

/***/ }),

/***/ "../node_modules/@nativescript/core/color/color.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var common = __webpack_require__("../node_modules/@nativescript/core/color/color-common.js");

var Color = function (_super) {
  __extends(Color, _super);

  function Color() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Color.prototype, "ios", {
    get: function get() {
      if (!this._ios) {
        this._ios = UIColor.alloc().initWithRedGreenBlueAlpha(this.r / 255, this.g / 255, this.b / 255, this.a / 255);
      }

      return this._ios;
    },
    enumerable: true,
    configurable: true
  });

  Color.fromIosColor = function (value) {
    var rgba = CGColorGetComponents(value.CGColor);
    return new Color(Math.round(rgba[3] * 255), Math.round(rgba[0] * 255), Math.round(rgba[1] * 255), Math.round(rgba[2] * 255));
  };

  return Color;
}(common.Color);

exports.Color = Color;

/***/ }),

/***/ "../node_modules/@nativescript/core/color/known-colors.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _allColors = {};

function registerColor(name, value) {
  _allColors[name.toLowerCase()] = value;
  return value;
}

function isKnownName(name) {
  if (!name) {
    return undefined;
  }

  return name.toLowerCase() in _allColors;
}

exports.isKnownName = isKnownName;

function getKnownColor(name) {
  if (!name) {
    return undefined;
  }

  return _allColors[name.toLowerCase()];
}

exports.getKnownColor = getKnownColor;
exports.Transparent = registerColor("Transparent", "#00000000");
exports.AliceBlue = registerColor("AliceBlue", "#F0F8FF");
exports.AntiqueWhite = registerColor("AntiqueWhite", "#FAEBD7");
exports.Aqua = registerColor("Aqua", "#00FFFF");
exports.Aquamarine = registerColor("Aquamarine", "#7FFFD4");
exports.Azure = registerColor("Azure", "#F0FFFF");
exports.Beige = registerColor("Beige", "#F5F5DC");
exports.Bisque = registerColor("Bisque", "#FFE4C4");
exports.Black = registerColor("Black", "#000000");
exports.BlanchedAlmond = registerColor("BlanchedAlmond", "#FFEBCD");
exports.Blue = registerColor("Blue", "#0000FF");
exports.BlueViolet = registerColor("BlueViolet", "#8A2BE2");
exports.Brown = registerColor("Brown", "#A52A2A");
exports.BurlyWood = registerColor("BurlyWood", "#DEB887");
exports.CadetBlue = registerColor("CadetBlue", "#5F9EA0");
exports.Chartreuse = registerColor("Chartreuse", "#7FFF00");
exports.Chocolate = registerColor("Chocolate", "#D2691E");
exports.Coral = registerColor("Coral", "#FF7F50");
exports.CornflowerBlue = registerColor("CornflowerBlue", "#6495ED");
exports.Cornsilk = registerColor("Cornsilk", "#FFF8DC");
exports.Crimson = registerColor("Crimson", "#DC143C");
exports.Cyan = registerColor("Cyan", "#00FFFF");
exports.DarkBlue = registerColor("DarkBlue", "#00008B");
exports.DarkCyan = registerColor("DarkCyan", "#008B8B");
exports.DarkGoldenRod = registerColor("DarkGoldenRod", "#B8860B");
exports.DarkGray = registerColor("DarkGray", "#A9A9A9");
exports.DarkGreen = registerColor("DarkGreen", "#006400");
exports.DarkKhaki = registerColor("DarkKhaki", "#BDB76B");
exports.DarkMagenta = registerColor("DarkMagenta", "#8B008B");
exports.DarkOliveGreen = registerColor("DarkOliveGreen", "#556B2F");
exports.DarkOrange = registerColor("DarkOrange", "#FF8C00");
exports.DarkOrchid = registerColor("DarkOrchid", "#9932CC");
exports.DarkRed = registerColor("DarkRed", "#8B0000");
exports.DarkSalmon = registerColor("DarkSalmon", "#E9967A");
exports.DarkSeaGreen = registerColor("DarkSeaGreen", "#8FBC8F");
exports.DarkSlateBlue = registerColor("DarkSlateBlue", "#483D8B");
exports.DarkSlateGray = registerColor("DarkSlateGray", "#2F4F4F");
exports.DarkTurquoise = registerColor("DarkTurquoise", "#00CED1");
exports.DarkViolet = registerColor("DarkViolet", "#9400D3");
exports.DeepPink = registerColor("DeepPink", "#FF1493");
exports.DeepSkyBlue = registerColor("DeepSkyBlue", "#00BFFF");
exports.DimGray = registerColor("DimGray", "#696969");
exports.DodgerBlue = registerColor("DodgerBlue", "#1E90FF");
exports.FireBrick = registerColor("FireBrick", "#B22222");
exports.FloralWhite = registerColor("FloralWhite", "#FFFAF0");
exports.ForestGreen = registerColor("ForestGreen", "#228B22");
exports.Fuchsia = registerColor("Fuchsia", "#FF00FF");
exports.Gainsboro = registerColor("Gainsboro", "#DCDCDC");
exports.GhostWhite = registerColor("GhostWhite", "#F8F8FF");
exports.Gold = registerColor("Gold", "#FFD700");
exports.GoldenRod = registerColor("GoldenRod", "#DAA520");
exports.Gray = registerColor("Gray", "#808080");
exports.Green = registerColor("Green", "#008000");
exports.GreenYellow = registerColor("GreenYellow", "#ADFF2F");
exports.HoneyDew = registerColor("HoneyDew", "#F0FFF0");
exports.HotPink = registerColor("HotPink", "#FF69B4");
exports.IndianRed = registerColor("IndianRed", "#CD5C5C");
exports.Indigo = registerColor("Indigo", "#4B0082");
exports.Ivory = registerColor("Ivory", "#FFFFF0");
exports.Khaki = registerColor("Khaki", "#F0E68C");
exports.Lavender = registerColor("Lavender", "#E6E6FA");
exports.LavenderBlush = registerColor("LavenderBlush", "#FFF0F5");
exports.LawnGreen = registerColor("LawnGreen", "#7CFC00");
exports.LemonChiffon = registerColor("LemonChiffon", "#FFFACD");
exports.LightBlue = registerColor("LightBlue", "#ADD8E6");
exports.LightCoral = registerColor("LightCoral", "#F08080");
exports.LightCyan = registerColor("LightCyan", "#E0FFFF");
exports.LightGoldenRodYellow = registerColor("LightGoldenRodYellow", "#FAFAD2");
exports.LightGray = registerColor("LightGray", "#D3D3D3");
exports.LightGreen = registerColor("LightGreen", "#90EE90");
exports.LightPink = registerColor("LightPink", "#FFB6C1");
exports.LightSalmon = registerColor("LightSalmon", "#FFA07A");
exports.LightSeaGreen = registerColor("LightSeaGreen", "#20B2AA");
exports.LightSkyBlue = registerColor("LightSkyBlue", "#87CEFA");
exports.LightSlateGray = registerColor("LightSlateGray", "#778899");
exports.LightSteelBlue = registerColor("LightSteelBlue", "#B0C4DE");
exports.LightYellow = registerColor("LightYellow", "#FFFFE0");
exports.Lime = registerColor("Lime", "#00FF00");
exports.LimeGreen = registerColor("LimeGreen", "#32CD32");
exports.Linen = registerColor("Linen", "#FAF0E6");
exports.Magenta = registerColor("Magenta", "#FF00FF");
exports.Maroon = registerColor("Maroon", "#800000");
exports.MediumAquaMarine = registerColor("MediumAquaMarine", "#66CDAA");
exports.MediumBlue = registerColor("MediumBlue", "#0000CD");
exports.MediumOrchid = registerColor("MediumOrchid", "#BA55D3");
exports.MediumPurple = registerColor("MediumPurple", "#9370DB");
exports.MediumSeaGreen = registerColor("MediumSeaGreen", "#3CB371");
exports.MediumSlateBlue = registerColor("MediumSlateBlue", "#7B68EE");
exports.MediumSpringGreen = registerColor("MediumSpringGreen", "#00FA9A");
exports.MediumTurquoise = registerColor("MediumTurquoise", "#48D1CC");
exports.MediumVioletRed = registerColor("MediumVioletRed", "#C71585");
exports.MidnightBlue = registerColor("MidnightBlue", "#191970");
exports.MintCream = registerColor("MintCream", "#F5FFFA");
exports.MistyRose = registerColor("MistyRose", "#FFE4E1");
exports.Moccasin = registerColor("Moccasin", "#FFE4B5");
exports.NavajoWhite = registerColor("NavajoWhite", "#FFDEAD");
exports.Navy = registerColor("Navy", "#000080");
exports.OldLace = registerColor("OldLace", "#FDF5E6");
exports.Olive = registerColor("Olive", "#808000");
exports.OliveDrab = registerColor("OliveDrab", "#6B8E23");
exports.Orange = registerColor("Orange", "#FFA500");
exports.OrangeRed = registerColor("OrangeRed", "#FF4500");
exports.Orchid = registerColor("Orchid", "#DA70D6");
exports.PaleGoldenRod = registerColor("PaleGoldenRod", "#EEE8AA");
exports.PaleGreen = registerColor("PaleGreen", "#98FB98");
exports.PaleTurquoise = registerColor("PaleTurquoise", "#AFEEEE");
exports.PaleVioletRed = registerColor("PaleVioletRed", "#DB7093");
exports.PapayaWhip = registerColor("PapayaWhip", "#FFEFD5");
exports.PeachPuff = registerColor("PeachPuff", "#FFDAB9");
exports.Peru = registerColor("Peru", "#CD853F");
exports.Pink = registerColor("Pink", "#FFC0CB");
exports.Plum = registerColor("Plum", "#DDA0DD");
exports.PowderBlue = registerColor("PowderBlue", "#B0E0E6");
exports.Purple = registerColor("Purple", "#800080");
exports.RebeccaPurple = registerColor("RebeccaPurple", "#663399");
exports.Red = registerColor("Red", "#FF0000");
exports.RosyBrown = registerColor("RosyBrown", "#BC8F8F");
exports.RoyalBlue = registerColor("RoyalBlue", "#4169E1");
exports.SaddleBrown = registerColor("SaddleBrown", "#8B4513");
exports.Salmon = registerColor("Salmon", "#FA8072");
exports.SandyBrown = registerColor("SandyBrown", "#F4A460");
exports.SeaGreen = registerColor("SeaGreen", "#2E8B57");
exports.SeaShell = registerColor("SeaShell", "#FFF5EE");
exports.Sienna = registerColor("Sienna", "#A0522D");
exports.Silver = registerColor("Silver", "#C0C0C0");
exports.SkyBlue = registerColor("SkyBlue", "#87CEEB");
exports.SlateBlue = registerColor("SlateBlue", "#6A5ACD");
exports.SlateGray = registerColor("SlateGray", "#708090");
exports.Snow = registerColor("Snow", "#FFFAFA");
exports.SpringGreen = registerColor("SpringGreen", "#00FF7F");
exports.SteelBlue = registerColor("SteelBlue", "#4682B4");
exports.Tan = registerColor("Tan", "#D2B48C");
exports.Teal = registerColor("Teal", "#008080");
exports.Thistle = registerColor("Thistle", "#D8BFD8");
exports.Tomato = registerColor("Tomato", "#FF6347");
exports.Turquoise = registerColor("Turquoise", "#40E0D0");
exports.Violet = registerColor("Violet", "#EE82EE");
exports.Wheat = registerColor("Wheat", "#F5DEB3");
exports.White = registerColor("White", "#FFFFFF");
exports.WhiteSmoke = registerColor("WhiteSmoke", "#F5F5F5");
exports.Yellow = registerColor("Yellow", "#FFFF00");
exports.YellowGreen = registerColor("YellowGreen", "#9ACD32");

/***/ }),

/***/ "../node_modules/@nativescript/core/css/parser.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var urlRegEx = /\s*url\((?:('|")([^\1]*)\1|([^\)]*))\)\s*/gy;

function parseURL(text, start) {
  if (start === void 0) {
    start = 0;
  }

  urlRegEx.lastIndex = start;
  var result = urlRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = urlRegEx.lastIndex;
  var value = result[2] || result[3];
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseURL = parseURL;
var hexColorRegEx = /\s*#((?:[0-9A-F]{8})|(?:[0-9A-F]{6})|(?:[0-9A-F]{3}))\s*/giy;

function parseHexColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  hexColorRegEx.lastIndex = start;
  var result = hexColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = hexColorRegEx.lastIndex;
  var hex = result[1];
  var argb;

  if (hex.length === 8) {
    argb = parseInt("0x" + hex);
  } else if (hex.length === 6) {
    argb = parseInt("0xFF" + hex);
  } else if (hex.length === 3) {
    argb = parseInt("0xFF" + hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]);
  }

  return {
    start: start,
    end: end,
    value: argb
  };
}

exports.parseHexColor = parseHexColor;

function rgbaToArgbNumber(r, g, b, a) {
  if (a === void 0) {
    a = 1;
  }

  if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
    return Math.round(a * 0xFF) * 0x01000000 + r * 0x010000 + g * 0x000100 + b;
  } else {
    return null;
  }
}

var rgbColorRegEx = /\s*(rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\))/gy;

function parseRGBColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbColorRegEx.lastIndex = start;
  var result = rgbColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbColorRegEx.lastIndex;
  var value = result[1] && rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBColor = parseRGBColor;
var rgbaColorRegEx = /\s*(rgba\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*,\s*([01]?\.?\d*)\s*\))/gy;

function parseRGBAColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbaColorRegEx.lastIndex = start;
  var result = rgbaColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbaColorRegEx.lastIndex;
  var value = rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]), parseFloat(result[5]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBAColor = parseRGBAColor;

function convertHSLToRGBColor(hue, saturation, lightness) {
  hue /= 60;
  lightness /= 100;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation / 100,
      X = chroma * (1 - Math.abs(hue % 2 - 1)),
      _a = {
    m: lightness - chroma / 2
  },
      r = _a.m,
      g = _a.m,
      b = _a.m;

  if (0 <= hue && hue < 1) {
    r += chroma;
    g += X;
  } else if (hue < 2) {
    r += X;
    g += chroma;
  } else if (hue < 3) {
    g += chroma;
    b += X;
  } else if (hue < 4) {
    g += X;
    b += chroma;
  } else if (hue < 5) {
    r += X;
    b += chroma;
  } else if (hue < 6) {
    r += chroma;
    b += X;
  }

  return {
    r: Math.round(r * 0xFF),
    g: Math.round(g * 0xFF),
    b: Math.round(b * 0xFF)
  };
}

exports.convertHSLToRGBColor = convertHSLToRGBColor;

function hslaToArgbNumber(h, s, l, a) {
  if (a === void 0) {
    a = 1;
  }

  var _a = convertHSLToRGBColor(h, s, l),
      r = _a.r,
      g = _a.g,
      b = _a.b;

  if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
    return Math.round(a * 0xFF) * 0x01000000 + r * 0x010000 + g * 0x000100 + b;
  } else {
    return null;
  }
}

var hslColorRegEx = /\s*(hsl\(\s*([\d.]*)\s*,\s*([\d.]*)%\s*,\s*([\d.]*)%\s*\))/gy;

function parseHSLColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  hslColorRegEx.lastIndex = start;
  var result = hslColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = hslColorRegEx.lastIndex;
  var value = result[1] && hslaToArgbNumber(parseFloat(result[2]), parseFloat(result[3]), parseFloat(result[4]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseHSLColor = parseHSLColor;
var hslaColorRegEx = /\s*(hsla\(\s*([\d.]*)\s*,\s*([\d.]*)%\s*,\s*([\d.]*)%\s*,\s*([01]?\.?\d*)\s*\))/gy;

function parseHSLAColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  hslaColorRegEx.lastIndex = start;
  var result = hslaColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = hslaColorRegEx.lastIndex;
  var value = hslaToArgbNumber(parseFloat(result[2]), parseFloat(result[3]), parseFloat(result[4]), parseFloat(result[5]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseHSLAColor = parseHSLAColor;
var colors;

(function (colors) {
  colors[colors["transparent"] = 0] = "transparent";
  colors[colors["aliceblue"] = 4293982463] = "aliceblue";
  colors[colors["antiquewhite"] = 4294634455] = "antiquewhite";
  colors[colors["aqua"] = 4278255615] = "aqua";
  colors[colors["aquamarine"] = 4286578644] = "aquamarine";
  colors[colors["azure"] = 4293984255] = "azure";
  colors[colors["beige"] = 4294309340] = "beige";
  colors[colors["bisque"] = 4294960324] = "bisque";
  colors[colors["black"] = 4278190080] = "black";
  colors[colors["blanchedalmond"] = 4294962125] = "blanchedalmond";
  colors[colors["blue"] = 4278190335] = "blue";
  colors[colors["blueviolet"] = 4287245282] = "blueviolet";
  colors[colors["brown"] = 4289014314] = "brown";
  colors[colors["burlywood"] = 4292786311] = "burlywood";
  colors[colors["cadetblue"] = 4284456608] = "cadetblue";
  colors[colors["chartreuse"] = 4286578432] = "chartreuse";
  colors[colors["chocolate"] = 4291979550] = "chocolate";
  colors[colors["coral"] = 4294934352] = "coral";
  colors[colors["cornflowerblue"] = 4284782061] = "cornflowerblue";
  colors[colors["cornsilk"] = 4294965468] = "cornsilk";
  colors[colors["crimson"] = 4292613180] = "crimson";
  colors[colors["cyan"] = 4278255615] = "cyan";
  colors[colors["darkblue"] = 4278190219] = "darkblue";
  colors[colors["darkcyan"] = 4278225803] = "darkcyan";
  colors[colors["darkgoldenrod"] = 4290283019] = "darkgoldenrod";
  colors[colors["darkgray"] = 4289309097] = "darkgray";
  colors[colors["darkgreen"] = 4278215680] = "darkgreen";
  colors[colors["darkgrey"] = 4289309097] = "darkgrey";
  colors[colors["darkkhaki"] = 4290623339] = "darkkhaki";
  colors[colors["darkmagenta"] = 4287299723] = "darkmagenta";
  colors[colors["darkolivegreen"] = 4283788079] = "darkolivegreen";
  colors[colors["darkorange"] = 4294937600] = "darkorange";
  colors[colors["darkorchid"] = 4288230092] = "darkorchid";
  colors[colors["darkred"] = 4287299584] = "darkred";
  colors[colors["darksalmon"] = 4293498490] = "darksalmon";
  colors[colors["darkseagreen"] = 4287609999] = "darkseagreen";
  colors[colors["darkslateblue"] = 4282924427] = "darkslateblue";
  colors[colors["darkslategray"] = 4281290575] = "darkslategray";
  colors[colors["darkslategrey"] = 4281290575] = "darkslategrey";
  colors[colors["darkturquoise"] = 4278243025] = "darkturquoise";
  colors[colors["darkviolet"] = 4287889619] = "darkviolet";
  colors[colors["deeppink"] = 4294907027] = "deeppink";
  colors[colors["deepskyblue"] = 4278239231] = "deepskyblue";
  colors[colors["dimgray"] = 4285098345] = "dimgray";
  colors[colors["dimgrey"] = 4285098345] = "dimgrey";
  colors[colors["dodgerblue"] = 4280193279] = "dodgerblue";
  colors[colors["firebrick"] = 4289864226] = "firebrick";
  colors[colors["floralwhite"] = 4294966000] = "floralwhite";
  colors[colors["forestgreen"] = 4280453922] = "forestgreen";
  colors[colors["fuchsia"] = 4294902015] = "fuchsia";
  colors[colors["gainsboro"] = 4292664540] = "gainsboro";
  colors[colors["ghostwhite"] = 4294506751] = "ghostwhite";
  colors[colors["gold"] = 4294956800] = "gold";
  colors[colors["goldenrod"] = 4292519200] = "goldenrod";
  colors[colors["gray"] = 4286611584] = "gray";
  colors[colors["green"] = 4278222848] = "green";
  colors[colors["greenyellow"] = 4289593135] = "greenyellow";
  colors[colors["grey"] = 4286611584] = "grey";
  colors[colors["honeydew"] = 4293984240] = "honeydew";
  colors[colors["hotpink"] = 4294928820] = "hotpink";
  colors[colors["indianred"] = 4291648604] = "indianred";
  colors[colors["indigo"] = 4283105410] = "indigo";
  colors[colors["ivory"] = 4294967280] = "ivory";
  colors[colors["khaki"] = 4293977740] = "khaki";
  colors[colors["lavender"] = 4293322490] = "lavender";
  colors[colors["lavenderblush"] = 4294963445] = "lavenderblush";
  colors[colors["lawngreen"] = 4286381056] = "lawngreen";
  colors[colors["lemonchiffon"] = 4294965965] = "lemonchiffon";
  colors[colors["lightblue"] = 4289583334] = "lightblue";
  colors[colors["lightcoral"] = 4293951616] = "lightcoral";
  colors[colors["lightcyan"] = 4292935679] = "lightcyan";
  colors[colors["lightgoldenrodyellow"] = 4294638290] = "lightgoldenrodyellow";
  colors[colors["lightgray"] = 4292072403] = "lightgray";
  colors[colors["lightgreen"] = 4287688336] = "lightgreen";
  colors[colors["lightgrey"] = 4292072403] = "lightgrey";
  colors[colors["lightpink"] = 4294948545] = "lightpink";
  colors[colors["lightsalmon"] = 4294942842] = "lightsalmon";
  colors[colors["lightseagreen"] = 4280332970] = "lightseagreen";
  colors[colors["lightskyblue"] = 4287090426] = "lightskyblue";
  colors[colors["lightslategray"] = 4286023833] = "lightslategray";
  colors[colors["lightslategrey"] = 4286023833] = "lightslategrey";
  colors[colors["lightsteelblue"] = 4289774814] = "lightsteelblue";
  colors[colors["lightyellow"] = 4294967264] = "lightyellow";
  colors[colors["lime"] = 4278255360] = "lime";
  colors[colors["limegreen"] = 4281519410] = "limegreen";
  colors[colors["linen"] = 4294635750] = "linen";
  colors[colors["magenta"] = 4294902015] = "magenta";
  colors[colors["maroon"] = 4286578688] = "maroon";
  colors[colors["mediumaquamarine"] = 4284927402] = "mediumaquamarine";
  colors[colors["mediumblue"] = 4278190285] = "mediumblue";
  colors[colors["mediumorchid"] = 4290401747] = "mediumorchid";
  colors[colors["mediumpurple"] = 4287852763] = "mediumpurple";
  colors[colors["mediumseagreen"] = 4282168177] = "mediumseagreen";
  colors[colors["mediumslateblue"] = 4286277870] = "mediumslateblue";
  colors[colors["mediumspringgreen"] = 4278254234] = "mediumspringgreen";
  colors[colors["mediumturquoise"] = 4282962380] = "mediumturquoise";
  colors[colors["mediumvioletred"] = 4291237253] = "mediumvioletred";
  colors[colors["midnightblue"] = 4279834992] = "midnightblue";
  colors[colors["mintcream"] = 4294311930] = "mintcream";
  colors[colors["mistyrose"] = 4294960353] = "mistyrose";
  colors[colors["moccasin"] = 4294960309] = "moccasin";
  colors[colors["navajowhite"] = 4294958765] = "navajowhite";
  colors[colors["navy"] = 4278190208] = "navy";
  colors[colors["oldlace"] = 4294833638] = "oldlace";
  colors[colors["olive"] = 4286611456] = "olive";
  colors[colors["olivedrab"] = 4285238819] = "olivedrab";
  colors[colors["orange"] = 4294944000] = "orange";
  colors[colors["orangered"] = 4294919424] = "orangered";
  colors[colors["orchid"] = 4292505814] = "orchid";
  colors[colors["palegoldenrod"] = 4293847210] = "palegoldenrod";
  colors[colors["palegreen"] = 4288215960] = "palegreen";
  colors[colors["paleturquoise"] = 4289720046] = "paleturquoise";
  colors[colors["palevioletred"] = 4292571283] = "palevioletred";
  colors[colors["papayawhip"] = 4294963157] = "papayawhip";
  colors[colors["peachpuff"] = 4294957753] = "peachpuff";
  colors[colors["peru"] = 4291659071] = "peru";
  colors[colors["pink"] = 4294951115] = "pink";
  colors[colors["plum"] = 4292714717] = "plum";
  colors[colors["powderblue"] = 4289781990] = "powderblue";
  colors[colors["purple"] = 4286578816] = "purple";
  colors[colors["rebeccapurple"] = 4284887961] = "rebeccapurple";
  colors[colors["red"] = 4294901760] = "red";
  colors[colors["rosybrown"] = 4290547599] = "rosybrown";
  colors[colors["royalblue"] = 4282477025] = "royalblue";
  colors[colors["saddlebrown"] = 4287317267] = "saddlebrown";
  colors[colors["salmon"] = 4294606962] = "salmon";
  colors[colors["sandybrown"] = 4294222944] = "sandybrown";
  colors[colors["seagreen"] = 4281240407] = "seagreen";
  colors[colors["seashell"] = 4294964718] = "seashell";
  colors[colors["sienna"] = 4288696877] = "sienna";
  colors[colors["silver"] = 4290822336] = "silver";
  colors[colors["skyblue"] = 4287090411] = "skyblue";
  colors[colors["slateblue"] = 4285160141] = "slateblue";
  colors[colors["slategray"] = 4285563024] = "slategray";
  colors[colors["slategrey"] = 4285563024] = "slategrey";
  colors[colors["snow"] = 4294966010] = "snow";
  colors[colors["springgreen"] = 4278255487] = "springgreen";
  colors[colors["steelblue"] = 4282811060] = "steelblue";
  colors[colors["tan"] = 4291998860] = "tan";
  colors[colors["teal"] = 4278222976] = "teal";
  colors[colors["thistle"] = 4292394968] = "thistle";
  colors[colors["tomato"] = 4294927175] = "tomato";
  colors[colors["turquoise"] = 4282441936] = "turquoise";
  colors[colors["violet"] = 4293821166] = "violet";
  colors[colors["wheat"] = 4294303411] = "wheat";
  colors[colors["white"] = 4294967295] = "white";
  colors[colors["whitesmoke"] = 4294309365] = "whitesmoke";
  colors[colors["yellow"] = 4294967040] = "yellow";
  colors[colors["yellowgreen"] = 4288335154] = "yellowgreen";
})(colors = exports.colors || (exports.colors = {}));

function parseColorKeyword(value, start, keyword) {
  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && keyword.value in colors) {
    var end = keyword.end;
    var value_1 = colors[keyword.value];
    return {
      start: start,
      end: end,
      value: value_1
    };
  }

  return null;
}

exports.parseColorKeyword = parseColorKeyword;

function parseColor(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  return parseHexColor(value, start) || parseColorKeyword(value, start, keyword) || parseRGBColor(value, start) || parseRGBAColor(value, start) || parseHSLColor(value, start) || parseHSLAColor(value, start);
}

exports.parseColor = parseColor;
var keywordRegEx = /\s*([a-z][\w\-]*)\s*/giy;

function parseKeyword(text, start) {
  if (start === void 0) {
    start = 0;
  }

  keywordRegEx.lastIndex = start;
  var result = keywordRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = keywordRegEx.lastIndex;
  var value = result[1];
  return {
    start: start,
    end: end,
    value: value
  };
}

var backgroundRepeatKeywords = new Set(["repeat", "repeat-x", "repeat-y", "no-repeat"]);

function parseRepeat(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && backgroundRepeatKeywords.has(keyword.value)) {
    var end = keyword.end;
    var value_2 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_2
    };
  }

  return null;
}

exports.parseRepeat = parseRepeat;
var unitRegEx = /\s*([\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?)([a-zA-Z]+|%)?\s*/gy;

function parseUnit(text, start) {
  if (start === void 0) {
    start = 0;
  }

  unitRegEx.lastIndex = start;
  var result = unitRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = unitRegEx.lastIndex;
  var value = parseFloat(result[1]);
  var unit = result[2] || "dip";
  return {
    start: start,
    end: end,
    value: {
      value: value,
      unit: unit
    }
  };
}

exports.parseUnit = parseUnit;

function parsePercentageOrLength(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var unitResult = parseUnit(text, start);

  if (unitResult) {
    var start_1 = unitResult.start,
        end = unitResult.end;
    var value = unitResult.value;

    if (value.unit === "%") {
      value.value /= 100;
    } else if (!value.unit) {
      value.unit = "dip";
    } else if (value.unit === "px" || value.unit === "dip") {} else {
      return null;
    }

    return {
      start: start_1,
      end: end,
      value: value
    };
  }

  return null;
}

exports.parsePercentageOrLength = parsePercentageOrLength;
var angleUnitsToRadMap = {
  "deg": function deg(start, end, _deg) {
    return {
      start: start,
      end: end,
      value: _deg / 180 * Math.PI
    };
  },
  "rad": function rad(start, end, _rad) {
    return {
      start: start,
      end: end,
      value: _rad
    };
  },
  "grad": function grad(start, end, _grad) {
    return {
      start: start,
      end: end,
      value: _grad / 200 * Math.PI
    };
  },
  "turn": function turn(start, end, _turn) {
    return {
      start: start,
      end: end,
      value: _turn * Math.PI * 2
    };
  }
};

function parseAngle(value, start) {
  if (start === void 0) {
    start = 0;
  }

  var angleResult = parseUnit(value, start);

  if (angleResult) {
    var start_2 = angleResult.start,
        end = angleResult.end,
        value_3 = angleResult.value;
    return (angleUnitsToRadMap[value_3.unit] || function (_, __, ___) {
      return null;
    })(start_2, end, value_3.value);
  }

  return null;
}

exports.parseAngle = parseAngle;
var backgroundSizeKeywords = new Set(["auto", "contain", "cover"]);

function parseBackgroundSize(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  var end = start;

  if (keyword && backgroundSizeKeywords.has(keyword.value)) {
    end = keyword.end;
    var value_4 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_4
    };
  }

  var firstLength = parsePercentageOrLength(value, end);

  if (firstLength) {
    end = firstLength.end;
    var secondLength = parsePercentageOrLength(value, firstLength.end);

    if (secondLength) {
      end = secondLength.end;
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: secondLength.value
        }
      };
    } else {
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: "auto"
        }
      };
    }
  }

  return null;
}

exports.parseBackgroundSize = parseBackgroundSize;
var backgroundPositionKeywords = Object.freeze(new Set(["left", "right", "top", "bottom", "center"]));
var backgroundPositionKeywordsDirection = {
  "left": "x",
  "right": "x",
  "center": "center",
  "top": "y",
  "bottom": "y"
};

function parseBackgroundPosition(text, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(text, start);
  }

  function formatH(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  function formatV(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  var end = start;

  if (keyword && backgroundPositionKeywords.has(keyword.value)) {
    end = keyword.end;
    var firstDirection = backgroundPositionKeywordsDirection[keyword.value];
    var firstLength = firstDirection !== "center" && parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
    }

    var secondKeyword = parseKeyword(text, end);

    if (secondKeyword && backgroundPositionKeywords.has(secondKeyword.value)) {
      end = secondKeyword.end;
      var secondDirection = backgroundPositionKeywordsDirection[secondKeyword.end];

      if (firstDirection === secondDirection && firstDirection !== "center") {
        return null;
      }

      var secondLength = secondDirection !== "center" && parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
      }

      if (firstDirection === secondDirection && secondDirection === "center" || firstDirection === "x" || secondDirection === "y") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: formatV(secondKeyword, secondLength)
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(secondKeyword, secondLength),
            y: formatV(keyword, firstLength)
          }
        };
      }
    } else {
      if (firstDirection === "center") {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: "center"
          }
        };
      } else if (firstDirection === "x") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: "center"
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: formatV(keyword, firstLength)
          }
        };
      }
    }
  } else {
    var firstLength = parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
      var secondLength = parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: {
              align: "top",
              offset: secondLength.value
            }
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: "center"
          }
        };
      }
    } else {
      return null;
    }
  }
}

exports.parseBackgroundPosition = parseBackgroundPosition;
var directionRegEx = /\s*to\s*(left|right|top|bottom)\s*(left|right|top|bottom)?\s*/gy;
var sideDirections = {
  top: Math.PI * 0 / 2,
  right: Math.PI * 1 / 2,
  bottom: Math.PI * 2 / 2,
  left: Math.PI * 3 / 2
};
var cornerDirections = {
  top: {
    right: Math.PI * 1 / 4,
    left: Math.PI * 7 / 4
  },
  right: {
    top: Math.PI * 1 / 4,
    bottom: Math.PI * 3 / 4
  },
  bottom: {
    right: Math.PI * 3 / 4,
    left: Math.PI * 5 / 4
  },
  left: {
    top: Math.PI * 7 / 4,
    bottom: Math.PI * 5 / 4
  }
};

function parseDirection(text, start) {
  if (start === void 0) {
    start = 0;
  }

  directionRegEx.lastIndex = start;
  var result = directionRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = directionRegEx.lastIndex;
  var firstDirection = result[1];

  if (result[2]) {
    var secondDirection = result[2];
    var value = cornerDirections[firstDirection][secondDirection];
    return value === undefined ? null : {
      start: start,
      end: end,
      value: value
    };
  } else {
    return {
      start: start,
      end: end,
      value: sideDirections[firstDirection]
    };
  }
}

var openingBracketRegEx = /\s*\(\s*/gy;
var closingBracketRegEx = /\s*\)\s*/gy;
var closingBracketOrCommaRegEx = /\s*(\)|,)\s*/gy;

function parseArgumentsList(text, start, argument) {
  openingBracketRegEx.lastIndex = start;
  var openingBracket = openingBracketRegEx.exec(text);

  if (!openingBracket) {
    return null;
  }

  var end = openingBracketRegEx.lastIndex;
  var value = [];
  closingBracketRegEx.lastIndex = end;
  var closingBracket = closingBracketRegEx.exec(text);

  if (closingBracket) {
    return {
      start: start,
      end: end,
      value: value
    };
  }

  for (var index_1 = 0; true; index_1++) {
    var arg = argument(text, end, index_1);

    if (!arg) {
      return null;
    }

    end = arg.end;
    value.push(arg);
    closingBracketOrCommaRegEx.lastIndex = end;
    var closingBracketOrComma = closingBracketOrCommaRegEx.exec(text);

    if (closingBracketOrComma) {
      end = closingBracketOrCommaRegEx.lastIndex;

      if (closingBracketOrComma[1] === ",") {
        continue;
      } else if (closingBracketOrComma[1] === ")") {
        return {
          start: start,
          end: end,
          value: value
        };
      }
    } else {
      return null;
    }
  }
}

function parseColorStop(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var color = parseColor(text, start);

  if (!color) {
    return null;
  }

  var end = color.end;
  var offset = parsePercentageOrLength(text, end);

  if (offset) {
    end = offset.end;
    return {
      start: start,
      end: end,
      value: {
        argb: color.value,
        offset: offset.value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      argb: color.value
    }
  };
}

exports.parseColorStop = parseColorStop;
var linearGradientStartRegEx = /\s*linear-gradient\s*/gy;

function parseLinearGradient(text, start) {
  if (start === void 0) {
    start = 0;
  }

  linearGradientStartRegEx.lastIndex = start;
  var lgs = linearGradientStartRegEx.exec(text);

  if (!lgs) {
    return null;
  }

  var end = linearGradientStartRegEx.lastIndex;
  var angle = Math.PI;
  var colors = [];
  var parsedArgs = parseArgumentsList(text, end, function (text, start, index) {
    if (index === 0) {
      var angleArg = parseAngle(text, start) || parseDirection(text, start);

      if (angleArg) {
        angle = angleArg.value;
        return angleArg;
      }
    }

    var colorStop = parseColorStop(text, start);

    if (colorStop) {
      colors.push(colorStop.value);
      return colorStop;
    }

    return null;
  });

  if (!parsedArgs) {
    return null;
  }

  end = parsedArgs.end;
  return {
    start: start,
    end: end,
    value: {
      angle: angle,
      colors: colors
    }
  };
}

exports.parseLinearGradient = parseLinearGradient;
var slashRegEx = /\s*(\/)\s*/gy;

function parseSlash(text, start) {
  slashRegEx.lastIndex = start;
  var slash = slashRegEx.exec(text);

  if (!slash) {
    return null;
  }

  var end = slashRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: "/"
  };
}

function parseBackground(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var value = {};
  var end = start;

  while (end < text.length) {
    var keyword = parseKeyword(text, end);
    var color = parseColor(text, end, keyword);

    if (color) {
      value.color = color.value;
      end = color.end;
      continue;
    }

    var repeat = parseRepeat(text, end, keyword);

    if (repeat) {
      value.repeat = repeat.value;
      end = repeat.end;
      continue;
    }

    var position = parseBackgroundPosition(text, end, keyword);

    if (position) {
      position.value.text = text.substring(position.start, position.end);
      value.position = position.value;
      end = position.end;
      var slash = parseSlash(text, end);

      if (slash) {
        end = slash.end;
        var size = parseBackgroundSize(text, end);

        if (!size) {
          return null;
        }

        value.size = size.value;
        end = size.end;
      }

      continue;
    }

    var url = parseURL(text, end);

    if (url) {
      value.image = url.value;
      end = url.end;
      continue;
    }

    var gradient = parseLinearGradient(text, end);

    if (gradient) {
      value.image = gradient.value;
      end = gradient.end;
      continue;
    }

    return null;
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseBackground = parseBackground;
var universalSelectorRegEx = /\*/gy;

function parseUniversalSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  universalSelectorRegEx.lastIndex = start;
  var result = universalSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = universalSelectorRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: {
      type: "*"
    }
  };
}

exports.parseUniversalSelector = parseUniversalSelector;
var simpleIdentifierSelectorRegEx = /(#|\.|:|\b)([_-\w][_-\w\d\\/]*)/gy;

function parseSimpleIdentifierSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  simpleIdentifierSelectorRegEx.lastIndex = start;
  var result = simpleIdentifierSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = simpleIdentifierSelectorRegEx.lastIndex;
  var type = result[1];
  var identifier = result[2].replace(/\\/g, "");
  var value = {
    type: type,
    identifier: identifier
  };
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleIdentifierSelector = parseSimpleIdentifierSelector;
var attributeSelectorRegEx = /\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\]/gy;

function parseAttributeSelector(text, start) {
  attributeSelectorRegEx.lastIndex = start;
  var result = attributeSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = attributeSelectorRegEx.lastIndex;
  var property = result[1];

  if (result[2]) {
    var test_1 = result[2];
    var value = result[3] || result[4] || result[5];
    return {
      start: start,
      end: end,
      value: {
        type: "[]",
        property: property,
        test: test_1,
        value: value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      type: "[]",
      property: property
    }
  };
}

exports.parseAttributeSelector = parseAttributeSelector;

function parseSimpleSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  return parseUniversalSelector(text, start) || parseSimpleIdentifierSelector(text, start) || parseAttributeSelector(text, start);
}

exports.parseSimpleSelector = parseSimpleSelector;

function parseSimpleSelectorSequence(text, start) {
  var simpleSelector = parseSimpleSelector(text, start);

  if (!simpleSelector) {
    return null;
  }

  var end = simpleSelector.end;
  var value = [];

  while (simpleSelector) {
    value.push(simpleSelector.value);
    end = simpleSelector.end;
    simpleSelector = parseSimpleSelector(text, end);
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleSelectorSequence = parseSimpleSelectorSequence;
var combinatorRegEx = /\s*(\+|~|>)?\s*/gy;

function parseCombinator(text, start) {
  if (start === void 0) {
    start = 0;
  }

  combinatorRegEx.lastIndex = start;
  var result = combinatorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = combinatorRegEx.lastIndex;
  var value = result[1] || " ";
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseCombinator = parseCombinator;
var whiteSpaceRegEx = /\s*/gy;

function parseSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var end = start;
  whiteSpaceRegEx.lastIndex = end;
  var leadingWhiteSpace = whiteSpaceRegEx.exec(text);

  if (leadingWhiteSpace) {
    end = whiteSpaceRegEx.lastIndex;
  }

  var value = [];
  var combinator;
  var expectSimpleSelector = true;
  var pair;

  do {
    var simpleSelectorSequence = parseSimpleSelectorSequence(text, end);

    if (!simpleSelectorSequence) {
      if (expectSimpleSelector) {
        return null;
      } else {
        break;
      }
    }

    end = simpleSelectorSequence.end;

    if (combinator) {
      pair[1] = combinator.value;
    }

    pair = [simpleSelectorSequence.value, undefined];
    value.push(pair);
    combinator = parseCombinator(text, end);

    if (combinator) {
      end = combinator.end;
    }

    expectSimpleSelector = combinator && combinator.value !== " ";
  } while (combinator);

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSelector = parseSelector;
var whitespaceRegEx = /[\s\t\n\r\f]*/gym;
var singleQuoteStringRegEx = /'((?:[^\n\r\f\']|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?'|$)/gym;
var doubleQuoteStringRegEx = /"((?:[^\n\r\f\"]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?"|$)/gym;
var commentRegEx = /(\/\*(?:[^\*]|\*[^\/])*\*\/)/gym;
var numberRegEx = /[\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?/gym;
var nameRegEx = /-?(?:(?:[a-zA-Z_]|[^\x00-\x7F]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))(?:[a-zA-Z_0-9\-]*|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)/gym;

var CSS3Parser = function () {
  function CSS3Parser(text) {
    this.text = text;
    this.nextInputCodePointIndex = 0;
  }

  CSS3Parser.prototype.tokenize = function () {
    var tokens = [];
    var inputToken;

    do {
      inputToken = this.consumeAToken();
      tokens.push(inputToken);
    } while (inputToken);

    return tokens;
  };

  CSS3Parser.prototype.consumeAToken = function () {
    if (this.reconsumedInputToken) {
      var result = this.reconsumedInputToken;
      this.reconsumedInputToken = null;
      return result;
    }

    var char = this.text[this.nextInputCodePointIndex];

    switch (char) {
      case "\"":
        return this.consumeAStringToken();

      case "'":
        return this.consumeAStringToken();

      case "(":
      case ")":
      case ",":
      case ":":
      case ";":
      case "[":
      case "]":
      case "{":
      case "}":
        this.nextInputCodePointIndex++;
        return char;

      case "#":
        return this.consumeAHashToken() || this.consumeADelimToken();

      case " ":
      case "\t":
      case "\n":
      case "\r":
      case "\f":
        return this.consumeAWhitespace();

      case "@":
        return this.consumeAtKeyword() || this.consumeADelimToken();

      case "\\":
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.consumeANumericToken();

      case "u":
      case "U":
        if (this.text[this.nextInputCodePointIndex + 1] === "+") {
          var thirdChar = this.text[this.nextInputCodePointIndex + 2];

          if (thirdChar >= "0" && thirdChar <= "9" || thirdChar === "?") {
            throw new Error("Unicode tokens not supported!");
          }
        }

        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "$":
      case "*":
      case "^":
      case "|":
      case "~":
        return this.consumeAMatchToken() || this.consumeADelimToken();

      case "-":
        return this.consumeANumericToken() || this.consumeAnIdentLikeToken() || this.consumeCDC() || this.consumeADelimToken();

      case "+":
      case ".":
        return this.consumeANumericToken() || this.consumeADelimToken();

      case "/":
        return this.consumeAComment() || this.consumeADelimToken();

      case "<":
        return this.consumeCDO() || this.consumeADelimToken();

      case undefined:
        return undefined;

      default:
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
    }
  };

  CSS3Parser.prototype.consumeADelimToken = function () {
    return {
      type: 2,
      text: this.text[this.nextInputCodePointIndex++]
    };
  };

  CSS3Parser.prototype.consumeAWhitespace = function () {
    whitespaceRegEx.lastIndex = this.nextInputCodePointIndex;
    whitespaceRegEx.exec(this.text);
    this.nextInputCodePointIndex = whitespaceRegEx.lastIndex;
    return " ";
  };

  CSS3Parser.prototype.consumeAHashToken = function () {
    this.nextInputCodePointIndex++;
    var hashName = this.consumeAName();

    if (hashName) {
      return {
        type: 12,
        text: "#" + hashName.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeCDO = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 4) === "<!--") {
      this.nextInputCodePointIndex += 4;
      return "<!--";
    }

    return null;
  };

  CSS3Parser.prototype.consumeCDC = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 3) === "-->") {
      this.nextInputCodePointIndex += 3;
      return "-->";
    }

    return null;
  };

  CSS3Parser.prototype.consumeAMatchToken = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "=") {
      var token = this.text.substr(this.nextInputCodePointIndex, 2);
      this.nextInputCodePointIndex += 2;
      return token;
    }

    return null;
  };

  CSS3Parser.prototype.consumeANumericToken = function () {
    numberRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = numberRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = numberRegEx.lastIndex;

    if (this.text[this.nextInputCodePointIndex] === "%") {
      return {
        type: 4,
        text: result[0]
      };
    }

    var name = this.consumeAName();

    if (name) {
      return {
        type: 5,
        text: result[0] + name.text
      };
    }

    return {
      type: 3,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAnIdentLikeToken = function () {
    var name = this.consumeAName();

    if (!name) {
      return null;
    }

    if (this.text[this.nextInputCodePointIndex] === "(") {
      this.nextInputCodePointIndex++;

      if (name.text.toLowerCase() === "url") {
        return this.consumeAURLToken();
      }

      return {
        type: 8,
        name: name.text,
        text: name.text + "("
      };
    }

    return name;
  };

  CSS3Parser.prototype.consumeAStringToken = function () {
    var char = this.text[this.nextInputCodePointIndex];
    var result;

    if (char === "'") {
      singleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = singleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = singleQuoteStringRegEx.lastIndex;
    } else if (char === "\"") {
      doubleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = doubleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = doubleQuoteStringRegEx.lastIndex;
    }

    return {
      type: 1,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAURLToken = function () {
    var start = this.nextInputCodePointIndex - 3 - 1;
    var urlToken = {
      type: 7,
      text: undefined
    };
    this.consumeAWhitespace();

    if (this.nextInputCodePointIndex >= this.text.length) {
      return urlToken;
    }

    var nextInputCodePoint = this.text[this.nextInputCodePointIndex];

    if (nextInputCodePoint === "\"" || nextInputCodePoint === "'") {
      var stringToken = this.consumeAStringToken();
      urlToken.text = stringToken.text;
      this.consumeAWhitespace();

      if (this.text[this.nextInputCodePointIndex] === ")" || this.nextInputCodePointIndex >= this.text.length) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        urlToken.text = this.text.substring(start, end);
        return urlToken;
      } else {
        return null;
      }
    }

    while (this.nextInputCodePointIndex < this.text.length) {
      var char = this.text[this.nextInputCodePointIndex++];

      switch (char) {
        case ")":
          return urlToken;

        case " ":
        case "\t":
        case "\n":
        case "\r":
        case "\f":
          this.consumeAWhitespace();

          if (this.text[this.nextInputCodePointIndex] === ")") {
            this.nextInputCodePointIndex++;
            return urlToken;
          } else {
            return null;
          }

        case "\"":
        case "\'":
          return null;

        case "\\":
          throw new Error("Escaping not yet supported!");

        default:
          urlToken.text += char;
      }
    }

    return urlToken;
  };

  CSS3Parser.prototype.consumeAName = function () {
    nameRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = nameRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = nameRegEx.lastIndex;
    return {
      type: 6,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAtKeyword = function () {
    this.nextInputCodePointIndex++;
    var name = this.consumeAName();

    if (name) {
      return {
        type: 11,
        text: name.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeAComment = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "*") {
      commentRegEx.lastIndex = this.nextInputCodePointIndex;
      var result = commentRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = commentRegEx.lastIndex;
      return this.consumeAToken();
    }

    return null;
  };

  CSS3Parser.prototype.reconsumeTheCurrentInputToken = function (currentInputToken) {
    this.reconsumedInputToken = currentInputToken;
  };

  CSS3Parser.prototype.parseAStylesheet = function () {
    this.topLevelFlag = true;
    var stylesheet = {
      rules: this.consumeAListOfRules()
    };
    return stylesheet;
  };

  CSS3Parser.prototype.consumeAListOfRules = function () {
    var rules = [];
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      switch (inputToken) {
        case " ":
          continue;

        case "<!--":
        case "-->":
          if (this.topLevelFlag) {
            continue;
          }

          this.reconsumeTheCurrentInputToken(inputToken);
          var atRule = this.consumeAnAtRule();

          if (atRule) {
            rules.push(atRule);
          }

          continue;
      }

      if (inputToken.type === 11) {
        this.reconsumeTheCurrentInputToken(inputToken);
        var atRule = this.consumeAnAtRule();

        if (atRule) {
          rules.push(atRule);
        }

        continue;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var qualifiedRule = this.consumeAQualifiedRule();

      if (qualifiedRule) {
        rules.push(qualifiedRule);
      }
    }

    return rules;
  };

  CSS3Parser.prototype.consumeAnAtRule = function () {
    var inputToken = this.consumeAToken();
    var atRule = {
      type: "at-rule",
      name: inputToken.text,
      prelude: [],
      block: undefined
    };

    while (inputToken = this.consumeAToken()) {
      if (inputToken === ";") {
        return atRule;
      } else if (inputToken === "{") {
        atRule.block = this.consumeASimpleBlock(inputToken);
        return atRule;
      } else if (inputToken.type === 9 && inputToken.associatedToken === "{") {
        atRule.block = inputToken;
        return atRule;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var component = this.consumeAComponentValue();

      if (component) {
        atRule.prelude.push(component);
      }
    }

    return atRule;
  };

  CSS3Parser.prototype.consumeAQualifiedRule = function () {
    var qualifiedRule = {
      type: "qualified-rule",
      prelude: [],
      block: undefined
    };
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      if (inputToken === "{") {
        var block = this.consumeASimpleBlock(inputToken);
        qualifiedRule.block = block;
        return qualifiedRule;
      } else if (inputToken.type === 9) {
        var simpleBlock = inputToken;

        if (simpleBlock.associatedToken === "{") {
          qualifiedRule.block = simpleBlock;
          return qualifiedRule;
        }
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var componentValue = this.consumeAComponentValue();

      if (componentValue) {
        qualifiedRule.prelude.push(componentValue);
      }
    }

    return null;
  };

  CSS3Parser.prototype.consumeAComponentValue = function () {
    var inputToken = this.consumeAToken();

    switch (inputToken) {
      case "{":
      case "[":
      case "(":
        this.nextInputCodePointIndex++;
        return this.consumeASimpleBlock(inputToken);
    }

    if (typeof inputToken === "object" && inputToken.type === 8) {
      return this.consumeAFunction(inputToken.name);
    }

    return inputToken;
  };

  CSS3Parser.prototype.consumeASimpleBlock = function (associatedToken) {
    var endianToken = {
      "[": "]",
      "{": "}",
      "(": ")"
    }[associatedToken];
    var start = this.nextInputCodePointIndex - 1;
    var block = {
      type: 9,
      text: undefined,
      associatedToken: associatedToken,
      values: []
    };
    var nextInputToken;

    while (nextInputToken = this.text[this.nextInputCodePointIndex]) {
      if (nextInputToken === endianToken) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        block.text = this.text.substring(start, end);
        return block;
      }

      var value = this.consumeAComponentValue();

      if (value) {
        block.values.push(value);
      }
    }

    block.text = this.text.substring(start);
    return block;
  };

  CSS3Parser.prototype.consumeAFunction = function (name) {
    var start = this.nextInputCodePointIndex;
    var funcToken = {
      type: 14,
      name: name,
      text: undefined,
      components: []
    };

    do {
      if (this.nextInputCodePointIndex >= this.text.length) {
        funcToken.text = name + "(" + this.text.substring(start);
        return funcToken;
      }

      var nextInputToken = this.text[this.nextInputCodePointIndex];

      switch (nextInputToken) {
        case ")":
          this.nextInputCodePointIndex++;
          var end = this.nextInputCodePointIndex;
          funcToken.text = name + "(" + this.text.substring(start, end);
          return funcToken;

        default:
          var component = this.consumeAComponentValue();

          if (component) {
            funcToken.components.push(component);
          }

      }
    } while (true);
  };

  return CSS3Parser;
}();

exports.CSS3Parser = CSS3Parser;

var CSSNativeScript = function () {
  function CSSNativeScript() {}

  CSSNativeScript.prototype.parseStylesheet = function (stylesheet) {
    return {
      type: "stylesheet",
      stylesheet: {
        rules: this.parseRules(stylesheet.rules)
      }
    };
  };

  CSSNativeScript.prototype.parseRules = function (rules) {
    var _this = this;

    return rules.map(function (rule) {
      return _this.parseRule(rule);
    });
  };

  CSSNativeScript.prototype.parseRule = function (rule) {
    if (rule.type === "at-rule") {
      return this.parseAtRule(rule);
    } else if (rule.type === "qualified-rule") {
      return this.parseQualifiedRule(rule);
    }
  };

  CSSNativeScript.prototype.parseAtRule = function (rule) {
    if (rule.name === "import") {
      return {
        import: rule.prelude.map(function (m) {
          return typeof m === "string" ? m : m.text;
        }).join("").trim(),
        type: "import"
      };
    }

    return;
  };

  CSSNativeScript.prototype.parseQualifiedRule = function (rule) {
    return {
      type: "rule",
      selectors: this.preludeToSelectorsStringArray(rule.prelude),
      declarations: this.ruleBlockToDeclarations(rule.block.values)
    };
  };

  CSSNativeScript.prototype.ruleBlockToDeclarations = function (declarationsInputTokens) {
    var declarations = [];
    var property = "";
    var value = "";
    var reading = "property";

    for (var i = 0; i < declarationsInputTokens.length; i++) {
      var inputToken = declarationsInputTokens[i];

      if (reading === "property") {
        if (inputToken === ":") {
          reading = "value";
        } else if (typeof inputToken === "string") {
          property += inputToken;
        } else {
          property += inputToken.text;
        }
      } else {
        if (inputToken === ";") {
          property = property.trim();
          value = value.trim();
          declarations.push({
            type: "declaration",
            property: property,
            value: value
          });
          property = "";
          value = "";
          reading = "property";
        } else if (typeof inputToken === "string") {
          value += inputToken;
        } else {
          value += inputToken.text;
        }
      }
    }

    property = property.trim();
    value = value.trim();

    if (property || value) {
      declarations.push({
        type: "declaration",
        property: property,
        value: value
      });
    }

    return declarations;
  };

  CSSNativeScript.prototype.preludeToSelectorsStringArray = function (prelude) {
    var selectors = [];
    var selector = "";
    prelude.forEach(function (inputToken) {
      if (typeof inputToken === "string") {
        if (inputToken === ",") {
          if (selector) {
            selectors.push(selector.trim());
          }

          selector = "";
        } else {
          selector += inputToken;
        }
      } else if (typeof inputToken === "object") {
        selector += inputToken.text;
      }
    });

    if (selector) {
      selectors.push(selector.trim());
    }

    return selectors;
  };

  return CSSNativeScript;
}();

exports.CSSNativeScript = CSSNativeScript;

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/types.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

exports.isString = isString;

function isNumber(value) {
  return typeof value === "number" || value instanceof Number;
}

exports.isNumber = isNumber;

function isBoolean(value) {
  return typeof value === "boolean" || value instanceof Boolean;
}

exports.isBoolean = isBoolean;

function isFunction(value) {
  if (!value) {
    return false;
  }

  return typeof value === "function";
}

exports.isFunction = isFunction;

function isObject(value) {
  if (!value) {
    return false;
  }

  return typeof value === "object";
}

exports.isObject = isObject;

function isUndefined(value) {
  return value === undefined;
}

exports.isUndefined = isUndefined;

function isDefined(value) {
  return typeof value !== "undefined";
}

exports.isDefined = isDefined;

function isNullOrUndefined(value) {
  return value === undefined || value === null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function verifyCallback(value) {
  if (value && !isFunction(value)) {
    throw new TypeError("Callback must be a valid function.");
  }
}

exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;

function getClass(object) {
  return getClassInfo(object).name;
}

exports.getClass = getClass;

function getClassInfo(object) {
  var constructor = object.constructor;
  var result = classInfosMap.get(constructor);

  if (!result) {
    result = new ClassInfo(constructor);
    classInfosMap.set(constructor, result);
  }

  return result;
}

exports.getClassInfo = getClassInfo;

function getBaseClasses(object) {
  var result = [];
  var info = getClassInfo(object);

  while (info) {
    result.push(info.name);
    info = info.baseClassInfo;
  }

  return result;
}

exports.getBaseClasses = getBaseClasses;

var ClassInfo = function () {
  function ClassInfo(typeCosntructor) {
    this._typeCosntructor = typeCosntructor;
  }

  Object.defineProperty(ClassInfo.prototype, "name", {
    get: function get() {
      if (!this._name) {
        var results = funcNameRegex.exec(this._typeCosntructor.toString());
        this._name = results && results.length > 1 ? results[1] : "";
      }

      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
    get: function get() {
      if (isUndefined(this._baseClassInfo)) {
        this._baseClassInfo = ClassInfo._getBase(this);

        if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
          this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
        }
      }

      return this._baseClassInfo;
    },
    enumerable: true,
    configurable: true
  });

  ClassInfo._getBase = function (info) {
    var result = null;
    var constructorProto = info._typeCosntructor.prototype;

    if (constructorProto.__proto__) {
      result = getClassInfo(constructorProto.__proto__);
    }

    return result;
  };

  return ClassInfo;
}();

exports.ClassInfo = ClassInfo;

function toUIString(obj) {
  return isNullOrUndefined(obj) ? "" : obj + "";
}

exports.toUIString = toUIString;

/***/ }),

/***/ "../node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/nativescript-accordion/accordion.common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("tns-core-modules/ui/core/view");

var builder_1 = __webpack_require__("tns-core-modules/ui/builder");

var observable_1 = __webpack_require__("tns-core-modules/data/observable");

var observable_array_1 = __webpack_require__("tns-core-modules/data/observable-array");

var weak_event_listener_1 = __webpack_require__("tns-core-modules/ui/core/weak-event-listener");

var label_1 = __webpack_require__("tns-core-modules/ui/label");

var platform_1 = __webpack_require__("tns-core-modules/platform");

var autoEffectiveRowHeight = -1;
var knownCollections;

(function (knownCollections) {
  knownCollections.items = 'items';
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var knownTemplates;

(function (knownTemplates) {
  knownTemplates.itemHeaderTemplate = 'itemHeaderTemplate';
  knownTemplates.itemContentTemplate = 'itemContentTemplate';
  knownTemplates.headerTemplate = 'headerTemplate';
  knownTemplates.footerTemplate = 'footerTemplate';
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));

var knownMultiTemplates;

(function (knownMultiTemplates) {
  knownMultiTemplates.itemHeaderTemplates = 'itemHeaderTemplates';
  knownMultiTemplates.itemContentTemplates = 'itemContentTemplates';
  knownMultiTemplates.headerTemplates = 'headerTemplates';
  knownMultiTemplates.footerTemplates = 'footerTemplates';
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));

var AccordionBase = function (_super) {
  __extends(AccordionBase, _super);

  function AccordionBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._allowMultiple = false;
    _this._effectiveHeaderRowHeight = autoEffectiveRowHeight;
    _this._effectiveItemHeaderRowHeight = autoEffectiveRowHeight;
    _this._effectiveItemContentRowHeight = autoEffectiveRowHeight;
    _this._effectiveFooterRowHeight = autoEffectiveRowHeight;
    _this.childItems = 'items';

    _this._itemIdGenerator = function (_item, index) {
      return index;
    };

    _this._childIdGenerator = function (_item, index) {
      return index;
    };

    _this._headerTemplateSelectorBindable = new label_1.Label();
    _this._defaultHeaderTemplate = {
      key: 'default',
      createView: function createView() {
        if (_this.headerTemplate) {
          return builder_1.parse(_this.headerTemplate, _this);
        }

        return undefined;
      }
    };
    _this._headerTemplatesInternal = new Array(_this._defaultHeaderTemplate);
    _this._itemHeaderTemplateSelectorBindable = new label_1.Label();
    _this._defaultItemHeaderTemplate = {
      key: 'default',
      createView: function createView() {
        if (_this.itemHeaderTemplate) {
          return builder_1.parse(_this.itemHeaderTemplate, _this);
        }

        return undefined;
      }
    };
    _this._itemHeaderTemplatesInternal = new Array(_this._defaultItemHeaderTemplate);
    _this._itemContentTemplateSelectorBindable = new label_1.Label();
    _this._defaultItemContentTemplate = {
      key: 'default',
      createView: function createView() {
        if (_this.itemContentTemplate) {
          return builder_1.parse(_this.itemContentTemplate, _this);
        }

        return undefined;
      }
    };
    _this._itemContentTemplatesInternal = new Array(_this._defaultItemContentTemplate);
    _this._footerTemplateSelectorBindable = new label_1.Label();
    _this._defaultFooterTemplate = {
      key: 'default',
      createView: function createView() {
        if (_this.footerTemplate) {
          return builder_1.parse(_this.footerTemplate, _this);
        }

        return undefined;
      }
    };
    _this._footerTemplatesInternal = new Array(_this._defaultFooterTemplate);

    _this._getHasHeader = function () {
      var contains = _this._headerTemplatesInternal && _this._headerTemplatesInternal.length > 1;
      return !!(_this.headerTemplate || contains);
    };

    _this._getHasFooter = function () {
      var contains = _this._footerTemplatesInternal && _this._footerTemplatesInternal.length > 1;
      return !!(_this.footerTemplate || contains);
    };

    return _this;
  }

  Object.defineProperty(AccordionBase.prototype, "itemIdGenerator", {
    get: function get() {
      return this._itemIdGenerator;
    },
    set: function set(generatorFn) {
      this._itemIdGenerator = generatorFn;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AccordionBase.prototype, "childIdGenerator", {
    get: function get() {
      return this._itemIdGenerator;
    },
    set: function set(generatorFn) {
      this._childIdGenerator = generatorFn;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AccordionBase.prototype, "headerTemplateSelector", {
    get: function get() {
      return this._headerTemplateSelector;
    },
    set: function set(value) {
      var _this = this;

      if (typeof value === 'string') {
        this._headerTemplateSelectorBindable.bind({
          sourceProperty: null,
          targetProperty: 'templateKey',
          expression: value
        });

        this._headerTemplateSelector = function (item, index, items) {
          item['$index'] = index;
          _this._headerTemplateSelectorBindable.bindingContext = item;
          return _this._headerTemplateSelectorBindable.get('templateKey');
        };
      } else if (typeof value === 'function') {
        this._headerTemplateSelector = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AccordionBase.prototype, "itemHeaderTemplateSelector", {
    get: function get() {
      return this._itemHeaderTemplateSelector;
    },
    set: function set(value) {
      var _this = this;

      if (typeof value === 'string') {
        this._itemHeaderTemplateSelectorBindable.bind({
          sourceProperty: null,
          targetProperty: 'templateKey',
          expression: value
        });

        this._itemHeaderTemplateSelector = function (item, index, items) {
          item['$index'] = index;
          _this._itemHeaderTemplateSelectorBindable.bindingContext = item;
          return _this._itemHeaderTemplateSelectorBindable.get('templateKey');
        };
      } else if (typeof value === 'function') {
        this._itemHeaderTemplateSelector = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AccordionBase.prototype, "itemContentTemplateSelector", {
    get: function get() {
      return this._itemContentTemplateSelector;
    },
    set: function set(value) {
      var _this = this;

      if (typeof value === 'string') {
        this._itemContentTemplateSelectorBindable.bind({
          sourceProperty: null,
          targetProperty: 'templateKey',
          expression: value
        });

        this._itemContentTemplateSelector = function (item, parentIndex, index, items) {
          item['$index'] = index;
          item['$parentIndex'] = parentIndex;
          _this._itemContentTemplateSelectorBindable.bindingContext = item;
          return _this._itemContentTemplateSelectorBindable.get('templateKey');
        };
      } else if (typeof value === 'function') {
        this._itemContentTemplateSelector = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AccordionBase.prototype, "footerTemplateSelector", {
    get: function get() {
      return this._footerTemplateSelector;
    },
    set: function set(value) {
      var _this = this;

      if (typeof value === 'string') {
        this._footerTemplateSelectorBindable.bind({
          sourceProperty: null,
          targetProperty: 'templateKey',
          expression: value
        });

        this._footerTemplateSelector = function (item, index, items) {
          item['$index'] = index;
          _this._footerTemplateSelectorBindable.bindingContext = item;
          return _this._footerTemplateSelectorBindable.get('templateKey');
        };
      } else if (typeof value === 'function') {
        this._footerTemplateSelector = value;
      }
    },
    enumerable: true,
    configurable: true
  });

  AccordionBase.prototype._getHeaderTemplate = function (index) {
    var templateKey = 'default';

    if (this.headerTemplateSelector) {
      var dataItem = this._getParentData(index);

      templateKey = this._headerTemplateSelector(dataItem, index, this.items);
    }

    for (var i = 0, length_1 = this._headerTemplatesInternal.length; i < length_1; i++) {
      if (this._headerTemplatesInternal[i].key === templateKey) {
        return this._headerTemplatesInternal[i];
      }
    }

    return this._headerTemplatesInternal[0];
  };

  AccordionBase.prototype._getItemHeaderTemplate = function (index) {
    var templateKey = 'default';

    if (this.itemHeaderTemplateSelector) {
      var dataItem = this._getParentData(index);

      templateKey = this._itemHeaderTemplateSelector(dataItem, index, this.items);
    }

    for (var i = 0, length_2 = this._itemHeaderTemplatesInternal.length; i < length_2; i++) {
      if (this._itemHeaderTemplatesInternal[i].key === templateKey) {
        return this._itemHeaderTemplatesInternal[i];
      }
    }

    return this._itemHeaderTemplatesInternal[0];
  };

  AccordionBase.prototype._getItemContentTemplate = function (index, childIndex) {
    var templateKey = 'default';

    if (this.itemContentTemplateSelector) {
      var _childIndex = platform_1.isIOS ? childIndex - 1 : childIndex;

      var dataItem = this._getChildData(index, this._getHasHeader() ? _childIndex - 1 : _childIndex);

      var items = this.items.getItem ? this.items.getItem(index)[this.childItems] : this.items[this.childItems];
      templateKey = this._itemContentTemplateSelector(dataItem, index, childIndex, items);
    }

    for (var i = 0, length_3 = this._itemContentTemplatesInternal.length; i < length_3; i++) {
      if (this._itemContentTemplatesInternal[i].key === templateKey) {
        return this._itemContentTemplatesInternal[i];
      }
    }

    return this._itemContentTemplatesInternal[0];
  };

  AccordionBase.prototype._getFooterTemplate = function (index) {
    var templateKey = 'default';

    if (this.footerTemplateSelector) {
      var dataItem = this._getParentData(index);

      templateKey = this._footerTemplateSelector(dataItem, index, this.items);
    }

    for (var i = 0, length_4 = this._footerTemplatesInternal.length; i < length_4; i++) {
      if (this._footerTemplatesInternal[i].key === templateKey) {
        return this._footerTemplatesInternal[i];
      }
    }

    return this._footerTemplatesInternal[0];
  };

  AccordionBase.prototype._getDefaultHeaderContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: 'text',
      sourceProperty: '$value'
    });
    return lbl;
  };

  AccordionBase.prototype._getDefaultItemHeaderContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: 'text',
      sourceProperty: '$value'
    });
    return lbl;
  };

  AccordionBase.prototype._getDefaultItemContentContent = function (index, childIndex) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: 'text',
      sourceProperty: '$value'
    });
    return lbl;
  };

  AccordionBase.prototype._getDefaultFooterContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: 'text',
      sourceProperty: '$value'
    });
    return lbl;
  };

  AccordionBase.prototype._prepareHeaderItem = function (item, index) {
    if (item) {
      item.bindingContext = this._getParentData(index);
    }
  };

  AccordionBase.prototype._prepareItemHeader = function (item, index) {
    if (item) {
      item.bindingContext = this._getParentData(index);
    }
  };

  AccordionBase.prototype._prepareItemContent = function (item, index, childIndex) {
    if (item) {
      item.bindingContext = this._getChildData(index, childIndex);
    }
  };

  AccordionBase.prototype._prepareFooterItem = function (item, index) {
    if (item) {
      item.bindingContext = this._getParentData(index);
    }
  };

  AccordionBase.prototype._onHeaderRowHeightPropertyChanged = function (oldValue, newValue) {
    this.refresh();
  };

  AccordionBase.prototype._onItemHeaderRowHeightPropertyChanged = function (oldValue, newValue) {
    this.refresh();
  };

  AccordionBase.prototype._onItemContentRowHeightPropertyChanged = function (oldValue, newValue) {
    this.refresh();
  };

  AccordionBase.prototype._onFooterRowHeightPropertyChanged = function (oldValue, newValue) {
    this.refresh();
  };

  AccordionBase.prototype.updateEffectiveItemHeaderRowHeight = function () {
    exports.itemHeaderRowHeightProperty.coerce(this);
  };

  AccordionBase.prototype.updateEffectiveItemContentRowHeight = function () {
    exports.itemContentRowHeightProperty.coerce(this);
  };

  AccordionBase.prototype._getParentData = function (parentIndex) {
    var items = this.items;
    return items.getItem ? items.getItem(parentIndex) : items[parentIndex];
  };

  AccordionBase.prototype._getChildData = function (parentIndex, childIndex) {
    var items = this.items;
    return items.getItem ? items.getItem(parentIndex)[this.childItems][childIndex] : items[parentIndex][this.childItems][childIndex];
  };

  Object.defineProperty(AccordionBase.prototype, "allowMultiple", {
    get: function get() {
      return this._allowMultiple;
    },
    set: function set(value) {
      this._allowMultiple = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AccordionBase.prototype, "separatorColor", {
    get: function get() {
      return this.style.separatorColor;
    },
    set: function set(value) {
      this.style.separatorColor = value;
    },
    enumerable: true,
    configurable: true
  });

  AccordionBase.prototype._onItemsChanged = function (args) {
    this.refresh();
  };

  AccordionBase.headerLoadingEvent = 'headerLoading';
  AccordionBase.footerLoadingEvent = 'footerLoading';
  AccordionBase.itemHeaderLoadingEvent = 'itemHeaderLoading';
  AccordionBase.itemContentLoadingEvent = 'itemContentLoading';
  AccordionBase.itemHeaderTapEvent = 'itemHeaderTap';
  AccordionBase.itemContentTapEvent = 'itemContentTap';
  AccordionBase.loadMoreItemsEvent = 'loadMoreItems';
  AccordionBase.selectedIndexesChangedEvent = 'selectedIndexesChanged';
  AccordionBase.knownFunctions = ['itemHeaderTemplateSelector', 'itemContentTemplateSelector', 'headerTemplateSelector', 'footerTemplateSelector', 'itemIdGenerator', 'childIdGenerator'];
  AccordionBase = __decorate([view_1.CSSType('Accordion')], AccordionBase);
  return AccordionBase;
}(view_1.ContainerView);

exports.AccordionBase = AccordionBase;
exports.separatorColorProperty = new view_1.CssProperty({
  name: 'separatorColor',
  cssName: 'separator-color',
  valueConverter: function valueConverter(v) {
    return String(v);
  }
});
exports.separatorColorProperty.register(view_1.Style);
exports.headerTemplateProperty = new view_1.Property({
  name: 'headerTemplate',
  affectsLayout: true,
  valueChanged: function valueChanged(target) {
    target.refresh();
  }
});
exports.headerTemplateProperty.register(AccordionBase);
exports.headerTemplatesProperty = new view_1.Property({
  name: 'headerTemplates',
  valueConverter: function valueConverter(value) {
    if (typeof value === 'string') {
      return builder_1.parseMultipleTemplates(value);
    }

    return value;
  }
});
exports.headerTemplatesProperty.register(AccordionBase);
exports.itemHeaderTemplateProperty = new view_1.Property({
  name: 'itemHeaderTemplate',
  affectsLayout: true,
  valueChanged: function valueChanged(target) {
    target.refresh();
  }
});
exports.itemHeaderTemplateProperty.register(AccordionBase);
exports.itemHeaderTemplatesProperty = new view_1.Property({
  name: 'itemHeaderTemplates',
  valueConverter: function valueConverter(value) {
    if (typeof value === 'string') {
      return builder_1.parseMultipleTemplates(value);
    }

    return value;
  }
});
exports.itemHeaderTemplatesProperty.register(AccordionBase);
exports.itemContentTemplateProperty = new view_1.Property({
  name: 'itemContentTemplate',
  affectsLayout: true,
  valueChanged: function valueChanged(target) {
    target.refresh();
  }
});
exports.itemContentTemplateProperty.register(AccordionBase);
exports.itemContentTemplatesProperty = new view_1.Property({
  name: 'itemContentTemplates',
  valueConverter: function valueConverter(value) {
    if (typeof value === 'string') {
      return builder_1.parseMultipleTemplates(value);
    }

    return value;
  }
});
exports.itemContentTemplatesProperty.register(AccordionBase);
exports.footerTemplateProperty = new view_1.Property({
  name: 'footerTemplate',
  affectsLayout: true,
  valueChanged: function valueChanged(target) {
    target.refresh();
  }
});
exports.footerTemplateProperty.register(AccordionBase);
exports.footerTemplatesProperty = new view_1.Property({
  name: 'footerTemplates',
  valueConverter: function valueConverter(value) {
    if (typeof value === 'string') {
      return builder_1.parseMultipleTemplates(value);
    }

    return value;
  }
});
exports.footerTemplatesProperty.register(AccordionBase);
exports.itemsProperty = new view_1.Property({
  name: 'items',
  affectsLayout: true,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    if (oldValue instanceof observable_1.Observable) {
      weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    if (newValue instanceof observable_1.Observable) {
      weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    target.refresh();
  }
});
exports.itemsProperty.register(AccordionBase);
exports.selectedIndexesProperty = new view_1.Property({
  name: 'selectedIndexes',
  defaultValue: [],
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.notify({
      eventName: AccordionBase.selectedIndexesChangedEvent,
      object: target,
      oldIndex: oldValue,
      newIndex: newValue
    });
    target.updateNativeIndexes(oldValue, newValue);
  }
});
exports.selectedIndexesProperty.register(AccordionBase);
var defaultRowHeight = 'auto';
exports.headerRowHeightProperty = new view_1.CoercibleProperty({
  name: 'headerRowHeight',
  defaultValue: defaultRowHeight,
  equalityComparer: view_1.Length.equals,
  coerceValue: function coerceValue(target, value) {
    return target.nativeViewProtected ? value : defaultRowHeight;
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._effectiveHeaderRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);

    target._onHeaderRowHeightPropertyChanged(oldValue, newValue);
  },
  valueConverter: view_1.Length.parse
});
exports.headerRowHeightProperty.register(AccordionBase);
exports.itemHeaderRowHeightProperty = new view_1.CoercibleProperty({
  name: 'itemHeaderRowHeight',
  defaultValue: defaultRowHeight,
  equalityComparer: view_1.Length.equals,
  coerceValue: function coerceValue(target, value) {
    return target.nativeViewProtected ? value : defaultRowHeight;
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._effectiveItemHeaderRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);

    target._onItemHeaderRowHeightPropertyChanged(oldValue, newValue);
  },
  valueConverter: view_1.Length.parse
});
exports.itemHeaderRowHeightProperty.register(AccordionBase);
exports.itemContentRowHeightProperty = new view_1.CoercibleProperty({
  name: 'itemContentRowHeight',
  defaultValue: defaultRowHeight,
  equalityComparer: view_1.Length.equals,
  coerceValue: function coerceValue(target, value) {
    return target.nativeViewProtected ? value : defaultRowHeight;
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._effectiveItemContentRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);

    target._onItemContentRowHeightPropertyChanged(oldValue, newValue);
  },
  valueConverter: view_1.Length.parse
});
exports.itemContentRowHeightProperty.register(AccordionBase);
exports.footerRowHeightProperty = new view_1.CoercibleProperty({
  name: 'footerRowHeight',
  defaultValue: defaultRowHeight,
  equalityComparer: view_1.Length.equals,
  coerceValue: function coerceValue(target, value) {
    return target.nativeViewProtected ? value : defaultRowHeight;
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._effectiveFooterRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);

    target._onFooterRowHeightPropertyChanged(oldValue, newValue);
  },
  valueConverter: view_1.Length.parse
});
exports.footerRowHeightProperty.register(AccordionBase);
exports.iosEstimatedHeaderRowHeightProperty = new view_1.Property({
  name: 'iosEstimatedHeaderRowHeight',
  valueConverter: function valueConverter(v) {
    return view_1.Length.parse(v);
  }
});
exports.iosEstimatedHeaderRowHeightProperty.register(AccordionBase);
exports.iosEstimatedItemHeaderRowHeightProperty = new view_1.Property({
  name: 'iosEstimatedItemHeaderRowHeight',
  valueConverter: function valueConverter(v) {
    return view_1.Length.parse(v);
  }
});
exports.iosEstimatedItemHeaderRowHeightProperty.register(AccordionBase);
exports.iosEstimatedItemContentRowHeightProperty = new view_1.Property({
  name: 'iosEstimatedItemContentRowHeight',
  valueConverter: function valueConverter(v) {
    return view_1.Length.parse(v);
  }
});
exports.iosEstimatedItemContentRowHeightProperty.register(AccordionBase);
exports.iosEstimatedFooterRowHeightProperty = new view_1.Property({
  name: 'iosEstimatedFooterRowHeight',
  valueConverter: function valueConverter(v) {
    return view_1.Length.parse(v);
  }
});
exports.iosEstimatedFooterRowHeightProperty.register(AccordionBase);

/***/ }),

/***/ "../node_modules/nativescript-accordion/accordion.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("tns-core-modules/ui/core/view");

var common = __webpack_require__("../node_modules/nativescript-accordion/accordion.common.js");

var accordion_common_1 = __webpack_require__("../node_modules/nativescript-accordion/accordion.common.js");

var color_1 = __webpack_require__("tns-core-modules/color");

var utils = __webpack_require__("tns-core-modules/utils/utils");

var profiling_1 = __webpack_require__("tns-core-modules/profiling");

var observable_1 = __webpack_require__("tns-core-modules/data/observable");

var proxy_view_container_1 = __webpack_require__("tns-core-modules/ui/proxy-view-container");

var stack_layout_1 = __webpack_require__("tns-core-modules/ui/layouts/stack-layout");

exports.ITEMTAP = 'itemTap';
var NG_VIEW = '_ngViewRef';
global.moduleMerge(common, exports);
var DEFAULT_HEIGHT = 44;
var infinity = utils.layout.makeMeasureSpec(0, utils.layout.UNSPECIFIED);
var majorVersion = utils.ios.MajorVersion;

function notifyForItemAtIndex(owner, nativeView, view, eventName, indexPath) {
  var args = {
    eventName: eventName,
    object: owner,
    index: indexPath.section,
    childIndex: indexPath.row,
    view: view,
    ios: nativeView,
    android: undefined
  };
  owner.notify(args);
  return args;
}

function notifyForHeaderOrFooterAtIndex(owner, nativeView, view, eventName, parentIndex) {
  var args = {
    eventName: eventName,
    object: owner,
    index: parentIndex,
    view: view,
    ios: nativeView,
    android: undefined
  };
  owner.notify(args);
  return args;
}

var DefaultAccordionHeaderViewHeight = 44.0;

var Accordion = function (_super) {
  __extends(Accordion, _super);

  function Accordion() {
    var _this = _super.call(this) || this;

    _this.estimatedItemHeaderRowHeight = DEFAULT_HEIGHT;
    _this.estimatedItemContentRowHeight = DEFAULT_HEIGHT;
    _this.estimatedHeaderRowHeight = DEFAULT_HEIGHT;
    _this.estimatedFooterRowHeight = DEFAULT_HEIGHT;
    _this._itemContentHeights = [];
    _this._itemHeaderHeights = [];
    _this._headerHeights = [];
    _this._footerHeights = [];
    _this._map = new Map();
    _this._mapItemContent = new Map();
    _this._mapItemHeader = new Map();
    _this._mapHeader = new Map();
    _this._mapFooter = new Map();
    return _this;
  }

  Accordion.prototype.updateNativeItems = function (oldItems, newItems) {
    this._ios.reloadData();
  };

  Accordion.prototype.createNativeView = function () {
    return UITableViewImpl.initWithOwner(new WeakRef(this));
  };

  Accordion.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.registerClassForCellReuseIdentifier(AccordionItemHeaderCell.class(), this._defaultItemHeaderTemplate.key);
    nativeView.registerClassForCellReuseIdentifier(AccordionItemContentCell.class(), this._defaultItemContentTemplate.key);
    nativeView.registerClassForCellReuseIdentifier(AccordionHeaderCell.class(), this._defaultHeaderTemplate.key);
    nativeView.registerClassForCellReuseIdentifier(AccordionFooterCell.class(), this._defaultFooterTemplate.key);
    nativeView.estimatedRowHeight = DEFAULT_HEIGHT;
    nativeView.rowHeight = UITableViewAutomaticDimension;
    this.ios.separatorColor = UIColor.clearColor;
    this.ios.tableFooterView = UIView.new();

    if (this.separatorColor) {
      this.ios.separatorColor = new color_1.Color(this.separatorColor).ios;
    }

    this._dataSource = AccordionDataSource.initWithOwner(new WeakRef(this));
    this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));

    this._setNativeClipToBounds();

    this._expandedViews = new Map();
    this._indexSet = NSMutableIndexSet.alloc().init();
  };

  Accordion.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    if (this._isDataDirty) {
      this.requestLayout();
      this.refresh();
    }

    this.ios.dataSource = this._dataSource;
    this.ios.delegate = this._delegate;
  };

  Accordion.prototype.onUnloaded = function () {
    this.ios.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  Accordion.prototype.getItemHeaderHeight = function (index) {
    return this._itemHeaderHeights[index];
  };

  Accordion.prototype.setItemHeaderHeight = function (index, value) {
    this._itemHeaderHeights[index] = value;
  };

  Accordion.prototype.getItemContentHeight = function (index) {
    return this._itemContentHeights[index];
  };

  Accordion.prototype.setItemContentHeight = function (index, value) {
    this._itemContentHeights[index] = value;
  };

  Accordion.prototype.getHeaderHeight = function (index) {
    return this._headerHeights[index];
  };

  Accordion.prototype.setHeaderHeight = function (index, value) {
    this._headerHeights[index] = value;
  };

  Accordion.prototype.getFooterHeight = function (index) {
    return this._footerHeights[index];
  };

  Accordion.prototype.setFooterHeight = function (index, value) {
    this._footerHeights[index] = value;
  };

  Accordion.prototype.disposeNativeView = function () {
    this.ios.delegate = null;

    if (this._indexSet) {
      this._indexSet.removeAllIndexes();
    }
  };

  Accordion.prototype._setNativeClipToBounds = function () {
    this.ios.clipsToBounds = true;
  };

  Object.defineProperty(Accordion.prototype, "ios", {
    get: function get() {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  Accordion.prototype.refresh = function () {
    this._map.forEach(function (view, nativeView, map) {
      if (!(view.bindingContext instanceof observable_1.Observable)) {
        view.bindingContext = null;
      }
    });

    this._mapItemContent.forEach(function (view, nativeView, map) {
      if (!(view.bindingContext instanceof observable_1.Observable)) {
        view.bindingContext = null;
      }
    });

    this._mapItemHeader.forEach(function (view, nativeView, map) {
      if (!(view.bindingContext instanceof observable_1.Observable)) {
        view.bindingContext = null;
      }
    });

    this._mapHeader.forEach(function (view, nativeView, map) {
      if (!(view.bindingContext instanceof observable_1.Observable)) {
        view.bindingContext = null;
      }
    });

    this._mapFooter.forEach(function (view, nativeView, map) {
      if (!(view.bindingContext instanceof observable_1.Observable)) {
        view.bindingContext = null;
      }
    });

    if (this.isLoaded) {
      this.ios.reloadData();
      this.requestLayout();
      this._isDataDirty = false;
    } else {
      this._isDataDirty = true;
    }
  };

  Accordion.prototype._selectedIndexesUpdatedFromNative = function (newIndexes) {
    accordion_common_1.selectedIndexesProperty.nativeValueChange(this, newIndexes);
  };

  Accordion.prototype.scrollToIndex = function (index) {
    if (this.ios) {
      this.ios.scrollToRowAtIndexPathAtScrollPositionAnimated(NSIndexPath.indexPathForItemInSection(index, 0), 1, false);
    }
  };

  Accordion.prototype.requestLayout = function () {
    if (!this._preparingItemHeaderCell || !this._preparingItemContentCell || !this._preparingFooterCell || !this._preparingHeaderCell) {
      _super.prototype.requestLayout.call(this);
    }
  };

  Accordion.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    this.widthMeasureSpec = widthMeasureSpec;

    var changed = this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);

    _super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);

    if (changed) {
      this.ios.reloadData();
    }
  };

  Accordion.prototype.onLayout = function (left, top, right, bottom) {
    var _this = this;

    _super.prototype.onLayout.call(this, left, top, right, bottom);

    this._mapItemHeader.forEach(function (childView, accordionHeader) {
      var rowHeight = _this._effectiveItemHeaderRowHeight;
      var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemHeaderHeight(childView._accordionItemIndex);

      if (cellHeight) {
        var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
        view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
      }
    });

    this._map.forEach(function (childView, accordionCell) {
      var rowHeight = _this._effectiveItemContentRowHeight;
      var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemContentHeight(parseInt("" + (childView._accordionItemIndex + 1) + (childView._accordionChildItemIndex - 1 - (_this._getHasHeader() ? 1 : 0))));

      if (cellHeight) {
        var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
        view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
      }
    });

    this._mapHeader.forEach(function (childView, accordionHeaderCell) {
      var rowHeight = _this._effectiveHeaderRowHeight;
      var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemHeaderHeight(childView._accordionItemIndex);

      if (cellHeight) {
        var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
        view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
      }
    });

    this._mapFooter.forEach(function (childView, accordionFooterCell) {
      var rowHeight = _this._effectiveFooterRowHeight;
      var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemHeaderHeight(childView._accordionItemIndex);

      if (cellHeight) {
        var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
        view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
      }
    });
  };

  Accordion.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    this._map.forEach(function (childView, accordionCell) {
      view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
    });

    this._mapItemHeader.forEach(function (childView, accordionHeader) {
      view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
    });

    this._mapItemContent.forEach(function (childView, accordionCell) {
      view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
    });

    this._mapHeader.forEach(function (childView, accordionHeaderCell) {
      view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
    });

    this._mapFooter.forEach(function (childView, accordionFooterCell) {
      view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
    });
  };

  Accordion.prototype._layoutItemHeaderCell = function (cellView, indexPath) {
    if (cellView) {
      var rowHeight = this._effectiveItemHeaderRowHeight;
      var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
      var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
      var height = measuredSize.measuredHeight;
      this.setItemHeaderHeight(indexPath.section, height);
      return height;
    }

    return this.ios.estimatedItemHeaderRowHeight;
  };

  Accordion.prototype._layoutHeaderCell = function (cellView, indexPath) {
    if (cellView) {
      var rowHeight = this._effectiveHeaderRowHeight;
      var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
      var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
      var height = measuredSize.measuredHeight;
      this.setHeaderHeight(indexPath.section, height);
      return height;
    }

    return this.ios.estimatedHeaderRowHeight;
  };

  Accordion.prototype._layoutItemContentCell = function (cellView, indexPath) {
    if (cellView) {
      var rowHeight = this._effectiveItemContentRowHeight;
      var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
      var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
      var height = measuredSize.measuredHeight;
      this.setItemContentHeight(parseInt("" + (indexPath.section + 1) + (indexPath.row - 1 - (this._getHasHeader() ? 1 : 0))), height);
      return height;
    }

    return this.ios.estimatedItemContentRowHeight;
  };

  Accordion.prototype._layoutFooterCell = function (cellView, indexPath) {
    if (cellView) {
      var rowHeight = this._effectiveFooterRowHeight;
      var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
      var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
      var height = measuredSize.measuredHeight;
      this.setFooterHeight(indexPath.section, height);
      return height;
    }

    return this.ios.estimatedFooterRowHeight;
  };

  Accordion.prototype._prepareItemHeaderCell = function (cell, indexPath) {
    cell.selectionStyle = 0;
    var cellHeight;

    try {
      this._preparingItemHeaderCell = true;
      var view = cell.view;

      if (!view) {
        view = this._getItemHeaderTemplate(indexPath.section).createView();
      }

      var args = {
        eventName: accordion_common_1.AccordionBase.itemHeaderLoadingEvent,
        object: this,
        index: indexPath.section,
        view: view,
        ios: null,
        android: undefined
      };
      this.notify(args);
      view = args.view || this._getDefaultItemHeaderContent(indexPath.section);

      if (view instanceof proxy_view_container_1.ProxyViewContainer) {
        var sp = new stack_layout_1.StackLayout();
        sp.addChild(view);
        view = sp;
      }

      if (!cell.view) {
        cell.owner = new WeakRef(view);
      } else if (cell.view !== view) {
        this._removeItemHeaderContainer(cell);

        cell.view.nativeViewProtected.removeFromSuperview();
        cell.owner = new WeakRef(view);
      }

      this._prepareItemHeader(view, indexPath.section);

      view._accordionItemIndex = indexPath.section;

      this._mapItemHeader.set(cell, view);

      if (view && !view.parent) {
        this._addView(view);

        cell.contentView.addSubview(view.nativeViewProtected);
      }

      cellHeight = this._layoutItemHeaderCell(view, indexPath);
    } finally {
      this._preparingItemHeaderCell = false;
    }

    return cellHeight;
  };

  Accordion.prototype._prepareItemContentCell = function (cell, indexPath) {
    var cellHeight;

    try {
      this._preparingItemContentCell = true;
      var view = cell.view;

      if (!view) {
        view = this._getItemContentTemplate(indexPath.section, indexPath.row).createView();
      }

      var args = {
        eventName: accordion_common_1.AccordionBase.itemContentLoadingEvent,
        object: this,
        index: indexPath.section,
        childIndex: indexPath.row - (1 + (this._getHasHeader() ? 1 : 0)),
        view: view,
        ios: null,
        android: undefined
      };
      this.notify(args);
      view = args.view || this._getDefaultItemContentContent(indexPath.section, indexPath.row);

      if (view instanceof proxy_view_container_1.ProxyViewContainer) {
        var sp = new stack_layout_1.StackLayout();
        sp.addChild(view);
        view = sp;
      }

      if (!cell.view) {
        cell.owner = new WeakRef(view);
      } else if (cell.view !== view) {
        this._removeItemContentContainer(cell);

        cell.view.nativeViewProtected.removeFromSuperview();
        cell.owner = new WeakRef(view);
      }

      this._prepareItemContent(view, indexPath.section, indexPath.row);

      view._accordionChildItemIndex = indexPath.row;
      view._accordionItemIndex = indexPath.section;

      this._map.set(cell, view);

      if (view && !view.parent) {
        this._addView(view);

        cell.contentView.addSubview(view.nativeViewProtected);
      }

      cellHeight = this._layoutItemContentCell(view, indexPath);
    } finally {
      this._preparingItemContentCell = false;
    }

    return cellHeight;
  };

  Accordion.prototype._prepareHeaderCell = function (cell, indexPath) {
    var cellHeight;

    try {
      this._preparingHeaderCell = true;
      var view = cell.view;

      if (!view) {
        view = this._getHeaderTemplate(indexPath.section).createView();
      }

      var args = {
        eventName: accordion_common_1.AccordionBase.footerLoadingEvent,
        object: this,
        index: indexPath.section,
        view: view,
        ios: null,
        android: undefined
      };
      this.notify(args);
      view = args.view || this._getDefaultHeaderContent(indexPath.row);

      if (view instanceof proxy_view_container_1.ProxyViewContainer) {
        var sp = new stack_layout_1.StackLayout();
        sp.addChild(view);
        view = sp;
      }

      if (!cell.view) {
        cell.owner = new WeakRef(view);
      } else if (cell.view !== view) {
        this._removeHeaderContainer(cell);

        cell.view.nativeViewProtected.removeFromSuperview();
        cell.owner = new WeakRef(view);
      }

      this._prepareItemHeader(view, indexPath.section);

      view._accordionChildItemIndex = indexPath.section;

      this._map.set(cell, view);

      if (view && !view.parent) {
        this._addView(view);

        cell.contentView.addSubview(view.nativeViewProtected);
      }

      cellHeight = this._layoutHeaderCell(view, indexPath);
    } finally {
      this._preparingHeaderCell = false;
    }

    return cellHeight;
  };

  Accordion.prototype._prepareFooterCell = function (cell, indexPath) {
    var cellHeight;

    try {
      this._preparingFooterCell = true;
      var view = cell.view;

      if (!view) {
        view = this._getFooterTemplate(indexPath.section).createView();
      }

      var args = {
        eventName: accordion_common_1.AccordionBase.headerLoadingEvent,
        object: this,
        index: indexPath.section,
        view: view,
        ios: null,
        android: undefined
      };
      this.notify(args);
      view = args.view || this._getDefaultFooterContent(indexPath.section);

      if (view instanceof proxy_view_container_1.ProxyViewContainer) {
        var sp = new stack_layout_1.StackLayout();
        sp.addChild(view);
        view = sp;
      }

      if (!cell.view) {
        cell.owner = new WeakRef(view);
      } else if (cell.view !== view) {
        this._removeFooterContainer(cell);

        cell.view.nativeViewProtected.removeFromSuperview();
        cell.owner = new WeakRef(view);
      }

      this._prepareFooterItem(view, indexPath.section);

      view._accordionChildItemIndex = indexPath.section;

      this._map.set(cell, view);

      if (view && !view.parent) {
        this._addView(view);

        cell.contentView.addSubview(view.nativeViewProtected);
      }

      cellHeight = this._layoutFooterCell(view, indexPath);
    } finally {
      this._preparingFooterCell = false;
    }

    return cellHeight;
  };

  Accordion.prototype._removeItemHeaderContainer = function (header) {
    var view = header.view;

    if (!(view.parent instanceof Accordion)) {
      this._removeView(view.parent);
    }

    var preparing = this._preparingItemHeaderCell;
    this._preparingItemHeaderCell = true;

    view.parent._removeView(view);

    view._accordionItemIndex = undefined;
    this._preparingItemHeaderCell = preparing;

    this._mapItemHeader.delete(header);
  };

  Accordion.prototype._removeItemContentContainer = function (cell) {
    var view = cell.view;

    if (!(view.parent instanceof Accordion)) {
      this._removeView(view.parent);
    }

    var preparing = this._preparingItemContentCell;
    this._preparingItemContentCell = true;

    view.parent._removeView(view);

    view._accordionChildItemIndex = undefined;
    view._accordionItemIndex = undefined;
    this._preparingItemContentCell = preparing;

    this._map.delete(cell);
  };

  Accordion.prototype._removeHeaderContainer = function (cell) {
    var view = cell.view;

    if (!(view.parent instanceof Accordion)) {
      this._removeView(view.parent);
    }

    var preparing = this._preparingHeaderCell;
    this._preparingHeaderCell = true;

    view.parent._removeView(view);

    view._accordionChildItemIndex = undefined;
    this._preparingHeaderCell = preparing;

    this._mapHeader.delete(cell);
  };

  Accordion.prototype._removeFooterContainer = function (cell) {
    var view = cell.view;

    if (!(view.parent instanceof Accordion)) {
      this._removeView(view.parent);
    }

    var preparing = this._preparingFooterCell;
    this._preparingFooterCell = true;

    view.parent._removeView(view);

    view._accordionChildItemIndex = undefined;
    this._preparingFooterCell = preparing;

    this._mapFooter.delete(cell);
  };

  Object.defineProperty(Accordion.prototype, "_childrenCount", {
    get: function get() {
      return this._map.size;
    },
    enumerable: true,
    configurable: true
  });

  Accordion.prototype.eachChildView = function (callback) {
    this._map.forEach(function (view, key) {
      callback(view);
    });
  };

  Accordion.prototype.updateNativeIndexes = function (oldIndexes, newIndexes) {
    var _this = this;

    var allowMultiple = String(this.allowMultiple) === 'true';
    if (this._expandedViews) if (newIndexes.toString() === Array.from(this._expandedViews.keys()).toString()) return;

    if (allowMultiple) {
      newIndexes.forEach(function (index) {
        if (!_this._expandedViews.get(index)) {
          _this._expandedViews.set(index, true);

          _this._indexSet.addIndex(index);
        }
      });
      this.ios.reloadData();
    } else {
      if (newIndexes.length > 0) {
        var index_1 = newIndexes.length - 1;
        var newItems = [index_1];

        this._expandedViews.clear();

        this._indexSet.removeAllIndexes();

        if (!this._expandedViews.get(index_1)) {
          this._expandedViews.set(index_1, true);

          this._indexSet.addIndex(index_1);

          this.ios.reloadData();
        }
      }
    }
  };

  Accordion.prototype.expandAll = function () {
    var length = this.items ? this.items.length : 0;
    var allowMultiple = String(this.allowMultiple) === 'true';

    if (!allowMultiple) {
      this._expandedViews.clear();

      this._indexSet.removeAllIndexes();

      this._expandedViews.set(length - 1, true);

      this._indexSet.addIndex(length - 1);

      this.ios.reloadData();
      return;
    }

    for (var i = 0; i < length; i++) {
      this._expandedViews.set(i, true);

      this._indexSet.addIndex(0);
    }

    this.ios.reloadData();
  };

  Accordion.prototype.collapseAll = function () {
    this._expandedViews.clear();

    this._indexSet.removeAllIndexes();

    this.ios.reloadData();
  };

  Accordion.prototype.collapseItem = function (index) {
    if (this._expandedViews.has(index)) {
      this._expandedViews.delete(index);

      this._indexSet.removeIndex(index);

      this.ios.reloadData();
    }
  };

  Accordion.prototype.expandItem = function (index) {
    var _this = this;

    var reloadSection = function reloadSection(index) {
      var section = NSMutableIndexSet.alloc().initWithIndex(index);

      _this.ios.reloadSectionsWithRowAnimation(section, 100);
    };

    var removeSection = function removeSection(index) {
      var section = NSMutableIndexSet.alloc().initWithIndex(index);

      _this.ios.reloadSectionsWithRowAnimation(section, 4);
    };

    var allowMultiple = String(this.allowMultiple) === 'true';

    if (allowMultiple) {
      if (!this._expandedViews.get(index)) {
        this.itemExpanded(index);

        this._expandedViews.set(index, true);

        this._indexSet.addIndex(index);
      } else {
        this._expandedViews.delete(index);

        this._indexSet.removeIndex(index);

        this.itemCollapsed(index);
      }

      reloadSection(index);

      this._selectedIndexesUpdatedFromNative(Array.from(this._expandedViews.keys()));
    } else {
      if (this._expandedViews.has(index)) {
        this._expandedViews.delete(index);

        this._indexSet.removeIndex(index);

        this.itemCollapsed(index);
        reloadSection(index);
      } else if (this._expandedViews.size > 0) {
        var old = this._expandedViews.keys().next().value;

        this._expandedViews.delete(old);

        this._indexSet.removeIndex(old);

        reloadSection(old);
        this.itemCollapsed(old);

        this._expandedViews.set(index, true);

        this._indexSet.addIndex(index);

        reloadSection(index);
        this.itemExpanded(index);
      } else {
        this._expandedViews.set(index, true);

        this._indexSet.addIndex(index);

        this.itemExpanded(index);
        reloadSection(index);
      }

      this._selectedIndexesUpdatedFromNative(Array.from(this._expandedViews.keys()));
    }
  };

  Accordion.prototype.itemIsExpanded = function (index) {
    if (this._expandedViews.has(index)) {
      return this._expandedViews.get(index);
    }

    return false;
  };

  Accordion.prototype.itemExpanded = function (index) {
    this.notify({
      eventName: 'itemExpanded',
      object: observable_1.fromObject({
        value: index
      })
    });
  };

  Accordion.prototype.itemCollapsed = function (index) {
    this.notify({
      eventName: 'itemCollapsed',
      object: observable_1.fromObject({
        value: index
      })
    });
  };

  Accordion.prototype._onHeaderRowHeightPropertyChanged = function (oldValue, newValue) {
    var value = view_1.layout.toDeviceIndependentPixels(this._effectiveHeaderRowHeight);
    var nativeView = this.ios;

    if (value < 0) {
      nativeView.sectionHeaderHeight = UITableViewAutomaticDimension;
      nativeView.estimatedSectionHeaderHeight = DEFAULT_HEIGHT;
      this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
    } else {
      nativeView.sectionHeaderHeight = value;
      nativeView.estimatedSectionHeaderHeight = value;
      this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
    }

    if (this.isLoaded) {
      nativeView.delegate = this._delegate;
    }

    _super.prototype._onItemHeaderRowHeightPropertyChanged.call(this, oldValue, newValue);
  };

  Accordion.prototype._onItemHeaderRowHeightPropertyChanged = function (oldValue, newValue) {
    var value = view_1.layout.toDeviceIndependentPixels(this._effectiveItemHeaderRowHeight);
    var nativeView = this.ios;

    if (value < 0) {
      nativeView.sectionHeaderHeight = UITableViewAutomaticDimension;
      nativeView.estimatedSectionHeaderHeight = DEFAULT_HEIGHT;
      this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
    } else {
      nativeView.sectionHeaderHeight = value;
      nativeView.estimatedSectionHeaderHeight = value;
      this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
    }

    if (this.isLoaded) {
      nativeView.delegate = this._delegate;
    }

    _super.prototype._onItemHeaderRowHeightPropertyChanged.call(this, oldValue, newValue);
  };

  Accordion.prototype._onItemContentRowHeightPropertyChanged = function (oldValue, newValue) {
    var value = view_1.layout.toDeviceIndependentPixels(this._effectiveItemContentRowHeight);
    var nativeView = this.ios;

    if (value < 0) {
      nativeView.rowHeight = UITableViewAutomaticDimension;
      nativeView.estimatedRowHeight = DEFAULT_HEIGHT;
      this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
    } else {
      nativeView.rowHeight = value;
      nativeView.estimatedRowHeight = value;
      this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
    }

    if (this.isLoaded) {
      nativeView.delegate = this._delegate;
    }

    _super.prototype._onItemContentRowHeightPropertyChanged.call(this, oldValue, newValue);
  };

  Accordion.prototype._onFooterRowHeightPropertyChanged = function (oldValue, newValue) {
    var value = view_1.layout.toDeviceIndependentPixels(this._effectiveFooterRowHeight);
    var nativeView = this.ios;

    if (value < 0) {
      nativeView.sectionHeaderHeight = UITableViewAutomaticDimension;
      nativeView.estimatedSectionHeaderHeight = DEFAULT_HEIGHT;
      this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
    } else {
      nativeView.sectionHeaderHeight = value;
      nativeView.estimatedSectionHeaderHeight = value;
      this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
    }

    if (this.isLoaded) {
      nativeView.delegate = this._delegate;
    }

    _super.prototype._onItemHeaderRowHeightPropertyChanged.call(this, oldValue, newValue);
  };

  Accordion.prototype[accordion_common_1.itemHeaderTemplatesProperty.getDefault] = function () {
    return null;
  };

  Accordion.prototype[accordion_common_1.itemHeaderTemplatesProperty.setNative] = function (value) {
    this._itemHeaderTemplatesInternal = new Array(this._defaultItemHeaderTemplate);

    if (value) {
      for (var i = 0, length_1 = value.length; i < length_1; i++) {
        this.ios.registerClassForCellReuseIdentifier(AccordionItemHeaderCell.class(), "item-header-" + value[i].key);
      }

      this._itemHeaderTemplatesInternal = this._itemHeaderTemplatesInternal.concat(value);
    }

    this.refresh();
  };

  Accordion.prototype[accordion_common_1.itemContentTemplatesProperty.getDefault] = function () {
    return null;
  };

  Accordion.prototype[accordion_common_1.itemContentTemplatesProperty.setNative] = function (value) {
    this._itemContentTemplatesInternal = new Array(this._defaultItemContentTemplate);

    if (value) {
      for (var i = 0, length_2 = value.length; i < length_2; i++) {
        this.ios.registerClassForCellReuseIdentifier(AccordionItemContentCell.class(), "item-content-" + value[i].key);
      }

      this._itemContentTemplatesInternal = this._itemContentTemplatesInternal.concat(value);
    }

    this.refresh();
  };

  Accordion.prototype[accordion_common_1.footerTemplatesProperty.getDefault] = function () {
    return null;
  };

  Accordion.prototype[accordion_common_1.footerTemplatesProperty.setNative] = function (value) {
    this._footerTemplatesInternal = new Array(this._defaultFooterTemplate);

    if (value) {
      for (var i = 0, length_3 = value.length; i < length_3; i++) {
        this.ios.registerClassForCellReuseIdentifier(AccordionFooterCell.class(), "footer-" + value[i].key);
      }

      this._footerTemplatesInternal = this._footerTemplatesInternal.concat(value);
    }

    this.refresh();
  };

  Accordion.prototype[accordion_common_1.headerTemplatesProperty.getDefault] = function () {
    return null;
  };

  Accordion.prototype[accordion_common_1.headerTemplatesProperty.setNative] = function (value) {
    this._headerTemplatesInternal = new Array(this._defaultHeaderTemplate);

    if (value) {
      for (var i = 0, length_4 = value.length; i < length_4; i++) {
        this.ios.registerClassForCellReuseIdentifier(AccordionHeaderCell.class(), "header-" + value[i].key);
      }

      this._headerTemplatesInternal = this._headerTemplatesInternal.concat(value);
    }

    this.refresh();
  };

  Accordion.prototype[accordion_common_1.iosEstimatedHeaderRowHeightProperty.getDefault] = function () {
    return DEFAULT_HEIGHT;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedHeaderRowHeightProperty.setNative] = function (value) {
    var nativeView = this.ios;
    var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
    nativeView.estimatedHeaderRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedItemHeaderRowHeightProperty.getDefault] = function () {
    return DEFAULT_HEIGHT;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedItemHeaderRowHeightProperty.setNative] = function (value) {
    var nativeView = this.ios;
    var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
    nativeView.estimatedItemHeaderRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedItemContentRowHeightProperty.getDefault] = function () {
    return DEFAULT_HEIGHT;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedItemContentRowHeightProperty.setNative] = function (value) {
    var nativeView = this.ios;
    var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
    nativeView.estimatedItemContentRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedFooterRowHeightProperty.getDefault] = function () {
    return DEFAULT_HEIGHT;
  };

  Accordion.prototype[accordion_common_1.iosEstimatedFooterRowHeightProperty.setNative] = function (value) {
    var nativeView = this.ios;
    var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
    nativeView.estimatedFooterRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
  };

  __decorate([profiling_1.profile, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], Accordion.prototype, "onLoaded", null);

  return Accordion;
}(accordion_common_1.AccordionBase);

exports.Accordion = Accordion;

var AccordionItemHeaderCell = function (_super) {
  __extends(AccordionItemHeaderCell, _super);

  function AccordionItemHeaderCell() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AccordionItemHeaderCell.initWithEmptyBackground = function () {
    var cell = AccordionHeaderCell.new();
    cell.backgroundColor = null;
    return cell;
  };

  AccordionItemHeaderCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
    var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);

    cell.backgroundColor = null;
    return cell;
  };

  AccordionItemHeaderCell.prototype.willMoveToSuperview = function (newSuperview) {
    var parent = this.view ? this.view.parent : null;

    if (parent && !newSuperview) {
      parent._removeItemContentContainer(this);
    }
  };

  Object.defineProperty(AccordionItemHeaderCell.prototype, "view", {
    get: function get() {
      return this.owner ? this.owner.get() : null;
    },
    enumerable: true,
    configurable: true
  });
  return AccordionItemHeaderCell;
}(UITableViewCell);

exports.AccordionItemHeaderCell = AccordionItemHeaderCell;

var AccordionItemContentCell = function (_super) {
  __extends(AccordionItemContentCell, _super);

  function AccordionItemContentCell() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AccordionItemContentCell.initWithEmptyBackground = function () {
    var cell = AccordionItemContentCell.new();
    cell.backgroundColor = null;
    return cell;
  };

  AccordionItemContentCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
    var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);

    cell.backgroundColor = null;
    return cell;
  };

  AccordionItemContentCell.prototype.willMoveToSuperview = function (newSuperview) {
    var parent = this.view ? this.view.parent : null;

    if (parent && !newSuperview) {
      parent._removeItemContentContainer(this);
    }
  };

  Object.defineProperty(AccordionItemContentCell.prototype, "view", {
    get: function get() {
      return this.owner ? this.owner.get() : null;
    },
    enumerable: true,
    configurable: true
  });
  return AccordionItemContentCell;
}(UITableViewCell);

exports.AccordionItemContentCell = AccordionItemContentCell;

var AccordionHeaderCell = function (_super) {
  __extends(AccordionHeaderCell, _super);

  function AccordionHeaderCell() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AccordionHeaderCell.initWithEmptyBackground = function () {
    var cell = AccordionHeaderCell.new();
    cell.backgroundColor = null;
    return cell;
  };

  AccordionHeaderCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
    var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);

    cell.backgroundColor = null;
    return cell;
  };

  AccordionHeaderCell.prototype.willMoveToSuperview = function (newSuperview) {
    var parent = this.view ? this.view.parent : null;

    if (parent && !newSuperview) {
      parent._removeHeaderContainer(this);
    }
  };

  Object.defineProperty(AccordionHeaderCell.prototype, "view", {
    get: function get() {
      return this.owner ? this.owner.get() : null;
    },
    enumerable: true,
    configurable: true
  });
  return AccordionHeaderCell;
}(UITableViewCell);

exports.AccordionHeaderCell = AccordionHeaderCell;

var AccordionFooterCell = function (_super) {
  __extends(AccordionFooterCell, _super);

  function AccordionFooterCell() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AccordionFooterCell.initWithEmptyBackground = function () {
    var cell = AccordionFooterCell.new();
    cell.backgroundColor = null;
    return cell;
  };

  AccordionFooterCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
    var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);

    cell.backgroundColor = null;
    return cell;
  };

  AccordionFooterCell.prototype.willMoveToSuperview = function (newSuperview) {
    var parent = this.view ? this.view.parent : null;

    if (parent && !newSuperview) {
      parent._removeFooterContainer(this);
    }
  };

  Object.defineProperty(AccordionFooterCell.prototype, "view", {
    get: function get() {
      return this.owner ? this.owner.get() : null;
    },
    enumerable: true,
    configurable: true
  });
  return AccordionFooterCell;
}(UITableViewCell);

exports.AccordionFooterCell = AccordionFooterCell;

var AccordionDataSource = function (_super) {
  __extends(AccordionDataSource, _super);

  function AccordionDataSource() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AccordionDataSource.initWithOwner = function (owner) {
    var dataSource = AccordionDataSource.new();
    dataSource._owner = owner;
    return dataSource;
  };

  AccordionDataSource.prototype.tableViewNumberOfRowsInSection = function (tableView, section) {
    var owner = this._owner.get();

    if (owner._expandedViews.has(section) && owner._expandedViews.get(section)) {
      var parentData = owner && owner.items ? owner._getParentData(section) : [];
      return parentData[owner.childItems] ? parentData[owner.childItems].length + 1 + (owner._getHasHeader() ? 1 : 0) + (owner._getHasFooter() ? 1 : 0) : 0;
    } else {
      return 1;
    }
  };

  AccordionDataSource.prototype.numberOfSectionsInTableView = function (tableView) {
    var owner = this._owner.get();

    return owner && owner.items ? owner.items.length : 0;
  };

  AccordionDataSource.prototype.tableViewCellForRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    var cell;
    var total = this.tableViewNumberOfRowsInSection(tableView, indexPath.section);

    if (indexPath.row === 0) {
      if (owner) {
        var template = owner._getItemHeaderTemplate(indexPath.section);

        cell = tableView.dequeueReusableCellWithIdentifier("item-header-" + template.key) || AccordionItemHeaderCell.initWithEmptyBackground();

        owner._prepareItemHeaderCell(cell, indexPath);

        var cellView = cell.view;

        if (cellView && cellView.isLayoutRequired) {
          var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
          var rowHeight = owner._effectiveItemHeaderRowHeight;
          var cellHeight = rowHeight > 0 ? rowHeight : owner.getItemHeaderHeight(indexPath.row);
          view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
        }
      } else {
        cell = AccordionItemHeaderCell.initWithEmptyBackground();
      }

      return cell;
    }

    if (indexPath.row === 1 && owner._getHasHeader()) {
      if (owner) {
        var template = owner._getHeaderTemplate(indexPath.section);

        cell = tableView.dequeueReusableCellWithIdentifier("header-" + template.key) || AccordionHeaderCell.initWithEmptyBackground();

        owner._prepareHeaderCell(cell, indexPath);

        var cellView = cell.view;

        if (cellView && cellView.isLayoutRequired) {
          var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
          var rowHeight = owner._effectiveHeaderRowHeight;
          var cellHeight = rowHeight > 0 ? rowHeight : owner.getHeaderHeight(indexPath.row);
          view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
        }
      } else {
        cell = AccordionHeaderCell.initWithEmptyBackground();
      }

      return cell;
    }

    if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
      if (owner) {
        var template = owner._getFooterTemplate(indexPath.section);

        cell = tableView.dequeueReusableCellWithIdentifier("footer-" + template.key) || AccordionFooterCell.initWithEmptyBackground();

        owner._prepareFooterCell(cell, indexPath);

        var cellView = cell.view;

        if (cellView && cellView.isLayoutRequired) {
          var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
          var rowHeight = owner._effectiveFooterRowHeight;
          var cellHeight = rowHeight > 0 ? rowHeight : owner.getFooterHeight(indexPath.row);
          view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
        }
      } else {
        cell = AccordionFooterCell.initWithEmptyBackground();
      }

      return cell;
    }

    if (owner) {
      var template = owner._getItemContentTemplate(indexPath.section, indexPath.row);

      cell = tableView.dequeueReusableCellWithIdentifier("item-content-" + template.key) || AccordionItemContentCell.initWithEmptyBackground();

      owner._prepareItemContentCell(cell, indexPath);

      var cellView = cell.view;

      if (cellView && cellView.isLayoutRequired) {
        var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
        var rowHeight = owner._effectiveItemContentRowHeight;
        var cellHeight = rowHeight > 0 ? rowHeight : owner.getItemContentHeight(parseInt("" + (indexPath.section + 1) + (indexPath.row - 1 - (owner._getHasHeader() ? 1 : 0))));
        view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
      }
    } else {
      cell = AccordionItemContentCell.initWithEmptyBackground();
    }

    return cell;
  };

  AccordionDataSource.ObjCProtocols = [UITableViewDataSource];
  return AccordionDataSource;
}(NSObject);

exports.AccordionDataSource = AccordionDataSource;

var UITableViewRowHeightDelegateImpl = function (_super) {
  __extends(UITableViewRowHeightDelegateImpl, _super);

  function UITableViewRowHeightDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITableViewRowHeightDelegateImpl.initWithOwner = function (owner) {
    var delegate = UITableViewRowHeightDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewWillDisplayCellForRowAtIndexPath = function (tableView, cell, indexPath) {
    var owner = this._owner.get();

    if (owner && indexPath.row === owner.items.length - 1) {
      owner.notify({
        eventName: Accordion.loadMoreItemsEvent,
        object: owner
      });
    }
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewWillSelectRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    var ios = tableView.cellForRowAtIndexPath(indexPath);
    var total = tableView.numberOfRowsInSection(indexPath.section);
    var args = {
      eventName: '',
      data: null,
      object: owner,
      childIndex: undefined,
      index: null,
      view: null,
      ios: ios,
      android: undefined
    };

    if (indexPath.row === 0) {
      handleTap(owner, indexPath.section, ios);
    } else if (indexPath.row === 1 && owner._getHasHeader()) {} else if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {} else {
      var data = owner._getChildData(indexPath.section, indexPath.row);

      args.index = indexPath.section;
      args.childIndex = indexPath.row;
      args.eventName = accordion_common_1.AccordionBase.itemContentTapEvent;
      args.data = data;
      owner.notify(args);
    }

    return indexPath;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewDidSelectRowAtIndexPath = function (tableView, indexPath) {
    tableView.deselectRowAtIndexPathAnimated(indexPath, true);
    return indexPath;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    var total = tableView.numberOfRowsInSection(indexPath.section);

    if (indexPath.row === 0) {
      if (!owner) {
        return tableView.estimatedItemHeaderRowHeight;
      }

      return view_1.layout.toDeviceIndependentPixels(owner._effectiveItemHeaderRowHeight);
    } else if (indexPath.row === 1 && owner._getHasHeader()) {
      if (!owner) {
        return tableView.estimatedHeaderRowHeight;
      }

      return view_1.layout.toDeviceIndependentPixels(owner._effectiveHeaderRowHeight);
    } else if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
      if (!owner) {
        return tableView.estimatedFooterRowHeight;
      }

      return view_1.layout.toDeviceIndependentPixels(owner._effectiveFooterRowHeight);
    } else {
      if (!owner) {
        return tableView.estimatedItemContentRowHeight;
      }

      return view_1.layout.toDeviceIndependentPixels(owner._effectiveItemContentRowHeight);
    }
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForFooterInSection = function (tableView, section) {
    return 0;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForHeaderInSection = function (tableView, section) {
    return 0;
  };

  UITableViewRowHeightDelegateImpl.ObjCProtocols = [UITableViewDelegate];
  return UITableViewRowHeightDelegateImpl;
}(NSObject);

exports.UITableViewRowHeightDelegateImpl = UITableViewRowHeightDelegateImpl;

var UITableViewDelegateImpl = function (_super) {
  __extends(UITableViewDelegateImpl, _super);

  function UITableViewDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITableViewDelegateImpl.initWithOwner = function (owner) {
    var delegate = UITableViewDelegateImpl.new();
    delegate._owner = owner;
    delegate._measureItemHeaderMap = new Map();
    delegate._measureItemContentMap = new Map();
    delegate._measureHeaderMap = new Map();
    delegate._measureFooterMap = new Map();
    return delegate;
  };

  UITableViewDelegateImpl.prototype.tableViewHeightForRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    var height;
    var total = tableView.numberOfRowsInSection(indexPath.section);

    if (indexPath.row === 0) {
      if (!owner) {
        return tableView.estimatedItemHeaderRowHeight;
      }

      height = owner.getItemHeaderHeight(indexPath.section);

      if (height === undefined) {
        var template = owner._getItemHeaderTemplate(indexPath.section);

        var cell = this._measureItemHeaderMap.get(template.key);

        if (!cell) {
          cell = tableView.dequeueReusableCellWithIdentifier("item-header-" + template.key) || AccordionItemHeaderCell.initWithEmptyBackground();

          this._measureItemHeaderMap.set(template.key, cell);
        }

        height = owner._prepareItemHeaderCell(cell, indexPath);
      }

      return view_1.layout.toDeviceIndependentPixels(height);
    }

    if (indexPath.row === 1 && owner._getHasHeader()) {
      if (!owner) {
        return tableView.estimatedHeaderRowHeight;
      }

      height = owner.getHeaderHeight(indexPath.section);

      if (height === undefined) {
        var template = owner._getHeaderTemplate(indexPath.section);

        var cell = this._measureHeaderMap.get(template.key);

        if (!cell) {
          cell = tableView.dequeueReusableCellWithIdentifier("header-" + template.key) || AccordionHeaderCell.initWithEmptyBackground();

          this._measureHeaderMap.set(template.key, cell);
        }

        height = owner._prepareHeaderCell(cell, indexPath);
      }

      return view_1.layout.toDeviceIndependentPixels(height);
    }

    if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
      if (!owner) {
        return tableView.estimatedFooterRowHeight;
      }

      var height_1 = owner.getFooterHeight(indexPath.section);

      if (height_1 === undefined) {
        var template = owner._getFooterTemplate(indexPath.section);

        var cell = this._measureFooterMap.get(template.key);

        if (!cell) {
          cell = tableView.dequeueReusableCellWithIdentifier("footer-" + template.key) || AccordionFooterCell.initWithEmptyBackground();

          this._measureFooterMap.set(template.key, cell);
        }

        height_1 = owner._prepareFooterCell(cell, indexPath);
      }

      return view_1.layout.toDeviceIndependentPixels(height_1);
    }

    if (!owner) {
      return tableView.estimatedItemContentRowHeight;
    }

    height = owner.getItemContentHeight(parseInt("" + (indexPath.section + 1) + (indexPath.row - 1 - (owner._getHasHeader() ? 1 : 0))));

    if (height === undefined) {
      var template = owner._getItemContentTemplate(indexPath.section, indexPath.row);

      var cell = this._measureItemContentMap.get(template.key);

      if (!cell) {
        cell = tableView.dequeueReusableCellWithIdentifier("item-content-" + template.key) || AccordionItemContentCell.initWithEmptyBackground();

        this._measureItemContentMap.set(template.key, cell);
      }

      height = owner._prepareItemContentCell(cell, indexPath);
    }

    return view_1.layout.toDeviceIndependentPixels(height);
  };

  UITableViewDelegateImpl.prototype.tableViewWillSelectRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    var ios = tableView.cellForRowAtIndexPath(indexPath);
    var total = tableView.numberOfRowsInSection(indexPath.section);
    var args = {
      eventName: '',
      data: null,
      object: owner,
      childIndex: undefined,
      index: null,
      view: null,
      ios: ios,
      android: undefined
    };

    if (indexPath.row === 0) {
      handleTap(owner, indexPath.section, ios);
    } else if (indexPath.row === 1 && owner._getHasHeader()) {} else if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {} else {
      var data = owner._getChildData(indexPath.section, indexPath.row);

      args.index = indexPath.section;
      args.childIndex = indexPath.row;
      args.eventName = accordion_common_1.AccordionBase.itemContentTapEvent;
      args.data = data;
      owner.notify(args);
    }

    return indexPath;
  };

  UITableViewDelegateImpl.prototype.tableViewDidSelectRowAtIndexPath = function (tableView, indexPath) {
    tableView.deselectRowAtIndexPathAnimated(indexPath, true);
    return indexPath;
  };

  UITableViewDelegateImpl.prototype.tableViewHeightForFooterInSection = function (tableView, section) {
    return 0;
  };

  UITableViewDelegateImpl.prototype.tableViewHeightForHeaderInSection = function (tableView, section) {
    return 0;
  };

  UITableViewDelegateImpl.ObjCProtocols = [UITableViewDelegate];
  return UITableViewDelegateImpl;
}(NSObject);

exports.UITableViewDelegateImpl = UITableViewDelegateImpl;

function handleTap(owner, current, view) {
  var data = owner._getParentData(current);

  var _args = {
    eventName: accordion_common_1.AccordionBase.itemHeaderTapEvent,
    data: data,
    object: owner,
    parentIndex: current,
    view: null,
    ios: view,
    android: undefined
  };
  owner.notify(_args);

  var reloadSection = function reloadSection(index) {
    var section = NSMutableIndexSet.alloc().initWithIndex(index);
    owner.ios.reloadSectionsWithRowAnimation(section, 100);
  };

  var removeSection = function removeSection(index) {
    var section = NSMutableIndexSet.alloc().initWithIndex(index);
    owner.ios.reloadSectionsWithRowAnimation(section, 4);
  };

  var allowMultiple = String(owner.allowMultiple) === 'true';

  if (allowMultiple) {
    if (!owner._expandedViews.get(current)) {
      owner.itemExpanded(current);

      owner._expandedViews.set(current, true);

      owner._indexSet.addIndex(current);
    } else {
      owner._expandedViews.delete(current);

      owner._indexSet.removeIndex(current);

      owner.itemCollapsed(current);
    }

    reloadSection(current);

    owner._selectedIndexesUpdatedFromNative(Array.from(owner._expandedViews.keys()));
  } else {
    if (owner._expandedViews.has(current)) {
      owner._expandedViews.delete(current);

      owner._indexSet.removeIndex(current);

      owner.itemCollapsed(current);
      reloadSection(current);
    } else if (owner._expandedViews.size > 0) {
      var old = owner._expandedViews.keys().next().value;

      owner._expandedViews.delete(old);

      owner._indexSet.removeIndex(old);

      reloadSection(old);
      owner.itemCollapsed(old);

      owner._expandedViews.set(current, true);

      owner._indexSet.addIndex(current);

      reloadSection(current);
      owner.itemExpanded(current);
    } else {
      owner._expandedViews.set(current, true);

      owner._indexSet.addIndex(current);

      owner.itemExpanded(current);
      reloadSection(current);
    }

    owner._selectedIndexesUpdatedFromNative(Array.from(owner._expandedViews.keys()));
  }
}

var UITableViewImpl = function (_super) {
  __extends(UITableViewImpl, _super);

  function UITableViewImpl() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.estimatedItemHeaderRowHeight = 0;
    _this.estimatedItemContentRowHeight = 0;
    _this.estimatedHeaderRowHeight = 0;
    _this.estimatedFooterRowHeight = 0;
    return _this;
  }

  UITableViewImpl.initWithOwner = function (owner) {
    var table = UITableViewImpl.new();
    table.owner = owner;
    return table;
  };

  return UITableViewImpl;
}(UITableView);

exports.UITableViewImpl = UITableViewImpl;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-accordion/vue/accordion.js":
/***/ (function(module, exports) {

module.exports = function accordion(Vue) {
  return {
    model: {
      prop: 'selectedIndexes',
      event: 'selectedIndexesChange'
    },
    props: {
      items: {
        type: Array,
        required: true
      },
      '+alias': {
        type: String,
        default: 'item'
      },
      '+index': {
        type: String,
        default: '$index'
      },
      selectedIndexes: {
        type: Array,
        default: function _default() {
          return [];
        }
      }
    },
    template: "\n    <NativeAccordion\n      ref=\"accordion\"\n      :items=\"items\"\n      v-bind=\"$attrs\"\n      v-on=\"listeners\"\n      :selectedIndexes=\"selectedIndexes\"\n      @headerLoading=\"onHeaderLoading\"\n      @footerLoading=\"onFooterLoading\"\n      @itemHeaderLoading=\"onItemHeaderLoading\"\n      @itemContentLoading=\"onItemContentLoading\">\n      <slot />\n    </NativeAccordion>\n  ",
    watch: {
      items: {
        handler(newVal) {
          this.$refs.accordion.setAttribute('items', newVal);
          this.$refs.accordion.nativeView.refresh();
        },

        deep: true
      }
    },
    computed: {
      listeners() {
        return Object.assign({}, this.$listeners, {
          selectedIndexesChange: this.onSelectedIndexesChange
        });
      }

    },

    mounted() {
      this.getItemContext = (item, index) => getItemContext(item, index, this.$props['+alias'], this.$props['+index']);

      this.getChildItemContext = (item, parentIndex, index) => getChildItemContext(item, parentIndex, index, this.$props['+alias'], this.$props['+index']);

      this.selectorFn = (item, type) => selectorFn(this.$templates, item, type);

      this.$refs.accordion.setAttribute('items', this.items);
      var headerTemplates = this.$templates.getKeyedTemplates().filter(item => {
        if (item.key === 'header') {
          return item;
        }

        if (item.key.startsWith('header-')) {
          return item;
        }
      });

      if (headerTemplates.length > 0) {
        this.$refs.accordion.setAttribute('_getHasHeader', () => {
          return false;
        });
      }

      var itemContentTemplates = this.$templates.getKeyedTemplates().filter(item => {
        if (item.key === 'content') {
          return item;
        }

        if (item.key.startsWith('content-')) {
          return item;
        }
      });
      var itemHeaderTemplates = this.$templates.getKeyedTemplates().filter(item => {
        if (item.key === 'title') {
          return item;
        }

        if (item.key.startsWith('title-')) {
          return item;
        }
      });
      var footerTemplates = this.$templates.getKeyedTemplates().filter(item => {
        if (item.key === 'footer') {
          return item;
        }

        if (item.key.startsWith('footer-')) {
          return item;
        }
      });

      if (footerTemplates.length > 0) {
        this.$refs.accordion.setAttribute('_getHasFooter', () => {
          return false;
        });
      }

      this.$refs.accordion.setAttribute('_headerTemplatesInternal', headerTemplates);
      this.$refs.accordion.setAttribute('_headerTemplateSelector', (item, index) => {
        return this.selectorFn(this.getItemContext(item, index), 'header');
      });
      this.$refs.accordion.setAttribute('_itemHeaderTemplatesInternal', itemHeaderTemplates);
      this.$refs.accordion.setAttribute('_itemHeaderTemplateSelector', (item, index) => {
        return this.selectorFn(this.getItemContext(item, index), 'title');
      });
      this.$refs.accordion.setAttribute('_itemContentTemplatesInternal', itemContentTemplates);
      this.$refs.accordion.setAttribute('_itemContentTemplateSelector', (item, parentIndex, index) => {
        return this.selectorFn(this.getChildItemContext(item, parentIndex, index), 'content');
      });
      this.$refs.accordion.setAttribute('_footerTemplatesInternal', footerTemplates);
      this.$refs.accordion.setAttribute('_footerTemplateSelector', (item, index) => {
        return this.selectorFn(this.getItemContext(item, index), 'footer');
      });
    },

    methods: {
      onHeaderLoading(args) {
        var index = args.index;
        var items = args.object.items;
        var currentItem = typeof items.getItem === 'function' ? items.getItem(index) : items[index];

        var name = args.object._headerTemplateSelector(currentItem, index, items);

        if (name === 'default') {
          name = 'header';
        }

        var context = this.getItemContext(currentItem, index);
        var oldVnode = args.view && args.view[Vue.VUE_VIEW];
        args.view = this.$templates.patchTemplate(name, context, oldVnode);
      },

      onFooterLoading(args) {
        var index = args.index;
        var items = args.object.items;
        var currentItem = typeof items.getItem === 'function' ? items.getItem(index) : items[index];

        var name = args.object._footerTemplateSelector(currentItem, index, items);

        if (name === 'default') {
          name = 'footer';
        }

        var context = this.getItemContext(currentItem, index);
        var oldVnode = args.view && args.view[Vue.VUE_VIEW];
        args.view = this.$templates.patchTemplate(name, context, oldVnode);
      },

      onItemHeaderLoading(args) {
        var index = args.index;
        var items = args.object.items;
        var currentItem = typeof items.getItem === 'function' ? items.getItem(index) : items[index];

        var name = args.object._itemHeaderTemplateSelector(currentItem, index, items);

        if (name === 'default') {
          name = 'title';
        }

        var context = this.getItemContext(currentItem, index);
        var oldVnode = args.view && args.view[Vue.VUE_VIEW];
        args.view = this.$templates.patchTemplate(name, context, oldVnode);
      },

      onItemContentLoading(args) {
        var index = args.index;
        var childIndex = args.childIndex;
        var items = args.object.items;
        var childItems = this.$refs.accordion.getAttribute('childItems');
        var currentItem = typeof items.getItem === 'function' ? items.getItem(index)[childItems][childIndex] : items[index][childItems][childIndex];

        var name = args.object._itemContentTemplateSelector(currentItem, index, items);

        if (name === 'default') {
          name = 'content';
        }

        var context = this.getChildItemContext(currentItem, index, childIndex);
        var oldVnode = args.view && args.view[Vue.VUE_VIEW];
        args.view = this.$templates.patchTemplate(name, context, oldVnode);
      },

      onSelectedIndexesChange(_ref) {
        var {
          value
        } = _ref;
        this.$emit('selectedIndexesChange', value);
      }

    }
  };

  function getItemContext(item, index, alias, index_alias) {
    return {
      [alias]: item,
      [index_alias]: index,
      $even: index % 2 === 0,
      $odd: index % 2 !== 0
    };
  }

  function getChildItemContext(item, parentIndex, index, alias, index_alias) {
    return {
      [alias]: item,
      [index_alias]: index,
      $even: index % 2 === 0,
      $odd: index % 2 !== 0,
      $parentIndex: parentIndex
    };
  }

  function selectorFn(templates, item, type) {
    var templateMap = templates._templateMap;
    var iterator = templateMap.entries();
    var curr;

    while (curr = iterator.next().value) {
      var name = curr[0];
      var conditionFn = curr[1].conditionFn;

      try {
        if (conditionFn(item) && (name === type || name.startsWith("".concat(type, "-")))) {
          return name;
        }
      } catch (err) {}
    }

    return 'default';
  }
};

/***/ }),

/***/ "../node_modules/nativescript-accordion/vue/index.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function install(Vue) {
  Vue.registerElement('NativeAccordion', () => __webpack_require__("../node_modules/nativescript-accordion/accordion.js").Accordion);
  Vue.component('Accordion', __webpack_require__("../node_modules/nativescript-accordion/vue/accordion.js")(Vue));
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/hmr-update.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var hot = __webpack_require__("../node_modules/nativescript-dev-webpack/hot.js");

var file_system_1 = __webpack_require__("tns-core-modules/file-system");

function hmrUpdate() {
  var currentAppFolder = file_system_1.knownFolders.currentApp();

  var latestHash = __webpack_require__["h"]();

  return hot(latestHash, filename => {
    var fullFilePath = file_system_1.path.join(currentAppFolder.path, filename);
    return file_system_1.File.exists(fullFilePath) ? currentAppFolder.getFile(filename) : null;
  });
}

exports.hmrUpdate = hmrUpdate;

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var hmr_update_1 = __webpack_require__("../node_modules/nativescript-dev-webpack/hmr/hmr-update.js");

exports.hmrUpdate = hmr_update_1.hmrUpdate;

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hot.js":
/***/ (function(module, exports, __webpack_require__) {

var hmrPrefix = 'HMR:';
var log = {
  info: message => console.info("".concat(hmrPrefix, " ").concat(message)),
  warn: message => console.warn("".concat(hmrPrefix, " ").concat(message)),
  error: message => console.error("".concat(hmrPrefix, " ").concat(message))
};
var refresh = 'Application needs to be restarted in order to apply the changes.';
var hotOptions = {
  ignoreUnaccepted: false,
  ignoreDeclined: false,
  ignoreErrored: false,

  onUnaccepted(data) {
    var chain = [].concat(data.chain);
    var last = chain[chain.length - 1];

    if (last === 0) {
      chain.pop();
    }

    log.warn("Ignored an update to unaccepted module: ");
    chain.forEach(mod => log.warn("         \u27AD ".concat(mod)));
  },

  onDeclined(data) {
    log.warn("Ignored an update to declined module:");
    data.chain.forEach(mod => log.warn("         \u27AD ".concat(mod)));
  },

  onErrored(data) {
    log.warn("Ignored an error while updating module ".concat(data.moduleId, " <").concat(data.type, ">"));
    log.warn(data.error);
  }

};
var nextHash;
var currentHash;

function upToDate() {
  return nextHash.indexOf(__webpack_require__.h()) >= 0;
}

function result(modules, appliedModules) {
  var unaccepted = modules.filter(moduleId => appliedModules && appliedModules.indexOf(moduleId) < 0);

  if (unaccepted.length > 0) {
    log.warn('The following modules could not be updated:');

    for (var moduleId of unaccepted) {
      log.warn("          \u29BB ".concat(moduleId));
    }
  }

  if (!(appliedModules || []).length) {
    log.info('No Modules Updated.');
  } else {
    log.info('The following modules were updated:');

    for (var _moduleId of appliedModules) {
      log.info("         \u21BB ".concat(_moduleId));
    }

    var numberIds = appliedModules.every(moduleId => typeof moduleId === 'number');

    if (numberIds) {
      log.info('Please consider using the NamedModulesPlugin for module names.');
    }
  }
}

function check(options) {
  return module.hot.check().then(modules => {
    if (!modules) {
      log.warn("Cannot find update. ".concat(refresh));
      return null;
    }

    return module.hot.apply(hotOptions).then(appliedModules => {
      var nextCheck;

      if (!upToDate()) {
        nextCheck = check(options);
      }

      result(modules, appliedModules);

      if (upToDate()) {
        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
        log.info("Successfully applied update with hmr hash ".concat(currentHash, ". App is up to date."));
      }

      return nextCheck || null;
    }).catch(err => {
      var status = module.hot.status();

      if (['abort', 'fail'].indexOf(status) >= 0) {
        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
        log.error("Cannot apply update with hmr hash ".concat(currentHash, "."));
        log.error(err.message || err.stack);
      } else {
        log.error("Update failed: ".concat(err.message || err.stack));
      }
    });
  }).catch(err => {
    var status = module.hot.status();

    if (['abort', 'fail'].indexOf(status) >= 0) {
      log.error("Cannot check for update. ".concat(refresh));
      log.error(err.message || err.stack);
    } else {
      log.error("Update check failed: ".concat(err.message || err.stack));
    }
  });
}

if (true) {
  log.info('Hot Module Replacement Enabled. Waiting for signal.');
} else {}

function update(latestHash, options) {
  nextHash = latestHash;

  if (!upToDate()) {
    var status = module.hot.status();

    if (status === 'idle') {
      //Do not modify message - CLI depends on this exact content to determine hmr operation status.
      log.info("Checking for updates to the bundle with hmr hash ".concat(currentHash, "."));
      return check(options);
    } else if (['abort', 'fail'].indexOf(status) >= 0) {
      log.warn("Cannot apply update. A previous update ".concat(status, "ed. ").concat(refresh));
    }
  }
}

;

function getNextHash(hash, getFileContent) {
  var file = getFileContent("".concat(hash, ".hot-update.json"));

  if (!file) {
    return Promise.resolve(hash);
  }

  return file.readText().then(hotUpdateContent => {
    if (hotUpdateContent) {
      var manifest = JSON.parse(hotUpdateContent);
      var newHash = manifest.h;
      return getNextHash(newHash, getFileContent);
    } else {
      return Promise.resolve(hash);
    }
  }).catch(error => Promise.reject(error));
}

module.exports = function checkState(initialHash, getFileContent) {
  currentHash = initialHash;
  return getNextHash(initialHash, getFileContent).then(nextHash => {
    if (nextHash != initialHash) {
      return update(nextHash, {});
    }
  });
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-regular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function () {
  loadCss(function () {
    var appCssContext = __webpack_require__("./ sync ^\\.\\/app\\.(css|scss|less|sass)$");

    global.registerWebpackModules(appCssContext);
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
  var application = __webpack_require__("tns-core-modules/application");

  __webpack_require__("tns-core-modules/ui/styling/style-scope");

  loadModuleFn();
  application.loadAppCss();
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "../node_modules/nativescript-vue/dist/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * NativeScript-Vue v2.4.0
 * (Using Vue v2.6.10)
 * (c) 2017-2019 rigor789
 * Released under the MIT license.
 */


global.process = global.process || {};
global.process.env = global.process.env || {};

var application = __webpack_require__("tns-core-modules/application");

__webpack_require__("tns-core-modules/ui/frame");

var arrayMap = function arrayMap(xs, f) {
  if (xs.map) {
    return xs.map(f);
  }

  var res = [];

  for (var i = 0; i < xs.length; i++) {
    var x = xs[i];

    if (hasOwn.call(xs, i)) {
      res.push(f(x, i, xs));
    }
  }

  return res;
};

var hasOwn = Object.prototype.hasOwnProperty;
var indexOf = [].indexOf;

var indexof = function indexof(arr, obj) {
  if (indexOf) {
    return arr.indexOf(obj);
  }

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) {
      return i;
    }
  }

  return -1;
};

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

var hasOwn$1 = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach(obj, fn, ctx) {
  if (toString.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn$1.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

var hasOwn$2 = Object.prototype.hasOwnProperty;

var arrayReduce = function arrayReduce(xs, f, acc) {
  var hasAcc = arguments.length >= 3;

  if (hasAcc && xs.reduce) {
    return xs.reduce(f, acc);
  }

  if (xs.reduce) {
    return xs.reduce(f);
  }

  for (var i = 0; i < xs.length; i++) {
    if (!hasOwn$2.call(xs, i)) {
      continue;
    }

    if (!hasAcc) {
      acc = xs[i];
      hasAcc = true;
      continue;
    }

    acc = f(acc, xs[i], i);
  }

  return acc;
};

var hasOwn$3 = Object.prototype.hasOwnProperty;
var toString$1 = Object.prototype.toString;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && !(fn instanceof RegExp) || toString$1.call(fn) === '[object Function]';
};

var foreach$1 = function forEach(obj, fn) {
  if (!isFunction(fn)) {
    throw new TypeError('iterator must be a function');
  }

  var i,
      k,
      isString = typeof obj === 'string',
      l = obj.length,
      context = arguments.length > 2 ? arguments[2] : null;

  if (l === +l) {
    for (i = 0; i < l; i++) {
      if (context === null) {
        fn(isString ? obj.charAt(i) : obj[i], i, obj);
      } else {
        fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
      }
    }
  } else {
    for (k in obj) {
      if (hasOwn$3.call(obj, k)) {
        if (context === null) {
          fn(obj[k], k, obj);
        } else {
          fn.call(context, obj[k], k, obj);
        }
      }
    }
  }
};

var toString$2 = Object.prototype.toString;

var isArguments = function isArguments(value) {
  var str = toString$2.call(value);
  var isArguments = str === '[object Arguments]';

  if (!isArguments) {
    isArguments = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toString$2.call(value.callee) === '[object Function]';
  }

  return isArguments;
}; // modified from https://github.com/es-shims/es5-shim


var has = Object.prototype.hasOwnProperty,
    toString$3 = Object.prototype.toString,
    hasDontEnumBug = !{
  'toString': null
}.propertyIsEnumerable('toString'),
    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];

var keysShim = function keys(object) {
  var isObject = object !== null && typeof object === 'object',
      isFunction = toString$3.call(object) === '[object Function]',
      isArguments$1 = isArguments(object),
      theKeys = [];

  if (!isObject && !isFunction && !isArguments$1) {
    throw new TypeError("Object.keys called on a non-object");
  }

  if (isArguments$1) {
    foreach$1(object, function (value, index) {
      theKeys.push(index);
    });
  } else {
    var name,
        skipProto = hasProtoEnumBug && isFunction;

    for (name in object) {
      if (!(skipProto && name === 'prototype') && has.call(object, name)) {
        theKeys.push(name);
      }
    }
  }

  if (hasDontEnumBug) {
    var ctor = object.constructor,
        skipConstructor = ctor && ctor.prototype === object;
    foreach$1(dontEnums, function (dontEnum) {
      if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
        theKeys.push(dontEnum);
      }
    });
  }

  return theKeys;
};

keysShim.shim = function shimObjectKeys() {
  if (!Object.keys) {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

var objectKeys = keysShim;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var json3 = createCommonjsModule(function (module, exports) {
  (function (root) {
    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader =  false && false; // Use the `global` object exposed by Node (including Browserify via
    // `insert-module-globals`), Narwhal, and Ringo as the default context.
    // Rhino exports a `global` function instead.

    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;

    if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal)) {
      root = freeGlobal;
    } // Public: Initializes JSON 3 using the given `context` object, attaching the
    // `stringify` and `parse` functions to the specified `exports` object.


    function runInContext(context, exports) {
      context || (context = root["Object"]());
      exports || (exports = root["Object"]()); // Native constructor aliases.

      var Number = context["Number"] || root["Number"],
          String = context["String"] || root["String"],
          Object = context["Object"] || root["Object"],
          Date = context["Date"] || root["Date"],
          SyntaxError = context["SyntaxError"] || root["SyntaxError"],
          TypeError = context["TypeError"] || root["TypeError"],
          Math = context["Math"] || root["Math"],
          nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      } // Convenience aliases.


      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          _isProperty,
          _forEach,
          undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.


      var isExtended = new Date(-3509827334573292);

      try {
        // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
        // results for certain dates in Opera >= 10.53.
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
      // implementations are spec-compliant. Based on work by Ken Snyder.


      function has(name) {
        if (has[name] !== undef) {
          // Return cached feature test result.
          return has[name];
        }

        var isSupported;

        if (name == "bug-string-char-index") {
          // IE <= 7 doesn't support accessing string characters using square
          // bracket notation. IE 8 only supports this for primitives.
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          // Indicates whether both `JSON.stringify` and `JSON.parse` are
          // supported.
          isSupported = has("json-stringify") && has("json-parse");
        } else {
          var value,
              serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

          if (name == "json-stringify") {
            var stringify = exports.stringify,
                stringifySupported = typeof stringify == "function" && isExtended;

            if (stringifySupported) {
              // A test function object with a custom `toJSON` method.
              (value = function value() {
                return 1;
              }).toJSON = value;

              try {
                stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({
                  "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
              } catch (exception) {
                stringifySupported = false;
              }
            }

            isSupported = stringifySupported;
          } // Test `JSON.parse`.


          if (name == "json-parse") {
            var parse = exports.parse;

            if (typeof parse == "function") {
              try {
                // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                // Conforming implementations should also coerce the initial argument to
                // a string prior to parsing.
                if (parse("0") === 0 && !parse(false)) {
                  // Simple parsing test.
                  value = parse(serialized);
                  var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                  if (parseSupported) {
                    try {
                      // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                      parseSupported = !parse('"\t"');
                    } catch (exception) {}

                    if (parseSupported) {
                      try {
                        // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                        // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                        // certain octal literals.
                        parseSupported = parse("01") !== 1;
                      } catch (exception) {}
                    }

                    if (parseSupported) {
                      try {
                        // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                        // points. These environments, along with FF 3.1b1 and 2,
                        // also allow trailing commas in JSON objects and arrays.
                        parseSupported = parse("1.") !== 1;
                      } catch (exception) {}
                    }
                  }
                }
              } catch (exception) {
                parseSupported = false;
              }
            }

            isSupported = parseSupported;
          }
        }

        return has[name] = !!isSupported;
      }

      if (!has("json")) {
        // Common `[[Class]]` name aliases.
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

        var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

        if (!isExtended) {
          var floor = Math.floor; // A mapping between the months of the year and the number of days between
          // January 1st and the first of the respective month.

          var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
          // first day of the given month.

          var getDay = function getDay(year, month) {
            return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
          };
        } // Internal: Determines if a property is a direct property of the given
        // object. Delegates to the native `Object#hasOwnProperty` method.


        if (!(_isProperty = objectProto.hasOwnProperty)) {
          _isProperty = function isProperty(property) {
            var members = {},
                constructor;

            if ((members.__proto__ = null, members.__proto__ = {
              // The *proto* property cannot be set multiple times in recent
              // versions of Firefox and SeaMonkey.
              "toString": 1
            }, members).toString != getClass) {
              // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
              // supports the mutable *proto* property.
              _isProperty = function isProperty(property) {
                // Capture and break the objectgs prototype chain (see section 8.6.2
                // of the ES 5.1 spec). The parenthesized expression prevents an
                // unsafe transformation by the Closure Compiler.
                var original = this.__proto__,
                    result = property in (this.__proto__ = null, this); // Restore the original prototype chain.

                this.__proto__ = original;
                return result;
              };
            } else {
              // Capture a reference to the top-level `Object` constructor.
              constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
              // other environments.

              _isProperty = function isProperty(property) {
                var parent = (this.constructor || constructor).prototype;
                return property in this && !(property in parent && this[property] === parent[property]);
              };
            }

            members = null;
            return _isProperty.call(this, property);
          };
        } // Internal: A set of primitive types used by `isHostType`.


        var PrimitiveTypes = {
          "boolean": 1,
          "number": 1,
          "string": 1,
          "undefined": 1
        }; // Internal: Determines if the given object `property` value is a
        // non-primitive.

        var isHostType = function isHostType(object, property) {
          var type = typeof object[property];
          return type == "object" ? !!object[property] : !PrimitiveTypes[type];
        }; // Internal: Normalizes the `for...in` iteration algorithm across
        // environments. Each enumerated key is yielded to a `callback` function.


        _forEach = function forEach(object, callback) {
          var size = 0,
              Properties,
              members,
              property; // Tests for bugs in the current environment's `for...in` algorithm. The
          // `valueOf` property inherits the non-enumerable flag from
          // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

          (Properties = function Properties() {
            this.valueOf = 0;
          }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

          members = new Properties();

          for (property in members) {
            // Ignore all properties inherited from `Object.prototype`.
            if (_isProperty.call(members, property)) {
              size++;
            }
          }

          Properties = members = null; // Normalize the iteration algorithm.

          if (!size) {
            // A list of non-enumerable properties inherited from `Object.prototype`.
            members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
            // properties.

            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && isHostType(object, "hasOwnProperty") ? object.hasOwnProperty : _isProperty;

              for (property in object) {
                // Gecko <= 1.0 enumerates the `prototype` property of functions under
                // certain conditions; IE does not.
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              } // Manually invoke the callback for each non-enumerable property.


              for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
            };
          } else if (size == 2) {
            // Safari <= 2.0.4 enumerates shadowed properties twice.
            _forEach = function forEach(object, callback) {
              // Create a set of iterated properties.
              var members = {},
                  isFunction = getClass.call(object) == functionClass,
                  property;

              for (property in object) {
                // Store each property name to prevent double enumeration. The
                // `prototype` property of functions is not enumerated due to cross-
                // environment inconsistencies.
                if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            // No bugs detected; use the standard `for...in` algorithm.
            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  isConstructor;

              for (property in object) {
                if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              } // Manually invoke the callback for the `constructor` property due to
              // cross-environment inconsistencies.


              if (isConstructor || _isProperty.call(object, property = "constructor")) {
                callback(property);
              }
            };
          }

          return _forEach(object, callback);
        }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
        // `filter` argument may specify either a function that alters how object and
        // array members are serialized, or an array of strings and numbers that
        // indicates which properties should be serialized. The optional `width`
        // argument may be either a string or number that specifies the indentation
        // level of the output.


        if (!has("json-stringify")) {
          // Internal: A map of control characters and their escaped equivalents.
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          }; // Internal: Converts `value` into a zero-padded string such that its
          // length is at least equal to `width`. The `width` must be <= 6.

          var leadingZeroes = "000000";

          var toPaddedString = function toPaddedString(width, value) {
            // The `|| 0` expression is necessary to work around a bug in
            // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
            return (leadingZeroes + (value || 0)).slice(-width);
          }; // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


          var unicodePrefix = "\\u00";

          var quote = function quote(value) {
            var result = '"',
                index = 0,
                length = value.length,
                useCharIndex = !charIndexBuggy || length > 10;
            var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

            for (; index < length; index++) {
              var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
              // shorthand escape sequence; otherwise, append the character as-is.

              switch (charCode) {
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                case 34:
                case 92:
                  result += Escapes[charCode];
                  break;

                default:
                  if (charCode < 32) {
                    result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                    break;
                  }

                  result += useCharIndex ? symbols[index] : value.charAt(index);
              }
            }

            return result + '"';
          }; // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


          var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
            var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

            try {
              // Necessary for host object support.
              value = object[property];
            } catch (exception) {}

            if (typeof value == "object" && value) {
              className = getClass.call(value);

              if (className == dateClass && !_isProperty.call(value, "toJSON")) {
                if (value > -1 / 0 && value < 1 / 0) {
                  // Dates are serialized according to the `Date#toJSON` method
                  // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                  // for the ISO 8601 date time string format.
                  if (getDay) {
                    // Manually compute the year, month, date, hours, minutes,
                    // seconds, and milliseconds if the `getUTC*` methods are
                    // buggy. Adapted from @Yaffle's `date-shim` project.
                    date = floor(value / 864e5);

                    for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}

                    for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}

                    date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                    // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                    // to compute `A modulo B`, as the `%` operator does not
                    // correspond to the `modulo` operation for negative numbers.

                    time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                    // decomposing the time within the day. See section 15.9.1.10.

                    hours = floor(time / 36e5) % 24;
                    minutes = floor(time / 6e4) % 60;
                    seconds = floor(time / 1e3) % 60;
                    milliseconds = time % 1e3;
                  } else {
                    year = value.getUTCFullYear();
                    month = value.getUTCMonth();
                    date = value.getUTCDate();
                    hours = value.getUTCHours();
                    minutes = value.getUTCMinutes();
                    seconds = value.getUTCSeconds();
                    milliseconds = value.getUTCMilliseconds();
                  } // Serialize extended years correctly.


                  value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
                } else {
                  value = null;
                }
              } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
                // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                // ignores all `toJSON` methods on these objects unless they are
                // defined directly on an instance.
                value = value.toJSON(property);
              }
            }

            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            }

            if (value === null) {
              return "null";
            }

            className = getClass.call(value);

            if (className == booleanClass) {
              // Booleans are represented literally.
              return "" + value;
            } else if (className == numberClass) {
              // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
              // `"null"`.
              return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
            } else if (className == stringClass) {
              // Strings are double-quoted and escaped.
              return quote("" + value);
            } // Recursively serialize objects and arrays.


            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              } // Add the object to the stack of traversed objects.


              stack.push(value);
              results = []; // Save the current indentation level and indent one additional level.

              prefix = indentation;
              indentation += whitespace;

              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undef ? "null" : element);
                }

                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                _forEach(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                  if (element !== undef) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });

                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
              } // Remove the object from the traversed object stack.


              stack.pop();
              return result;
            }
          }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;

            if (typeof filter == "function" || typeof filter == "object" && filter) {
              if ((className = getClass.call(filter)) == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};

                for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
              }
            }

            if (width) {
              if ((className = getClass.call(width)) == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            } // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).


            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        } // Public: Parses a JSON source string.


        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
          // equivalents.

          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          }; // Internal: Stores the parser state.

          var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

          var abort = function abort() {
            Index = Source = null;
            throw SyntaxError();
          }; // Internal: Returns the next token, or `"$"` if the parser has reached
          // the end of the source string. A token may be a string, number, `null`
          // literal, or Boolean literal.


          var lex = function lex() {
            var source = Source,
                length = source.length,
                value,
                begin,
                position,
                isSigned,
                charCode;

            while (Index < length) {
              charCode = source.charCodeAt(Index);

              switch (charCode) {
                case 9:
                case 10:
                case 13:
                case 32:
                  // Skip whitespace tokens, including tabs, carriage returns, line
                  // feeds, and space characters.
                  Index++;
                  break;

                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                  // the current position.
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;

                case 34:
                  // `"` delimits a JSON string; advance to the next character and
                  // begin parsing the string. String tokens are prefixed with the
                  // sentinel `@` character to distinguish them from punctuators and
                  // end-of-string tokens.
                  for (value = "@", Index++; Index < length;) {
                    charCode = source.charCodeAt(Index);

                    if (charCode < 32) {
                      // Unescaped ASCII control characters (those with a code unit
                      // less than the space character) are not permitted.
                      abort();
                    } else if (charCode == 92) {
                      // A reverse solidus (`\`) marks the beginning of an escaped
                      // control character (including `"`, `\`, and `/`) or Unicode
                      // escape sequence.
                      charCode = source.charCodeAt(++Index);

                      switch (charCode) {
                        case 92:
                        case 34:
                        case 47:
                        case 98:
                        case 116:
                        case 110:
                        case 102:
                        case 114:
                          // Revive escaped control characters.
                          value += Unescapes[charCode];
                          Index++;
                          break;

                        case 117:
                          // `\u` marks the beginning of a Unicode escape sequence.
                          // Advance to the first character and validate the
                          // four-digit code point.
                          begin = ++Index;

                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                            // insensitive) that form a single hexadecimal value.

                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              // Invalid Unicode escape sequence.
                              abort();
                            }
                          } // Revive the escaped character.


                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;

                        default:
                          // Invalid escape sequence.
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        // An unescaped double-quote character marks the end of the
                        // string.
                        break;
                      }

                      charCode = source.charCodeAt(Index);
                      begin = Index; // Optimize for the common case where a string is valid.

                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      } // Append the string as-is.


                      value += source.slice(begin, Index);
                    }
                  }

                  if (source.charCodeAt(Index) == 34) {
                    // Advance to the next character and return the revived string.
                    Index++;
                    return value;
                  } // Unterminated string.


                  abort();

                default:
                  // Parse numbers and literals.
                  begin = Index; // Advance past the negative sign, if one is specified.

                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  } // Parse an integer or floating-point value.


                  if (charCode >= 48 && charCode <= 57) {
                    // Leading zeroes are interpreted as octal literals.
                    if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                      // Illegal octal literal.
                      abort();
                    }

                    isSigned = false; // Parse the integer component.

                    for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {} // Floats cannot contain a leading decimal point; however, this
                    // case is already accounted for by the parser.


                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index; // Parse the decimal component.

                      for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal trailing decimal.
                        abort();
                      }

                      Index = position;
                    } // Parse exponents. The `e` denoting the exponent is
                    // case-insensitive.


                    charCode = source.charCodeAt(Index);

                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                      // specified.

                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      } // Parse the exponential component.


                      for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal empty exponent.
                        abort();
                      }

                      Index = position;
                    } // Coerce the parsed value to a JavaScript number.


                    return +source.slice(begin, Index);
                  } // A negative sign may only precede numbers.


                  if (isSigned) {
                    abort();
                  } // `true`, `false`, and `null` literals.


                  if (source.slice(Index, Index + 4) == "true") {
                    Index += 4;
                    return true;
                  } else if (source.slice(Index, Index + 5) == "false") {
                    Index += 5;
                    return false;
                  } else if (source.slice(Index, Index + 4) == "null") {
                    Index += 4;
                    return null;
                  } // Unrecognized token.


                  abort();
              }
            } // Return the sentinel `$` character if the parser has reached the end
            // of the source string.


            return "$";
          }; // Internal: Parses a JSON `value` token.


          var get = function get(value) {
            var results, hasMembers;

            if (value == "$") {
              // Unexpected end of input.
              abort();
            }

            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                // Remove the sentinel `@` character.
                return value.slice(1);
              } // Parse object and array literals.


              if (value == "[") {
                // Parses a JSON array, returning a new JavaScript array.
                results = [];

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing square bracket marks the end of the array literal.

                  if (value == "]") {
                    break;
                  } // If the array literal contains elements, the current token
                  // should be a comma separating the previous element from the
                  // next.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "]") {
                        // Unexpected trailing `,` in array literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each array element.
                      abort();
                    }
                  } // Elisions and leading commas are not permitted.


                  if (value == ",") {
                    abort();
                  }

                  results.push(get(value));
                }

                return results;
              } else if (value == "{") {
                // Parses a JSON object, returning a new JavaScript object.
                results = {};

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing curly brace marks the end of the object literal.

                  if (value == "}") {
                    break;
                  } // If the object literal contains members, the current token
                  // should be a comma separator.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "}") {
                        // Unexpected trailing `,` in object literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each object member.
                      abort();
                    }
                  } // Leading commas are not permitted, object property names must be
                  // double-quoted strings, and a `:` must separate each property
                  // name and value.


                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }

                  results[value.slice(1)] = get(lex());
                }

                return results;
              } // Unexpected token encountered.


              abort();
            }

            return value;
          }; // Internal: Updates a traversed object member.


          var update = function update(source, property, callback) {
            var element = walk(source, property, callback);

            if (element === undef) {
              delete source[property];
            } else {
              source[property] = element;
            }
          }; // Internal: Recursively traverses a parsed JSON object, invoking the
          // `callback` function for each value. This is an implementation of the
          // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


          var walk = function walk(source, property, callback) {
            var value = source[property],
                length;

            if (typeof value == "object" && value) {
              // `forEach` can't be used to traverse an array in Opera <= 8.54
              // because its `Object#hasOwnProperty` implementation returns `false`
              // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--;) {
                  update(value, length, callback);
                }
              } else {
                _forEach(value, function (property) {
                  update(value, property, callback);
                });
              }
            }

            return callback.call(source, property, value);
          }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


          exports.parse = function (source, callback) {
            var result, value;
            Index = 0;
            Source = "" + source;
            result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

            if (lex() != "$") {
              abort();
            } // Reset the parser state.


            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }

      exports["runInContext"] = runInContext;
      return exports;
    }

    if (exports && !exports.nodeType && !isLoader) {
      // Export for CommonJS environments.
      runInContext(root, exports);
    } else {
      // Export for web browsers and JavaScript engines.
      var nativeJSON = root.JSON;
      var JSON3 = runInContext(root, root["JSON3"] = {
        // Public: Restores the original value of the global `JSON` object and
        // returns a reference to the `JSON3` object.
        "noConflict": function noConflict() {
          root.JSON = nativeJSON;
          return JSON3;
        }
      });
      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }
  })(commonjsGlobal);
});
/**
 * Module dependencies.
 */

/**
 * Make sure `Object.keys` work for `undefined`
 * values that are still there, like `document.all`.
 * http://lists.w3.org/Archives/Public/public-html/2009Jun/0546.html
 *
 * @api private
 */

function objectKeys$1(val) {
  if (Object.keys) {
    return Object.keys(val);
  }

  return objectKeys(val);
}
/**
 * Module exports.
 */


var utilInspect = inspect;
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 * @license MIT (© Joyent)
 */

/* legacy: obj, showHidden, depth, colors*/

function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) {
    ctx.depth = arguments[2];
  }

  if (arguments.length >= 4) {
    ctx.colors = arguments[3];
  }

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) {
    ctx.showHidden = false;
  }

  if (isUndefined(ctx.depth)) {
    ctx.depth = 2;
  }

  if (isUndefined(ctx.colors)) {
    ctx.colors = false;
  }

  if (isUndefined(ctx.customInspect)) {
    ctx.customInspect = true;
  }

  if (ctx.colors) {
    ctx.stylize = stylizeWithColor;
  }

  return formatValue(ctx, obj, ctx.depth);
} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics


inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeNoColor(str, styleType) {
  return str;
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isUndefined(arg) {
  return arg === void 0;
}

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function isFunction$1(arg) {
  return typeof arg === 'function';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isNull(arg) {
  return arg === null;
}

function hasOwn$4(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function arrayToHash(array) {
  var hash = {};
  foreach(array, function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwn$4(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  foreach(keys, function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = objectKeys$1(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden && Object.getOwnPropertyNames) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (indexof(keys, 'message') >= 0 || indexof(keys, 'description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction$1(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isarray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction$1(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = arrayMap(keys, function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = {
    value: value[key]
  };

  if (Object.getOwnPropertyDescriptor) {
    desc = Object.getOwnPropertyDescriptor(value, key) || desc;
  }

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwn$4(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (indexof(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = arrayMap(str.split('\n'), function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + arrayMap(str.split('\n'), function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = json3.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) {
    return ctx.stylize('undefined', 'undefined');
  }

  if (isString(value)) {
    var simple = '\'' + json3.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) {
    return ctx.stylize('' + value, 'number');
  }

  if (isBoolean(value)) {
    return ctx.stylize('' + value, 'boolean');
  } // For some reason typeof null is "object", so special case here.


  if (isNull(value)) {
    return ctx.stylize('null', 'null');
  }
}

function reduceToSingleString(output, base, braces) {
  var length = arrayReduce(output, function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) {
    return origin;
  }

  var keys = objectKeys$1(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
}
/*  */


var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject$1(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp$1(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString$4(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn$5(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject$1(a);
  var isObjectB = isObject$1(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */


var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {}
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer = false;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject$1(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn$5(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn$5(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn$5(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn$5(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn$5(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn$5(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn$5(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn$5(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn$5(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn$5(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ( true && isObject$1(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean$1() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/*  */


var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject$1(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has$1 = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has$1 = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has$1[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has$1[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has$1[id] == null) {
    has$1[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject$1(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {
  var name, def, cur, old, event;

  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn$5(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn$5(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn$5(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn$5(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn$5(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn$5(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn$5(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */


var uid$2 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$2++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject$1(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject$1(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject$1(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString$4;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn$5(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject$1(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject$1(data.style)) {
    traverse(data.style);
  }

  if (isObject$1(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject$1(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject$1(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);
var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove() {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove.listeners = listeners;
    return remove;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp$1(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref) {
    if (isDef(parent)) {
      if (isDef(ref)) {
        if (nodeOps.parentNode(ref) === parent) {
          nodeOps.insertBefore(parent, elm, ref);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

function updateAttrs(oldVnode, vnode) {
  if (!oldVnode.data.attrs && !vnode.data.attrs) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (attrs.__ob__) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      elm.setAttribute(key, cur);
    }
  }

  for (key in oldAttrs) {
    if (attrs[key] == null) {
      elm.setAttribute(key);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');
var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject$1(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (transitionClass) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var class_ = {
  create: updateClass,
  update: updateClass
};
var target$1;

function add$1(event, handler, once, capture) {
  if (capture) {
    console.log('bubble phase not supported');
    return;
  }

  if (once) {
    var oldHandler = handler;

    handler = function handler() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      var res = oldHandler.call.apply(oldHandler, [null].concat(args));

      if (res !== null) {
        remove$2(event, null, null, target$1);
      }
    };
  }

  target$1.addEventListener(event, handler);
}

function remove$2(event, handler, capture, _target) {
  if (_target === void 0) _target = target$1;

  _target.removeEventListener(event);
}

function updateDOMListeners(oldVnode, vnode) {
  if (!oldVnode.data.on && !vnode.data.on) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
var normalize = cached(camelize);

function createStyle(oldVnode, vnode) {
  // console.log(`\t\t ===> createStyle(${oldVnode}, ${vnode})`)
  if (!vnode.data.staticStyle) {
    updateStyle(oldVnode, vnode);
    return;
  }

  var elm = vnode.elm;
  var staticStyle = vnode.data.staticStyle;

  for (var name in staticStyle) {
    if (staticStyle[name]) {
      elm.setStyle(normalize(name), staticStyle[name]);
    }
  }

  updateStyle(oldVnode, vnode);
}

function updateStyle(oldVnode, vnode) {
  if (!oldVnode.data.style && !vnode.data.style) {
    return;
  }

  var cur, name;
  var elm = vnode.elm;
  var oldStyle = oldVnode.data.style || {};
  var style = vnode.data.style || {};
  var needClone = style.__ob__; // handle array syntax

  if (Array.isArray(style)) {
    style = vnode.data.style = toObject$1(style);
  } // clone the style for future updates,
  // in case the user mutates the style object in-place.


  if (needClone) {
    style = vnode.data.style = extend({}, style);
  }

  for (name in oldStyle) {
    if (!style[name]) {
      elm.setStyle(normalize(name), '');
    }
  }

  for (name in style) {
    cur = style[name];
    elm.setStyle(normalize(name), cur);
  }
}

function toObject$1(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}

var style = {
  create: createStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def) {
  if (!def) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def === 'object') {
    var res = {};

    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }

    extend(res, def);
    return res;
  } else if (typeof def === 'string') {
    return autoCssTransition(def);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) ;
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) ;
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject$1(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject$1(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = {
  create: _enter,
  activate: _enter,
  remove: function remove(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
};
var platformModules = [attrs, class_, events, style, transition];
var actionBar = {
  template: "\n    <NativeActionBar ~actionBar v-bind=\"$attrs\" v-on=\"$listeners\">\n      <slot />\n    </NativeActionBar>\n  "
};
var android = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (__webpack_require__("tns-core-modules/platform").isAndroid) {
      return children;
    }
  }
};
var frames = new Map();

function setFrame(id, frame) {
  return frames.set(id, frame);
}

function getFrame(id) {
  return frames.get(id);
}

function deleteFrame(id) {
  return frames.delete(id);
}

var idCounter = 1;
var frame = {
  props: {
    id: {
      default: 'default'
    },
    transition: {
      type: [String, Object],
      required: false,
      default: null
    },
    'ios:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    'android:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    clearHistory: {
      type: Boolean,
      required: false,
      default: false
    },
    backstackVisible: {
      type: Boolean,
      required: false,
      default: true
    },
    // injected by the template compiler
    hasRouterView: {
      default: false
    }
  },
  data: function data() {
    return {
      properties: {}
    };
  },
  created: function created() {
    var properties = {};

    if (getFrame(this.$props.id)) {
      properties.id = this.$props.id + idCounter++;
    }

    this.properties = Object.assign({}, this.$attrs, this.$props, properties);
    setFrame(this.properties.id, this);
  },
  destroyed: function destroyed() {
    deleteFrame(this.properties.id);
  },
  render: function render(h) {
    return h('NativeFrame', {
      attrs: this.properties,
      on: this.$listeners
    }, this.$slots.default);
  },
  methods: {
    _getFrame: function _getFrame() {
      return this.$el.nativeView;
    },
    _ensureTransitionObject: function _ensureTransitionObject(transition) {
      if (typeof transition === 'string') {
        return {
          name: transition
        };
      }

      return transition;
    },
    _composeTransition: function _composeTransition(entry) {
      var isAndroid = __webpack_require__("tns-core-modules/platform").isAndroid;

      var platformEntryProp = "transition" + (isAndroid ? 'Android' : 'iOS');
      var entryProp = entry[platformEntryProp] ? platformEntryProp : 'transition';
      var platformProp = (isAndroid ? 'android' : 'ios') + ":transition";
      var prop = this[platformProp] ? platformProp : 'transition';

      if (entry[entryProp]) {
        entry[entryProp] = this._ensureTransitionObject(entry[entryProp]);
      } else if (this[prop]) {
        entry[entryProp] = this._ensureTransitionObject(this[prop]);
      }

      return entry;
    },
    notifyPageMounted: function notifyPageMounted(pageVm) {
      var this$1 = this;
      var options = {
        backstackVisible: this.backstackVisible,
        clearHistory: this.clearHistory,
        create: function create() {
          return pageVm.$el.nativeView;
        }
      };
      this.$nextTick(function () {
        this$1.navigate(options);
      });
    },
    navigate: function navigate(entry, back) {
      var this$1 = this;
      if (back === void 0) back = false;

      var frame = this._getFrame();

      if (back) {
        return frame.goBack(entry);
      } // resolve the page from the entry and attach a navigatedTo listener
      // to fire the frame events


      var page = entry.create();
      page.once('navigatedTo', function () {
        this$1.$emit('navigated', entry);
      });

      var handler = function handler(args) {
        if (args.isBackNavigation) {
          page.off('navigatedFrom', handler);
          this$1.$emit('navigatedBack', entry);
        }
      };

      page.on('navigatedFrom', handler);

      entry.create = function () {
        return page;
      };

      this._composeTransition(entry);

      frame.navigate(entry);
    },
    back: function back(backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      this.navigate(backstackEntry, true);
    }
  }
};
var ios = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (__webpack_require__("tns-core-modules/platform").isIOS) {
      return children;
    }
  }
};
var VUE_VIEW = '__vueVNodeRef__';
var tid = 0;
var vTemplate = {
  props: {
    name: {
      type: String
    },
    if: {
      type: String
    }
  },
  mounted: function mounted() {
    if (!this.$scopedSlots.default) {
      return;
    }

    this.$templates = this.$el.parentNode.$templates = this.$parent.$templates = this.$parent.$templates || new TemplateBag();
    this.$templates.registerTemplate(this.$props.name || (this.$props.if ? "v-template-" + tid++ : 'default'), this.$props.if, this.$scopedSlots.default);
  },
  render: function render(h) {}
};

var TemplateBag = function TemplateBag() {
  this._templateMap = new Map();
};

var prototypeAccessors$1 = {
  selectorFn: {
    configurable: true
  }
};

TemplateBag.prototype.registerTemplate = function registerTemplate(name, condition, scopedFn) {
  this._templateMap.set(name, {
    scopedFn: scopedFn,
    conditionFn: this.getConditionFn(condition),
    keyedTemplate: new VueKeyedTemplate(name, scopedFn)
  });
};

prototypeAccessors$1.selectorFn.get = function () {
  var self = this;
  return function templateSelectorFn(item) {
    var iterator = self._templateMap.entries();

    var curr;

    while (curr = iterator.next().value) {
      var name = curr[0];
      var conditionFn = curr[1].conditionFn;

      try {
        if (conditionFn(item)) {
          return name;
        }
      } catch (err) {}
    }

    return 'default';
  };
};

TemplateBag.prototype.getConditionFn = function getConditionFn(condition) {
  return new Function('ctx', "with(ctx) { return !!(" + condition + ") }");
};

TemplateBag.prototype.getKeyedTemplate = function getKeyedTemplate(name) {
  return this._templateMap.get(name).keyedTemplate;
};

TemplateBag.prototype.patchTemplate = function patchTemplate(name, context, oldVnode) {
  var vnode = this._templateMap.get(name).scopedFn(context); // in 2.6 scopedFn returns an array!


  if (Array.isArray(vnode)) {
    vnode = vnode[0];
  }

  var nativeView = patch(oldVnode, vnode).nativeView;
  nativeView[VUE_VIEW] = vnode;
  return nativeView;
};

TemplateBag.prototype.getAvailable = function getAvailable() {
  return Array.from(this._templateMap.keys());
};

TemplateBag.prototype.getKeyedTemplates = function getKeyedTemplates() {
  return Array.from(this._templateMap.values()).map(function (ref) {
    var keyedTemplate = ref.keyedTemplate;
    return keyedTemplate;
  });
};

Object.defineProperties(TemplateBag.prototype, prototypeAccessors$1);

var VueKeyedTemplate = function VueKeyedTemplate(key, scopedFn) {
  this._key = key;
  this._scopedFn = scopedFn;
};

var prototypeAccessors$1$1 = {
  key: {
    configurable: true
  }
};

prototypeAccessors$1$1.key.get = function () {
  return this._key;
};

VueKeyedTemplate.prototype.createView = function createView() {
  // we are returning null because we don't have the data here
  // the view will be created in the `patchTemplate` method above.
  // see https://github.com/nativescript-vue/nativescript-vue/issues/229#issuecomment-390330474
  return null;
};

Object.defineProperties(VueKeyedTemplate.prototype, prototypeAccessors$1$1);
var listView = {
  props: {
    items: {
      type: [Array, Object],
      validator: function validator(val) {
        var ObservableArray = __webpack_require__("tns-core-modules/data/observable-array").ObservableArray;

        return Array.isArray(val) || val instanceof ObservableArray;
      },
      required: true
    },
    '+alias': {
      type: String,
      default: 'item'
    },
    '+index': {
      type: String
    }
  },
  template: "\n    <NativeListView\n      ref=\"listView\"\n      :items=\"items\"\n      v-bind=\"$attrs\"\n      v-on=\"listeners\"\n      @itemTap=\"onItemTap\"\n      @itemLoading=\"onItemLoading\"\n    >\n      <slot />\n    </NativeListView>\n  ",
  watch: {
    items: {
      handler: function handler(newVal) {
        this.$refs.listView.setAttribute('items', newVal);
        this.refresh();
      },
      deep: true
    }
  },
  created: function created() {
    // we need to remove the itemTap handler from a clone of the $listeners
    // object because we are emitting the event ourselves with added data.
    var listeners = extend({}, this.$listeners);
    delete listeners.itemTap;
    this.listeners = listeners;
    this.getItemContext = getItemContext.bind(this);
  },
  mounted: function mounted() {
    var this$1 = this;

    if (!this.$templates) {
      return;
    }

    this.$refs.listView.setAttribute('_itemTemplatesInternal', this.$templates.getKeyedTemplates());
    this.$refs.listView.setAttribute('_itemTemplateSelector', function (item, index) {
      return this$1.$templates.selectorFn(this$1.getItemContext(item, index));
    });
  },
  methods: {
    onItemTap: function onItemTap(args) {
      this.$emit('itemTap', extend({
        item: this.getItem(args.index)
      }, args));
    },
    onItemLoading: function onItemLoading(args) {
      if (!this.$templates) {
        return;
      }

      var index = args.index;
      var items = args.object.items;
      var currentItem = this.getItem(index);

      var name = args.object._itemTemplateSelector(currentItem, index, items);

      var context = this.getItemContext(currentItem, index);
      var oldVnode = args.view && args.view[VUE_VIEW];
      args.view = this.$templates.patchTemplate(name, context, oldVnode);
    },
    refresh: function refresh() {
      this.$refs.listView.nativeView.refresh();
    },
    getItem: function getItem(idx) {
      return typeof this.items.getItem === 'function' ? this.items.getItem(idx) : this.items[idx];
    }
  }
};

function getItemContext(item, index, alias, index_alias) {
  var obj;
  if (alias === void 0) alias = this.$props['+alias'];
  if (index_alias === void 0) index_alias = this.$props['+index'];
  return obj = {}, obj[alias] = item, obj[index_alias || '$index'] = index, obj.$even = index % 2 === 0, obj.$odd = index % 2 !== 0, obj;
}

var PAGE_REF = '__vuePageRef__';
var page = {
  render: function render(h) {
    return h('NativePage', {
      attrs: this.$attrs,
      on: this.$listeners
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$el.nativeView[PAGE_REF] = this;

    var frame = this._findParentFrame();

    if (frame) {
      frame.notifyPageMounted(this);
    }

    var handler = function handler(e) {
      if (e.isBackNavigation) {
        this$1.$el.nativeView.off('navigatedFrom', handler);
        this$1.$parent.$destroy();
      }
    };

    this.$el.nativeView.on('navigatedFrom', handler); // ensure that the parent vue instance is destroyed when the
    // page is disposed (clearHistory: true for example)

    var dispose = this.$el.nativeView.disposeNativeView;

    this.$el.nativeView.disposeNativeView = function () {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      this$1.$parent.$destroy();
      dispose.call(this$1.$el.nativeView, args);
    };
  },
  methods: {
    _findParentFrame: function _findParentFrame() {
      var frame = this.$parent;

      while (frame && frame.$options.name !== 'Frame') {
        frame = frame.$parent;
      }

      return frame;
    }
  }
};
var tabView = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabView', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTab: function registerTab(tabView) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabView]));
    }
  }
};
var tabViewItem = {
  template: "<NativeTabViewItem><slot /></NativeTabViewItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabViewItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTab(_nativeView);
  }
};
var bottomNavigation = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeBottomNavigation', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTabStrip: function registerTabStrip(tabStrip) {
      this.$el.setAttribute('tabStrip', tabStrip);
    },
    registerTabContentItem: function registerTabContentItem(tabContentItem) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabContentItem]));
    }
  }
};
var tabs = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabs', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTabStrip: function registerTabStrip(tabStrip) {
      this.$el.setAttribute('tabStrip', tabStrip);
    },
    registerTabContentItem: function registerTabContentItem(tabContentItem) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabContentItem]));
    }
  }
};
var tabStrip = {
  render: function render(h) {
    return h('NativeTabStrip', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var _nativeView = this.$el.nativeView;
    this.$parent.registerTabStrip(_nativeView);
  },
  methods: {
    registerTabStripItem: function registerTabStripItem(tabStripItem) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabStripItem]));
    }
  }
};
var tabStripItem = {
  template: "<NativeTabStripItem><slot /></NativeTabStripItem>",
  mounted: function mounted() {
    var _nativeView = this.$el.nativeView;
    this.$parent.registerTabStripItem(_nativeView);
  }
};
var tabContentItem = {
  template: "<NativeTabContentItem><slot /></NativeTabContentItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabContentItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTabContentItem(_nativeView);
  }
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
var elementMap = {};
var nativeRegExp = /Native/gi;
var dashRegExp = /-/g;
var defaultViewMeta = {
  skipAddToDom: false,
  isUnaryTag: false,
  tagNamespace: '',
  canBeLeftOpenTag: false,
  model: null,
  component: null
};

function normalizeElementName(elementName) {
  return "native" + elementName.replace(nativeRegExp, '').replace(dashRegExp, '').toLowerCase();
}

function registerElement(elementName, resolver, meta) {
  var normalizedName = normalizeElementName(elementName);
  meta = Object.assign({}, defaultViewMeta, meta);

  if (elementMap[normalizedName]) {
    throw new Error("Element for " + elementName + " already registered.");
  }

  if (!meta.component) {
    // if no Vue component is passed, wrap the simpler vue component
    // which bind the events and attributes to the NS one
    meta.component = {
      functional: true,
      model: meta.model,
      render: function render(h, ref) {
        var data = ref.data;
        var children = ref.children;
        return h(normalizedName, data, children);
      }
    };
  }

  meta.component.name = elementName;
  var entry = {
    resolver: resolver,
    meta: meta
  };
  elementMap[normalizedName] = entry;
}

function getElementMap() {
  return elementMap;
}

function getViewClass(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var entry = elementMap[normalizedName];

  if (!entry) {
    throw new TypeError("No known component for element " + elementName + ".");
  }

  try {
    return entry.resolver();
  } catch (e) {
    throw new TypeError("Could not load view for: " + elementName + ". " + e);
  }
}

function getViewMeta(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var meta = defaultViewMeta;
  var entry = elementMap[normalizedName];

  if (entry && entry.meta) {
    meta = entry.meta;
  }

  return meta;
}

function isKnownView(elementName) {
  return elementMap[normalizeElementName(elementName)];
}

registerElement('ActionBar', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").ActionBar;
}, {
  removeChild: function removeChild(parent, child) {
    try {
      parent.nativeView._removeView(child.nativeView);
    } catch (e) {// ignore exception - child is likely already removed/replaced
      // fixes #76
    }
  },
  component: actionBar
});
registerElement('ActionItem', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").ActionItem;
});
registerElement('android', null, {
  component: android
});
registerElement('ios', null, {
  component: ios
});
registerElement('ListView', function () {
  return __webpack_require__("tns-core-modules/ui/list-view").ListView;
}, {
  component: listView
});
registerElement('NavigationButton', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").NavigationButton;
});
registerElement('TabView', function () {
  return __webpack_require__("tns-core-modules/ui/tab-view").TabView;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabView
});
registerElement('TabViewItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-view").TabViewItem;
}, {
  skipAddToDom: true,
  component: tabViewItem
});
registerElement('BottomNavigation', function () {
  return __webpack_require__("tns-core-modules/ui/bottom-navigation").BottomNavigation;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: bottomNavigation
});
registerElement('Tabs', function () {
  return __webpack_require__("tns-core-modules/ui/tabs").Tabs;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabs
});
registerElement('TabStrip', function () {
  return __webpack_require__("tns-core-modules/ui/tab-navigation-base/tab-strip").TabStrip;
}, {
  skipAddToDom: true,
  component: tabStrip
});
registerElement('TabStripItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-navigation-base/tab-strip-item").TabStripItem;
}, {
  skipAddToDom: true,
  component: tabStripItem
});
registerElement('TabContentItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-navigation-base/tab-content-item").TabContentItem;
}, {
  skipAddToDom: true,
  component: tabContentItem
});
registerElement('transition', null, {
  component: Transition
});
registerElement('v-template', null, {
  component: vTemplate
}); // NS components which uses the automatic registerElement Vue wrapper
// as they do not need any special logic

registerElement('Label', function () {
  return __webpack_require__("tns-core-modules/ui/label").Label;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('DatePicker', function () {
  return __webpack_require__("tns-core-modules/ui/date-picker").DatePicker;
}, {
  model: {
    prop: 'date',
    event: 'dateChange'
  }
});
registerElement('AbsoluteLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/absolute-layout").AbsoluteLayout;
});
registerElement('ActivityIndicator', function () {
  return __webpack_require__("tns-core-modules/ui/activity-indicator").ActivityIndicator;
});
registerElement('Border', function () {
  return __webpack_require__("tns-core-modules/ui/border").Border;
});
registerElement('Button', function () {
  return __webpack_require__("tns-core-modules/ui/button").Button;
});
registerElement('ContentView', function () {
  return __webpack_require__("tns-core-modules/ui/content-view").ContentView;
});
registerElement('DockLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/dock-layout").DockLayout;
});
registerElement('GridLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/grid-layout").GridLayout;
});
registerElement('HtmlView', function () {
  return __webpack_require__("tns-core-modules/ui/html-view").HtmlView;
});
registerElement('Image', function () {
  return __webpack_require__("tns-core-modules/ui/image").Image;
});
registerElement('img', function () {
  return __webpack_require__("tns-core-modules/ui/image").Image;
});
registerElement('ListPicker', function () {
  return __webpack_require__("tns-core-modules/ui/list-picker").ListPicker;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('Page', function () {
  return __webpack_require__("tns-core-modules/ui/page").Page;
}, {
  skipAddToDom: true,
  component: page
});
registerElement('Placeholder', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
});
registerElement('Progress', function () {
  return __webpack_require__("tns-core-modules/ui/progress").Progress;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('ProxyViewContainer', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}); // registerElement(
//   'Repeater',
//   () => require('tns-core-modules/ui/repeater').Repeater
// )

registerElement('ScrollView', function () {
  return __webpack_require__("tns-core-modules/ui/scroll-view").ScrollView;
});
registerElement('SearchBar', function () {
  return __webpack_require__("tns-core-modules/ui/search-bar").SearchBar;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('SegmentedBar', function () {
  return __webpack_require__("tns-core-modules/ui/segmented-bar").SegmentedBar;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('SegmentedBarItem', function () {
  return __webpack_require__("tns-core-modules/ui/segmented-bar").SegmentedBarItem;
});
registerElement('Slider', function () {
  return __webpack_require__("tns-core-modules/ui/slider").Slider;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('StackLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/stack-layout").StackLayout;
});
registerElement('FlexboxLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/flexbox-layout").FlexboxLayout;
});
registerElement('Switch', function () {
  return __webpack_require__("tns-core-modules/ui/switch").Switch;
}, {
  model: {
    prop: 'checked',
    event: 'checkedChange'
  }
});
registerElement('TextField', function () {
  return __webpack_require__("tns-core-modules/ui/text-field").TextField;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TextView', function () {
  return __webpack_require__("tns-core-modules/ui/text-view").TextView;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TimePicker', function () {
  return __webpack_require__("tns-core-modules/ui/time-picker").TimePicker;
}, {
  model: {
    prop: 'time',
    event: 'timeChange'
  }
});
registerElement('WebView', function () {
  return __webpack_require__("tns-core-modules/ui/web-view").WebView;
});
registerElement('WrapLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/wrap-layout").WrapLayout;
});
registerElement('FormattedString', function () {
  return __webpack_require__("tns-core-modules/text/formatted-string").FormattedString;
});
registerElement('Span', function () {
  return __webpack_require__("tns-core-modules/text/span").Span;
});
registerElement('DetachedContainer', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('DetachedText', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
}, {
  skipAddToDom: true
});
registerElement('Comment', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
});
registerElement('Document', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('Frame', function () {
  return __webpack_require__("tns-core-modules/ui/frame").Frame;
}, {
  insertChild: function insertChild(parentNode, childNode, atIndex) {// if (normalizeElementName(childNode.tagName) === 'nativepage') {
    // parentNode.nativeView.navigate({ create: () => childNode.nativeView })
    // }
  },
  component: frame
});
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};

function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
}

var isPlainObject$1 = function isPlainObject(o) {
  var ctor, prot;

  if (isObjectObject(o) === false) {
    return false;
  } // If has modified constructor


  ctor = o.constructor;

  if (typeof ctor !== 'function') {
    return false;
  } // If has modified prototype


  prot = ctor.prototype;

  if (isObjectObject(prot) === false) {
    return false;
  } // If constructor does not have an Object-specific method


  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  } // Most likely a plain Object


  return true;
};

function set$1(target, path, value, options) {
  if (!isObject$2(target)) {
    return target;
  }

  var opts = options || {};
  var isArray = Array.isArray(path);

  if (!isArray && typeof path !== 'string') {
    return target;
  }

  var merge = opts.merge;

  if (merge && typeof merge !== 'function') {
    merge = Object.assign;
  }

  var keys = isArray ? path : split(path, opts);
  var len = keys.length;
  var orig = target;

  if (!options && keys.length === 1) {
    result(target, keys[0], value, merge);
    return target;
  }

  for (var i = 0; i < len; i++) {
    var prop = keys[i];

    if (!isObject$2(target[prop])) {
      target[prop] = {};
    }

    if (i === len - 1) {
      result(target, prop, value, merge);
      break;
    }

    target = target[prop];
  }

  return orig;
}

function result(target, path, value, merge) {
  if (merge && isPlainObject$1(target[path]) && isPlainObject$1(value)) {
    target[path] = merge({}, target[path], value);
  } else {
    target[path] = value;
  }
}

function split(path, options) {
  var id = createKey(path, options);

  if (set$1.memo[id]) {
    return set$1.memo[id];
  }

  var char = options && options.separator ? options.separator : '.';
  var keys = [];
  var res = [];

  if (options && typeof options.split === 'function') {
    keys = options.split(path);
  } else {
    keys = path.split(char);
  }

  for (var i = 0; i < keys.length; i++) {
    var prop = keys[i];

    while (prop && prop.slice(-1) === '\\' && keys[i + 1]) {
      prop = prop.slice(0, -1) + char + keys[++i];
    }

    res.push(prop);
  }

  set$1.memo[id] = res;
  return res;
}

function createKey(pattern, options) {
  var id = pattern;

  if (typeof options === 'undefined') {
    return id + '';
  }

  var keys = Object.keys(options);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    id += ';' + key + '=' + String(options[key]);
  }

  return id;
}

function isObject$2(val) {
  switch (typeof val) {
    case 'null':
      return false;

    case 'object':
      return true;

    case 'function':
      return true;

    default:
      {
        return false;
      }
  }
}

set$1.memo = {};
var setValue = set$1;

function isView(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/core/view").View;
}

function isLayout(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/layouts/layout-base").LayoutBase;
}

function isContentView(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/content-view").ContentView;
}

function insertChild(parentNode, childNode, atIndex) {
  if (atIndex === void 0) atIndex = -1;

  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.insertChild === 'function') {
    return parentNode.meta.insertChild(parentNode, childNode, atIndex);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    if (childView.parent === parentView) {
      var index = parentView.getChildIndex(childView);

      if (index !== -1) {
        parentView.removeChild(childView);
      }
    }

    if (atIndex !== -1) {
      parentView.insertChild(childView, atIndex);
    } else {
      parentView.addChild(childView);
    }
  } else if (isContentView(parentView)) {
    if (childNode.nodeType === 8) {
      parentView._addView(childView, atIndex);
    } else {
      parentView.content = childView;
    }
  } else if (parentView && parentView._addChildFromBuilder) {
    parentView._addChildFromBuilder(childNode._nativeView.constructor.name, childView);
  }
}

function removeChild(parentNode, childNode) {
  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.removeChild === 'function') {
    return parentNode.meta.removeChild(parentNode, childNode);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    parentView.removeChild(childView);
  } else if (isContentView(parentView)) {
    if (parentView.content === childView) {
      parentView.content = null;
    }

    if (childNode.nodeType === 8) {
      parentView._removeView(childView);
    }
  } else if (isView(parentView)) {
    parentView._removeView(childView);
  }
}

var XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);

var ViewNode = function ViewNode() {
  this.nodeType = null;
  this._tagName = null;
  this.parentNode = null;
  this.childNodes = [];
  this.prevSibling = null;
  this.nextSibling = null;
  this._ownerDocument = null;
  this._nativeView = null;
  this._meta = null;
  /* istanbul ignore next
   * make vue happy :)
   */

  this.hasAttribute = this.removeAttribute = function () {
    return false;
  };
};

var prototypeAccessors$2 = {
  tagName: {
    configurable: true
  },
  firstChild: {
    configurable: true
  },
  lastChild: {
    configurable: true
  },
  nativeView: {
    configurable: true
  },
  meta: {
    configurable: true
  },
  ownerDocument: {
    configurable: true
  }
};
/* istanbul ignore next */

ViewNode.prototype.toString = function toString() {
  return this.constructor.name + "(" + this.tagName + ")";
};

prototypeAccessors$2.tagName.set = function (name) {
  this._tagName = normalizeElementName(name);
};

prototypeAccessors$2.tagName.get = function () {
  return this._tagName;
};

prototypeAccessors$2.firstChild.get = function () {
  return this.childNodes.length ? this.childNodes[0] : null;
};

prototypeAccessors$2.lastChild.get = function () {
  return this.childNodes.length ? this.childNodes[this.childNodes.length - 1] : null;
};

prototypeAccessors$2.nativeView.get = function () {
  return this._nativeView;
};

prototypeAccessors$2.nativeView.set = function (view) {
  if (this._nativeView) {
    throw new Error("Can't override native view.");
  }

  this._nativeView = view;
};

prototypeAccessors$2.meta.get = function () {
  if (this._meta) {
    return this._meta;
  }

  return this._meta = getViewMeta(this.tagName);
};
/* istanbul ignore next */


prototypeAccessors$2.ownerDocument.get = function () {
  if (this._ownerDocument) {
    return this._ownerDocument;
  }

  var el = this;

  while ((el = el.parentNode).nodeType !== 9) {// do nothing
  }

  return this._ownerDocument = el;
};

ViewNode.prototype.getAttribute = function getAttribute(key) {
  return this.nativeView[key];
};
/* istanbul ignore next */


ViewNode.prototype.setAttribute = function setAttribute(key, value) {
  var ref = __webpack_require__("tns-core-modules/platform");

  var isAndroid = ref.isAndroid;
  var isIOS = ref.isIOS;
  var nv = this.nativeView;

  try {
    if (XML_ATTRIBUTES.indexOf(key) !== -1) {
      nv[key] = value;
    } else {
      // detect expandable attrs for boolean values
      // See https://vuejs.org/v2/guide/components-props.html#Passing-a-Boolean
      if (__webpack_require__("tns-core-modules/utils/types").isBoolean(nv[key]) && value === '') {
        value = true;
      }

      if (isAndroid && key.startsWith('android:')) {
        setValue(nv, key.substr(8), value);
      } else if (isIOS && key.startsWith('ios:')) {
        setValue(nv, key.substr(4), value);
      } else if (key.endsWith('.decode')) {
        setValue(nv, key.slice(0, -7), __webpack_require__("tns-core-modules/xml").XmlParser._dereferenceEntities(value));
      } else {
        setValue(nv, key, value);
      }
    }
  } catch (e) {// ignore
  }
};
/* istanbul ignore next */


ViewNode.prototype.setStyle = function setStyle(property, value) {
  if (!(value = value.trim()).length) {
    return;
  }

  if (property.endsWith('Align')) {
    // NativeScript uses Alignment instead of Align, this ensures that text-align works
    property += 'ment';
  }

  this.nativeView.style[property] = value;
};
/* istanbul ignore next */


ViewNode.prototype.setText = function setText(text) {
  if (this.nodeType === 3) {
    this.parentNode.setText(text);
  } else {
    this.setAttribute('text', text);
  }
};
/* istanbul ignore next */


ViewNode.prototype.addEventListener = function addEventListener(event, handler) {
  this.nativeView.on(event, handler);
};
/* istanbul ignore next */


ViewNode.prototype.removeEventListener = function removeEventListener(event) {
  this.nativeView.off(event);
};

ViewNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
  if (!childNode) {
    throw new Error("Can't insert child.");
  } // in some rare cases insertBefore is called with a null referenceNode
  // this makes sure that it get's appended as the last child


  if (!referenceNode) {
    return this.appendChild(childNode);
  }

  if (referenceNode.parentNode !== this) {
    throw new Error("Can't insert child, because the reference node has a different parent.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't insert child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  var index = this.childNodes.indexOf(referenceNode);
  childNode.parentNode = this;
  childNode.nextSibling = referenceNode;
  childNode.prevSibling = this.childNodes[index - 1];
  referenceNode.prevSibling = childNode;
  this.childNodes.splice(index, 0, childNode);
  insertChild(this, childNode, index);
};

ViewNode.prototype.appendChild = function appendChild(childNode) {
  if (!childNode) {
    throw new Error("Can't append child.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't append child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  childNode.parentNode = this;

  if (this.lastChild) {
    childNode.prevSibling = this.lastChild;
    this.lastChild.nextSibling = childNode;
  }

  this.childNodes.push(childNode);
  insertChild(this, childNode, this.childNodes.length - 1);
};

ViewNode.prototype.removeChild = function removeChild$1(childNode) {
  if (!childNode) {
    throw new Error("Can't remove child.");
  }

  if (!childNode.parentNode) {
    throw new Error("Can't remove child, because it has no parent.");
  }

  if (childNode.parentNode !== this) {
    throw new Error("Can't remove child, because it has a different parent.");
  }

  childNode.parentNode = null;

  if (childNode.prevSibling) {
    childNode.prevSibling.nextSibling = childNode.nextSibling;
  }

  if (childNode.nextSibling) {
    childNode.nextSibling.prevSibling = childNode.prevSibling;
  } // reset the prevSibling and nextSibling. If not, a keep-alived component will
  // still have a filled nextSibling attribute so vue will not
  // insert the node again to the parent. See #220


  childNode.prevSibling = null;
  childNode.nextSibling = null;
  this.childNodes = this.childNodes.filter(function (node) {
    return node !== childNode;
  });
  removeChild(this, childNode);
};

Object.defineProperties(ViewNode.prototype, prototypeAccessors$2);
var VUE_ELEMENT_REF = '__vue_element_ref__';

var ElementNode = /*@__PURE__*/function (ViewNode) {
  function ElementNode(tagName) {
    ViewNode.call(this);
    this.nodeType = 1;
    this.tagName = tagName;
    var viewClass = getViewClass(tagName);
    this._nativeView = new viewClass();
    this._nativeView[VUE_ELEMENT_REF] = this;
  }

  if (ViewNode) ElementNode.__proto__ = ViewNode;
  ElementNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  ElementNode.prototype.constructor = ElementNode;

  ElementNode.prototype.appendChild = function appendChild(childNode) {
    ViewNode.prototype.appendChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
    ViewNode.prototype.insertBefore.call(this, childNode, referenceNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.removeChild = function removeChild(childNode) {
    ViewNode.prototype.removeChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText('');
    }
  };

  return ElementNode;
}(ViewNode);

var CommentNode = /*@__PURE__*/function (ElementNode) {
  function CommentNode(text) {
    ElementNode.call(this, 'comment');
    this.nodeType = 8;
    this.text = text;
  }

  if (ElementNode) CommentNode.__proto__ = ElementNode;
  CommentNode.prototype = Object.create(ElementNode && ElementNode.prototype);
  CommentNode.prototype.constructor = CommentNode;
  return CommentNode;
}(ElementNode);

var TextNode = /*@__PURE__*/function (ViewNode) {
  function TextNode(text) {
    ViewNode.call(this);
    this.nodeType = 3;
    this.text = text;
    this._meta = {
      skipAddToDom: true
    };
  }

  if (ViewNode) TextNode.__proto__ = ViewNode;
  TextNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  TextNode.prototype.constructor = TextNode;

  TextNode.prototype.setText = function setText(text) {
    this.text = text;
    this.parentNode.setText(text);
  };

  return TextNode;
}(ViewNode);

var DocumentNode = /*@__PURE__*/function (ViewNode) {
  function DocumentNode() {
    ViewNode.call(this);
    this.nodeType = 9;
    this.documentElement = new ElementNode('document'); // make static methods accessible via this

    this.createComment = this.constructor.createComment;
    this.createElement = this.constructor.createElement;
    this.createElementNS = this.constructor.createElementNS;
    this.createTextNode = this.constructor.createTextNode;
  }

  if (ViewNode) DocumentNode.__proto__ = ViewNode;
  DocumentNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  DocumentNode.prototype.constructor = DocumentNode;

  DocumentNode.createComment = function createComment(text) {
    return new CommentNode(text);
  };

  DocumentNode.createElement = function createElement(tagName) {
    return new ElementNode(tagName);
  };

  DocumentNode.createElementNS = function createElementNS(namespace, tagName) {
    return new ElementNode(namespace + ':' + tagName);
  };

  DocumentNode.createTextNode = function createTextNode(text) {
    return new TextNode(text);
  };

  return DocumentNode;
}(ViewNode);

var isReservedTag = makeMap('template', true);

var _Vue;

function setVue(Vue) {
  _Vue = Vue;
}

var canBeLeftOpenTag = function canBeLeftOpenTag(el) {
  return getViewMeta(el).canBeLeftOpenTag;
};

var isUnaryTag = function isUnaryTag(el) {
  return getViewMeta(el).isUnaryTag;
};

function mustUseProp() {// console.log('mustUseProp')
}

function getTagNamespace(el) {
  return getViewMeta(el).tagNamespace;
}

function isUnknownElement(el) {
  return !isKnownView(el);
}

var VUE_VERSION = global.process.env.VUE_VERSION || '2.6.10';
var NS_VUE_VERSION = global.process.env.NS_VUE_VERSION || '2.4.0';
var infoTrace = once(function () {
  console.log("NativeScript-Vue has \"Vue.config.silent\" set to true, to see output logs set it to false.");
});

function trace(message) {
  if (_Vue && _Vue.config.silent) {
    return infoTrace();
  }

  console.log("{NSVue (Vue: " + VUE_VERSION + " | NSVue: " + NS_VUE_VERSION + ")} -> " + message);
}

var namespaceMap = {};

function createElement$1(tagName, vnode) {
  trace("CreateElement(" + tagName + ")");
  return DocumentNode.createElement(tagName);
}

function createElementNS(namespace, tagName) {
  trace("CreateElementNS(" + namespace + "#" + tagName + ")");
  return DocumentNode.createElementNS(namespace, tagName);
}

function createTextNode(text) {
  trace("CreateTextNode(" + text + ")");
  return DocumentNode.createTextNode(text);
}

function createComment(text) {
  trace("CreateComment(" + text + ")");
  return DocumentNode.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  trace("InsertBefore(" + parentNode + ", " + newNode + ", " + referenceNode + ")");
  return parentNode.insertBefore(newNode, referenceNode);
}

function removeChild$1(node, child) {
  trace("RemoveChild(" + node + ", " + child + ")");
  return node.removeChild(child);
}

function appendChild(node, child) {
  trace("AppendChild(" + node + ", " + child + ")");
  return node.appendChild(child);
}

function parentNode(node) {
  trace("ParentNode(" + node + ") -> " + node.parentNode);
  return node.parentNode;
}

function nextSibling(node) {
  trace("NextSibling(" + node + ") -> " + node.nextSibling);
  return node.nextSibling;
}

function tagName(elementNode) {
  trace("TagName(" + elementNode + ") -> " + elementNode.tagName);
  return elementNode.tagName;
}

function setTextContent(node, text) {
  trace("SetTextContent(" + node + ", " + text + ")");
  node.setText(text);
}

function setAttribute(node, key, val) {
  trace("SetAttribute(" + node + ", " + key + ", " + val + ")");
  node.setAttribute(key, val);
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  namespaceMap: namespaceMap,
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild$1,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute,
  setStyleScope: setStyleScope
});
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
var he = {
  decode: decode
};

function decode(html) {
  // todo?
  return html;
}
/*  */


var isUnaryTag$1 = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag$1 = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + unicodeRegExp.source + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag = options.isUnaryTag || no;
  var canBeLeftOpenTag = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if ( true && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"", {
          start: index + html.length
        });
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };

      if ( true && options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs,
        start: match.start,
        end: match.end
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ( true && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.", {
            start: stack[i].start,
            end: stack[i].end
          });
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */

/* eslint-disable no-unused-vars */


function baseWarn(msg, range) {
  console.error("[Vue compiler]: " + msg);
}
/* eslint-enable no-unused-vars */


function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
}

function addAttr(el, name, value, range, dynamic) {
  var attrs = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs.push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({
    name: name,
    value: value
  }, range));
}

function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? "_p(" + name + ",\"" + symbol + "\")" : symbol + name; // mark the event as captured
}

function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if ( true && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.', range);
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;

  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({
    value: value.trim(),
    dynamic: dynamic
  }, range);

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[':' + name] || el.rawAttrsMap['v-bind:' + name] || el.rawAttrsMap[name];
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}

function getAndRemoveAttrByRegex(el, name) {
  var list = el.attrsList;

  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];

    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}

function rangeSetItem(item, range) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }

    if (range.end != null) {
      item.end = range.end;
    }
  }

  return item;
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;
var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
var slotRE = /^v-slot(:|$)|^#/;
var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;
var invalidAttributeRE = /[\s"'<>\/=]/;
var decodeHTMLCached = cached(he.decode);
var emptySlotScopeToken = "_empty_"; // configurable state

var warn$1;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$1 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;

  maybeComponent = function maybeComponent(el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg, range) {
    if (!warned) {
      warned = true;
      warn$1(msg, range);
    }
  }

  function closeElement(element) {
    trimEndingWhitespace(element);

    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    } // tree management


    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        if (true) {
          checkRootConstraints(element);
        }

        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (true) {
        warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.", {
          start: element.start
        });
      }
    }

    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }

        currentParent.children.push(element);
        element.parent = currentParent;
      }
    } // final children cleanup
    // filter out scoped slots


    element.children = element.children.filter(function (c) {
      return !c.slotScope;
    }); // remove trailing whitespace node again

    trimEndingWhitespace(element); // check pre state

    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace(el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;

      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === ' ') {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints(el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.', {
        start: el.start
      });
    }

    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.', el.rawAttrsMap['v-for']);
    }
  }

  parseHTML(template, {
    warn: warn$1,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start(tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (true) {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }

        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$1("Invalid dynamic argument expression: attribute names cannot contain " + "spaces, quotes, <, >, / or =.", {
              start: attr.start + attr.name.indexOf("["),
              end: attr.start + attr.name.length
            });
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         true && warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.', {
          start: element.start
        });
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;

        if (true) {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end(tag, start, end$1) {
      var element = stack[stack.length - 1]; // pop stack

      stack.length -= 1;
      currentParent = stack[stack.length - 1];

      if ( true && options.outputSourceRange) {
        element.end = end$1;
      }

      closeElement(element);
    },
    chars: function chars(text, start, end) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.', {
              start: start
            });
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.", {
              start: start
            });
          }
        }

        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;

      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }

      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }

        var res;
        var child;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }

        if (child) {
          if ( true && options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }

          children.push(child);
        }
      }
    },
    comment: function comment(text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };

        if ( true && options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }

        currentParent.children.push(child);
      }
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var list = el.attrsList;
  var len = list.length;

  if (len) {
    var attrs = el.attrs = new Array(len);

    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };

      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
  return element;
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (true) {
      if (el.tag === 'template') {
        warn$1("<template> cannot be keyed. Place the key on real elements instead.", getRawBindingAttr(el, 'key'));
      }

      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$1("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.", getRawBindingAttr(el, 'key'), true
          /* tip */
          );
        }
      }
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else if (true) {
      warn$1("Invalid v-for expression: " + exp, el.rawAttrsMap['v-for']);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$1("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.", el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ( true && children[i].text !== ' ') {
        warn$1("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.", children[i]);
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once = getAndRemoveAttr(el, 'v-once');

  if (once != null) {
    el.once = true;
  }
} // handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">


function processSlotContent(el) {
  var slotScope;

  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */

    if ( true && slotScope) {
      warn$1("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", el.rawAttrsMap['scope'], true);
    }

    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
    /* istanbul ignore if */
    if ( true && el.attrsMap['v-for']) {
      warn$1("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", el.rawAttrsMap['slot-scope'], true);
    }

    el.slotScope = slotScope;
  } // slot="xxx"


  var slotTarget = getBindingAttr(el, 'slot');

  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']); // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.

    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  } // 2.6 v-slot syntax


  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding) {
        if (true) {
          if (el.slotTarget || el.slotScope) {
            warn$1("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.parent && !maybeComponent(el.parent)) {
            warn$1("<template v-slot> can only appear at the root level inside " + "the receiving the component", el);
          }
        }

        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding$1) {
        if (true) {
          if (!maybeComponent(el)) {
            warn$1("v-slot can only be used on components or <template>.", slotBinding$1);
          }

          if (el.slotScope || el.slotTarget) {
            warn$1("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.scopedSlots) {
            warn$1("To avoid scope ambiguity, the default slot should also use " + "<template> syntax when there are other named slots.", slotBinding$1);
          }
        } // add the component's children to its default slot


        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken; // remove children as they are returned from scopedSlots now

        el.children = []; // mark el non-plain so data gets generated

        el.plain = false;
      }
    }
  }
}

function getSlotName(binding) {
  var name = binding.name.replace(slotRE, '');

  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (true) {
      warn$1("v-slot shorthand syntax requires a slot name.", binding);
    }
  }

  return dynamicArgRE.test(name) // dynamic [name]
  ? {
    name: name.slice(1, -1),
    dynamic: true
  } // static name
  : {
    name: "\"" + name + "\"",
    dynamic: false
  };
} // handle <slot/> outlets


function processSlotOutlet(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if ( true && el.key) {
      warn$1("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.", getRawBindingAttr(el, 'key'));
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name.replace(dirRE, '')); // support .foo shorthand syntax for the .prop modifier

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        if ( true && value.trim().length === 0) {
          warn$1("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");

            if (!isDynamic) {
              addHandler(el, "update:" + camelize(name), syncGen, null, false, warn$1, list[i]);

              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, "update:" + hyphenate(name), syncGen, null, false, warn$1, list[i]);
              }
            } else {
              // handler w/ dynamic event name
              addHandler(el, "\"update:\"+(" + name + ")", syncGen, null, false, warn$1, list[i], true // dynamic
              );
            }
          }
        }

        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        addHandler(el, name, value, modifiers, false, warn$1, list[i], isDynamic);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;

        if (arg) {
          name = name.slice(0, -(arg.length + 1));

          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }

        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);

        if ( true && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var res = parseText(value, delimiters);

        if (res) {
          warn$1(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.', list[i]);
        }
      }

      addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if ( true && map[attrs[i].name] && !isIE && !isEdge) {
      warn$1('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.", el.rawAttrsMap['v-model']);
    }

    _el = _el.parent;
  }
}
/*  */


var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic$1(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node.static = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);

      if (!child.static) {
        node.static = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);

        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node.for) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";

  for (var name in events) {
    var handlerCode = genHandler(events[name]);

    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }

  staticHandlers = "{" + staticHandlers.slice(0, -1) + "}";

  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + dynamicHandlers.slice(0, -1) + "])";
  } else {
    return prefix + staticHandlers;
  }
}

function genHandler(handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + (isFunctionInvocation ? "return " + handler.value : handler.value) + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : isFunctionInvocation ? "return " + handler.value : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return (// make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" + keys.map(genFilterCode).join('&&') + ")return null;"
  );
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if ( true && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
       true && state.warn("v-once can only be used inside v-for that is keyed. ", el.rawAttrsMap['v-once']);
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ( true && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", el.rawAttrsMap['v-for'], true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:" + genProps(el.attrs) + ",";
  } // DOM props


  if (el.props) {
    data += "domProps:" + genProps(el.props) + ",";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el, el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.

  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + el.tag + "\"," + genProps(el.dynamicAttrs) + ")";
  } // v-bind data wrap


  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:" + (dir.isDynamicArg ? dir.arg : "\"" + dir.arg + "\"") : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if ( true && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.', {
      start: el.start
    });
  }

  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(el, slots, state) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    ;
  }); // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.

  var needsKey = !!el.if; // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.

  if (!needsForceUpdate) {
    var parent = el.parent;

    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent.for) {
        needsForceUpdate = true;
        break;
      }

      if (parent.if) {
        needsKey = true;
      }

      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots).map(function (key) {
    return genScopedSlot(slots[key], state);
  }).join(',');
  return "scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? ",null,false," + hash(generatedSlots) : "") + ")";
}

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true;
    }

    return el.children.some(containsSlotChild);
  }

  return false;
}

function genScopedSlot(el, state) {
  var isLegacySyntax = el.attrsMap['slot-scope'];

  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null");
  }

  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }

  var slotScope = el.slotScope === emptySlotScopeToken ? "" : String(el.slotScope);
  var fn = "function(" + slotScope + "){" + "return " + (el.tag === 'template' ? el.if && isLegacySyntax ? "(" + el.if + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}"; // reverse proxy v-slot without scope on this.$slots

  var reverseProxy = slotScope ? "" : ",proxy:true";
  return "{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}";
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
    return {
      // slot props are camelized
      name: camelize(attr.name),
      value: attr.value,
      dynamic: attr.dynamic
    };
  })) : null;
  var bind = el.attrsMap['v-bind'];

  if ((attrs || bind) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind) {
    res += (attrs ? '' : ',null') + "," + bind;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var staticProps = "";
  var dynamicProps = "";

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);

    if (prop.dynamic) {
      dynamicProps += prop.name + "," + value + ",";
    } else {
      staticProps += "\"" + prop.name + "\":" + value + ",";
    }
  }

  staticProps = "{" + staticProps.slice(0, -1) + "}";

  if (dynamicProps) {
    return "_d(" + staticProps + ",[" + dynamicProps.slice(0, -1) + "])";
  } else {
    return staticProps;
  }
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode(node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          var range = node.rawAttrsMap[name];

          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", warn, range);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", warn, range);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent(exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim(), range);
  }

  checkExpression(exp, text, warn, range);
}

function checkFor(node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier(ident, type, text, warn, range) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      warn("invalid " + type + " \"" + ident + "\" in expression: " + text.trim(), range);
    }
  }
}

function checkExpression(exp, text, warn, range) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      warn("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim(), range);
    } else {
      warn("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
    }
  }
}
/*  */


var range = 2;

function generateCodeFrame(source, start, end) {
  if (start === void 0) start = 0;
  if (end === void 0) end = source.length;
  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];

  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;

    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) {
          continue;
        }

        res.push("" + (j + 1) + repeat$1(" ", 3 - String(j + 1).length) + "|  " + lines[j]);
        var lineLength = lines[j].length;

        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }

          count += lineLength + 1;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function repeat$1(str, n) {
  var result = '';

  if (n > 0) {
    while (true) {
      // eslint-disable-line
      if (n & 1) {
        result += str;
      }

      n >>>= 1;

      if (n <= 0) {
        break;
      }

      str += str;
    }
  }

  return result;
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache


    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    if (true) {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$1("Error compiling template:\n\n" + e.msg + "\n\n" + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
      }

      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) {
            return tip(e.msg, vm);
          });
        } else {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }
    } // turn code into functions


    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function warn(msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if ( true && options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function warn(msg, range, tip) {
            var data = {
              msg: msg
            };

            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }

              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }

            (tip ? tips : errors).push(data);
          };
        } // merge custom modules


        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;
      var compiled = baseCompile(template.trim(), finalOptions);

      if (true) {
        detectErrors(compiled.ast, warn);
      }

      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if ( true && staticClass) {
    var expression = parseText(staticClass, options.delimiters);

    if (expression) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var class_$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};
var normalize$1 = cached(camelize);

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  var ref = parseStaticStyle(staticStyle, options);
  var dynamic = ref.dynamic;
  var styleResult = ref.styleResult;

  if ( true && dynamic) {
    warn("style=\"" + String(staticStyle) + "\": " + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }

  if (!dynamic && styleResult) {
    el.staticStyle = styleResult;
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  } else if (dynamic) {
    el.styleBinding = styleResult;
  }
}

function genData$2(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:" + el.styleBinding + ",";
  }

  return data;
}

function parseStaticStyle(staticStyle, options) {
  // "width: 200px; height: 200px;" -> {width: 200, height: 200}
  // "width: 200px; height: {{y}}" -> {width: 200, height: y}
  var dynamic = false;
  var styleResult = '';

  if (staticStyle) {
    var styleList = staticStyle.trim().split(';').map(function (style) {
      var result = style.trim().split(':');

      if (result.length !== 2) {
        return;
      }

      var key = normalize$1(result[0].trim());
      var value = result[1].trim();
      var dynamicValue = parseText(value, options.delimiters);

      if (dynamicValue) {
        dynamic = true;
        return key + ':' + dynamicValue;
      }

      return key + ':' + JSON.stringify(value);
    }).filter(function (result) {
      return result;
    });

    if (styleList.length) {
      styleResult = '{' + styleList.join(',') + '}';
    }
  }

  return {
    dynamic: dynamic,
    styleResult: styleResult
  };
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

function preTransformNode(el) {
  var vfor;

  if (normalizeElementName(el.tag) === 'nativelistview') {
    vfor = getAndRemoveAttr(el, 'v-for');
    delete el.attrsMap['v-for'];

    if ( true && vfor) {
      warn("The v-for directive is not supported on a " + el.tag + ", " + 'Use the "for" attribute instead. For example, instead of ' + "<" + el.tag + " v-for=\"" + vfor + "\"> use <" + el.tag + " for=\"" + vfor + "\">.");
    }
  }

  var exp = getAndRemoveAttr(el, 'for') || vfor;

  if (!exp) {
    return;
  }

  var res = parseFor(exp);

  if (!res) {
    if (true) {
      warn("Invalid for expression: " + exp);
    }

    return;
  }

  addRawAttr(el, ':items', res.for);
  addRawAttr(el, '+alias', res.alias);

  if (res.iterator1) {
    addRawAttr(el, '+index', res.iterator1);
  }
}

var for_ = {
  preTransformNode: preTransformNode
};

function preTransformNode$1(el) {
  if (el.tag !== 'router-view') {
    return;
  }

  if (normalizeElementName(el.parent.tag) === 'nativeframe') {
    addAttr(el.parent, 'hasRouterView', 'true');
  }
}

var router = {
  preTransformNode: preTransformNode$1
};

function preTransformNode$2(el) {
  if (el.parent && el.parent.tag === 'v-template') {
    var alias = el.parent.parent.attrsMap['+alias'] || 'item';
    var index = el.parent.parent.attrsMap['+index'] || '$index';
    el.slotScope = buildScopeString(alias, index);
  }
}

var vTemplate$1 = {
  preTransformNode: preTransformNode$2
};

function buildScopeString(alias, index) {
  return "{ " + alias + ", " + index + ", $even, $odd }";
} // transforms ~test -> v-view:test


function transformNode$2(el) {
  var attr = Object.keys(el.attrsMap).find(function (attr) {
    return attr.startsWith('~');
  });

  if (attr) {
    var attrName = attr.substr(1);
    var ref = attrName.split('.');
    var arg = ref[0];
    var modifiers = ref.slice(1);
    modifiers = modifiers.reduce(function (mods, mod) {
      mods[mod] = true;
      return mods;
    }, {});
    getAndRemoveAttr(el, attr, true);
    addDirective(el, 'view', "v-view:" + attrName, '', arg, false, modifiers);
  }
}

var view = {
  transformNode: transformNode$2
};
var modules$1 = [class_$1, style$1, vTemplate$1, for_, router, view];

function model(el, dir) {
  if (el.type === 1 && isKnownView(el.tag)) {
    genDefaultModel(el, dir.value, dir.modifiers);
  } else {
    genComponentModel(el, dir.value, dir.modifiers);
  }
}

function genDefaultModel(el, value, modifiers) {
  var ref = modifiers || {};
  var trim = ref.trim;
  var number = ref.number;
  var ref$1 = getViewMeta(el.tag).model;
  var prop = ref$1.prop;
  var event = ref$1.event;
  var valueExpression = "$event.value" + (trim ? '.trim()' : '');

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  addAttr(el, prop, "(" + value + ")");
  addHandler(el, event, code, null, true);
}

var directives$1 = {
  model: model
};
var baseOptions = {
  modules: modules$1,
  directives: directives$1,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  preserveWhitespace: false,
  staticKeys: genStaticKeys(modules$1)
};
var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp$1(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached = cache[key];

  if (cached && (!current || cached.tag !== current.tag)) {
    cached.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.10'; // recursively search for possible transition defined inside the component root

function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    var originalVisibility = el.__vOriginalVisibility = el.getAttribute('visibility') === 'none' ? '' : el.getAttribute('visibility');

    if (value && transition) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.setAttribute('visibility', originalVisibility);
      });
    } else {
      el.setAttribute('visibility', value ? originalVisibility : 'collapsed');
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;

    if (transition) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.setAttribute('visibility', el.__vOriginalVisibility);
        });
      } else {
        leave(vnode, function () {
          el.setAttribute('visibility', 'collapsed');
        });
      }
    } else {
      el.setAttribute('visibility', value ? el.__vOriginalVisibility : 'collapsed');
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.setAttribute('visibility', el.__vOriginalVisibility);
    }
  }
};
var view$1 = {
  inserted: function inserted(el, ref) {
    var arg = ref.arg;
    var modifiers = ref.modifiers;
    var parent = el.parentNode.nativeView;

    if (parent) {
      if (modifiers.array) {
        parent[arg] = (parent[arg] || []).push(el.nativeView);
      } else {
        parent[arg] = el.nativeView;
      }
    }
  }
};
var platformDirectives = {
  show: show,
  view: view$1
}; // Ensure `application` and `frame` modules are loaded

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isUnknownElement = isUnknownElement;
Vue.$document = Vue.prototype.$document = new DocumentNode();
Vue.compile = compileToFunctions;
Vue.registerElement = registerElement;
Object.assign(Vue.options.directives, platformDirectives);
Vue.prototype.__patch__ = patch;

Vue.prototype.$mount = function (el, hydrating) {
  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template && typeof template !== 'string') {
      warn('invalid template option: ' + template, this);
      return this;
    }

    if (template) {
      var ref = compileToFunctions(template, {
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
    }
  }

  return mountComponent(this, el, hydrating);
};

Vue.prototype.$start = function () {
  var self = this;
  var AppConstructor = Vue.extend(this.$options); // register NS components into Vue

  Object.values(getElementMap()).forEach(function (entry) {
    Vue.component(entry.meta.component.name, entry.meta.component);
  });
  application.on(application.launchEvent, function (args) {
    if (self.$el) {
      self.$destroy();
      self = new AppConstructor();
    }

    self.$mount();
    args.root = self.$el.nativeView;
  });
  application.run();
}; // Define a `nativeView` getter in every NS vue instance


Object.defineProperty(Vue.prototype, 'nativeView', {
  get: function get() {
    return this.$el.nativeView;
  }
});

function _findParentModalEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'ModalEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var ModalPlugin = {
  install: function install(Vue) {
    Vue.mixin({
      created: function created() {
        var self = this;
        this.$modal = {
          close: function close(data) {
            var entry = _findParentModalEntry(self);

            if (entry) {
              entry.closeCb(data);
            }
          }
        };
      }
    });

    Vue.prototype.$showModal = function (component, options) {
      var this$1 = this;
      return new Promise(function (resolve) {
        var resolved = false;

        var closeCb = function closeCb(data) {
          if (resolved) {
            return;
          }

          resolved = true;
          resolve(data);
          modalPage.closeModal(); // emitted to show up in devtools
          // for debugging purposes

          navEntryInstance.$emit('modal:close', data);
          navEntryInstance.$destroy();
        }; // build options object with defaults


        options = Object.assign({}, options, {
          context: null,
          closeCallback: closeCb
        });
        var navEntryInstance = new Vue({
          name: 'ModalEntry',
          parent: this$1.$root,
          methods: {
            closeCb: closeCb
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var modalPage = navEntryInstance.$mount().$el.nativeView;
        this$1.$el.nativeView.showModal(modalPage, options);
      });
    };
  }
};

function getFrameInstance(frame) {
  // get the frame that we need to navigate
  // this can be a frame id (String)
  // a Vue ref to a frame
  // a Frame ViewNode
  // or a Frame instance
  if (isObject$1(frame) && isDef(frame.$el)) {
    frame = frame.$el.nativeView;
  } else if (isPrimitive(frame)) {
    frame = __webpack_require__("tns-core-modules/ui/frame").getFrameById(frame);
  } else if (isDef(frame.nativeView)) {
    frame = frame.nativeView;
  } // finally get the component instance for this frame


  return getFrame(frame.id);
}

function findParentNavigationEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'NavigationEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var NavigatorPlugin = {
  install: function install(Vue) {
    Vue.prototype.$navigateBack = function (options, backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      var navEntry = findParentNavigationEntry(this);
      var defaultOptions = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      options = Object.assign({}, defaultOptions, options);
      var frame = getFrameInstance(options.frame);
      frame.back(backstackEntry);
    };

    Vue.prototype.$navigateTo = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        frame: 'default'
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var frame = getFrameInstance(options.frame);
        var navEntryInstance = new Vue({
          name: 'NavigationEntry',
          parent: this$1.$root,
          frame: frame,
          props: {
            frame: {
              default: frame.id
            }
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var page = navEntryInstance.$mount().$el.nativeView;

        var handler = function handler(args) {
          if (args.isBackNavigation) {
            page.off('navigatedFrom', handler);
            navEntryInstance.$destroy();
          }
        };

        page.on('navigatedFrom', handler); // ensure that the navEntryInstance vue instance is destroyed when the
        // page is disposed (clearHistory: true for example)

        var dispose = page.disposeNativeView;

        page.disposeNativeView = function () {
          var args = [],
              len = arguments.length;

          while (len--) {
            args[len] = arguments[len];
          }

          navEntryInstance.$destroy();
          dispose.call(page, args);
        };

        frame.navigate(Object.assign({}, options, {
          create: function create() {
            return page;
          }
        }));
        resolve(page);
      });
    };
  }
};
Vue.config.silent = true;
setVue(Vue);
Vue.use(ModalPlugin);
Vue.use(NavigatorPlugin);
var newLineRegExp = /\\n/g;

console.log = function (log, inspect, Vue) {
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    return log.call.apply(log, [this].concat(Array.prototype.map.call(args, function (arg) {
      return inspect(arg, {
        depth: 2,
        colors: Vue.config.debug,
        showHidden: true
      }).replace(newLineRegExp, '\n');
    })));
  };
}(console.log, utilInspect, Vue);

global.__onLiveSyncCore = function () {
  var frame = __webpack_require__("tns-core-modules/ui/frame").topmost();

  if (frame) {
    if (frame.currentPage && frame.currentPage.modal) {
      frame.currentPage.modal.closeModal();
    }

    if (frame.currentPage) {
      frame.currentPage.addCssFile(__webpack_require__("tns-core-modules/application").getCssFileName());
    }
  }
}; // Fix a rollup problem which does not define
// module.export.default = Vue
// so a `import Vue from 'nativescript-vue'` will
// fail from a Typescript file


Vue.default = Vue;
module.exports = Vue;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/vue-hot-reload-api/dist/index.js":
/***/ (function(module, exports) {

var Vue; // late bind

var version;
var map = Object.create(null);

if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map;
}

var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) {
    return;
  }

  installed = true;
  Vue = vue.__esModule ? vue.default : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify; // compat with < 2.0.0-alpha.7

  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;

  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};
/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */


exports.createRecord = function (id, options) {
  if (map[id]) {
    return;
  }

  var Ctor = null;

  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }

  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  };
};
/**
 * Check if module is recorded
 *
 * @param {String} id
 */


exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined';
};
/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */


function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render;

    options.render = function (h, ctx) {
      var instances = map[id].instances;

      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent);
      }

      return render(h, ctx);
    };
  } else {
    injectHook(options, initHookName, function () {
      var record = map[id];

      if (!record.Ctor) {
        record.Ctor = this.constructor;
      }

      record.instances.push(this);
    });
    injectHook(options, 'beforeDestroy', function () {
      var instances = map[id].instances;
      instances.splice(instances.indexOf(this), 1);
    });
  }
}
/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */


function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

function updateOptions(oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key];
    }
  }

  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1];
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];

  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate();
    });
    return;
  }

  if (typeof options === 'function') {
    options = options.options;
  }

  if (record.Ctor) {
    record.Ctor.options.render = options.render;
    record.Ctor.options.staticRenderFns = options.staticRenderFns;
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render;
      instance.$options.staticRenderFns = options.staticRenderFns; // reset static trees
      // pre 2.5, all static trees are cached together on the instance

      if (instance._staticTrees) {
        instance._staticTrees = [];
      } // 2.5.0


      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = [];
      } // 2.5.3


      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = [];
      } // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update


      var restore = patchScopedSlots(instance);
      instance.$forceUpdate();
      instance.$nextTick(restore);
    });
  } else {
    // functional or no instance created yet
    record.options.render = options.render;
    record.options.staticRenderFns = options.staticRenderFns; // handle functional component re-render

    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options);
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles;

        if (injectStyles) {
          var render = options.render;

          record.options.render = function (h, ctx) {
            injectStyles.call(ctx);
            return render(h, ctx);
          };
        }
      }

      record.options._Ctor = null; // 2.5.3

      if (Array.isArray(record.options.cached)) {
        record.options.cached = [];
      }

      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate();
      });
    }
  }
});
exports.reload = tryWrap(function (id, options) {
  var record = map[id];

  if (options) {
    if (typeof options === 'function') {
      options = options.options;
    }

    makeOptionsHot(id, options);

    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options;
      }

      var newCtor = record.Ctor.super.extend(options); // prevent record.options._Ctor from being overwritten accidentally

      newCtor.options._Ctor = record.options._Ctor;
      record.Ctor.options = newCtor.options;
      record.Ctor.cid = newCtor.cid;
      record.Ctor.prototype = newCtor.prototype;

      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release();
      }
    } else {
      updateOptions(record.options, options);
    }
  }

  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
}); // 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.

function patchScopedSlots(instance) {
  if (!instance._u) {
    return;
  } // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js


  var original = instance._u;

  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true);
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true);
    }
  };

  return function () {
    instance._u = original;
  };
}

/***/ }),

/***/ "../node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9jb2xvci9jb2xvci1jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvY29sb3IvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvY29sb3Iva25vd24tY29sb3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL2Nzcy9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvdXRpbHMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1hY2NvcmRpb24vYWNjb3JkaW9uLmNvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1hY2NvcmRpb24vYWNjb3JkaW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LWFjY29yZGlvbi92dWUvYWNjb3JkaW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LWFjY29yZGlvbi92dWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2htci11cGRhdGUudHMiLCJ3ZWJwYWNrOi8vL2luZGV4LnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LWRldi13ZWJwYWNrL2hvdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9sb2FkLWFwcGxpY2F0aW9uLWNzcy1yZWd1bGFyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LWRldi13ZWJwYWNrL2xvYWQtYXBwbGljYXRpb24tY3NzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LWRldi13ZWJwYWNrL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LXZ1ZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlcyIsInJlcXVpcmUiLCJrbm93bkNvbG9ycyIsInBhcnNlcl8xIiwiU0hBUlAiLCJIRVhfUkVHRVgiLCJDb2xvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZyIsImlzU3RyaW5nIiwiaXNSZ2JPclJnYmEiLCJfYXJnYiIsImFyZ2JGcm9tUmdiT3JSZ2JhIiwiaXNIc2xPckhzbGEiLCJhcmdiRnJvbUhzbE9ySHNsYSIsImlzS25vd25OYW1lIiwiaGV4IiwiZ2V0S25vd25Db2xvciIsIl9uYW1lIiwiX2FyZ2JGcm9tU3RyaW5nIiwidGVzdCIsIl9ub3JtYWxpemVIZXgiLCJFcnJvciIsImlzTnVtYmVyIiwicHJvdG90eXBlIiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImEiLCJfY29tcG9uZW50VG9IZXgiLCJyIiwiZyIsImIiLCJ0b1VwcGVyQ2FzZSIsInVuZGVmaW5lZCIsImNoYXJBdCIsInN1YnN0ciIsImludFZhbCIsInBhcnNlSW50IiwiZXF1YWxzIiwiYXJnYiIsInZhbHVlMSIsInZhbHVlMiIsImlzVmFsaWQiLCJpc051bGxPclVuZGVmaW5lZCIsImNvbXBvbmVudCIsInRvU3RyaW5nIiwiaGV4U3RyIiwiZnJvbUlvc0NvbG9yIiwidG9Mb3dlciIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsInBhcnNlQ29sb3JXaXRoQWxwaGEiLCJwYXJ0cyIsInJlcGxhY2UiLCJ0cmltIiwic3BsaXQiLCJmIiwicyIsInQiLCJNYXRoIiwicm91bmQiLCJwYXJzZUZsb2F0IiwiX2EiLCJoIiwibCIsIl9iIiwiY29udmVydEhTTFRvUkdCQ29sb3IiLCJjb21tb24iLCJfc3VwZXIiLCJfX2V4dGVuZHMiLCJhcHBseSIsIl9pb3MiLCJVSUNvbG9yIiwiYWxsb2MiLCJpbml0V2l0aFJlZEdyZWVuQmx1ZUFscGhhIiwicmdiYSIsIkNHQ29sb3JHZXRDb21wb25lbnRzIiwiQ0dDb2xvciIsIl9hbGxDb2xvcnMiLCJyZWdpc3RlckNvbG9yIiwibmFtZSIsIlRyYW5zcGFyZW50IiwiQWxpY2VCbHVlIiwiQW50aXF1ZVdoaXRlIiwiQXF1YSIsIkFxdWFtYXJpbmUiLCJBenVyZSIsIkJlaWdlIiwiQmlzcXVlIiwiQmxhY2siLCJCbGFuY2hlZEFsbW9uZCIsIkJsdWUiLCJCbHVlVmlvbGV0IiwiQnJvd24iLCJCdXJseVdvb2QiLCJDYWRldEJsdWUiLCJDaGFydHJldXNlIiwiQ2hvY29sYXRlIiwiQ29yYWwiLCJDb3JuZmxvd2VyQmx1ZSIsIkNvcm5zaWxrIiwiQ3JpbXNvbiIsIkN5YW4iLCJEYXJrQmx1ZSIsIkRhcmtDeWFuIiwiRGFya0dvbGRlblJvZCIsIkRhcmtHcmF5IiwiRGFya0dyZWVuIiwiRGFya0toYWtpIiwiRGFya01hZ2VudGEiLCJEYXJrT2xpdmVHcmVlbiIsIkRhcmtPcmFuZ2UiLCJEYXJrT3JjaGlkIiwiRGFya1JlZCIsIkRhcmtTYWxtb24iLCJEYXJrU2VhR3JlZW4iLCJEYXJrU2xhdGVCbHVlIiwiRGFya1NsYXRlR3JheSIsIkRhcmtUdXJxdW9pc2UiLCJEYXJrVmlvbGV0IiwiRGVlcFBpbmsiLCJEZWVwU2t5Qmx1ZSIsIkRpbUdyYXkiLCJEb2RnZXJCbHVlIiwiRmlyZUJyaWNrIiwiRmxvcmFsV2hpdGUiLCJGb3Jlc3RHcmVlbiIsIkZ1Y2hzaWEiLCJHYWluc2Jvcm8iLCJHaG9zdFdoaXRlIiwiR29sZCIsIkdvbGRlblJvZCIsIkdyYXkiLCJHcmVlbiIsIkdyZWVuWWVsbG93IiwiSG9uZXlEZXciLCJIb3RQaW5rIiwiSW5kaWFuUmVkIiwiSW5kaWdvIiwiSXZvcnkiLCJLaGFraSIsIkxhdmVuZGVyIiwiTGF2ZW5kZXJCbHVzaCIsIkxhd25HcmVlbiIsIkxlbW9uQ2hpZmZvbiIsIkxpZ2h0Qmx1ZSIsIkxpZ2h0Q29yYWwiLCJMaWdodEN5YW4iLCJMaWdodEdvbGRlblJvZFllbGxvdyIsIkxpZ2h0R3JheSIsIkxpZ2h0R3JlZW4iLCJMaWdodFBpbmsiLCJMaWdodFNhbG1vbiIsIkxpZ2h0U2VhR3JlZW4iLCJMaWdodFNreUJsdWUiLCJMaWdodFNsYXRlR3JheSIsIkxpZ2h0U3RlZWxCbHVlIiwiTGlnaHRZZWxsb3ciLCJMaW1lIiwiTGltZUdyZWVuIiwiTGluZW4iLCJNYWdlbnRhIiwiTWFyb29uIiwiTWVkaXVtQXF1YU1hcmluZSIsIk1lZGl1bUJsdWUiLCJNZWRpdW1PcmNoaWQiLCJNZWRpdW1QdXJwbGUiLCJNZWRpdW1TZWFHcmVlbiIsIk1lZGl1bVNsYXRlQmx1ZSIsIk1lZGl1bVNwcmluZ0dyZWVuIiwiTWVkaXVtVHVycXVvaXNlIiwiTWVkaXVtVmlvbGV0UmVkIiwiTWlkbmlnaHRCbHVlIiwiTWludENyZWFtIiwiTWlzdHlSb3NlIiwiTW9jY2FzaW4iLCJOYXZham9XaGl0ZSIsIk5hdnkiLCJPbGRMYWNlIiwiT2xpdmUiLCJPbGl2ZURyYWIiLCJPcmFuZ2UiLCJPcmFuZ2VSZWQiLCJPcmNoaWQiLCJQYWxlR29sZGVuUm9kIiwiUGFsZUdyZWVuIiwiUGFsZVR1cnF1b2lzZSIsIlBhbGVWaW9sZXRSZWQiLCJQYXBheWFXaGlwIiwiUGVhY2hQdWZmIiwiUGVydSIsIlBpbmsiLCJQbHVtIiwiUG93ZGVyQmx1ZSIsIlB1cnBsZSIsIlJlYmVjY2FQdXJwbGUiLCJSZWQiLCJSb3N5QnJvd24iLCJSb3lhbEJsdWUiLCJTYWRkbGVCcm93biIsIlNhbG1vbiIsIlNhbmR5QnJvd24iLCJTZWFHcmVlbiIsIlNlYVNoZWxsIiwiU2llbm5hIiwiU2lsdmVyIiwiU2t5Qmx1ZSIsIlNsYXRlQmx1ZSIsIlNsYXRlR3JheSIsIlNub3ciLCJTcHJpbmdHcmVlbiIsIlN0ZWVsQmx1ZSIsIlRhbiIsIlRlYWwiLCJUaGlzdGxlIiwiVG9tYXRvIiwiVHVycXVvaXNlIiwiVmlvbGV0IiwiV2hlYXQiLCJXaGl0ZSIsIldoaXRlU21va2UiLCJZZWxsb3ciLCJZZWxsb3dHcmVlbiIsInVybFJlZ0V4IiwicGFyc2VVUkwiLCJ0ZXh0Iiwic3RhcnQiLCJsYXN0SW5kZXgiLCJyZXN1bHQiLCJleGVjIiwiZW5kIiwiaGV4Q29sb3JSZWdFeCIsInBhcnNlSGV4Q29sb3IiLCJyZ2JhVG9BcmdiTnVtYmVyIiwicmdiQ29sb3JSZWdFeCIsInBhcnNlUkdCQ29sb3IiLCJyZ2JhQ29sb3JSZWdFeCIsInBhcnNlUkdCQUNvbG9yIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImNocm9tYSIsImFicyIsIlgiLCJtIiwiaHNsYVRvQXJnYk51bWJlciIsImhzbENvbG9yUmVnRXgiLCJwYXJzZUhTTENvbG9yIiwiaHNsYUNvbG9yUmVnRXgiLCJwYXJzZUhTTEFDb2xvciIsImNvbG9ycyIsInBhcnNlQ29sb3JLZXl3b3JkIiwia2V5d29yZCIsInBhcnNlS2V5d29yZCIsInZhbHVlXzEiLCJwYXJzZUNvbG9yIiwia2V5d29yZFJlZ0V4IiwiYmFja2dyb3VuZFJlcGVhdEtleXdvcmRzIiwiU2V0IiwicGFyc2VSZXBlYXQiLCJoYXMiLCJ2YWx1ZV8yIiwidW5pdFJlZ0V4IiwicGFyc2VVbml0IiwidW5pdCIsInBhcnNlUGVyY2VudGFnZU9yTGVuZ3RoIiwidW5pdFJlc3VsdCIsInN0YXJ0XzEiLCJhbmdsZVVuaXRzVG9SYWRNYXAiLCJkZWciLCJQSSIsInJhZCIsImdyYWQiLCJ0dXJuIiwicGFyc2VBbmdsZSIsImFuZ2xlUmVzdWx0Iiwic3RhcnRfMiIsInZhbHVlXzMiLCJfIiwiX18iLCJfX18iLCJiYWNrZ3JvdW5kU2l6ZUtleXdvcmRzIiwicGFyc2VCYWNrZ3JvdW5kU2l6ZSIsInZhbHVlXzQiLCJmaXJzdExlbmd0aCIsInNlY29uZExlbmd0aCIsIngiLCJ5IiwiYmFja2dyb3VuZFBvc2l0aW9uS2V5d29yZHMiLCJmcmVlemUiLCJiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbiIsInBhcnNlQmFja2dyb3VuZFBvc2l0aW9uIiwiZm9ybWF0SCIsImFsaWduIiwib2Zmc2V0IiwiZm9ybWF0ViIsImZpcnN0RGlyZWN0aW9uIiwic2Vjb25kS2V5d29yZCIsInNlY29uZERpcmVjdGlvbiIsImRpcmVjdGlvblJlZ0V4Iiwic2lkZURpcmVjdGlvbnMiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJjb3JuZXJEaXJlY3Rpb25zIiwicGFyc2VEaXJlY3Rpb24iLCJvcGVuaW5nQnJhY2tldFJlZ0V4IiwiY2xvc2luZ0JyYWNrZXRSZWdFeCIsImNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4IiwicGFyc2VBcmd1bWVudHNMaXN0IiwiYXJndW1lbnQiLCJvcGVuaW5nQnJhY2tldCIsImNsb3NpbmdCcmFja2V0IiwiaW5kZXhfMSIsInB1c2giLCJjbG9zaW5nQnJhY2tldE9yQ29tbWEiLCJwYXJzZUNvbG9yU3RvcCIsImNvbG9yIiwibGluZWFyR3JhZGllbnRTdGFydFJlZ0V4IiwicGFyc2VMaW5lYXJHcmFkaWVudCIsImxncyIsImFuZ2xlIiwicGFyc2VkQXJncyIsImluZGV4IiwiYW5nbGVBcmciLCJjb2xvclN0b3AiLCJzbGFzaFJlZ0V4IiwicGFyc2VTbGFzaCIsInNsYXNoIiwicGFyc2VCYWNrZ3JvdW5kIiwicmVwZWF0IiwicG9zaXRpb24iLCJzdWJzdHJpbmciLCJzaXplIiwidXJsIiwiaW1hZ2UiLCJncmFkaWVudCIsInVuaXZlcnNhbFNlbGVjdG9yUmVnRXgiLCJwYXJzZVVuaXZlcnNhbFNlbGVjdG9yIiwidHlwZSIsInNpbXBsZUlkZW50aWZpZXJTZWxlY3RvclJlZ0V4IiwicGFyc2VTaW1wbGVJZGVudGlmaWVyU2VsZWN0b3IiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlU2VsZWN0b3JSZWdFeCIsInBhcnNlQXR0cmlidXRlU2VsZWN0b3IiLCJwcm9wZXJ0eSIsInRlc3RfMSIsInBhcnNlU2ltcGxlU2VsZWN0b3IiLCJwYXJzZVNpbXBsZVNlbGVjdG9yU2VxdWVuY2UiLCJzaW1wbGVTZWxlY3RvciIsImNvbWJpbmF0b3JSZWdFeCIsInBhcnNlQ29tYmluYXRvciIsIndoaXRlU3BhY2VSZWdFeCIsInBhcnNlU2VsZWN0b3IiLCJsZWFkaW5nV2hpdGVTcGFjZSIsImNvbWJpbmF0b3IiLCJleHBlY3RTaW1wbGVTZWxlY3RvciIsInBhaXIiLCJzaW1wbGVTZWxlY3RvclNlcXVlbmNlIiwid2hpdGVzcGFjZVJlZ0V4Iiwic2luZ2xlUXVvdGVTdHJpbmdSZWdFeCIsImRvdWJsZVF1b3RlU3RyaW5nUmVnRXgiLCJjb21tZW50UmVnRXgiLCJudW1iZXJSZWdFeCIsIm5hbWVSZWdFeCIsIkNTUzNQYXJzZXIiLCJuZXh0SW5wdXRDb2RlUG9pbnRJbmRleCIsInRva2VuaXplIiwidG9rZW5zIiwiaW5wdXRUb2tlbiIsImNvbnN1bWVBVG9rZW4iLCJyZWNvbnN1bWVkSW5wdXRUb2tlbiIsImNoYXIiLCJjb25zdW1lQVN0cmluZ1Rva2VuIiwiY29uc3VtZUFIYXNoVG9rZW4iLCJjb25zdW1lQURlbGltVG9rZW4iLCJjb25zdW1lQVdoaXRlc3BhY2UiLCJjb25zdW1lQXRLZXl3b3JkIiwiY29uc3VtZUFuSWRlbnRMaWtlVG9rZW4iLCJjb25zdW1lQU51bWVyaWNUb2tlbiIsInRoaXJkQ2hhciIsImNvbnN1bWVBTWF0Y2hUb2tlbiIsImNvbnN1bWVDREMiLCJjb25zdW1lQUNvbW1lbnQiLCJjb25zdW1lQ0RPIiwiaGFzaE5hbWUiLCJjb25zdW1lQU5hbWUiLCJ0b2tlbiIsImNvbnN1bWVBVVJMVG9rZW4iLCJ1cmxUb2tlbiIsIm5leHRJbnB1dENvZGVQb2ludCIsInN0cmluZ1Rva2VuIiwicmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4iLCJjdXJyZW50SW5wdXRUb2tlbiIsInBhcnNlQVN0eWxlc2hlZXQiLCJ0b3BMZXZlbEZsYWciLCJzdHlsZXNoZWV0IiwicnVsZXMiLCJjb25zdW1lQUxpc3RPZlJ1bGVzIiwiYXRSdWxlIiwiY29uc3VtZUFuQXRSdWxlIiwicXVhbGlmaWVkUnVsZSIsImNvbnN1bWVBUXVhbGlmaWVkUnVsZSIsInByZWx1ZGUiLCJibG9jayIsImNvbnN1bWVBU2ltcGxlQmxvY2siLCJhc3NvY2lhdGVkVG9rZW4iLCJjb25zdW1lQUNvbXBvbmVudFZhbHVlIiwic2ltcGxlQmxvY2siLCJjb21wb25lbnRWYWx1ZSIsImNvbnN1bWVBRnVuY3Rpb24iLCJlbmRpYW5Ub2tlbiIsInZhbHVlcyIsIm5leHRJbnB1dFRva2VuIiwiZnVuY1Rva2VuIiwiY29tcG9uZW50cyIsIkNTU05hdGl2ZVNjcmlwdCIsInBhcnNlU3R5bGVzaGVldCIsInBhcnNlUnVsZXMiLCJfdGhpcyIsIm1hcCIsInJ1bGUiLCJwYXJzZVJ1bGUiLCJwYXJzZUF0UnVsZSIsInBhcnNlUXVhbGlmaWVkUnVsZSIsImltcG9ydCIsImpvaW4iLCJzZWxlY3RvcnMiLCJwcmVsdWRlVG9TZWxlY3RvcnNTdHJpbmdBcnJheSIsImRlY2xhcmF0aW9ucyIsInJ1bGVCbG9ja1RvRGVjbGFyYXRpb25zIiwiZGVjbGFyYXRpb25zSW5wdXRUb2tlbnMiLCJyZWFkaW5nIiwiaSIsInNlbGVjdG9yIiwiZm9yRWFjaCIsIlN0cmluZyIsIk51bWJlciIsImlzQm9vbGVhbiIsIkJvb2xlYW4iLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJpc1VuZGVmaW5lZCIsImlzRGVmaW5lZCIsInZlcmlmeUNhbGxiYWNrIiwiVHlwZUVycm9yIiwiY2xhc3NJbmZvc01hcCIsIk1hcCIsImZ1bmNOYW1lUmVnZXgiLCJnZXRDbGFzcyIsIm9iamVjdCIsImdldENsYXNzSW5mbyIsImNvbnN0cnVjdG9yIiwiQ2xhc3NJbmZvIiwic2V0IiwiZ2V0QmFzZUNsYXNzZXMiLCJpbmZvIiwiYmFzZUNsYXNzSW5mbyIsInR5cGVDb3NudHJ1Y3RvciIsIl90eXBlQ29zbnRydWN0b3IiLCJyZXN1bHRzIiwiX2Jhc2VDbGFzc0luZm8iLCJfZ2V0QmFzZSIsImNvbnN0cnVjdG9yUHJvdG8iLCJfX3Byb3RvX18iLCJ0b1VJU3RyaW5nIiwib2JqIiwibW9kdWxlIiwidXNlU291cmNlTWFwIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0Iiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInZpZXdfMSIsImJ1aWxkZXJfMSIsIm9ic2VydmFibGVfMSIsIm9ic2VydmFibGVfYXJyYXlfMSIsIndlYWtfZXZlbnRfbGlzdGVuZXJfMSIsImxhYmVsXzEiLCJwbGF0Zm9ybV8xIiwiYXV0b0VmZmVjdGl2ZVJvd0hlaWdodCIsImtub3duQ29sbGVjdGlvbnMiLCJpdGVtcyIsImtub3duVGVtcGxhdGVzIiwiaXRlbUhlYWRlclRlbXBsYXRlIiwiaXRlbUNvbnRlbnRUZW1wbGF0ZSIsImhlYWRlclRlbXBsYXRlIiwiZm9vdGVyVGVtcGxhdGUiLCJrbm93bk11bHRpVGVtcGxhdGVzIiwiaXRlbUhlYWRlclRlbXBsYXRlcyIsIml0ZW1Db250ZW50VGVtcGxhdGVzIiwiaGVhZGVyVGVtcGxhdGVzIiwiZm9vdGVyVGVtcGxhdGVzIiwiQWNjb3JkaW9uQmFzZSIsIl9hbGxvd011bHRpcGxlIiwiX2VmZmVjdGl2ZUhlYWRlclJvd0hlaWdodCIsIl9lZmZlY3RpdmVJdGVtSGVhZGVyUm93SGVpZ2h0IiwiX2VmZmVjdGl2ZUl0ZW1Db250ZW50Um93SGVpZ2h0IiwiX2VmZmVjdGl2ZUZvb3RlclJvd0hlaWdodCIsImNoaWxkSXRlbXMiLCJfaXRlbUlkR2VuZXJhdG9yIiwiX2l0ZW0iLCJfY2hpbGRJZEdlbmVyYXRvciIsIl9oZWFkZXJUZW1wbGF0ZVNlbGVjdG9yQmluZGFibGUiLCJMYWJlbCIsIl9kZWZhdWx0SGVhZGVyVGVtcGxhdGUiLCJrZXkiLCJjcmVhdGVWaWV3IiwicGFyc2UiLCJfaGVhZGVyVGVtcGxhdGVzSW50ZXJuYWwiLCJBcnJheSIsIl9pdGVtSGVhZGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlIiwiX2RlZmF1bHRJdGVtSGVhZGVyVGVtcGxhdGUiLCJfaXRlbUhlYWRlclRlbXBsYXRlc0ludGVybmFsIiwiX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlIiwiX2RlZmF1bHRJdGVtQ29udGVudFRlbXBsYXRlIiwiX2l0ZW1Db250ZW50VGVtcGxhdGVzSW50ZXJuYWwiLCJfZm9vdGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlIiwiX2RlZmF1bHRGb290ZXJUZW1wbGF0ZSIsIl9mb290ZXJUZW1wbGF0ZXNJbnRlcm5hbCIsIl9nZXRIYXNIZWFkZXIiLCJjb250YWlucyIsIl9nZXRIYXNGb290ZXIiLCJnZW5lcmF0b3JGbiIsIl9oZWFkZXJUZW1wbGF0ZVNlbGVjdG9yIiwiYmluZCIsInNvdXJjZVByb3BlcnR5IiwidGFyZ2V0UHJvcGVydHkiLCJleHByZXNzaW9uIiwiYmluZGluZ0NvbnRleHQiLCJfaXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3IiLCJfaXRlbUNvbnRlbnRUZW1wbGF0ZVNlbGVjdG9yIiwicGFyZW50SW5kZXgiLCJfZm9vdGVyVGVtcGxhdGVTZWxlY3RvciIsIl9nZXRIZWFkZXJUZW1wbGF0ZSIsInRlbXBsYXRlS2V5IiwiaGVhZGVyVGVtcGxhdGVTZWxlY3RvciIsImRhdGFJdGVtIiwiX2dldFBhcmVudERhdGEiLCJsZW5ndGhfMSIsIl9nZXRJdGVtSGVhZGVyVGVtcGxhdGUiLCJpdGVtSGVhZGVyVGVtcGxhdGVTZWxlY3RvciIsImxlbmd0aF8yIiwiX2dldEl0ZW1Db250ZW50VGVtcGxhdGUiLCJjaGlsZEluZGV4IiwiaXRlbUNvbnRlbnRUZW1wbGF0ZVNlbGVjdG9yIiwiX2NoaWxkSW5kZXgiLCJpc0lPUyIsIl9nZXRDaGlsZERhdGEiLCJnZXRJdGVtIiwibGVuZ3RoXzMiLCJfZ2V0Rm9vdGVyVGVtcGxhdGUiLCJmb290ZXJUZW1wbGF0ZVNlbGVjdG9yIiwibGVuZ3RoXzQiLCJfZ2V0RGVmYXVsdEhlYWRlckNvbnRlbnQiLCJsYmwiLCJfZ2V0RGVmYXVsdEl0ZW1IZWFkZXJDb250ZW50IiwiX2dldERlZmF1bHRJdGVtQ29udGVudENvbnRlbnQiLCJfZ2V0RGVmYXVsdEZvb3RlckNvbnRlbnQiLCJfcHJlcGFyZUhlYWRlckl0ZW0iLCJfcHJlcGFyZUl0ZW1IZWFkZXIiLCJfcHJlcGFyZUl0ZW1Db250ZW50IiwiX3ByZXBhcmVGb290ZXJJdGVtIiwiX29uSGVhZGVyUm93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInJlZnJlc2giLCJfb25JdGVtSGVhZGVyUm93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkIiwiX29uSXRlbUNvbnRlbnRSb3dIZWlnaHRQcm9wZXJ0eUNoYW5nZWQiLCJfb25Gb290ZXJSb3dIZWlnaHRQcm9wZXJ0eUNoYW5nZWQiLCJ1cGRhdGVFZmZlY3RpdmVJdGVtSGVhZGVyUm93SGVpZ2h0IiwiaXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5IiwiY29lcmNlIiwidXBkYXRlRWZmZWN0aXZlSXRlbUNvbnRlbnRSb3dIZWlnaHQiLCJpdGVtQ29udGVudFJvd0hlaWdodFByb3BlcnR5Iiwic3R5bGUiLCJzZXBhcmF0b3JDb2xvciIsIl9vbkl0ZW1zQ2hhbmdlZCIsImFyZ3MiLCJoZWFkZXJMb2FkaW5nRXZlbnQiLCJmb290ZXJMb2FkaW5nRXZlbnQiLCJpdGVtSGVhZGVyTG9hZGluZ0V2ZW50IiwiaXRlbUNvbnRlbnRMb2FkaW5nRXZlbnQiLCJpdGVtSGVhZGVyVGFwRXZlbnQiLCJpdGVtQ29udGVudFRhcEV2ZW50IiwibG9hZE1vcmVJdGVtc0V2ZW50Iiwic2VsZWN0ZWRJbmRleGVzQ2hhbmdlZEV2ZW50Iiwia25vd25GdW5jdGlvbnMiLCJfX2RlY29yYXRlIiwiQ1NTVHlwZSIsIkNvbnRhaW5lclZpZXciLCJzZXBhcmF0b3JDb2xvclByb3BlcnR5IiwiQ3NzUHJvcGVydHkiLCJjc3NOYW1lIiwidmFsdWVDb252ZXJ0ZXIiLCJ2IiwicmVnaXN0ZXIiLCJTdHlsZSIsImhlYWRlclRlbXBsYXRlUHJvcGVydHkiLCJQcm9wZXJ0eSIsImFmZmVjdHNMYXlvdXQiLCJ2YWx1ZUNoYW5nZWQiLCJ0YXJnZXQiLCJoZWFkZXJUZW1wbGF0ZXNQcm9wZXJ0eSIsInBhcnNlTXVsdGlwbGVUZW1wbGF0ZXMiLCJpdGVtSGVhZGVyVGVtcGxhdGVQcm9wZXJ0eSIsIml0ZW1IZWFkZXJUZW1wbGF0ZXNQcm9wZXJ0eSIsIml0ZW1Db250ZW50VGVtcGxhdGVQcm9wZXJ0eSIsIml0ZW1Db250ZW50VGVtcGxhdGVzUHJvcGVydHkiLCJmb290ZXJUZW1wbGF0ZVByb3BlcnR5IiwiZm9vdGVyVGVtcGxhdGVzUHJvcGVydHkiLCJpdGVtc1Byb3BlcnR5IiwiT2JzZXJ2YWJsZSIsInJlbW92ZVdlYWtFdmVudExpc3RlbmVyIiwiT2JzZXJ2YWJsZUFycmF5IiwiY2hhbmdlRXZlbnQiLCJhZGRXZWFrRXZlbnRMaXN0ZW5lciIsInNlbGVjdGVkSW5kZXhlc1Byb3BlcnR5IiwiZGVmYXVsdFZhbHVlIiwibm90aWZ5IiwiZXZlbnROYW1lIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsInVwZGF0ZU5hdGl2ZUluZGV4ZXMiLCJkZWZhdWx0Um93SGVpZ2h0IiwiaGVhZGVyUm93SGVpZ2h0UHJvcGVydHkiLCJDb2VyY2libGVQcm9wZXJ0eSIsImVxdWFsaXR5Q29tcGFyZXIiLCJMZW5ndGgiLCJjb2VyY2VWYWx1ZSIsIm5hdGl2ZVZpZXdQcm90ZWN0ZWQiLCJ0b0RldmljZVBpeGVscyIsImZvb3RlclJvd0hlaWdodFByb3BlcnR5IiwiaW9zRXN0aW1hdGVkSGVhZGVyUm93SGVpZ2h0UHJvcGVydHkiLCJpb3NFc3RpbWF0ZWRJdGVtSGVhZGVyUm93SGVpZ2h0UHJvcGVydHkiLCJpb3NFc3RpbWF0ZWRJdGVtQ29udGVudFJvd0hlaWdodFByb3BlcnR5IiwiaW9zRXN0aW1hdGVkRm9vdGVyUm93SGVpZ2h0UHJvcGVydHkiLCJhY2NvcmRpb25fY29tbW9uXzEiLCJjb2xvcl8xIiwidXRpbHMiLCJwcm9maWxpbmdfMSIsInByb3h5X3ZpZXdfY29udGFpbmVyXzEiLCJzdGFja19sYXlvdXRfMSIsIklURU1UQVAiLCJOR19WSUVXIiwiZ2xvYmFsIiwibW9kdWxlTWVyZ2UiLCJERUZBVUxUX0hFSUdIVCIsImluZmluaXR5IiwibGF5b3V0IiwibWFrZU1lYXN1cmVTcGVjIiwiVU5TUEVDSUZJRUQiLCJtYWpvclZlcnNpb24iLCJpb3MiLCJNYWpvclZlcnNpb24iLCJub3RpZnlGb3JJdGVtQXRJbmRleCIsIm93bmVyIiwibmF0aXZlVmlldyIsInZpZXciLCJpbmRleFBhdGgiLCJzZWN0aW9uIiwicm93IiwiYW5kcm9pZCIsIm5vdGlmeUZvckhlYWRlck9yRm9vdGVyQXRJbmRleCIsIkRlZmF1bHRBY2NvcmRpb25IZWFkZXJWaWV3SGVpZ2h0IiwiQWNjb3JkaW9uIiwiY2FsbCIsImVzdGltYXRlZEl0ZW1IZWFkZXJSb3dIZWlnaHQiLCJlc3RpbWF0ZWRJdGVtQ29udGVudFJvd0hlaWdodCIsImVzdGltYXRlZEhlYWRlclJvd0hlaWdodCIsImVzdGltYXRlZEZvb3RlclJvd0hlaWdodCIsIl9pdGVtQ29udGVudEhlaWdodHMiLCJfaXRlbUhlYWRlckhlaWdodHMiLCJfaGVhZGVySGVpZ2h0cyIsIl9mb290ZXJIZWlnaHRzIiwiX21hcCIsIl9tYXBJdGVtQ29udGVudCIsIl9tYXBJdGVtSGVhZGVyIiwiX21hcEhlYWRlciIsIl9tYXBGb290ZXIiLCJ1cGRhdGVOYXRpdmVJdGVtcyIsIm9sZEl0ZW1zIiwibmV3SXRlbXMiLCJyZWxvYWREYXRhIiwiY3JlYXRlTmF0aXZlVmlldyIsIlVJVGFibGVWaWV3SW1wbCIsImluaXRXaXRoT3duZXIiLCJXZWFrUmVmIiwiaW5pdE5hdGl2ZVZpZXciLCJyZWdpc3RlckNsYXNzRm9yQ2VsbFJldXNlSWRlbnRpZmllciIsIkFjY29yZGlvbkl0ZW1IZWFkZXJDZWxsIiwiY2xhc3MiLCJBY2NvcmRpb25JdGVtQ29udGVudENlbGwiLCJBY2NvcmRpb25IZWFkZXJDZWxsIiwiQWNjb3JkaW9uRm9vdGVyQ2VsbCIsImVzdGltYXRlZFJvd0hlaWdodCIsInJvd0hlaWdodCIsIlVJVGFibGVWaWV3QXV0b21hdGljRGltZW5zaW9uIiwiY2xlYXJDb2xvciIsInRhYmxlRm9vdGVyVmlldyIsIlVJVmlldyIsIm5ldyIsIl9kYXRhU291cmNlIiwiQWNjb3JkaW9uRGF0YVNvdXJjZSIsIl9kZWxlZ2F0ZSIsIlVJVGFibGVWaWV3RGVsZWdhdGVJbXBsIiwiX3NldE5hdGl2ZUNsaXBUb0JvdW5kcyIsIl9leHBhbmRlZFZpZXdzIiwiX2luZGV4U2V0IiwiTlNNdXRhYmxlSW5kZXhTZXQiLCJpbml0Iiwib25Mb2FkZWQiLCJfaXNEYXRhRGlydHkiLCJyZXF1ZXN0TGF5b3V0IiwiZGF0YVNvdXJjZSIsImRlbGVnYXRlIiwib25VbmxvYWRlZCIsImdldEl0ZW1IZWFkZXJIZWlnaHQiLCJzZXRJdGVtSGVhZGVySGVpZ2h0IiwiZ2V0SXRlbUNvbnRlbnRIZWlnaHQiLCJzZXRJdGVtQ29udGVudEhlaWdodCIsImdldEhlYWRlckhlaWdodCIsInNldEhlYWRlckhlaWdodCIsImdldEZvb3RlckhlaWdodCIsInNldEZvb3RlckhlaWdodCIsImRpc3Bvc2VOYXRpdmVWaWV3IiwicmVtb3ZlQWxsSW5kZXhlcyIsImNsaXBzVG9Cb3VuZHMiLCJpc0xvYWRlZCIsIl9zZWxlY3RlZEluZGV4ZXNVcGRhdGVkRnJvbU5hdGl2ZSIsIm5ld0luZGV4ZXMiLCJuYXRpdmVWYWx1ZUNoYW5nZSIsInNjcm9sbFRvSW5kZXgiLCJzY3JvbGxUb1Jvd0F0SW5kZXhQYXRoQXRTY3JvbGxQb3NpdGlvbkFuaW1hdGVkIiwiTlNJbmRleFBhdGgiLCJpbmRleFBhdGhGb3JJdGVtSW5TZWN0aW9uIiwiX3ByZXBhcmluZ0l0ZW1IZWFkZXJDZWxsIiwiX3ByZXBhcmluZ0l0ZW1Db250ZW50Q2VsbCIsIl9wcmVwYXJpbmdGb290ZXJDZWxsIiwiX3ByZXBhcmluZ0hlYWRlckNlbGwiLCJtZWFzdXJlIiwid2lkdGhNZWFzdXJlU3BlYyIsImhlaWdodE1lYXN1cmVTcGVjIiwiY2hhbmdlZCIsIl9zZXRDdXJyZW50TWVhc3VyZVNwZWNzIiwib25MYXlvdXQiLCJjaGlsZFZpZXciLCJhY2NvcmRpb25IZWFkZXIiLCJjZWxsSGVpZ2h0IiwiX2FjY29yZGlvbkl0ZW1JbmRleCIsIndpZHRoIiwiZ2V0TWVhc3VyZVNwZWNTaXplIiwiVmlldyIsImxheW91dENoaWxkIiwiYWNjb3JkaW9uQ2VsbCIsIl9hY2NvcmRpb25DaGlsZEl0ZW1JbmRleCIsImFjY29yZGlvbkhlYWRlckNlbGwiLCJhY2NvcmRpb25Gb290ZXJDZWxsIiwib25NZWFzdXJlIiwibWVhc3VyZUNoaWxkIiwiX2N1cnJlbnRXaWR0aE1lYXN1cmVTcGVjIiwiX2N1cnJlbnRIZWlnaHRNZWFzdXJlU3BlYyIsIl9sYXlvdXRJdGVtSGVhZGVyQ2VsbCIsImNlbGxWaWV3IiwiRVhBQ1RMWSIsIm1lYXN1cmVkU2l6ZSIsImhlaWdodCIsIm1lYXN1cmVkSGVpZ2h0IiwiX2xheW91dEhlYWRlckNlbGwiLCJfbGF5b3V0SXRlbUNvbnRlbnRDZWxsIiwiX2xheW91dEZvb3RlckNlbGwiLCJfcHJlcGFyZUl0ZW1IZWFkZXJDZWxsIiwiY2VsbCIsInNlbGVjdGlvblN0eWxlIiwiUHJveHlWaWV3Q29udGFpbmVyIiwic3AiLCJTdGFja0xheW91dCIsImFkZENoaWxkIiwiX3JlbW92ZUl0ZW1IZWFkZXJDb250YWluZXIiLCJyZW1vdmVGcm9tU3VwZXJ2aWV3IiwicGFyZW50IiwiX2FkZFZpZXciLCJjb250ZW50VmlldyIsImFkZFN1YnZpZXciLCJfcHJlcGFyZUl0ZW1Db250ZW50Q2VsbCIsIl9yZW1vdmVJdGVtQ29udGVudENvbnRhaW5lciIsIl9wcmVwYXJlSGVhZGVyQ2VsbCIsIl9yZW1vdmVIZWFkZXJDb250YWluZXIiLCJfcHJlcGFyZUZvb3RlckNlbGwiLCJfcmVtb3ZlRm9vdGVyQ29udGFpbmVyIiwiaGVhZGVyIiwiX3JlbW92ZVZpZXciLCJwcmVwYXJpbmciLCJkZWxldGUiLCJlYWNoQ2hpbGRWaWV3IiwiY2FsbGJhY2siLCJvbGRJbmRleGVzIiwiYWxsb3dNdWx0aXBsZSIsImZyb20iLCJrZXlzIiwiYWRkSW5kZXgiLCJjbGVhciIsImV4cGFuZEFsbCIsImNvbGxhcHNlQWxsIiwiY29sbGFwc2VJdGVtIiwicmVtb3ZlSW5kZXgiLCJleHBhbmRJdGVtIiwicmVsb2FkU2VjdGlvbiIsImluaXRXaXRoSW5kZXgiLCJyZWxvYWRTZWN0aW9uc1dpdGhSb3dBbmltYXRpb24iLCJyZW1vdmVTZWN0aW9uIiwiaXRlbUV4cGFuZGVkIiwiaXRlbUNvbGxhcHNlZCIsIm9sZCIsIm5leHQiLCJpdGVtSXNFeHBhbmRlZCIsImZyb21PYmplY3QiLCJ0b0RldmljZUluZGVwZW5kZW50UGl4ZWxzIiwic2VjdGlvbkhlYWRlckhlaWdodCIsImVzdGltYXRlZFNlY3Rpb25IZWFkZXJIZWlnaHQiLCJVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbCIsImdldERlZmF1bHQiLCJzZXROYXRpdmUiLCJlc3RpbWF0ZWRIZWlnaHQiLCJwcm9maWxlIiwiX19tZXRhZGF0YSIsIkZ1bmN0aW9uIiwiaW5pdFdpdGhFbXB0eUJhY2tncm91bmQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpbml0V2l0aFN0eWxlUmV1c2VJZGVudGlmaWVyIiwicmV1c2VJZGVudGlmaWVyIiwid2lsbE1vdmVUb1N1cGVydmlldyIsIm5ld1N1cGVydmlldyIsIlVJVGFibGVWaWV3Q2VsbCIsIl9vd25lciIsInRhYmxlVmlld051bWJlck9mUm93c0luU2VjdGlvbiIsInRhYmxlVmlldyIsInBhcmVudERhdGEiLCJudW1iZXJPZlNlY3Rpb25zSW5UYWJsZVZpZXciLCJ0YWJsZVZpZXdDZWxsRm9yUm93QXRJbmRleFBhdGgiLCJ0b3RhbCIsInRlbXBsYXRlIiwiZGVxdWV1ZVJldXNhYmxlQ2VsbFdpdGhJZGVudGlmaWVyIiwiaXNMYXlvdXRSZXF1aXJlZCIsIk9iakNQcm90b2NvbHMiLCJVSVRhYmxlVmlld0RhdGFTb3VyY2UiLCJOU09iamVjdCIsInRhYmxlVmlld1dpbGxEaXNwbGF5Q2VsbEZvclJvd0F0SW5kZXhQYXRoIiwidGFibGVWaWV3V2lsbFNlbGVjdFJvd0F0SW5kZXhQYXRoIiwiY2VsbEZvclJvd0F0SW5kZXhQYXRoIiwibnVtYmVyT2ZSb3dzSW5TZWN0aW9uIiwiaGFuZGxlVGFwIiwidGFibGVWaWV3RGlkU2VsZWN0Um93QXRJbmRleFBhdGgiLCJkZXNlbGVjdFJvd0F0SW5kZXhQYXRoQW5pbWF0ZWQiLCJ0YWJsZVZpZXdIZWlnaHRGb3JSb3dBdEluZGV4UGF0aCIsInRhYmxlVmlld0hlaWdodEZvckZvb3RlckluU2VjdGlvbiIsInRhYmxlVmlld0hlaWdodEZvckhlYWRlckluU2VjdGlvbiIsIlVJVGFibGVWaWV3RGVsZWdhdGUiLCJfbWVhc3VyZUl0ZW1IZWFkZXJNYXAiLCJfbWVhc3VyZUl0ZW1Db250ZW50TWFwIiwiX21lYXN1cmVIZWFkZXJNYXAiLCJfbWVhc3VyZUZvb3Rlck1hcCIsImhlaWdodF8xIiwiY3VycmVudCIsIl9hcmdzIiwidGFibGUiLCJVSVRhYmxlVmlldyIsImFjY29yZGlvbiIsIlZ1ZSIsIm1vZGVsIiwicHJvcCIsImV2ZW50IiwicHJvcHMiLCJyZXF1aXJlZCIsImRlZmF1bHQiLCJzZWxlY3RlZEluZGV4ZXMiLCJ3YXRjaCIsImhhbmRsZXIiLCJuZXdWYWwiLCIkcmVmcyIsInNldEF0dHJpYnV0ZSIsImRlZXAiLCJjb21wdXRlZCIsImxpc3RlbmVycyIsImFzc2lnbiIsIiRsaXN0ZW5lcnMiLCJzZWxlY3RlZEluZGV4ZXNDaGFuZ2UiLCJvblNlbGVjdGVkSW5kZXhlc0NoYW5nZSIsIm1vdW50ZWQiLCJnZXRJdGVtQ29udGV4dCIsIiRwcm9wcyIsImdldENoaWxkSXRlbUNvbnRleHQiLCJzZWxlY3RvckZuIiwiJHRlbXBsYXRlcyIsImdldEtleWVkVGVtcGxhdGVzIiwiZmlsdGVyIiwic3RhcnRzV2l0aCIsIm1ldGhvZHMiLCJvbkhlYWRlckxvYWRpbmciLCJjdXJyZW50SXRlbSIsImNvbnRleHQiLCJvbGRWbm9kZSIsIlZVRV9WSUVXIiwicGF0Y2hUZW1wbGF0ZSIsIm9uRm9vdGVyTG9hZGluZyIsIm9uSXRlbUhlYWRlckxvYWRpbmciLCJvbkl0ZW1Db250ZW50TG9hZGluZyIsImdldEF0dHJpYnV0ZSIsIiRlbWl0IiwiYWxpYXMiLCJpbmRleF9hbGlhcyIsIiRldmVuIiwiJG9kZCIsIiRwYXJlbnRJbmRleCIsInRlbXBsYXRlcyIsInRlbXBsYXRlTWFwIiwiX3RlbXBsYXRlTWFwIiwiaXRlcmF0b3IiLCJlbnRyaWVzIiwiY3VyciIsImNvbmRpdGlvbkZuIiwiZXJyIiwiaW5zdGFsbCIsInJlZ2lzdGVyRWxlbWVudCIsImhtclByZWZpeCIsImxvZyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiIsImVycm9yIiwiaG90T3B0aW9ucyIsImlnbm9yZVVuYWNjZXB0ZWQiLCJpZ25vcmVEZWNsaW5lZCIsImlnbm9yZUVycm9yZWQiLCJvblVuYWNjZXB0ZWQiLCJjaGFpbiIsImxhc3QiLCJwb3AiLCJtb2QiLCJvbkRlY2xpbmVkIiwib25FcnJvcmVkIiwibW9kdWxlSWQiLCJuZXh0SGFzaCIsImN1cnJlbnRIYXNoIiwidXBUb0RhdGUiLCJfX3dlYnBhY2tfaGFzaF9fIiwiYXBwbGllZE1vZHVsZXMiLCJ1bmFjY2VwdGVkIiwibnVtYmVySWRzIiwiZXZlcnkiLCJjaGVjayIsIm9wdGlvbnMiLCJob3QiLCJ0aGVuIiwibmV4dENoZWNrIiwiY2F0Y2giLCJzdGF0dXMiLCJzdGFjayIsInVwZGF0ZSIsImxhdGVzdEhhc2giLCJnZXROZXh0SGFzaCIsImhhc2giLCJnZXRGaWxlQ29udGVudCIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlYWRUZXh0IiwiaG90VXBkYXRlQ29udGVudCIsIm1hbmlmZXN0IiwibmV3SGFzaCIsInJlamVjdCIsImNoZWNrU3RhdGUiLCJpbml0aWFsSGFzaCIsImxvYWRDc3MiLCJhcHBDc3NDb250ZXh0IiwicmVnaXN0ZXJXZWJwYWNrTW9kdWxlcyIsImxvYWRNb2R1bGVGbiIsImFwcGxpY2F0aW9uIiwibG9hZEFwcENzcyIsImUiLCJ3aW5kb3ciLCJwcm9jZXNzIiwiZW52IiwiYXJyYXlNYXAiLCJ4cyIsInJlcyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiaW5kZXhvZiIsImFyciIsImlzYXJyYXkiLCJpc0FycmF5IiwiaGFzT3duJDEiLCJmb3JlYWNoIiwiZm4iLCJjdHgiLCJrIiwiaGFzT3duJDIiLCJhcnJheVJlZHVjZSIsImFjYyIsImhhc0FjYyIsInJlZHVjZSIsImhhc093biQzIiwidG9TdHJpbmckMSIsIlJlZ0V4cCIsImZvcmVhY2gkMSIsInRvU3RyaW5nJDIiLCJpc0FyZ3VtZW50cyIsInN0ciIsImNhbGxlZSIsInRvU3RyaW5nJDMiLCJoYXNEb250RW51bUJ1ZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwia2V5c1NoaW0iLCJpc0FyZ3VtZW50cyQxIiwidGhlS2V5cyIsInNraXBQcm90byIsImN0b3IiLCJza2lwQ29uc3RydWN0b3IiLCJkb250RW51bSIsInNoaW0iLCJzaGltT2JqZWN0S2V5cyIsIm9iamVjdEtleXMiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJqc29uMyIsInJvb3QiLCJpc0xvYWRlciIsImZyZWVHbG9iYWwiLCJydW5JbkNvbnRleHQiLCJEYXRlIiwiU3ludGF4RXJyb3IiLCJuYXRpdmVKU09OIiwib2JqZWN0UHJvdG8iLCJpc1Byb3BlcnR5IiwidW5kZWYiLCJpc0V4dGVuZGVkIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZXhjZXB0aW9uIiwiaXNTdXBwb3J0ZWQiLCJzZXJpYWxpemVkIiwic3RyaW5naWZ5U3VwcG9ydGVkIiwidG9KU09OIiwicGFyc2VTdXBwb3J0ZWQiLCJmdW5jdGlvbkNsYXNzIiwiZGF0ZUNsYXNzIiwibnVtYmVyQ2xhc3MiLCJzdHJpbmdDbGFzcyIsImFycmF5Q2xhc3MiLCJib29sZWFuQ2xhc3MiLCJjaGFySW5kZXhCdWdneSIsImZsb29yIiwiTW9udGhzIiwiZ2V0RGF5IiwieWVhciIsIm1vbnRoIiwibWVtYmVycyIsIm9yaWdpbmFsIiwiUHJpbWl0aXZlVHlwZXMiLCJpc0hvc3RUeXBlIiwiUHJvcGVydGllcyIsInZhbHVlT2YiLCJoYXNQcm9wZXJ0eSIsImlzQ29uc3RydWN0b3IiLCJFc2NhcGVzIiwibGVhZGluZ1plcm9lcyIsInRvUGFkZGVkU3RyaW5nIiwic2xpY2UiLCJ1bmljb2RlUHJlZml4IiwicXVvdGUiLCJ1c2VDaGFySW5kZXgiLCJzeW1ib2xzIiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0Iiwic2VyaWFsaXplIiwicHJvcGVydGllcyIsIndoaXRlc3BhY2UiLCJpbmRlbnRhdGlvbiIsImNsYXNzTmFtZSIsImRhdGUiLCJ0aW1lIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImVsZW1lbnQiLCJwcmVmaXgiLCJmcm9tQ2hhckNvZGUiLCJVbmVzY2FwZXMiLCJJbmRleCIsIlNvdXJjZSIsImFib3J0IiwibGV4IiwiYmVnaW4iLCJpc1NpZ25lZCIsImhhc01lbWJlcnMiLCJ3YWxrIiwibm9kZVR5cGUiLCJKU09OMyIsIm9iamVjdEtleXMkMSIsInZhbCIsInV0aWxJbnNwZWN0IiwiaW5zcGVjdCIsIm9wdHMiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJzaG93SGlkZGVuIiwiX2V4dGVuZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZXMiLCJzdHlsZVR5cGUiLCJpc0Z1bmN0aW9uJDEiLCJpc051bGwiLCJoYXNPd24kNCIsImlzUmVnRXhwIiwicmUiLCJvYmplY3RUb1N0cmluZyIsImlzRXJyb3IiLCJpc0RhdGUiLCJkIiwibyIsImFycmF5VG9IYXNoIiwiYXJyYXkiLCJpZHgiLCJmb3JtYXRBcnJheSIsInJlY3Vyc2VUaW1lcyIsInZpc2libGVLZXlzIiwib3V0cHV0IiwiZm9ybWF0UHJvcGVydHkiLCJtYXRjaCIsImZvcm1hdEVycm9yIiwicmV0IiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImJhc2UiLCJicmFjZXMiLCJuIiwidG9VVENTdHJpbmciLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJsaW5lIiwic2ltcGxlIiwicHJldiIsImN1ciIsIm9yaWdpbiIsImFkZCIsImVtcHR5T2JqZWN0IiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwiaXNPYmplY3QkMSIsIl90b1N0cmluZyIsInRvUmF3VHlwZSIsImlzUGxhaW5PYmplY3QiLCJpc1JlZ0V4cCQxIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsInRvU3RyaW5nJDQiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJjcmVhdGUiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwic3BsaWNlIiwiaGFzT3duJDUiLCJjYWNoZWQiLCJjYWNoZSIsImNhY2hlZEZuIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiYyIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsInBvbHlmaWxsQmluZCIsImJvdW5kRm4iLCJfbGVuZ3RoIiwibmF0aXZlQmluZCIsInRvQXJyYXkiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImdlblN0YXRpY0tleXMiLCJzdGF0aWNLZXlzIiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIm9uY2UiLCJjYWxsZWQiLCJ1bmljb2RlUmVnRXhwIiwiaXNSZXNlcnZlZCIsImRlZiIsIndyaXRhYmxlIiwiYmFpbFJFIiwicGFyc2VQYXRoIiwicGF0aCIsInNlZ21lbnRzIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzQ2hyb21lIiwiaXNQaGFudG9tSlMiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJhZGRFdmVudExpc3RlbmVyIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJWVUVfRU5WIiwiZGV2dG9vbHMiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJfU2V0IiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwidGlwIiwiZ2VuZXJhdGVDb21wb25lbnRUcmFjZSIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiY2xhc3NpZnlSRSIsImNsYXNzaWZ5IiwibXNnIiwidm0iLCJ0cmFjZSIsImluY2x1ZGVGaWxlIiwiJHJvb3QiLCJjaWQiLCJfaXNWdWUiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJfX2ZpbGUiLCIkcGFyZW50IiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsInVpZCIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJzb3J0IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiVk5vZGUiLCJ0YWciLCJjaGlsZHJlbiIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwibWV0aG9kIiwibXV0YXRvciIsImxlbiIsIm9iIiwiX19vYl9fIiwiaW5zZXJ0ZWQiLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJkZWZpbmVSZWFjdGl2ZSIsIm9ic2VydmUiLCJzcmMiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJyZWFjdGl2ZUdldHRlciIsImRlcGVuZEFycmF5IiwicmVhY3RpdmVTZXR0ZXIiLCJtYXgiLCJkZWwiLCJzdHJhdHMiLCJlbCIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsIm1lcmdlZERhdGFGbiIsIm1lcmdlZEluc3RhbmNlRGF0YUZuIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJkZWR1cGVIb29rcyIsImhvb2tzIiwiaG9vayIsIm1lcmdlQXNzZXRzIiwiYXNzZXJ0T2JqZWN0VHlwZSIsImtleSQxIiwiaW5qZWN0IiwicHJvdmlkZSIsImNoZWNrQ29tcG9uZW50cyIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplSW5qZWN0Iiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJkaXJzIiwiZGlyZWN0aXZlcyIsIm1lcmdlT3B0aW9ucyIsIl9iYXNlIiwiZXh0ZW5kcyIsIm1peGlucyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiYXNzZXJ0UHJvcCIsIl9wcm9wcyIsImdldFR5cGUiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZXMiLCJhc3NlcnRlZFR5cGUiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwidmFsaWRhdG9yIiwic2ltcGxlQ2hlY2tSRSIsImlzU2FtZVR5cGUiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJpc0Jvb2xlYW4kMSIsImV4cGxpY2l0VHlwZXMiLCJzb21lIiwiZWxlbSIsImhhbmRsZUVycm9yIiwiZXJyb3JDYXB0dXJlZCIsImNhcHR1cmUiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInRpbWVyRnVuYyIsInAiLCJzZXRUaW1lb3V0IiwiTXV0YXRpb25PYnNlcnZlciIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJzZXRJbW1lZGlhdGUiLCJuZXh0VGljayIsImNiIiwiX3Jlc29sdmUiLCJyZWYiLCJyZWdpc3RlclJlZiIsImRlc3Ryb3kiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIk1BWF9VUERBVEVfQ09VTlQiLCJxdWV1ZSIsImFjdGl2YXRlZENoaWxkcmVuIiwiaGFzJDEiLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJub3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwiYmVmb3JlIiwicnVuIiwidXNlciIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJfd2F0Y2hlciIsIl9pc01vdW50ZWQiLCJfaXNEZXN0cm95ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiX2luYWN0aXZlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsInF1ZXVlV2F0Y2hlciIsInVpZCQxIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJsYXp5Iiwic3luYyIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJjbGVhbnVwRGVwcyIsInRtcCIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsIm1hcmsiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9uIiwib2xkT24iLCJjcmVhdGVPbmNlSGFuZGxlciIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJhdHRycyIsImFsdEtleSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJpbml0UHJveHkiLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwiaGFzSGFuZGxlciIsImlzQWxsb3dlZCIsIiRkYXRhIiwiZ2V0SGFuZGxlciIsImhhbmRsZXJzIiwicmVuZGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwicHJveHlHZXR0ZXIiLCJwcm94eVNldHRlciIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJfZGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsIl9wcm9wS2V5cyIsImlzUm9vdCIsImxvb3AiLCJoeXBoZW5hdGVkS2V5IiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInN0YXRlTWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVud2F0Y2hGbiIsImluaXRQcm92aWRlIiwiX3Byb3ZpZGVkIiwiaW5pdEluamVjdGlvbnMiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInByb3ZpZGVEZWZhdWx0IiwidWlkJDIiLCJpbml0TWl4aW4iLCJfaW5pdCIsIl91aWQiLCJfaXNDb21wb25lbnQiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwiX3NlbGYiLCJpbml0TGlmZWN5Y2xlIiwiaW5pdEV2ZW50cyIsImluaXRSZW5kZXIiLCIkbW91bnQiLCJwYXJlbnRWbm9kZSIsIl9wYXJlbnRWbm9kZSIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJfcmVuZGVyQ2hpbGRyZW4iLCJzdGF0aWNSZW5kZXJGbnMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsImNhY2hlZFN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInJlbmRlckxpc3QiLCJkb25lIiwicmVuZGVyU2xvdCIsImZhbGxiYWNrIiwiYmluZE9iamVjdCIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIm5vZGVzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwidGhpcyQxIiwiY29udGV4dFZtIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJfYyIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiY2xvbmUiLCJkZXZ0b29sc01ldGEiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaHlkcmF0aW5nIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiJGRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJ0cmFuc2Zvcm1Nb2RlbCIsImZ1bmN0aW9uYWwiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiaW5saW5lVGVtcGxhdGUiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiZjEiLCJmMiIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJfY3JlYXRlRWxlbWVudCIsImlzIiwiJHZub2RlIiwicHJlIiwiYXBwbHlOUyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiZm9yY2UiLCJfdm5vZGUiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZW5kZXJFcnJvciIsImVuc3VyZUN0b3IiLCJjb21wIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJyZWFzb24iLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsIiRjaGlsZHJlbiIsIl9kaXJlY3RJbmFjdGl2ZSIsImxpZmVjeWNsZU1peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJtb3VudENvbXBvbmVudCIsInVwZGF0ZUNvbXBvbmVudCIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIiRhdHRycyIsInByb3BLZXlzIiwiaXNJbkluYWN0aXZlVHJlZSIsImRpcmVjdCIsImoiLCJpc0hUTUxUYWciLCJpc1NWRyIsImlzVGV4dElucHV0VHlwZSIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInNhbWVJbnB1dFR5cGUiLCJ0eXBlQSIsInR5cGVCIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJiYWNrZW5kIiwibm9kZU9wcyIsImVtcHR5Tm9kZUF0IiwidGFnTmFtZSIsImNyZWF0ZVJtQ2IiLCJjaGlsZEVsbSIsInJlbW92ZU5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpblZQcmUiLCJpZ25vcmUiLCJjcmVhdGluZ0VsbUluVlByZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsInBhcmVudEVsbSIsInJlZkVsbSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJjcmVhdGVDb21tZW50IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJjaGVja0R1cGxpY2F0ZUtleXMiLCJzZXRTdHlsZVNjb3BlIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwicm0iLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwibmV4dFNpYmxpbmciLCJmaW5kSWR4SW5PbGQiLCJzZWVuS2V5cyIsImh5ZHJhdGUiLCJzZXRUZXh0Q29udGVudCIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiY2hpbGROb2RlIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmdWxsSW52b2tlIiwicGF0Y2giLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbGRFbG0iLCJfbGVhdmVDYiIsInBhdGNoYWJsZSIsImkkMiIsInVwZGF0ZURpcmVjdGl2ZXMiLCJ1bmJpbmREaXJlY3RpdmVzIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGREaXIiLCJkaXIiLCJjYWxsSG9vayQxIiwib2xkQXJnIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsIm9sZEF0dHJzIiwiYWNjZXB0VmFsdWUiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiaXNCb29sZWFuQXR0ciIsImdlbkNsYXNzRm9yVm5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInJlbmRlckNsYXNzIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0Iiwic3RyaW5naWZpZWQiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwiY2xhc3NfIiwidGFyZ2V0JDEiLCJhZGQkMSIsIm9sZEhhbmRsZXIiLCJyZW1vdmUkMiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJldmVudHMiLCJub3JtYWxpemUiLCJjcmVhdGVTdHlsZSIsInN0YXRpY1N0eWxlIiwidXBkYXRlU3R5bGUiLCJzZXRTdHlsZSIsIm9sZFN0eWxlIiwibmVlZENsb25lIiwidG9PYmplY3QkMSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJjYW5jZWxsZWQiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImNoZWNrRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsImFjdGlvbkJhciIsImZyYW1lcyIsInNldEZyYW1lIiwiZnJhbWUiLCJnZXRGcmFtZSIsImRlbGV0ZUZyYW1lIiwiaWRDb3VudGVyIiwiY2xlYXJIaXN0b3J5IiwiYmFja3N0YWNrVmlzaWJsZSIsImhhc1JvdXRlclZpZXciLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwiX2dldEZyYW1lIiwiX2Vuc3VyZVRyYW5zaXRpb25PYmplY3QiLCJfY29tcG9zZVRyYW5zaXRpb24iLCJlbnRyeSIsInBsYXRmb3JtRW50cnlQcm9wIiwiZW50cnlQcm9wIiwicGxhdGZvcm1Qcm9wIiwibm90aWZ5UGFnZU1vdW50ZWQiLCJwYWdlVm0iLCJuYXZpZ2F0ZSIsImJhY2siLCJnb0JhY2siLCJwYWdlIiwiaXNCYWNrTmF2aWdhdGlvbiIsIm9mZiIsImJhY2tzdGFja0VudHJ5IiwidGlkIiwidlRlbXBsYXRlIiwiaWYiLCJUZW1wbGF0ZUJhZyIsInJlZ2lzdGVyVGVtcGxhdGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsImNvbmRpdGlvbiIsInNjb3BlZEZuIiwiZ2V0Q29uZGl0aW9uRm4iLCJrZXllZFRlbXBsYXRlIiwiVnVlS2V5ZWRUZW1wbGF0ZSIsInRlbXBsYXRlU2VsZWN0b3JGbiIsImdldEtleWVkVGVtcGxhdGUiLCJnZXRBdmFpbGFibGUiLCJfa2V5IiwiX3Njb3BlZEZuIiwicHJvdG90eXBlQWNjZXNzb3JzJDEkMSIsImxpc3RWaWV3IiwiaXRlbVRhcCIsIm9uSXRlbVRhcCIsIm9uSXRlbUxvYWRpbmciLCJfaXRlbVRlbXBsYXRlU2VsZWN0b3IiLCJQQUdFX1JFRiIsIl9maW5kUGFyZW50RnJhbWUiLCJkaXNwb3NlIiwidGFiVmlldyIsInJlZ2lzdGVyVGFiIiwidGFiVmlld0l0ZW0iLCJfbmF0aXZlVmlldyIsImJvdHRvbU5hdmlnYXRpb24iLCJyZWdpc3RlclRhYlN0cmlwIiwidGFiU3RyaXAiLCJyZWdpc3RlclRhYkNvbnRlbnRJdGVtIiwidGFiQ29udGVudEl0ZW0iLCJ0YWJzIiwicmVnaXN0ZXJUYWJTdHJpcEl0ZW0iLCJ0YWJTdHJpcEl0ZW0iLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwiZWxlbWVudE1hcCIsIm5hdGl2ZVJlZ0V4cCIsImRhc2hSZWdFeHAiLCJkZWZhdWx0Vmlld01ldGEiLCJza2lwQWRkVG9Eb20iLCJpc1VuYXJ5VGFnIiwidGFnTmFtZXNwYWNlIiwiY2FuQmVMZWZ0T3BlblRhZyIsIm5vcm1hbGl6ZUVsZW1lbnROYW1lIiwiZWxlbWVudE5hbWUiLCJyZXNvbHZlciIsIm1ldGEiLCJub3JtYWxpemVkTmFtZSIsImdldEVsZW1lbnRNYXAiLCJnZXRWaWV3Q2xhc3MiLCJnZXRWaWV3TWV0YSIsImlzS25vd25WaWV3IiwiQWN0aW9uQmFyIiwiQWN0aW9uSXRlbSIsIkxpc3RWaWV3IiwiTmF2aWdhdGlvbkJ1dHRvbiIsIlRhYlZpZXciLCJUYWJWaWV3SXRlbSIsIkJvdHRvbU5hdmlnYXRpb24iLCJUYWJzIiwiVGFiU3RyaXAiLCJUYWJTdHJpcEl0ZW0iLCJUYWJDb250ZW50SXRlbSIsIkRhdGVQaWNrZXIiLCJBYnNvbHV0ZUxheW91dCIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiQm9yZGVyIiwiQnV0dG9uIiwiQ29udGVudFZpZXciLCJEb2NrTGF5b3V0IiwiR3JpZExheW91dCIsIkh0bWxWaWV3IiwiSW1hZ2UiLCJMaXN0UGlja2VyIiwiUGFnZSIsIlBsYWNlaG9sZGVyIiwiUHJvZ3Jlc3MiLCJTY3JvbGxWaWV3IiwiU2VhcmNoQmFyIiwiU2VnbWVudGVkQmFyIiwiU2VnbWVudGVkQmFySXRlbSIsIlNsaWRlciIsIkZsZXhib3hMYXlvdXQiLCJTd2l0Y2giLCJUZXh0RmllbGQiLCJUZXh0VmlldyIsIlRpbWVQaWNrZXIiLCJXZWJWaWV3IiwiV3JhcExheW91dCIsIkZvcm1hdHRlZFN0cmluZyIsIlNwYW4iLCJGcmFtZSIsImluc2VydENoaWxkIiwiYXRJbmRleCIsImlzb2JqZWN0IiwiaXNPYmplY3RPYmplY3QiLCJpc1BsYWluT2JqZWN0JDEiLCJwcm90Iiwic2V0JDEiLCJpc09iamVjdCQyIiwibWVyZ2UiLCJvcmlnIiwiY3JlYXRlS2V5IiwibWVtbyIsInNlcGFyYXRvciIsInBhdHRlcm4iLCJzZXRWYWx1ZSIsImlzVmlldyIsImlzTGF5b3V0IiwiTGF5b3V0QmFzZSIsImlzQ29udGVudFZpZXciLCJwYXJlbnRWaWV3IiwiZ2V0Q2hpbGRJbmRleCIsIl9hZGRDaGlsZEZyb21CdWlsZGVyIiwiWE1MX0FUVFJJQlVURVMiLCJWaWV3Tm9kZSIsIl90YWdOYW1lIiwicHJldlNpYmxpbmciLCJfb3duZXJEb2N1bWVudCIsIl9tZXRhIiwicHJvdG90eXBlQWNjZXNzb3JzJDIiLCJsYXN0Q2hpbGQiLCJvd25lckRvY3VtZW50IiwibnYiLCJlbmRzV2l0aCIsIlhtbFBhcnNlciIsIl9kZXJlZmVyZW5jZUVudGl0aWVzIiwic2V0VGV4dCIsInJlZmVyZW5jZU5vZGUiLCJyZW1vdmVDaGlsZCQxIiwiVlVFX0VMRU1FTlRfUkVGIiwiRWxlbWVudE5vZGUiLCJ2aWV3Q2xhc3MiLCJDb21tZW50Tm9kZSIsIlRleHROb2RlIiwiRG9jdW1lbnROb2RlIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXNwYWNlIiwiX1Z1ZSIsInNldFZ1ZSIsIlZVRV9WRVJTSU9OIiwiTlNfVlVFX1ZFUlNJT04iLCJpbmZvVHJhY2UiLCJuYW1lc3BhY2VNYXAiLCJjcmVhdGVFbGVtZW50JDEiLCJuZXdOb2RlIiwiZWxlbWVudE5vZGUiLCJzY29wZUlkIiwiaGUiLCJkZWNvZGUiLCJodG1sIiwiaXNVbmFyeVRhZyQxIiwiY2FuQmVMZWZ0T3BlblRhZyQxIiwiaXNOb25QaHJhc2luZ1RhZyIsImF0dHJpYnV0ZSIsImR5bmFtaWNBcmdBdHRyaWJ1dGUiLCJuY25hbWUiLCJxbmFtZUNhcHR1cmUiLCJzdGFydFRhZ09wZW4iLCJzdGFydFRhZ0Nsb3NlIiwiZG9jdHlwZSIsImNvbW1lbnQiLCJjb25kaXRpb25hbENvbW1lbnQiLCJpc1BsYWluVGV4dEVsZW1lbnQiLCJyZUNhY2hlIiwiZGVjb2RpbmdNYXAiLCJlbmNvZGVkQXR0ciIsImVuY29kZWRBdHRyV2l0aE5ld0xpbmVzIiwiaXNJZ25vcmVOZXdsaW5lVGFnIiwic2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lIiwiZGVjb2RlQXR0ciIsInNob3VsZERlY29kZU5ld2xpbmVzIiwicGFyc2VIVE1MIiwiZXhwZWN0SFRNTCIsImxhc3RUYWciLCJ0ZXh0RW5kIiwiY29tbWVudEVuZCIsInNob3VsZEtlZXBDb21tZW50IiwiYWR2YW5jZSIsImNvbmRpdGlvbmFsRW5kIiwiZG9jdHlwZU1hdGNoIiwiZW5kVGFnTWF0Y2giLCJjdXJJbmRleCIsInBhcnNlRW5kVGFnIiwic3RhcnRUYWdNYXRjaCIsInBhcnNlU3RhcnRUYWciLCJoYW5kbGVTdGFydFRhZyIsInJlc3QiLCJjaGFycyIsImVuZFRhZ0xlbmd0aCIsInN0YWNrZWRUYWciLCJyZVN0YWNrZWRUYWciLCJyZXN0JDEiLCJhbGwiLCJhdHRyIiwidW5hcnlTbGFzaCIsInVuYXJ5Iiwic2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmIiwib3V0cHV0U291cmNlUmFuZ2UiLCJsb3dlckNhc2VkVGFnIiwicG9zIiwibG93ZXJDYXNlZFRhZ05hbWUiLCJ2YWxpZERpdmlzaW9uQ2hhclJFIiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsImZpbHRlcnMiLCJwdXNoRmlsdGVyIiwid3JhcEZpbHRlciIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsIm9wZW4iLCJjbG9zZSIsInBhcnNlVGV4dCIsInRhZ1JFIiwicmF3VG9rZW5zIiwidG9rZW5WYWx1ZSIsImdlbkNvbXBvbmVudE1vZGVsIiwibnVtYmVyIiwiYmFzZVZhbHVlRXhwcmVzc2lvbiIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsInBhcnNlTW9kZWwiLCJjaHIiLCJpbmRleCQxIiwiZXhwcmVzc2lvblBvcyIsImV4cHJlc3Npb25FbmRQb3MiLCJsYXN0SW5kZXhPZiIsImVvZiIsImlzU3RyaW5nU3RhcnQiLCJwYXJzZVN0cmluZyIsInBhcnNlQnJhY2tldCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwiYmFzZVdhcm4iLCJyYW5nZSIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwiZHluYW1pYyIsInJhbmdlU2V0SXRlbSIsInBsYWluIiwiYWRkQXR0ciIsImR5bmFtaWNBdHRycyIsImFkZFJhd0F0dHIiLCJhdHRyc01hcCIsImF0dHJzTGlzdCIsImFkZERpcmVjdGl2ZSIsImlzRHluYW1pY0FyZyIsInByZXBlbmRNb2RpZmllck1hcmtlciIsImFkZEhhbmRsZXIiLCJpbXBvcnRhbnQiLCJwcmV2ZW50IiwibWlkZGxlIiwibmF0aXZlIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsInVuc2hpZnQiLCJnZXRSYXdCaW5kaW5nQXR0ciIsInJhd0F0dHJzTWFwIiwiZ2V0QmluZGluZ0F0dHIiLCJnZXRTdGF0aWMiLCJkeW5hbWljVmFsdWUiLCJnZXRBbmRSZW1vdmVBdHRyIiwic3RhdGljVmFsdWUiLCJyZW1vdmVGcm9tTWFwIiwiZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgiLCJvblJFIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJkeW5hbWljQXJnUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJzbG90UkUiLCJsaW5lQnJlYWtSRSIsIndoaXRlc3BhY2VSRSQxIiwiaW52YWxpZEF0dHJpYnV0ZVJFIiwiZGVjb2RlSFRNTENhY2hlZCIsImVtcHR5U2xvdFNjb3BlVG9rZW4iLCJ3YXJuJDEiLCJ0cmFuc2Zvcm1zIiwicHJlVHJhbnNmb3JtcyIsInBvc3RUcmFuc2Zvcm1zIiwicGxhdGZvcm1Jc1ByZVRhZyIsInBsYXRmb3JtTXVzdFVzZVByb3AiLCJwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSIsIm1heWJlQ29tcG9uZW50IiwiY3JlYXRlQVNURWxlbWVudCIsIm1ha2VBdHRyc01hcCIsImlzUHJlVGFnIiwicHJlc2VydmVXaGl0ZXNwYWNlIiwid2hpdGVzcGFjZU9wdGlvbiIsImN1cnJlbnRQYXJlbnQiLCJpblByZSIsIndhcm5lZCIsIndhcm5PbmNlIiwiY2xvc2VFbGVtZW50IiwidHJpbUVuZGluZ1doaXRlc3BhY2UiLCJwcm9jZXNzZWQiLCJwcm9jZXNzRWxlbWVudCIsImVsc2VpZiIsImVsc2UiLCJjaGVja1Jvb3RDb25zdHJhaW50cyIsImFkZElmQ29uZGl0aW9uIiwiZm9yYmlkZGVuIiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJsYXN0Tm9kZSIsImNvbW1lbnRzIiwic3RhcnQkMSIsImd1YXJkSUVTVkdCdWciLCJjdW11bGF0ZWQiLCJpc0ZvcmJpZGRlblRhZyIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJlbmQkMSIsImlzVGV4dFRhZyIsInByb2Nlc3NLZXkiLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3RDb250ZW50IiwicHJvY2Vzc1Nsb3RPdXRsZXQiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiZm9yIiwiaXRlcmF0b3IyIiwiaXRlcmF0b3IxIiwiY2hlY2tJbkZvciIsInBhcnNlRm9yIiwiaW5NYXRjaCIsIml0ZXJhdG9yTWF0Y2giLCJmaW5kUHJldkVsZW1lbnQiLCJpZkNvbmRpdGlvbnMiLCJzbG90VGFyZ2V0RHluYW1pYyIsInNsb3RCaW5kaW5nIiwiZ2V0U2xvdE5hbWUiLCJzbG90QmluZGluZyQxIiwicmVmJDEiLCJkeW5hbWljJDEiLCJzbG90Q29udGFpbmVyIiwiYmluZGluZyIsInNsb3ROYW1lIiwic3luY0dlbiIsImlzRHluYW1pYyIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJjYW1lbCIsImFyZ01hdGNoIiwiY2hlY2tGb3JBbGlhc01vZGVsIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJfZWwiLCJpc1N0YXRpY0tleSIsImlzUGxhdGZvcm1SZXNlcnZlZFRhZyIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJnZW5TdGF0aWNLZXlzJDEiLCJvcHRpbWl6ZSIsIm1hcmtTdGF0aWMkMSIsIm1hcmtTdGF0aWNSb290cyIsInN0YXRpYyIsImwkMSIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIiwiZm5FeHBSRSIsImZuSW52b2tlUkUiLCJzaW1wbGVQYXRoUkUiLCJlc2MiLCJ0YWIiLCJzcGFjZSIsInVwIiwiZG93biIsImtleU5hbWVzIiwiZ2VuR3VhcmQiLCJtb2RpZmllckNvZGUiLCJzdG9wIiwiY3RybCIsImFsdCIsImdlbkhhbmRsZXJzIiwic3RhdGljSGFuZGxlcnMiLCJkeW5hbWljSGFuZGxlcnMiLCJoYW5kbGVyQ29kZSIsImdlbkhhbmRsZXIiLCJpc01ldGhvZFBhdGgiLCJpc0Z1bmN0aW9uRXhwcmVzc2lvbiIsImlzRnVuY3Rpb25JbnZvY2F0aW9uIiwiY29kZSIsImdlbk1vZGlmaWVyQ29kZSIsImtleU1vZGlmaWVyIiwiZ2VuS2V5RmlsdGVyIiwiZ2VuRmlsdGVyQ29kZSIsImtleVZhbCIsImtleUNvZGUiLCJrZXlOYW1lIiwid3JhcExpc3RlbmVycyIsImJpbmQkMSIsIndyYXBEYXRhIiwiYmFzZURpcmVjdGl2ZXMiLCJjbG9hayIsIkNvZGVnZW5TdGF0ZSIsImRhdGFHZW5GbnMiLCJvbmNlSWQiLCJnZW5lcmF0ZSIsImFzdCIsInN0YXRlIiwiZ2VuRWxlbWVudCIsInN0YXRpY1Byb2Nlc3NlZCIsImdlblN0YXRpYyIsIm9uY2VQcm9jZXNzZWQiLCJnZW5PbmNlIiwiZm9yUHJvY2Vzc2VkIiwiZ2VuRm9yIiwiaWZQcm9jZXNzZWQiLCJnZW5JZiIsImdlbkNoaWxkcmVuIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEiLCJvcmlnaW5hbFByZVN0YXRlIiwiYWx0R2VuIiwiYWx0RW1wdHkiLCJnZW5JZkNvbmRpdGlvbnMiLCJjb25kaXRpb25zIiwiZ2VuVGVybmFyeUV4cCIsImFsdEhlbHBlciIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJoYXNSdW50aW1lIiwibmVlZFJ1bnRpbWUiLCJnZW4iLCJpbmxpbmVSZW5kZXJGbnMiLCJjb250YWluc1Nsb3RDaGlsZCIsIm5lZWRzS2V5IiwiZ2VuZXJhdGVkU2xvdHMiLCJnZW5TY29wZWRTbG90IiwiaXNMZWdhY3lTeW50YXgiLCJyZXZlcnNlUHJveHkiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJub3JtYWxpemF0aW9uVHlwZSQxIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2VuQ29tbWVudCIsImdlblRleHQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJjb21wb25lbnROYW1lIiwic3RhdGljUHJvcHMiLCJkeW5hbWljUHJvcHMiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidW5hcnlPcGVyYXRvcnNSRSIsInN0cmlwU3RyaW5nUkUiLCJkZXRlY3RFcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRXZlbnQiLCJjaGVja0V4cHJlc3Npb24iLCJzdGlwcGVkIiwia2V5d29yZE1hdGNoIiwiY2hlY2tJZGVudGlmaWVyIiwiaWRlbnQiLCJnZW5lcmF0ZUNvZGVGcmFtZSIsImxpbmVzIiwiY291bnQiLCJyZXBlYXQkMSIsImxpbmVMZW5ndGgiLCJwYWQiLCJsZW5ndGgkMSIsIm1pbiIsImNyZWF0ZUZ1bmN0aW9uIiwiZXJyb3JzIiwiY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiIsImNvbXBpbGUiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJjb21waWxlZCIsInRpcHMiLCJmbkdlbkVycm9ycyIsImNyZWF0ZUNvbXBpbGVyQ3JlYXRvciIsImJhc2VDb21waWxlIiwiY3JlYXRlQ29tcGlsZXIiLCJiYXNlT3B0aW9ucyIsImZpbmFsT3B0aW9ucyIsImxlYWRpbmdTcGFjZUxlbmd0aCIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhJDEiLCJjbGFzc18kMSIsIm5vcm1hbGl6ZSQxIiwidHJhbnNmb3JtTm9kZSQxIiwicGFyc2VTdGF0aWNTdHlsZSIsInN0eWxlUmVzdWx0Iiwic3R5bGVCaW5kaW5nIiwiZ2VuRGF0YSQyIiwic3R5bGVMaXN0Iiwic3R5bGUkMSIsInByZVRyYW5zZm9ybU5vZGUiLCJ2Zm9yIiwiZm9yXyIsInByZVRyYW5zZm9ybU5vZGUkMSIsInJvdXRlciIsInByZVRyYW5zZm9ybU5vZGUkMiIsImJ1aWxkU2NvcGVTdHJpbmciLCJ2VGVtcGxhdGUkMSIsInRyYW5zZm9ybU5vZGUkMiIsImZpbmQiLCJhdHRyTmFtZSIsIm1vZHMiLCJtb2R1bGVzJDEiLCJnZW5EZWZhdWx0TW9kZWwiLCJkaXJlY3RpdmVzJDEiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5pdE1peGluJDEiLCJtaXhpbiIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiVnVlQ29tcG9uZW50IiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIkNvbXAiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJkZWZpbml0aW9uIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJidWlsdEluQ29tcG9uZW50cyIsImluaXRHbG9iYWxBUEkiLCJjb25maWdEZWYiLCJ1dGlsIiwib2JzZXJ2YWJsZSIsInNzckNvbnRleHQiLCJ2ZXJzaW9uIiwibG9jYXRlTm9kZSIsIm9yaWdpbmFsVmlzaWJpbGl0eSIsIl9fdk9yaWdpbmFsVmlzaWJpbGl0eSIsInVuYmluZCIsInZpZXckMSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsIiRkb2N1bWVudCIsIiRzdGFydCIsIkFwcENvbnN0cnVjdG9yIiwibGF1bmNoRXZlbnQiLCJfZmluZFBhcmVudE1vZGFsRW50cnkiLCJNb2RhbFBsdWdpbiIsIiRtb2RhbCIsImNsb3NlQ2IiLCIkc2hvd01vZGFsIiwibW9kYWxQYWdlIiwiY2xvc2VNb2RhbCIsIm5hdkVudHJ5SW5zdGFuY2UiLCJjbG9zZUNhbGxiYWNrIiwic2hvd01vZGFsIiwiZ2V0RnJhbWVJbnN0YW5jZSIsImdldEZyYW1lQnlJZCIsImZpbmRQYXJlbnROYXZpZ2F0aW9uRW50cnkiLCJOYXZpZ2F0b3JQbHVnaW4iLCIkbmF2aWdhdGVCYWNrIiwibmF2RW50cnkiLCJkZWZhdWx0T3B0aW9ucyIsIiRuYXZpZ2F0ZVRvIiwibmV3TGluZVJlZ0V4cCIsImRlYnVnIiwiX19vbkxpdmVTeW5jQ29yZSIsInRvcG1vc3QiLCJjdXJyZW50UGFnZSIsIm1vZGFsIiwiYWRkQ3NzRmlsZSIsImdldENzc0ZpbGVOYW1lIiwiX19WVUVfSE9UX01BUF9fIiwiaW5zdGFsbGVkIiwiaXNCcm93c2VyaWZ5IiwiaW5pdEhvb2tOYW1lIiwidnVlIiwiYnJvd3NlcmlmeSIsImNvbXBhdGlibGUiLCJjcmVhdGVSZWNvcmQiLCJtYWtlT3B0aW9uc0hvdCIsImluc3RhbmNlcyIsImlzUmVjb3JkZWQiLCJpbmplY3RIb29rIiwicmVjb3JkIiwidHJ5V3JhcCIsInVwZGF0ZU9wdGlvbnMiLCJvbGRPcHRpb25zIiwibmV3T3B0aW9ucyIsInJlcmVuZGVyIiwiaW5zdGFuY2UiLCJyZXN0b3JlIiwicGF0Y2hTY29wZWRTbG90cyIsImluamVjdFN0eWxlcyIsIl9pbmplY3RTdHlsZXMiLCJyZWxvYWQiLCJuZXdDdG9yIiwicmVsZWFzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxPQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxJQUFJQyxLQUFLLEdBQUdDLG1CQUFPLENBQUMsbURBQUQsQ0FBbkI7O0FBQ0EsSUFBSUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLDBEQUFELENBQXpCOztBQUNBLElBQUlFLFFBQVEsR0FBR0YsbUJBQU8sQ0FBQyxrREFBRCxDQUF0Qjs7QUFDQSxJQUFJRyxLQUFLLEdBQUcsR0FBWjtBQUNBLElBQUlDLFNBQVMsR0FBRyxxREFBaEI7O0FBQ0EsSUFBSUMsS0FBSyxHQUFJLFlBQVk7QUFDckIsV0FBU0EsS0FBVCxHQUFpQjtBQUNiLFFBQUlDLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUN4QixVQUFJQyxHQUFHLEdBQUdGLFNBQVMsQ0FBQyxDQUFELENBQW5COztBQUNBLFVBQUlQLEtBQUssQ0FBQ1UsUUFBTixDQUFlRCxHQUFmLENBQUosRUFBeUI7QUFDckIsWUFBSUUsV0FBVyxDQUFDRixHQUFELENBQWYsRUFBc0I7QUFDbEIsZUFBS0csS0FBTCxHQUFhQyxpQkFBaUIsQ0FBQ0osR0FBRCxDQUE5QjtBQUNILFNBRkQsTUFHSyxJQUFJSyxXQUFXLENBQUNMLEdBQUQsQ0FBZixFQUFzQjtBQUN2QixlQUFLRyxLQUFMLEdBQWFHLGlCQUFpQixDQUFDTixHQUFELENBQTlCO0FBQ0gsU0FGSSxNQUdBLElBQUlQLFdBQVcsQ0FBQ2MsV0FBWixDQUF3QlAsR0FBeEIsQ0FBSixFQUFrQztBQUNuQyxjQUFJUSxHQUFHLEdBQUdmLFdBQVcsQ0FBQ2dCLGFBQVosQ0FBMEJULEdBQTFCLENBQVY7QUFDQSxlQUFLVSxLQUFMLEdBQWFWLEdBQWI7QUFDQSxlQUFLRyxLQUFMLEdBQWEsS0FBS1EsZUFBTCxDQUFxQkgsR0FBckIsQ0FBYjtBQUNILFNBSkksTUFLQSxJQUFJWixTQUFTLENBQUNnQixJQUFWLENBQWVaLEdBQWYsQ0FBSixFQUF5QjtBQUMxQixjQUFJUSxHQUFHLEdBQUcsS0FBS0ssYUFBTCxDQUFtQmIsR0FBbkIsQ0FBVjs7QUFDQSxlQUFLRyxLQUFMLEdBQWEsS0FBS1EsZUFBTCxDQUFxQkgsR0FBckIsQ0FBYjtBQUNILFNBSEksTUFJQTtBQUNELGdCQUFNLElBQUlNLEtBQUosQ0FBVSxvQkFBb0JkLEdBQTlCLENBQU47QUFDSDtBQUNKLE9BbkJELE1Bb0JLLElBQUlULEtBQUssQ0FBQ3dCLFFBQU4sQ0FBZWYsR0FBZixDQUFKLEVBQXlCO0FBQzFCLGFBQUtHLEtBQUwsR0FBYUgsR0FBRyxLQUFLLENBQXJCO0FBQ0gsT0FGSSxNQUdBO0FBQ0QsY0FBTSxJQUFJYyxLQUFKLENBQVUseUNBQVYsQ0FBTjtBQUNIO0FBQ0osS0E1QkQsTUE2QkssSUFBSWhCLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUM3QixXQUFLSSxLQUFMLEdBQWEsQ0FBQ0wsU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWhCLElBQXdCLFVBQXhCLEdBQ1AsQ0FBQ0EsU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWhCLElBQXdCLFVBRGpCLEdBRVAsQ0FBQ0EsU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWhCLElBQXdCLFVBRmpCLEdBR1AsQ0FBQ0EsU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWhCLElBQXdCLFVBSDlCO0FBSUgsS0FMSSxNQU1BO0FBQ0QsWUFBTSxJQUFJZ0IsS0FBSixDQUFVLHlDQUFWLENBQU47QUFDSDtBQUNKOztBQUNEM0IsUUFBTSxDQUFDQyxjQUFQLENBQXNCUyxLQUFLLENBQUNtQixTQUE1QixFQUF1QyxHQUF2QyxFQUE0QztBQUN4Q0MsT0FBRyxFQUFFLGVBQVk7QUFBRSxhQUFRLEtBQUtkLEtBQUwsR0FBYSxVQUFkLEdBQTRCLElBQW5DO0FBQTBDLEtBRHJCO0FBRXhDZSxjQUFVLEVBQUUsSUFGNEI7QUFHeENDLGdCQUFZLEVBQUU7QUFIMEIsR0FBNUM7QUFLQWhDLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQlMsS0FBSyxDQUFDbUIsU0FBNUIsRUFBdUMsR0FBdkMsRUFBNEM7QUFDeENDLE9BQUcsRUFBRSxlQUFZO0FBQUUsYUFBUSxLQUFLZCxLQUFMLEdBQWEsVUFBZCxHQUE0QixJQUFuQztBQUEwQyxLQURyQjtBQUV4Q2UsY0FBVSxFQUFFLElBRjRCO0FBR3hDQyxnQkFBWSxFQUFFO0FBSDBCLEdBQTVDO0FBS0FoQyxRQUFNLENBQUNDLGNBQVAsQ0FBc0JTLEtBQUssQ0FBQ21CLFNBQTVCLEVBQXVDLEdBQXZDLEVBQTRDO0FBQ3hDQyxPQUFHLEVBQUUsZUFBWTtBQUFFLGFBQVEsS0FBS2QsS0FBTCxHQUFhLFVBQWQsR0FBNEIsSUFBbkM7QUFBMEMsS0FEckI7QUFFeENlLGNBQVUsRUFBRSxJQUY0QjtBQUd4Q0MsZ0JBQVksRUFBRTtBQUgwQixHQUE1QztBQUtBaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCUyxLQUFLLENBQUNtQixTQUE1QixFQUF1QyxHQUF2QyxFQUE0QztBQUN4Q0MsT0FBRyxFQUFFLGVBQVk7QUFBRSxhQUFRLEtBQUtkLEtBQUwsR0FBYSxVQUFkLEdBQTRCLElBQW5DO0FBQTBDLEtBRHJCO0FBRXhDZSxjQUFVLEVBQUUsSUFGNEI7QUFHeENDLGdCQUFZLEVBQUU7QUFIMEIsR0FBNUM7QUFLQWhDLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQlMsS0FBSyxDQUFDbUIsU0FBNUIsRUFBdUMsTUFBdkMsRUFBK0M7QUFDM0NDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsYUFBTyxLQUFLZCxLQUFaO0FBQ0gsS0FIMEM7QUFJM0NlLGNBQVUsRUFBRSxJQUorQjtBQUszQ0MsZ0JBQVksRUFBRTtBQUw2QixHQUEvQztBQU9BaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCUyxLQUFLLENBQUNtQixTQUE1QixFQUF1QyxLQUF2QyxFQUE4QztBQUMxQ0MsT0FBRyxFQUFFLGVBQVk7QUFDYixVQUFJLEtBQUtHLENBQUwsS0FBVyxJQUFmLEVBQXFCO0FBQ2pCLGVBQU8sQ0FBQyxNQUFNLEtBQUtDLGVBQUwsQ0FBcUIsS0FBS0MsQ0FBMUIsQ0FBTixHQUFxQyxLQUFLRCxlQUFMLENBQXFCLEtBQUtFLENBQTFCLENBQXJDLEdBQW9FLEtBQUtGLGVBQUwsQ0FBcUIsS0FBS0csQ0FBMUIsQ0FBckUsRUFBbUdDLFdBQW5HLEVBQVA7QUFDSCxPQUZELE1BR0s7QUFDRCxlQUFPLENBQUMsTUFBTSxLQUFLSixlQUFMLENBQXFCLEtBQUtELENBQTFCLENBQU4sR0FBcUMsS0FBS0MsZUFBTCxDQUFxQixLQUFLQyxDQUExQixDQUFyQyxHQUFvRSxLQUFLRCxlQUFMLENBQXFCLEtBQUtFLENBQTFCLENBQXBFLEdBQW1HLEtBQUtGLGVBQUwsQ0FBcUIsS0FBS0csQ0FBMUIsQ0FBcEcsRUFBa0lDLFdBQWxJLEVBQVA7QUFDSDtBQUNKLEtBUnlDO0FBUzFDUCxjQUFVLEVBQUUsSUFUOEI7QUFVMUNDLGdCQUFZLEVBQUU7QUFWNEIsR0FBOUM7QUFZQWhDLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQlMsS0FBSyxDQUFDbUIsU0FBNUIsRUFBdUMsTUFBdkMsRUFBK0M7QUFDM0NDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsYUFBTyxLQUFLUCxLQUFaO0FBQ0gsS0FIMEM7QUFJM0NRLGNBQVUsRUFBRSxJQUorQjtBQUszQ0MsZ0JBQVksRUFBRTtBQUw2QixHQUEvQztBQU9BaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCUyxLQUFLLENBQUNtQixTQUE1QixFQUF1QyxLQUF2QyxFQUE4QztBQUMxQ0MsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPUyxTQUFQO0FBQ0gsS0FIeUM7QUFJMUNSLGNBQVUsRUFBRSxJQUo4QjtBQUsxQ0MsZ0JBQVksRUFBRTtBQUw0QixHQUE5QztBQU9BaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCUyxLQUFLLENBQUNtQixTQUE1QixFQUF1QyxTQUF2QyxFQUFrRDtBQUM5Q0MsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPUyxTQUFQO0FBQ0gsS0FINkM7QUFJOUNSLGNBQVUsRUFBRSxJQUprQztBQUs5Q0MsZ0JBQVksRUFBRTtBQUxnQyxHQUFsRDs7QUFPQXRCLE9BQUssQ0FBQ21CLFNBQU4sQ0FBZ0JMLGVBQWhCLEdBQWtDLFVBQVVILEdBQVYsRUFBZTtBQUM3QyxRQUFJQSxHQUFHLENBQUNtQixNQUFKLENBQVcsQ0FBWCxNQUFrQixHQUF0QixFQUEyQjtBQUN2Qm5CLFNBQUcsR0FBR0EsR0FBRyxDQUFDb0IsTUFBSixDQUFXLENBQVgsQ0FBTjtBQUNIOztBQUNELFFBQUlwQixHQUFHLENBQUNULE1BQUosS0FBZSxDQUFuQixFQUFzQjtBQUNsQlMsU0FBRyxHQUFHQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNBLEdBQUcsQ0FBQyxDQUFELENBQVosR0FBa0JBLEdBQUcsQ0FBQyxDQUFELENBQXJCLEdBQTJCQSxHQUFHLENBQUMsQ0FBRCxDQUE5QixHQUFvQ0EsR0FBRyxDQUFDLENBQUQsQ0FBdkMsR0FBNkNBLEdBQUcsQ0FBQyxDQUFELENBQXREO0FBQ0gsS0FGRCxNQUdLLElBQUlBLEdBQUcsQ0FBQ1QsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQ3ZCUyxTQUFHLEdBQUdBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0EsR0FBRyxDQUFDLENBQUQsQ0FBWixHQUFrQkEsR0FBRyxDQUFDLENBQUQsQ0FBckIsR0FBMkJBLEdBQUcsQ0FBQyxDQUFELENBQTlCLEdBQW9DQSxHQUFHLENBQUMsQ0FBRCxDQUF2QyxHQUE2Q0EsR0FBRyxDQUFDLENBQUQsQ0FBaEQsR0FBc0RBLEdBQUcsQ0FBQyxDQUFELENBQXpELEdBQStEQSxHQUFHLENBQUMsQ0FBRCxDQUF4RTtBQUNIOztBQUNELFFBQUlxQixNQUFNLEdBQUdDLFFBQVEsQ0FBQ3RCLEdBQUQsRUFBTSxFQUFOLENBQXJCOztBQUNBLFFBQUlBLEdBQUcsQ0FBQ1QsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQ2xCOEIsWUFBTSxHQUFHLENBQUNBLE1BQU0sR0FBRyxVQUFWLElBQXdCLFVBQWpDO0FBQ0g7O0FBQ0QsV0FBT0EsTUFBUDtBQUNILEdBZkQ7O0FBZ0JBaEMsT0FBSyxDQUFDbUIsU0FBTixDQUFnQmUsTUFBaEIsR0FBeUIsVUFBVXpDLEtBQVYsRUFBaUI7QUFDdEMsV0FBT0EsS0FBSyxJQUFJLEtBQUswQyxJQUFMLEtBQWMxQyxLQUFLLENBQUMwQyxJQUFwQztBQUNILEdBRkQ7O0FBR0FuQyxPQUFLLENBQUNrQyxNQUFOLEdBQWUsVUFBVUUsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEI7QUFDckMsUUFBSSxDQUFDRCxNQUFELElBQVcsQ0FBQ0MsTUFBaEIsRUFBd0I7QUFDcEIsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsUUFBSSxDQUFDRCxNQUFELElBQVcsQ0FBQ0MsTUFBaEIsRUFBd0I7QUFDcEIsYUFBTyxLQUFQO0FBQ0g7O0FBQ0QsV0FBT0QsTUFBTSxDQUFDRixNQUFQLENBQWNHLE1BQWQsQ0FBUDtBQUNILEdBUkQ7O0FBU0FyQyxPQUFLLENBQUNzQyxPQUFOLEdBQWdCLFVBQVU3QyxLQUFWLEVBQWlCO0FBQzdCLFFBQUlDLEtBQUssQ0FBQzZDLGlCQUFOLENBQXdCOUMsS0FBeEIsS0FBa0NBLEtBQUssWUFBWU8sS0FBdkQsRUFBOEQ7QUFDMUQsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsUUFBSSxDQUFDTixLQUFLLENBQUNVLFFBQU4sQ0FBZVgsS0FBZixDQUFMLEVBQTRCO0FBQ3hCLGFBQU8sS0FBUDtBQUNIOztBQUNELFFBQUlHLFdBQVcsQ0FBQ2MsV0FBWixDQUF3QmpCLEtBQXhCLENBQUosRUFBb0M7QUFDaEMsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBT00sU0FBUyxDQUFDZ0IsSUFBVixDQUFldEIsS0FBZixLQUF5QlksV0FBVyxDQUFDWixLQUFELENBQXBDLElBQStDZSxXQUFXLENBQUNmLEtBQUQsQ0FBakU7QUFDSCxHQVhEOztBQVlBTyxPQUFLLENBQUNtQixTQUFOLENBQWdCSyxlQUFoQixHQUFrQyxVQUFVZ0IsU0FBVixFQUFxQjtBQUNuRCxRQUFJN0IsR0FBRyxHQUFHNkIsU0FBUyxDQUFDQyxRQUFWLENBQW1CLEVBQW5CLENBQVY7O0FBQ0EsUUFBSTlCLEdBQUcsQ0FBQ1QsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQ2xCUyxTQUFHLEdBQUcsTUFBTUEsR0FBWjtBQUNIOztBQUNELFdBQU9BLEdBQVA7QUFDSCxHQU5EOztBQU9BWCxPQUFLLENBQUNtQixTQUFOLENBQWdCSCxhQUFoQixHQUFnQyxVQUFVMEIsTUFBVixFQUFrQjtBQUM5QyxRQUFJQSxNQUFNLENBQUNaLE1BQVAsQ0FBYyxDQUFkLE1BQXFCaEMsS0FBckIsSUFBOEI0QyxNQUFNLENBQUN4QyxNQUFQLEtBQWtCLENBQXBELEVBQXVEO0FBQ25Ed0MsWUFBTSxHQUFHQSxNQUFNLENBQUNaLE1BQVAsQ0FBYyxDQUFkLElBQ0hZLE1BQU0sQ0FBQ1osTUFBUCxDQUFjLENBQWQsQ0FERyxHQUNnQlksTUFBTSxDQUFDWixNQUFQLENBQWMsQ0FBZCxDQURoQixHQUVIWSxNQUFNLENBQUNaLE1BQVAsQ0FBYyxDQUFkLENBRkcsR0FFZ0JZLE1BQU0sQ0FBQ1osTUFBUCxDQUFjLENBQWQsQ0FGaEIsR0FHSFksTUFBTSxDQUFDWixNQUFQLENBQWMsQ0FBZCxDQUhHLEdBR2dCWSxNQUFNLENBQUNaLE1BQVAsQ0FBYyxDQUFkLENBSHpCO0FBSUg7O0FBQ0QsV0FBT1ksTUFBUDtBQUNILEdBUkQ7O0FBU0ExQyxPQUFLLENBQUNtQixTQUFOLENBQWdCc0IsUUFBaEIsR0FBMkIsWUFBWTtBQUNuQyxXQUFPLEtBQUs5QixHQUFaO0FBQ0gsR0FGRDs7QUFHQVgsT0FBSyxDQUFDMkMsWUFBTixHQUFxQixVQUFVbEQsS0FBVixFQUFpQjtBQUNsQyxXQUFPb0MsU0FBUDtBQUNILEdBRkQ7O0FBR0EsU0FBTzdCLEtBQVA7QUFDSCxDQXBLWSxFQUFiOztBQXFLQVIsT0FBTyxDQUFDUSxLQUFSLEdBQWdCQSxLQUFoQjs7QUFDQSxTQUFTSyxXQUFULENBQXFCWixLQUFyQixFQUE0QjtBQUN4QixNQUFJbUQsT0FBTyxHQUFHbkQsS0FBSyxDQUFDb0QsV0FBTixFQUFkO0FBQ0EsU0FBTyxDQUFDRCxPQUFPLENBQUNFLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBNUIsSUFBaUNGLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQixPQUFoQixNQUE2QixDQUEvRCxLQUFxRUYsT0FBTyxDQUFDRSxPQUFSLENBQWdCLEdBQWhCLE1BQTBCRixPQUFPLENBQUMxQyxNQUFSLEdBQWlCLENBQXZIO0FBQ0g7O0FBQ0QsU0FBU00sV0FBVCxDQUFxQmYsS0FBckIsRUFBNEI7QUFDeEIsTUFBSW1ELE9BQU8sR0FBR25ELEtBQUssQ0FBQ29ELFdBQU4sRUFBZDtBQUNBLFNBQU8sQ0FBQ0QsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQTVCLElBQWlDRixPQUFPLENBQUNFLE9BQVIsQ0FBZ0IsT0FBaEIsTUFBNkIsQ0FBL0QsS0FBcUVGLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQixHQUFoQixNQUEwQkYsT0FBTyxDQUFDMUMsTUFBUixHQUFpQixDQUF2SDtBQUNIOztBQUNELFNBQVM2QyxtQkFBVCxDQUE2QnRELEtBQTdCLEVBQW9DO0FBQ2hDLE1BQUltRCxPQUFPLEdBQUduRCxLQUFLLENBQUNvRCxXQUFOLEVBQWQ7QUFDQSxNQUFJRyxLQUFLLEdBQUdKLE9BQU8sQ0FBQ0ssT0FBUixDQUFnQixlQUFoQixFQUFpQyxFQUFqQyxFQUNQQSxPQURPLENBQ0MsR0FERCxFQUNNLEVBRE4sRUFFUEMsSUFGTyxHQUVBQyxLQUZBLENBRU0sR0FGTixDQUFaO0FBR0EsTUFBSUMsQ0FBQyxHQUFHLEdBQVI7QUFDQSxNQUFJQyxDQUFDLEdBQUcsR0FBUjtBQUNBLE1BQUlDLENBQUMsR0FBRyxHQUFSO0FBQ0EsTUFBSS9CLENBQUMsR0FBRyxHQUFSOztBQUNBLE1BQUl5QixLQUFLLENBQUMsQ0FBRCxDQUFULEVBQWM7QUFDVkksS0FBQyxHQUFHbkIsUUFBUSxDQUFDZSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNFLElBQVQsRUFBRCxDQUFaO0FBQ0g7O0FBQ0QsTUFBSUYsS0FBSyxDQUFDLENBQUQsQ0FBVCxFQUFjO0FBQ1ZLLEtBQUMsR0FBR3BCLFFBQVEsQ0FBQ2UsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTRSxJQUFULEVBQUQsQ0FBWjtBQUNIOztBQUNELE1BQUlGLEtBQUssQ0FBQyxDQUFELENBQVQsRUFBYztBQUNWTSxLQUFDLEdBQUdyQixRQUFRLENBQUNlLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0UsSUFBVCxFQUFELENBQVo7QUFDSDs7QUFDRCxNQUFJRixLQUFLLENBQUMsQ0FBRCxDQUFULEVBQWM7QUFDVnpCLEtBQUMsR0FBR2dDLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxVQUFVLENBQUNULEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0UsSUFBVCxFQUFELENBQVYsR0FBOEIsR0FBekMsQ0FBSjtBQUNIOztBQUNELFNBQU87QUFBRUUsS0FBQyxFQUFFQSxDQUFMO0FBQVFDLEtBQUMsRUFBRUEsQ0FBWDtBQUFjQyxLQUFDLEVBQUVBLENBQWpCO0FBQW9CL0IsS0FBQyxFQUFFQTtBQUF2QixHQUFQO0FBQ0g7O0FBQ0QsU0FBU2hCLGlCQUFULENBQTJCZCxLQUEzQixFQUFrQztBQUM5QixNQUFJaUUsRUFBRSxHQUFHWCxtQkFBbUIsQ0FBQ3RELEtBQUQsQ0FBNUI7QUFBQSxNQUFxQ2dDLENBQUMsR0FBR2lDLEVBQUUsQ0FBQ04sQ0FBNUM7QUFBQSxNQUErQzFCLENBQUMsR0FBR2dDLEVBQUUsQ0FBQ0wsQ0FBdEQ7QUFBQSxNQUF5RDFCLENBQUMsR0FBRytCLEVBQUUsQ0FBQ0osQ0FBaEU7QUFBQSxNQUFtRS9CLENBQUMsR0FBR21DLEVBQUUsQ0FBQ25DLENBQTFFOztBQUNBLFNBQU8sQ0FBQ0EsQ0FBQyxHQUFHLElBQUwsSUFBYSxVQUFiLEdBQ0QsQ0FBQ0UsQ0FBQyxHQUFHLElBQUwsSUFBYSxVQURaLEdBRUQsQ0FBQ0MsQ0FBQyxHQUFHLElBQUwsSUFBYSxVQUZaLElBR0FDLENBQUMsR0FBRyxJQUhKLENBQVA7QUFJSDs7QUFDRCxTQUFTbEIsaUJBQVQsQ0FBMkJoQixLQUEzQixFQUFrQztBQUM5QixNQUFJaUUsRUFBRSxHQUFHWCxtQkFBbUIsQ0FBQ3RELEtBQUQsQ0FBNUI7QUFBQSxNQUFxQ2tFLENBQUMsR0FBR0QsRUFBRSxDQUFDTixDQUE1QztBQUFBLE1BQStDQyxDQUFDLEdBQUdLLEVBQUUsQ0FBQ0wsQ0FBdEQ7QUFBQSxNQUF5RE8sQ0FBQyxHQUFHRixFQUFFLENBQUNKLENBQWhFO0FBQUEsTUFBbUUvQixDQUFDLEdBQUdtQyxFQUFFLENBQUNuQyxDQUExRTs7QUFDQSxNQUFJc0MsRUFBRSxHQUFHaEUsUUFBUSxDQUFDaUUsb0JBQVQsQ0FBOEJILENBQTlCLEVBQWlDTixDQUFqQyxFQUFvQ08sQ0FBcEMsQ0FBVDtBQUFBLE1BQWlEbkMsQ0FBQyxHQUFHb0MsRUFBRSxDQUFDcEMsQ0FBeEQ7QUFBQSxNQUEyREMsQ0FBQyxHQUFHbUMsRUFBRSxDQUFDbkMsQ0FBbEU7QUFBQSxNQUFxRUMsQ0FBQyxHQUFHa0MsRUFBRSxDQUFDbEMsQ0FBNUU7O0FBQ0EsU0FBTyxDQUFDSixDQUFDLEdBQUcsSUFBTCxJQUFhLFVBQWIsR0FDRCxDQUFDRSxDQUFDLEdBQUcsSUFBTCxJQUFhLFVBRFosR0FFRCxDQUFDQyxDQUFDLEdBQUcsSUFBTCxJQUFhLFVBRlosSUFHQUMsQ0FBQyxHQUFHLElBSEosQ0FBUDtBQUlILEM7Ozs7Ozs7QUN6TkRyQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLE9BQUssRUFBRTtBQUFULENBQTdDOztBQUNBLElBQUlzRSxNQUFNLEdBQUdwRSxtQkFBTyxDQUFDLDBEQUFELENBQXBCOztBQUNBLElBQUlLLEtBQUssR0FBSSxVQUFVZ0UsTUFBVixFQUFrQjtBQUMzQkMsV0FBUyxDQUFDakUsS0FBRCxFQUFRZ0UsTUFBUixDQUFUOztBQUNBLFdBQVNoRSxLQUFULEdBQWlCO0FBQ2IsV0FBT2dFLE1BQU0sS0FBSyxJQUFYLElBQW1CQSxNQUFNLENBQUNFLEtBQVAsQ0FBYSxJQUFiLEVBQW1CakUsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRFgsUUFBTSxDQUFDQyxjQUFQLENBQXNCUyxLQUFLLENBQUNtQixTQUE1QixFQUF1QyxLQUF2QyxFQUE4QztBQUMxQ0MsT0FBRyxFQUFFLGVBQVk7QUFDYixVQUFJLENBQUMsS0FBSytDLElBQVYsRUFBZ0I7QUFDWixhQUFLQSxJQUFMLEdBQVlDLE9BQU8sQ0FBQ0MsS0FBUixHQUFnQkMseUJBQWhCLENBQTBDLEtBQUs3QyxDQUFMLEdBQVMsR0FBbkQsRUFBd0QsS0FBS0MsQ0FBTCxHQUFTLEdBQWpFLEVBQXNFLEtBQUtDLENBQUwsR0FBUyxHQUEvRSxFQUFvRixLQUFLSixDQUFMLEdBQVMsR0FBN0YsQ0FBWjtBQUNIOztBQUNELGFBQU8sS0FBSzRDLElBQVo7QUFDSCxLQU55QztBQU8xQzlDLGNBQVUsRUFBRSxJQVA4QjtBQVExQ0MsZ0JBQVksRUFBRTtBQVI0QixHQUE5Qzs7QUFVQXRCLE9BQUssQ0FBQzJDLFlBQU4sR0FBcUIsVUFBVWxELEtBQVYsRUFBaUI7QUFDbEMsUUFBSThFLElBQUksR0FBR0Msb0JBQW9CLENBQUMvRSxLQUFLLENBQUNnRixPQUFQLENBQS9CO0FBQ0EsV0FBTyxJQUFJekUsS0FBSixDQUFVdUQsSUFBSSxDQUFDQyxLQUFMLENBQVdlLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxHQUFyQixDQUFWLEVBQXFDaEIsSUFBSSxDQUFDQyxLQUFMLENBQVdlLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxHQUFyQixDQUFyQyxFQUFnRWhCLElBQUksQ0FBQ0MsS0FBTCxDQUFXZSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsR0FBckIsQ0FBaEUsRUFBMkZoQixJQUFJLENBQUNDLEtBQUwsQ0FBV2UsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVLEdBQXJCLENBQTNGLENBQVA7QUFDSCxHQUhEOztBQUlBLFNBQU92RSxLQUFQO0FBQ0gsQ0FwQlksQ0FvQlgrRCxNQUFNLENBQUMvRCxLQXBCSSxDQUFiOztBQXFCQVIsT0FBTyxDQUFDUSxLQUFSLEdBQWdCQSxLQUFoQixDOzs7Ozs7O0FDdkJBVixNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLE9BQUssRUFBRTtBQUFULENBQTdDO0FBQ0EsSUFBSWlGLFVBQVUsR0FBRyxFQUFqQjs7QUFDQSxTQUFTQyxhQUFULENBQXVCQyxJQUF2QixFQUE2Qm5GLEtBQTdCLEVBQW9DO0FBQ2hDaUYsWUFBVSxDQUFDRSxJQUFJLENBQUMvQixXQUFMLEVBQUQsQ0FBVixHQUFpQ3BELEtBQWpDO0FBQ0EsU0FBT0EsS0FBUDtBQUNIOztBQUNELFNBQVNpQixXQUFULENBQXFCa0UsSUFBckIsRUFBMkI7QUFDdkIsTUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDUCxXQUFPL0MsU0FBUDtBQUNIOztBQUNELFNBQU8rQyxJQUFJLENBQUMvQixXQUFMLE1BQXNCNkIsVUFBN0I7QUFDSDs7QUFDRGxGLE9BQU8sQ0FBQ2tCLFdBQVIsR0FBc0JBLFdBQXRCOztBQUNBLFNBQVNFLGFBQVQsQ0FBdUJnRSxJQUF2QixFQUE2QjtBQUN6QixNQUFJLENBQUNBLElBQUwsRUFBVztBQUNQLFdBQU8vQyxTQUFQO0FBQ0g7O0FBQ0QsU0FBTzZDLFVBQVUsQ0FBQ0UsSUFBSSxDQUFDL0IsV0FBTCxFQUFELENBQWpCO0FBQ0g7O0FBQ0RyRCxPQUFPLENBQUNvQixhQUFSLEdBQXdCQSxhQUF4QjtBQUNBcEIsT0FBTyxDQUFDcUYsV0FBUixHQUFzQkYsYUFBYSxDQUFDLGFBQUQsRUFBZ0IsV0FBaEIsQ0FBbkM7QUFDQW5GLE9BQU8sQ0FBQ3NGLFNBQVIsR0FBb0JILGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDdUYsWUFBUixHQUF1QkosYUFBYSxDQUFDLGNBQUQsRUFBaUIsU0FBakIsQ0FBcEM7QUFDQW5GLE9BQU8sQ0FBQ3dGLElBQVIsR0FBZUwsYUFBYSxDQUFDLE1BQUQsRUFBUyxTQUFULENBQTVCO0FBQ0FuRixPQUFPLENBQUN5RixVQUFSLEdBQXFCTixhQUFhLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FBbEM7QUFDQW5GLE9BQU8sQ0FBQzBGLEtBQVIsR0FBZ0JQLGFBQWEsQ0FBQyxPQUFELEVBQVUsU0FBVixDQUE3QjtBQUNBbkYsT0FBTyxDQUFDMkYsS0FBUixHQUFnQlIsYUFBYSxDQUFDLE9BQUQsRUFBVSxTQUFWLENBQTdCO0FBQ0FuRixPQUFPLENBQUM0RixNQUFSLEdBQWlCVCxhQUFhLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FBOUI7QUFDQW5GLE9BQU8sQ0FBQzZGLEtBQVIsR0FBZ0JWLGFBQWEsQ0FBQyxPQUFELEVBQVUsU0FBVixDQUE3QjtBQUNBbkYsT0FBTyxDQUFDOEYsY0FBUixHQUF5QlgsYUFBYSxDQUFDLGdCQUFELEVBQW1CLFNBQW5CLENBQXRDO0FBQ0FuRixPQUFPLENBQUMrRixJQUFSLEdBQWVaLGFBQWEsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQUE1QjtBQUNBbkYsT0FBTyxDQUFDZ0csVUFBUixHQUFxQmIsYUFBYSxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQWxDO0FBQ0FuRixPQUFPLENBQUNpRyxLQUFSLEdBQWdCZCxhQUFhLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0FBN0I7QUFDQW5GLE9BQU8sQ0FBQ2tHLFNBQVIsR0FBb0JmLGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDbUcsU0FBUixHQUFvQmhCLGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDb0csVUFBUixHQUFxQmpCLGFBQWEsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUFsQztBQUNBbkYsT0FBTyxDQUFDcUcsU0FBUixHQUFvQmxCLGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDc0csS0FBUixHQUFnQm5CLGFBQWEsQ0FBQyxPQUFELEVBQVUsU0FBVixDQUE3QjtBQUNBbkYsT0FBTyxDQUFDdUcsY0FBUixHQUF5QnBCLGFBQWEsQ0FBQyxnQkFBRCxFQUFtQixTQUFuQixDQUF0QztBQUNBbkYsT0FBTyxDQUFDd0csUUFBUixHQUFtQnJCLGFBQWEsQ0FBQyxVQUFELEVBQWEsU0FBYixDQUFoQztBQUNBbkYsT0FBTyxDQUFDeUcsT0FBUixHQUFrQnRCLGFBQWEsQ0FBQyxTQUFELEVBQVksU0FBWixDQUEvQjtBQUNBbkYsT0FBTyxDQUFDMEcsSUFBUixHQUFldkIsYUFBYSxDQUFDLE1BQUQsRUFBUyxTQUFULENBQTVCO0FBQ0FuRixPQUFPLENBQUMyRyxRQUFSLEdBQW1CeEIsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUM0RyxRQUFSLEdBQW1CekIsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUM2RyxhQUFSLEdBQXdCMUIsYUFBYSxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FBckM7QUFDQW5GLE9BQU8sQ0FBQzhHLFFBQVIsR0FBbUIzQixhQUFhLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0FBaEM7QUFDQW5GLE9BQU8sQ0FBQytHLFNBQVIsR0FBb0I1QixhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ2dILFNBQVIsR0FBb0I3QixhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ2lILFdBQVIsR0FBc0I5QixhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQztBQUNBbkYsT0FBTyxDQUFDa0gsY0FBUixHQUF5Qi9CLGFBQWEsQ0FBQyxnQkFBRCxFQUFtQixTQUFuQixDQUF0QztBQUNBbkYsT0FBTyxDQUFDbUgsVUFBUixHQUFxQmhDLGFBQWEsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUFsQztBQUNBbkYsT0FBTyxDQUFDb0gsVUFBUixHQUFxQmpDLGFBQWEsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUFsQztBQUNBbkYsT0FBTyxDQUFDcUgsT0FBUixHQUFrQmxDLGFBQWEsQ0FBQyxTQUFELEVBQVksU0FBWixDQUEvQjtBQUNBbkYsT0FBTyxDQUFDc0gsVUFBUixHQUFxQm5DLGFBQWEsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUFsQztBQUNBbkYsT0FBTyxDQUFDdUgsWUFBUixHQUF1QnBDLGFBQWEsQ0FBQyxjQUFELEVBQWlCLFNBQWpCLENBQXBDO0FBQ0FuRixPQUFPLENBQUN3SCxhQUFSLEdBQXdCckMsYUFBYSxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FBckM7QUFDQW5GLE9BQU8sQ0FBQ3lILGFBQVIsR0FBd0J0QyxhQUFhLENBQUMsZUFBRCxFQUFrQixTQUFsQixDQUFyQztBQUNBbkYsT0FBTyxDQUFDMEgsYUFBUixHQUF3QnZDLGFBQWEsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBQXJDO0FBQ0FuRixPQUFPLENBQUMySCxVQUFSLEdBQXFCeEMsYUFBYSxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQWxDO0FBQ0FuRixPQUFPLENBQUM0SCxRQUFSLEdBQW1CekMsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUM2SCxXQUFSLEdBQXNCMUMsYUFBYSxDQUFDLGFBQUQsRUFBZ0IsU0FBaEIsQ0FBbkM7QUFDQW5GLE9BQU8sQ0FBQzhILE9BQVIsR0FBa0IzQyxhQUFhLENBQUMsU0FBRCxFQUFZLFNBQVosQ0FBL0I7QUFDQW5GLE9BQU8sQ0FBQytILFVBQVIsR0FBcUI1QyxhQUFhLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FBbEM7QUFDQW5GLE9BQU8sQ0FBQ2dJLFNBQVIsR0FBb0I3QyxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ2lJLFdBQVIsR0FBc0I5QyxhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQztBQUNBbkYsT0FBTyxDQUFDa0ksV0FBUixHQUFzQi9DLGFBQWEsQ0FBQyxhQUFELEVBQWdCLFNBQWhCLENBQW5DO0FBQ0FuRixPQUFPLENBQUNtSSxPQUFSLEdBQWtCaEQsYUFBYSxDQUFDLFNBQUQsRUFBWSxTQUFaLENBQS9CO0FBQ0FuRixPQUFPLENBQUNvSSxTQUFSLEdBQW9CakQsYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUNxSSxVQUFSLEdBQXFCbEQsYUFBYSxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQWxDO0FBQ0FuRixPQUFPLENBQUNzSSxJQUFSLEdBQWVuRCxhQUFhLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0FBNUI7QUFDQW5GLE9BQU8sQ0FBQ3VJLFNBQVIsR0FBb0JwRCxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ3dJLElBQVIsR0FBZXJELGFBQWEsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQUE1QjtBQUNBbkYsT0FBTyxDQUFDeUksS0FBUixHQUFnQnRELGFBQWEsQ0FBQyxPQUFELEVBQVUsU0FBVixDQUE3QjtBQUNBbkYsT0FBTyxDQUFDMEksV0FBUixHQUFzQnZELGFBQWEsQ0FBQyxhQUFELEVBQWdCLFNBQWhCLENBQW5DO0FBQ0FuRixPQUFPLENBQUMySSxRQUFSLEdBQW1CeEQsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUM0SSxPQUFSLEdBQWtCekQsYUFBYSxDQUFDLFNBQUQsRUFBWSxTQUFaLENBQS9CO0FBQ0FuRixPQUFPLENBQUM2SSxTQUFSLEdBQW9CMUQsYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUM4SSxNQUFSLEdBQWlCM0QsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUMrSSxLQUFSLEdBQWdCNUQsYUFBYSxDQUFDLE9BQUQsRUFBVSxTQUFWLENBQTdCO0FBQ0FuRixPQUFPLENBQUNnSixLQUFSLEdBQWdCN0QsYUFBYSxDQUFDLE9BQUQsRUFBVSxTQUFWLENBQTdCO0FBQ0FuRixPQUFPLENBQUNpSixRQUFSLEdBQW1COUQsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUNrSixhQUFSLEdBQXdCL0QsYUFBYSxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FBckM7QUFDQW5GLE9BQU8sQ0FBQ21KLFNBQVIsR0FBb0JoRSxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ29KLFlBQVIsR0FBdUJqRSxhQUFhLENBQUMsY0FBRCxFQUFpQixTQUFqQixDQUFwQztBQUNBbkYsT0FBTyxDQUFDcUosU0FBUixHQUFvQmxFLGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDc0osVUFBUixHQUFxQm5FLGFBQWEsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUFsQztBQUNBbkYsT0FBTyxDQUFDdUosU0FBUixHQUFvQnBFLGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDd0osb0JBQVIsR0FBK0JyRSxhQUFhLENBQUMsc0JBQUQsRUFBeUIsU0FBekIsQ0FBNUM7QUFDQW5GLE9BQU8sQ0FBQ3lKLFNBQVIsR0FBb0J0RSxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQzBKLFVBQVIsR0FBcUJ2RSxhQUFhLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FBbEM7QUFDQW5GLE9BQU8sQ0FBQzJKLFNBQVIsR0FBb0J4RSxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQzRKLFdBQVIsR0FBc0J6RSxhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQztBQUNBbkYsT0FBTyxDQUFDNkosYUFBUixHQUF3QjFFLGFBQWEsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBQXJDO0FBQ0FuRixPQUFPLENBQUM4SixZQUFSLEdBQXVCM0UsYUFBYSxDQUFDLGNBQUQsRUFBaUIsU0FBakIsQ0FBcEM7QUFDQW5GLE9BQU8sQ0FBQytKLGNBQVIsR0FBeUI1RSxhQUFhLENBQUMsZ0JBQUQsRUFBbUIsU0FBbkIsQ0FBdEM7QUFDQW5GLE9BQU8sQ0FBQ2dLLGNBQVIsR0FBeUI3RSxhQUFhLENBQUMsZ0JBQUQsRUFBbUIsU0FBbkIsQ0FBdEM7QUFDQW5GLE9BQU8sQ0FBQ2lLLFdBQVIsR0FBc0I5RSxhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQztBQUNBbkYsT0FBTyxDQUFDa0ssSUFBUixHQUFlL0UsYUFBYSxDQUFDLE1BQUQsRUFBUyxTQUFULENBQTVCO0FBQ0FuRixPQUFPLENBQUNtSyxTQUFSLEdBQW9CaEYsYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUNvSyxLQUFSLEdBQWdCakYsYUFBYSxDQUFDLE9BQUQsRUFBVSxTQUFWLENBQTdCO0FBQ0FuRixPQUFPLENBQUNxSyxPQUFSLEdBQWtCbEYsYUFBYSxDQUFDLFNBQUQsRUFBWSxTQUFaLENBQS9CO0FBQ0FuRixPQUFPLENBQUNzSyxNQUFSLEdBQWlCbkYsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUN1SyxnQkFBUixHQUEyQnBGLGFBQWEsQ0FBQyxrQkFBRCxFQUFxQixTQUFyQixDQUF4QztBQUNBbkYsT0FBTyxDQUFDd0ssVUFBUixHQUFxQnJGLGFBQWEsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUFsQztBQUNBbkYsT0FBTyxDQUFDeUssWUFBUixHQUF1QnRGLGFBQWEsQ0FBQyxjQUFELEVBQWlCLFNBQWpCLENBQXBDO0FBQ0FuRixPQUFPLENBQUMwSyxZQUFSLEdBQXVCdkYsYUFBYSxDQUFDLGNBQUQsRUFBaUIsU0FBakIsQ0FBcEM7QUFDQW5GLE9BQU8sQ0FBQzJLLGNBQVIsR0FBeUJ4RixhQUFhLENBQUMsZ0JBQUQsRUFBbUIsU0FBbkIsQ0FBdEM7QUFDQW5GLE9BQU8sQ0FBQzRLLGVBQVIsR0FBMEJ6RixhQUFhLENBQUMsaUJBQUQsRUFBb0IsU0FBcEIsQ0FBdkM7QUFDQW5GLE9BQU8sQ0FBQzZLLGlCQUFSLEdBQTRCMUYsYUFBYSxDQUFDLG1CQUFELEVBQXNCLFNBQXRCLENBQXpDO0FBQ0FuRixPQUFPLENBQUM4SyxlQUFSLEdBQTBCM0YsYUFBYSxDQUFDLGlCQUFELEVBQW9CLFNBQXBCLENBQXZDO0FBQ0FuRixPQUFPLENBQUMrSyxlQUFSLEdBQTBCNUYsYUFBYSxDQUFDLGlCQUFELEVBQW9CLFNBQXBCLENBQXZDO0FBQ0FuRixPQUFPLENBQUNnTCxZQUFSLEdBQXVCN0YsYUFBYSxDQUFDLGNBQUQsRUFBaUIsU0FBakIsQ0FBcEM7QUFDQW5GLE9BQU8sQ0FBQ2lMLFNBQVIsR0FBb0I5RixhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ2tMLFNBQVIsR0FBb0IvRixhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQ21MLFFBQVIsR0FBbUJoRyxhQUFhLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0FBaEM7QUFDQW5GLE9BQU8sQ0FBQ29MLFdBQVIsR0FBc0JqRyxhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQztBQUNBbkYsT0FBTyxDQUFDcUwsSUFBUixHQUFlbEcsYUFBYSxDQUFDLE1BQUQsRUFBUyxTQUFULENBQTVCO0FBQ0FuRixPQUFPLENBQUNzTCxPQUFSLEdBQWtCbkcsYUFBYSxDQUFDLFNBQUQsRUFBWSxTQUFaLENBQS9CO0FBQ0FuRixPQUFPLENBQUN1TCxLQUFSLEdBQWdCcEcsYUFBYSxDQUFDLE9BQUQsRUFBVSxTQUFWLENBQTdCO0FBQ0FuRixPQUFPLENBQUN3TCxTQUFSLEdBQW9CckcsYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUN5TCxNQUFSLEdBQWlCdEcsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUMwTCxTQUFSLEdBQW9CdkcsYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUMyTCxNQUFSLEdBQWlCeEcsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUM0TCxhQUFSLEdBQXdCekcsYUFBYSxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FBckM7QUFDQW5GLE9BQU8sQ0FBQzZMLFNBQVIsR0FBb0IxRyxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQzhMLGFBQVIsR0FBd0IzRyxhQUFhLENBQUMsZUFBRCxFQUFrQixTQUFsQixDQUFyQztBQUNBbkYsT0FBTyxDQUFDK0wsYUFBUixHQUF3QjVHLGFBQWEsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBQXJDO0FBQ0FuRixPQUFPLENBQUNnTSxVQUFSLEdBQXFCN0csYUFBYSxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQWxDO0FBQ0FuRixPQUFPLENBQUNpTSxTQUFSLEdBQW9COUcsYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUNrTSxJQUFSLEdBQWUvRyxhQUFhLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0FBNUI7QUFDQW5GLE9BQU8sQ0FBQ21NLElBQVIsR0FBZWhILGFBQWEsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQUE1QjtBQUNBbkYsT0FBTyxDQUFDb00sSUFBUixHQUFlakgsYUFBYSxDQUFDLE1BQUQsRUFBUyxTQUFULENBQTVCO0FBQ0FuRixPQUFPLENBQUNxTSxVQUFSLEdBQXFCbEgsYUFBYSxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQWxDO0FBQ0FuRixPQUFPLENBQUNzTSxNQUFSLEdBQWlCbkgsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUN1TSxhQUFSLEdBQXdCcEgsYUFBYSxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FBckM7QUFDQW5GLE9BQU8sQ0FBQ3dNLEdBQVIsR0FBY3JILGFBQWEsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUEzQjtBQUNBbkYsT0FBTyxDQUFDeU0sU0FBUixHQUFvQnRILGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDME0sU0FBUixHQUFvQnZILGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDMk0sV0FBUixHQUFzQnhILGFBQWEsQ0FBQyxhQUFELEVBQWdCLFNBQWhCLENBQW5DO0FBQ0FuRixPQUFPLENBQUM0TSxNQUFSLEdBQWlCekgsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUM2TSxVQUFSLEdBQXFCMUgsYUFBYSxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQWxDO0FBQ0FuRixPQUFPLENBQUM4TSxRQUFSLEdBQW1CM0gsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUMrTSxRQUFSLEdBQW1CNUgsYUFBYSxDQUFDLFVBQUQsRUFBYSxTQUFiLENBQWhDO0FBQ0FuRixPQUFPLENBQUNnTixNQUFSLEdBQWlCN0gsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUNpTixNQUFSLEdBQWlCOUgsYUFBYSxDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTlCO0FBQ0FuRixPQUFPLENBQUNrTixPQUFSLEdBQWtCL0gsYUFBYSxDQUFDLFNBQUQsRUFBWSxTQUFaLENBQS9CO0FBQ0FuRixPQUFPLENBQUNtTixTQUFSLEdBQW9CaEksYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUNvTixTQUFSLEdBQW9CakksYUFBYSxDQUFDLFdBQUQsRUFBYyxTQUFkLENBQWpDO0FBQ0FuRixPQUFPLENBQUNxTixJQUFSLEdBQWVsSSxhQUFhLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0FBNUI7QUFDQW5GLE9BQU8sQ0FBQ3NOLFdBQVIsR0FBc0JuSSxhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQztBQUNBbkYsT0FBTyxDQUFDdU4sU0FBUixHQUFvQnBJLGFBQWEsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFqQztBQUNBbkYsT0FBTyxDQUFDd04sR0FBUixHQUFjckksYUFBYSxDQUFDLEtBQUQsRUFBUSxTQUFSLENBQTNCO0FBQ0FuRixPQUFPLENBQUN5TixJQUFSLEdBQWV0SSxhQUFhLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0FBNUI7QUFDQW5GLE9BQU8sQ0FBQzBOLE9BQVIsR0FBa0J2SSxhQUFhLENBQUMsU0FBRCxFQUFZLFNBQVosQ0FBL0I7QUFDQW5GLE9BQU8sQ0FBQzJOLE1BQVIsR0FBaUJ4SSxhQUFhLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FBOUI7QUFDQW5GLE9BQU8sQ0FBQzROLFNBQVIsR0FBb0J6SSxhQUFhLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBakM7QUFDQW5GLE9BQU8sQ0FBQzZOLE1BQVIsR0FBaUIxSSxhQUFhLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FBOUI7QUFDQW5GLE9BQU8sQ0FBQzhOLEtBQVIsR0FBZ0IzSSxhQUFhLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0FBN0I7QUFDQW5GLE9BQU8sQ0FBQytOLEtBQVIsR0FBZ0I1SSxhQUFhLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0FBN0I7QUFDQW5GLE9BQU8sQ0FBQ2dPLFVBQVIsR0FBcUI3SSxhQUFhLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FBbEM7QUFDQW5GLE9BQU8sQ0FBQ2lPLE1BQVIsR0FBaUI5SSxhQUFhLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FBOUI7QUFDQW5GLE9BQU8sQ0FBQ2tPLFdBQVIsR0FBc0IvSSxhQUFhLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQUFuQyxDOzs7Ozs7O0FDaktBckYsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxPQUFLLEVBQUU7QUFBVCxDQUE3QztBQUNBLElBQUlrTyxRQUFRLEdBQUcsNkNBQWY7O0FBQ0EsU0FBU0MsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLEtBQXhCLEVBQStCO0FBQzNCLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDSCxVQUFRLENBQUNJLFNBQVQsR0FBcUJELEtBQXJCO0FBQ0EsTUFBSUUsTUFBTSxHQUFHTCxRQUFRLENBQUNNLElBQVQsQ0FBY0osSUFBZCxDQUFiOztBQUNBLE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHUCxRQUFRLENBQUNJLFNBQW5CO0FBQ0EsTUFBSXRPLEtBQUssR0FBR3VPLE1BQU0sQ0FBQyxDQUFELENBQU4sSUFBYUEsTUFBTSxDQUFDLENBQUQsQ0FBL0I7QUFDQSxTQUFPO0FBQUVGLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRUE7QUFBakMsR0FBUDtBQUNIOztBQUNERCxPQUFPLENBQUNvTyxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBLElBQUlPLGFBQWEsR0FBRyw2REFBcEI7O0FBQ0EsU0FBU0MsYUFBVCxDQUF1QlAsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQ2hDLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDSyxlQUFhLENBQUNKLFNBQWQsR0FBMEJELEtBQTFCO0FBQ0EsTUFBSUUsTUFBTSxHQUFHRyxhQUFhLENBQUNGLElBQWQsQ0FBbUJKLElBQW5CLENBQWI7O0FBQ0EsTUFBSSxDQUFDRyxNQUFMLEVBQWE7QUFDVCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJRSxHQUFHLEdBQUdDLGFBQWEsQ0FBQ0osU0FBeEI7QUFDQSxNQUFJcE4sR0FBRyxHQUFHcU4sTUFBTSxDQUFDLENBQUQsQ0FBaEI7QUFDQSxNQUFJN0wsSUFBSjs7QUFDQSxNQUFJeEIsR0FBRyxDQUFDVCxNQUFKLEtBQWUsQ0FBbkIsRUFBc0I7QUFDbEJpQyxRQUFJLEdBQUdGLFFBQVEsQ0FBQyxPQUFPdEIsR0FBUixDQUFmO0FBQ0gsR0FGRCxNQUdLLElBQUlBLEdBQUcsQ0FBQ1QsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQ3ZCaUMsUUFBSSxHQUFHRixRQUFRLENBQUMsU0FBU3RCLEdBQVYsQ0FBZjtBQUNILEdBRkksTUFHQSxJQUFJQSxHQUFHLENBQUNULE1BQUosS0FBZSxDQUFuQixFQUFzQjtBQUN2QmlDLFFBQUksR0FBR0YsUUFBUSxDQUFDLFNBQVN0QixHQUFHLENBQUMsQ0FBRCxDQUFaLEdBQWtCQSxHQUFHLENBQUMsQ0FBRCxDQUFyQixHQUEyQkEsR0FBRyxDQUFDLENBQUQsQ0FBOUIsR0FBb0NBLEdBQUcsQ0FBQyxDQUFELENBQXZDLEdBQTZDQSxHQUFHLENBQUMsQ0FBRCxDQUFoRCxHQUFzREEsR0FBRyxDQUFDLENBQUQsQ0FBMUQsQ0FBZjtBQUNIOztBQUNELFNBQU87QUFBRW1OLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRTBDO0FBQWpDLEdBQVA7QUFDSDs7QUFDRDNDLE9BQU8sQ0FBQzRPLGFBQVIsR0FBd0JBLGFBQXhCOztBQUNBLFNBQVNDLGdCQUFULENBQTBCNU0sQ0FBMUIsRUFBNkJDLENBQTdCLEVBQWdDQyxDQUFoQyxFQUFtQ0osQ0FBbkMsRUFBc0M7QUFDbEMsTUFBSUEsQ0FBQyxLQUFLLEtBQUssQ0FBZixFQUFrQjtBQUFFQSxLQUFDLEdBQUcsQ0FBSjtBQUFROztBQUM1QixNQUFJRSxDQUFDLElBQUksQ0FBTCxJQUFVQSxDQUFDLElBQUksR0FBZixJQUFzQkMsQ0FBQyxJQUFJLENBQTNCLElBQWdDQSxDQUFDLElBQUksR0FBckMsSUFBNENDLENBQUMsSUFBSSxDQUFqRCxJQUFzREEsQ0FBQyxJQUFJLEdBQTNELElBQWtFSixDQUFDLElBQUksQ0FBdkUsSUFBNEVBLENBQUMsSUFBSSxDQUFyRixFQUF3RjtBQUNwRixXQUFRZ0MsSUFBSSxDQUFDQyxLQUFMLENBQVdqQyxDQUFDLEdBQUcsSUFBZixJQUF1QixVQUF4QixHQUF1Q0UsQ0FBQyxHQUFHLFFBQTNDLEdBQXdEQyxDQUFDLEdBQUcsUUFBNUQsR0FBd0VDLENBQS9FO0FBQ0gsR0FGRCxNQUdLO0FBQ0QsV0FBTyxJQUFQO0FBQ0g7QUFDSjs7QUFDRCxJQUFJMk0sYUFBYSxHQUFHLG1EQUFwQjs7QUFDQSxTQUFTQyxhQUFULENBQXVCVixJQUF2QixFQUE2QkMsS0FBN0IsRUFBb0M7QUFDaEMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcENRLGVBQWEsQ0FBQ1AsU0FBZCxHQUEwQkQsS0FBMUI7QUFDQSxNQUFJRSxNQUFNLEdBQUdNLGFBQWEsQ0FBQ0wsSUFBZCxDQUFtQkosSUFBbkIsQ0FBYjs7QUFDQSxNQUFJLENBQUNHLE1BQUwsRUFBYTtBQUNULFdBQU8sSUFBUDtBQUNIOztBQUNELE1BQUlFLEdBQUcsR0FBR0ksYUFBYSxDQUFDUCxTQUF4QjtBQUNBLE1BQUl0TyxLQUFLLEdBQUd1TyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWFLLGdCQUFnQixDQUFDcE0sUUFBUSxDQUFDK0wsTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUFULEVBQXNCL0wsUUFBUSxDQUFDK0wsTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUE5QixFQUEyQy9MLFFBQVEsQ0FBQytMLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBbkQsQ0FBekM7QUFDQSxTQUFPO0FBQUVGLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRUE7QUFBakMsR0FBUDtBQUNIOztBQUNERCxPQUFPLENBQUMrTyxhQUFSLEdBQXdCQSxhQUF4QjtBQUNBLElBQUlDLGNBQWMsR0FBRyx3RUFBckI7O0FBQ0EsU0FBU0MsY0FBVCxDQUF3QlosSUFBeEIsRUFBOEJDLEtBQTlCLEVBQXFDO0FBQ2pDLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDVSxnQkFBYyxDQUFDVCxTQUFmLEdBQTJCRCxLQUEzQjtBQUNBLE1BQUlFLE1BQU0sR0FBR1EsY0FBYyxDQUFDUCxJQUFmLENBQW9CSixJQUFwQixDQUFiOztBQUNBLE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHTSxjQUFjLENBQUNULFNBQXpCO0FBQ0EsTUFBSXRPLEtBQUssR0FBRzRPLGdCQUFnQixDQUFDcE0sUUFBUSxDQUFDK0wsTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUFULEVBQXNCL0wsUUFBUSxDQUFDK0wsTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUE5QixFQUEyQy9MLFFBQVEsQ0FBQytMLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBbkQsRUFBZ0V2SyxVQUFVLENBQUN1SyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQTFFLENBQTVCO0FBQ0EsU0FBTztBQUFFRixTQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLE9BQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxTQUFLLEVBQUVBO0FBQWpDLEdBQVA7QUFDSDs7QUFDREQsT0FBTyxDQUFDaVAsY0FBUixHQUF5QkEsY0FBekI7O0FBQ0EsU0FBUzNLLG9CQUFULENBQThCNEssR0FBOUIsRUFBbUNDLFVBQW5DLEVBQStDQyxTQUEvQyxFQUEwRDtBQUN0REYsS0FBRyxJQUFJLEVBQVA7QUFDQUUsV0FBUyxJQUFJLEdBQWI7QUFDQSxNQUFJQyxNQUFNLEdBQUcsQ0FBQyxJQUFJdEwsSUFBSSxDQUFDdUwsR0FBTCxDQUFTLElBQUlGLFNBQUosR0FBZ0IsQ0FBekIsQ0FBTCxJQUFvQ0QsVUFBcEMsR0FBaUQsR0FBOUQ7QUFBQSxNQUFtRUksQ0FBQyxHQUFHRixNQUFNLElBQUksSUFBSXRMLElBQUksQ0FBQ3VMLEdBQUwsQ0FBU0osR0FBRyxHQUFHLENBQU4sR0FBVSxDQUFuQixDQUFSLENBQTdFO0FBQUEsTUFBNkdoTCxFQUFFLEdBQUc7QUFBRXNMLEtBQUMsRUFBRUosU0FBUyxHQUFHQyxNQUFNLEdBQUc7QUFBMUIsR0FBbEg7QUFBQSxNQUFpSnBOLENBQUMsR0FBR2lDLEVBQUUsQ0FBQ3NMLENBQXhKO0FBQUEsTUFBMkp0TixDQUFDLEdBQUdnQyxFQUFFLENBQUNzTCxDQUFsSztBQUFBLE1BQXFLck4sQ0FBQyxHQUFHK0IsRUFBRSxDQUFDc0wsQ0FBNUs7O0FBQ0EsTUFBSSxLQUFLTixHQUFMLElBQVlBLEdBQUcsR0FBRyxDQUF0QixFQUF5QjtBQUNyQmpOLEtBQUMsSUFBSW9OLE1BQUw7QUFDQW5OLEtBQUMsSUFBSXFOLENBQUw7QUFDSCxHQUhELE1BSUssSUFBSUwsR0FBRyxHQUFHLENBQVYsRUFBYTtBQUNkak4sS0FBQyxJQUFJc04sQ0FBTDtBQUNBck4sS0FBQyxJQUFJbU4sTUFBTDtBQUNILEdBSEksTUFJQSxJQUFJSCxHQUFHLEdBQUcsQ0FBVixFQUFhO0FBQ2RoTixLQUFDLElBQUltTixNQUFMO0FBQ0FsTixLQUFDLElBQUlvTixDQUFMO0FBQ0gsR0FISSxNQUlBLElBQUlMLEdBQUcsR0FBRyxDQUFWLEVBQWE7QUFDZGhOLEtBQUMsSUFBSXFOLENBQUw7QUFDQXBOLEtBQUMsSUFBSWtOLE1BQUw7QUFDSCxHQUhJLE1BSUEsSUFBSUgsR0FBRyxHQUFHLENBQVYsRUFBYTtBQUNkak4sS0FBQyxJQUFJc04sQ0FBTDtBQUNBcE4sS0FBQyxJQUFJa04sTUFBTDtBQUNILEdBSEksTUFJQSxJQUFJSCxHQUFHLEdBQUcsQ0FBVixFQUFhO0FBQ2RqTixLQUFDLElBQUlvTixNQUFMO0FBQ0FsTixLQUFDLElBQUlvTixDQUFMO0FBQ0g7O0FBQ0QsU0FBTztBQUNIdE4sS0FBQyxFQUFFOEIsSUFBSSxDQUFDQyxLQUFMLENBQVcvQixDQUFDLEdBQUcsSUFBZixDQURBO0FBRUhDLEtBQUMsRUFBRTZCLElBQUksQ0FBQ0MsS0FBTCxDQUFXOUIsQ0FBQyxHQUFHLElBQWYsQ0FGQTtBQUdIQyxLQUFDLEVBQUU0QixJQUFJLENBQUNDLEtBQUwsQ0FBVzdCLENBQUMsR0FBRyxJQUFmO0FBSEEsR0FBUDtBQUtIOztBQUNEbkMsT0FBTyxDQUFDc0Usb0JBQVIsR0FBK0JBLG9CQUEvQjs7QUFDQSxTQUFTbUwsZ0JBQVQsQ0FBMEJ0TCxDQUExQixFQUE2Qk4sQ0FBN0IsRUFBZ0NPLENBQWhDLEVBQW1DckMsQ0FBbkMsRUFBc0M7QUFDbEMsTUFBSUEsQ0FBQyxLQUFLLEtBQUssQ0FBZixFQUFrQjtBQUFFQSxLQUFDLEdBQUcsQ0FBSjtBQUFROztBQUM1QixNQUFJbUMsRUFBRSxHQUFHSSxvQkFBb0IsQ0FBQ0gsQ0FBRCxFQUFJTixDQUFKLEVBQU9PLENBQVAsQ0FBN0I7QUFBQSxNQUF3Q25DLENBQUMsR0FBR2lDLEVBQUUsQ0FBQ2pDLENBQS9DO0FBQUEsTUFBa0RDLENBQUMsR0FBR2dDLEVBQUUsQ0FBQ2hDLENBQXpEO0FBQUEsTUFBNERDLENBQUMsR0FBRytCLEVBQUUsQ0FBQy9CLENBQW5FOztBQUNBLE1BQUlGLENBQUMsSUFBSSxDQUFMLElBQVVBLENBQUMsSUFBSSxHQUFmLElBQXNCQyxDQUFDLElBQUksQ0FBM0IsSUFBZ0NBLENBQUMsSUFBSSxHQUFyQyxJQUE0Q0MsQ0FBQyxJQUFJLENBQWpELElBQXNEQSxDQUFDLElBQUksR0FBM0QsSUFBa0VKLENBQUMsSUFBSSxDQUF2RSxJQUE0RUEsQ0FBQyxJQUFJLENBQXJGLEVBQXdGO0FBQ3BGLFdBQVFnQyxJQUFJLENBQUNDLEtBQUwsQ0FBV2pDLENBQUMsR0FBRyxJQUFmLElBQXVCLFVBQXhCLEdBQXVDRSxDQUFDLEdBQUcsUUFBM0MsR0FBd0RDLENBQUMsR0FBRyxRQUE1RCxHQUF3RUMsQ0FBL0U7QUFDSCxHQUZELE1BR0s7QUFDRCxXQUFPLElBQVA7QUFDSDtBQUNKOztBQUNELElBQUl1TixhQUFhLEdBQUcsOERBQXBCOztBQUNBLFNBQVNDLGFBQVQsQ0FBdUJ0QixJQUF2QixFQUE2QkMsS0FBN0IsRUFBb0M7QUFDaEMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcENvQixlQUFhLENBQUNuQixTQUFkLEdBQTBCRCxLQUExQjtBQUNBLE1BQUlFLE1BQU0sR0FBR2tCLGFBQWEsQ0FBQ2pCLElBQWQsQ0FBbUJKLElBQW5CLENBQWI7O0FBQ0EsTUFBSSxDQUFDRyxNQUFMLEVBQWE7QUFDVCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJRSxHQUFHLEdBQUdnQixhQUFhLENBQUNuQixTQUF4QjtBQUNBLE1BQUl0TyxLQUFLLEdBQUd1TyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWFpQixnQkFBZ0IsQ0FBQ3hMLFVBQVUsQ0FBQ3VLLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBWCxFQUF3QnZLLFVBQVUsQ0FBQ3VLLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBbEMsRUFBK0N2SyxVQUFVLENBQUN1SyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQXpELENBQXpDO0FBQ0EsU0FBTztBQUFFRixTQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLE9BQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxTQUFLLEVBQUVBO0FBQWpDLEdBQVA7QUFDSDs7QUFDREQsT0FBTyxDQUFDMlAsYUFBUixHQUF3QkEsYUFBeEI7QUFDQSxJQUFJQyxjQUFjLEdBQUcsbUZBQXJCOztBQUNBLFNBQVNDLGNBQVQsQ0FBd0J4QixJQUF4QixFQUE4QkMsS0FBOUIsRUFBcUM7QUFDakMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcENzQixnQkFBYyxDQUFDckIsU0FBZixHQUEyQkQsS0FBM0I7QUFDQSxNQUFJRSxNQUFNLEdBQUdvQixjQUFjLENBQUNuQixJQUFmLENBQW9CSixJQUFwQixDQUFiOztBQUNBLE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHa0IsY0FBYyxDQUFDckIsU0FBekI7QUFDQSxNQUFJdE8sS0FBSyxHQUFHd1AsZ0JBQWdCLENBQUN4TCxVQUFVLENBQUN1SyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQVgsRUFBd0J2SyxVQUFVLENBQUN1SyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQWxDLEVBQStDdkssVUFBVSxDQUFDdUssTUFBTSxDQUFDLENBQUQsQ0FBUCxDQUF6RCxFQUFzRXZLLFVBQVUsQ0FBQ3VLLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBaEYsQ0FBNUI7QUFDQSxTQUFPO0FBQUVGLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRUE7QUFBakMsR0FBUDtBQUNIOztBQUNERCxPQUFPLENBQUM2UCxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBLElBQUlDLE1BQUo7O0FBQ0EsQ0FBQyxVQUFVQSxNQUFWLEVBQWtCO0FBQ2ZBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGFBQUQsQ0FBTixHQUF3QixDQUF6QixDQUFOLEdBQW9DLGFBQXBDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQixVQUF2QixDQUFOLEdBQTJDLFdBQTNDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGNBQUQsQ0FBTixHQUF5QixVQUExQixDQUFOLEdBQThDLGNBQTlDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE1BQUQsQ0FBTixHQUFpQixVQUFsQixDQUFOLEdBQXNDLE1BQXRDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE9BQUQsQ0FBTixHQUFrQixVQUFuQixDQUFOLEdBQXVDLE9BQXZDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE9BQUQsQ0FBTixHQUFrQixVQUFuQixDQUFOLEdBQXVDLE9BQXZDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFFBQUQsQ0FBTixHQUFtQixVQUFwQixDQUFOLEdBQXdDLFFBQXhDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE9BQUQsQ0FBTixHQUFrQixVQUFuQixDQUFOLEdBQXVDLE9BQXZDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGdCQUFELENBQU4sR0FBMkIsVUFBNUIsQ0FBTixHQUFnRCxnQkFBaEQ7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBRCxDQUFOLEdBQXVCLFVBQXhCLENBQU4sR0FBNEMsWUFBNUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsT0FBRCxDQUFOLEdBQWtCLFVBQW5CLENBQU4sR0FBdUMsT0FBdkM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBRCxDQUFOLEdBQXVCLFVBQXhCLENBQU4sR0FBNEMsWUFBNUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsT0FBRCxDQUFOLEdBQWtCLFVBQW5CLENBQU4sR0FBdUMsT0FBdkM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsZ0JBQUQsQ0FBTixHQUEyQixVQUE1QixDQUFOLEdBQWdELGdCQUFoRDtBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxVQUFELENBQU4sR0FBcUIsVUFBdEIsQ0FBTixHQUEwQyxVQUExQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxTQUFELENBQU4sR0FBb0IsVUFBckIsQ0FBTixHQUF5QyxTQUF6QztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxNQUFELENBQU4sR0FBaUIsVUFBbEIsQ0FBTixHQUFzQyxNQUF0QztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxVQUFELENBQU4sR0FBcUIsVUFBdEIsQ0FBTixHQUEwQyxVQUExQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxVQUFELENBQU4sR0FBcUIsVUFBdEIsQ0FBTixHQUEwQyxVQUExQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxlQUFELENBQU4sR0FBMEIsVUFBM0IsQ0FBTixHQUErQyxlQUEvQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxVQUFELENBQU4sR0FBcUIsVUFBdEIsQ0FBTixHQUEwQyxVQUExQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxXQUFELENBQU4sR0FBc0IsVUFBdkIsQ0FBTixHQUEyQyxXQUEzQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxVQUFELENBQU4sR0FBcUIsVUFBdEIsQ0FBTixHQUEwQyxVQUExQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxXQUFELENBQU4sR0FBc0IsVUFBdkIsQ0FBTixHQUEyQyxXQUEzQztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxhQUFELENBQU4sR0FBd0IsVUFBekIsQ0FBTixHQUE2QyxhQUE3QztBQUNBQSxRQUFNLENBQUNBLE1BQU0sQ0FBQyxnQkFBRCxDQUFOLEdBQTJCLFVBQTVCLENBQU4sR0FBZ0QsZ0JBQWhEO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQixVQUFyQixDQUFOLEdBQXlDLFNBQXpDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGNBQUQsQ0FBTixHQUF5QixVQUExQixDQUFOLEdBQThDLGNBQTlDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGVBQUQsQ0FBTixHQUEwQixVQUEzQixDQUFOLEdBQStDLGVBQS9DO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGVBQUQsQ0FBTixHQUEwQixVQUEzQixDQUFOLEdBQStDLGVBQS9DO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGVBQUQsQ0FBTixHQUEwQixVQUEzQixDQUFOLEdBQStDLGVBQS9DO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGVBQUQsQ0FBTixHQUEwQixVQUEzQixDQUFOLEdBQStDLGVBQS9DO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFVBQUQsQ0FBTixHQUFxQixVQUF0QixDQUFOLEdBQTBDLFVBQTFDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGFBQUQsQ0FBTixHQUF3QixVQUF6QixDQUFOLEdBQTZDLGFBQTdDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQixVQUFyQixDQUFOLEdBQXlDLFNBQXpDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQixVQUFyQixDQUFOLEdBQXlDLFNBQXpDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQixVQUF2QixDQUFOLEdBQTJDLFdBQTNDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGFBQUQsQ0FBTixHQUF3QixVQUF6QixDQUFOLEdBQTZDLGFBQTdDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGFBQUQsQ0FBTixHQUF3QixVQUF6QixDQUFOLEdBQTZDLGFBQTdDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQixVQUFyQixDQUFOLEdBQXlDLFNBQXpDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQixVQUF2QixDQUFOLEdBQTJDLFdBQTNDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQUQsQ0FBTixHQUF1QixVQUF4QixDQUFOLEdBQTRDLFlBQTVDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE1BQUQsQ0FBTixHQUFpQixVQUFsQixDQUFOLEdBQXNDLE1BQXRDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQixVQUF2QixDQUFOLEdBQTJDLFdBQTNDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE1BQUQsQ0FBTixHQUFpQixVQUFsQixDQUFOLEdBQXNDLE1BQXRDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE9BQUQsQ0FBTixHQUFrQixVQUFuQixDQUFOLEdBQXVDLE9BQXZDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLGFBQUQsQ0FBTixHQUF3QixVQUF6QixDQUFOLEdBQTZDLGFBQTdDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLE1BQUQsQ0FBTixHQUFpQixVQUFsQixDQUFOLEdBQXNDLE1BQXRDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFVBQUQsQ0FBTixHQUFxQixVQUF0QixDQUFOLEdBQTBDLFVBQTFDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQixVQUFyQixDQUFOLEdBQXlDLFNBQXpDO0FBQ0FBLFFBQU0sQ0FBQ0EsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQixVQUF2QixDQUFOLEdBQTJDLFdB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LEdBQXdCLFVBQXpCLENBQU4sR0FBNkMsYUFBN0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsU0FBRCxDQUFOLEdBQW9CLFVBQXJCLENBQU4sR0FBeUMsU0FBekM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsT0FBRCxDQUFOLEdBQWtCLFVBQW5CLENBQU4sR0FBdUMsT0FBdkM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsZUFBRCxDQUFOLEdBQTBCLFVBQTNCLENBQU4sR0FBK0MsZUFBL0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsZUFBRCxDQUFOLEdBQTBCLFVBQTNCLENBQU4sR0FBK0MsZUFBL0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsZUFBRCxDQUFOLEdBQTBCLFVBQTNCLENBQU4sR0FBK0MsZUFBL0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBRCxDQUFOLEdBQXVCLFVBQXhCLENBQU4sR0FBNEMsWUFBNUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBRCxDQUFOLEdBQXVCLFVBQXhCLENBQU4sR0FBNEMsWUFBNUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsZUFBRCxDQUFOLEdBQTBCLFVBQTNCLENBQU4sR0FBK0MsZUFBL0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsS0FBRCxDQUFOLEdBQWdCLFVBQWpCLENBQU4sR0FBcUMsS0FBckM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsYUFBRCxDQUFOLEdBQXdCLFVBQXpCLENBQU4sR0FBNkMsYUFBN0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBRCxDQUFOLEdBQXVCLFVBQXhCLENBQU4sR0FBNEMsWUFBNUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsVUFBRCxDQUFOLEdBQXFCLFVBQXRCLENBQU4sR0FBMEMsVUFBMUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsVUFBRCxDQUFOLEdBQXFCLFVBQXRCLENBQU4sR0FBMEMsVUFBMUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsU0FBRCxDQUFOLEdBQW9CLFVBQXJCLENBQU4sR0FBeUMsU0FBekM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsYUFBRCxDQUFOLEdBQXdCLFVBQXpCLENBQU4sR0FBNkMsYUFBN0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsS0FBRCxDQUFOLEdBQWdCLFVBQWpCLENBQU4sR0FBcUMsS0FBckM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsTUFBRCxDQUFOLEdBQWlCLFVBQWxCLENBQU4sR0FBc0MsTUFBdEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsU0FBRCxDQUFOLEdBQW9CLFVBQXJCLENBQU4sR0FBeUMsU0FBekM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCLFVBQXZCLENBQU4sR0FBMkMsV0FBM0M7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsT0FBRCxDQUFOLEdBQWtCLFVBQW5CLENBQU4sR0FBdUMsT0FBdkM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsT0FBRCxDQUFOLEdBQWtCLFVBQW5CLENBQU4sR0FBdUMsT0FBdkM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBRCxDQUFOLEdBQXVCLFVBQXhCLENBQU4sR0FBNEMsWUFBNUM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsUUFBRCxDQUFOLEdBQW1CLFVBQXBCLENBQU4sR0FBd0MsUUFBeEM7QUFDQUEsUUFBTSxDQUFDQSxNQUFNLENBQUMsYUFBRCxDQUFOLEdBQXdCLFVBQXpCLENBQU4sR0FBNkMsYUFBN0M7QUFDSCxDQXRKRCxFQXNKR0EsTUFBTSxHQUFHOVAsT0FBTyxDQUFDOFAsTUFBUixLQUFtQjlQLE9BQU8sQ0FBQzhQLE1BQVIsR0FBaUIsRUFBcEMsQ0F0Slo7O0FBdUpBLFNBQVNDLGlCQUFULENBQTJCOVAsS0FBM0IsRUFBa0NxTyxLQUFsQyxFQUF5QzBCLE9BQXpDLEVBQWtEO0FBQzlDLE1BQUlBLE9BQU8sS0FBSyxLQUFLLENBQXJCLEVBQXdCO0FBQUVBLFdBQU8sR0FBR0MsWUFBWSxDQUFDaFEsS0FBRCxFQUFRcU8sS0FBUixDQUF0QjtBQUF1Qzs7QUFDakUsTUFBSTBCLE9BQU8sSUFBSUEsT0FBTyxDQUFDL1AsS0FBUixJQUFpQjZQLE1BQWhDLEVBQXdDO0FBQ3BDLFFBQUlwQixHQUFHLEdBQUdzQixPQUFPLENBQUN0QixHQUFsQjtBQUNBLFFBQUl3QixPQUFPLEdBQUdKLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDL1AsS0FBVCxDQUFwQjtBQUNBLFdBQU87QUFBRXFPLFdBQUssRUFBRUEsS0FBVDtBQUFnQkksU0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFdBQUssRUFBRWlRO0FBQWpDLEtBQVA7QUFDSDs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFDRGxRLE9BQU8sQ0FBQytQLGlCQUFSLEdBQTRCQSxpQkFBNUI7O0FBQ0EsU0FBU0ksVUFBVCxDQUFvQmxRLEtBQXBCLEVBQTJCcU8sS0FBM0IsRUFBa0MwQixPQUFsQyxFQUEyQztBQUN2QyxNQUFJMUIsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcEMsTUFBSTBCLE9BQU8sS0FBSyxLQUFLLENBQXJCLEVBQXdCO0FBQUVBLFdBQU8sR0FBR0MsWUFBWSxDQUFDaFEsS0FBRCxFQUFRcU8sS0FBUixDQUF0QjtBQUF1Qzs7QUFDakUsU0FBT00sYUFBYSxDQUFDM08sS0FBRCxFQUFRcU8sS0FBUixDQUFiLElBQ0h5QixpQkFBaUIsQ0FBQzlQLEtBQUQsRUFBUXFPLEtBQVIsRUFBZTBCLE9BQWYsQ0FEZCxJQUVIakIsYUFBYSxDQUFDOU8sS0FBRCxFQUFRcU8sS0FBUixDQUZWLElBR0hXLGNBQWMsQ0FBQ2hQLEtBQUQsRUFBUXFPLEtBQVIsQ0FIWCxJQUlIcUIsYUFBYSxDQUFDMVAsS0FBRCxFQUFRcU8sS0FBUixDQUpWLElBS0h1QixjQUFjLENBQUM1UCxLQUFELEVBQVFxTyxLQUFSLENBTGxCO0FBTUg7O0FBQ0R0TyxPQUFPLENBQUNtUSxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBLElBQUlDLFlBQVksR0FBRyx5QkFBbkI7O0FBQ0EsU0FBU0gsWUFBVCxDQUFzQjVCLElBQXRCLEVBQTRCQyxLQUE1QixFQUFtQztBQUMvQixNQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsQ0FBUjtBQUFZOztBQUNwQzhCLGNBQVksQ0FBQzdCLFNBQWIsR0FBeUJELEtBQXpCO0FBQ0EsTUFBSUUsTUFBTSxHQUFHNEIsWUFBWSxDQUFDM0IsSUFBYixDQUFrQkosSUFBbEIsQ0FBYjs7QUFDQSxNQUFJLENBQUNHLE1BQUwsRUFBYTtBQUNULFdBQU8sSUFBUDtBQUNIOztBQUNELE1BQUlFLEdBQUcsR0FBRzBCLFlBQVksQ0FBQzdCLFNBQXZCO0FBQ0EsTUFBSXRPLEtBQUssR0FBR3VPLE1BQU0sQ0FBQyxDQUFELENBQWxCO0FBQ0EsU0FBTztBQUFFRixTQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLE9BQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxTQUFLLEVBQUVBO0FBQWpDLEdBQVA7QUFDSDs7QUFDRCxJQUFJb1Esd0JBQXdCLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQUMsUUFBRCxFQUFXLFVBQVgsRUFBdUIsVUFBdkIsRUFBbUMsV0FBbkMsQ0FBUixDQUEvQjs7QUFDQSxTQUFTQyxXQUFULENBQXFCdFEsS0FBckIsRUFBNEJxTyxLQUE1QixFQUFtQzBCLE9BQW5DLEVBQTRDO0FBQ3hDLE1BQUkxQixLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsQ0FBUjtBQUFZOztBQUNwQyxNQUFJMEIsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFBRUEsV0FBTyxHQUFHQyxZQUFZLENBQUNoUSxLQUFELEVBQVFxTyxLQUFSLENBQXRCO0FBQXVDOztBQUNqRSxNQUFJMEIsT0FBTyxJQUFJSyx3QkFBd0IsQ0FBQ0csR0FBekIsQ0FBNkJSLE9BQU8sQ0FBQy9QLEtBQXJDLENBQWYsRUFBNEQ7QUFDeEQsUUFBSXlPLEdBQUcsR0FBR3NCLE9BQU8sQ0FBQ3RCLEdBQWxCO0FBQ0EsUUFBSStCLE9BQU8sR0FBR1QsT0FBTyxDQUFDL1AsS0FBdEI7QUFDQSxXQUFPO0FBQUVxTyxXQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLFNBQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxXQUFLLEVBQUV3UTtBQUFqQyxLQUFQO0FBQ0g7O0FBQ0QsU0FBTyxJQUFQO0FBQ0g7O0FBQ0R6USxPQUFPLENBQUN1USxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBLElBQUlHLFNBQVMsR0FBRywwRUFBaEI7O0FBQ0EsU0FBU0MsU0FBVCxDQUFtQnRDLElBQW5CLEVBQXlCQyxLQUF6QixFQUFnQztBQUM1QixNQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsQ0FBUjtBQUFZOztBQUNwQ29DLFdBQVMsQ0FBQ25DLFNBQVYsR0FBc0JELEtBQXRCO0FBQ0EsTUFBSUUsTUFBTSxHQUFHa0MsU0FBUyxDQUFDakMsSUFBVixDQUFlSixJQUFmLENBQWI7O0FBQ0EsTUFBSSxDQUFDRyxNQUFMLEVBQWE7QUFDVCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJRSxHQUFHLEdBQUdnQyxTQUFTLENBQUNuQyxTQUFwQjtBQUNBLE1BQUl0TyxLQUFLLEdBQUdnRSxVQUFVLENBQUN1SyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQXRCO0FBQ0EsTUFBSW9DLElBQUksR0FBR3BDLE1BQU0sQ0FBQyxDQUFELENBQU4sSUFBYSxLQUF4QjtBQUNBLFNBQU87QUFBRUYsU0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxPQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sU0FBSyxFQUFFO0FBQUVBLFdBQUssRUFBRUEsS0FBVDtBQUFnQjJRLFVBQUksRUFBRUE7QUFBdEI7QUFBakMsR0FBUDtBQUNIOztBQUNENVEsT0FBTyxDQUFDMlEsU0FBUixHQUFvQkEsU0FBcEI7O0FBQ0EsU0FBU0UsdUJBQVQsQ0FBaUN4QyxJQUFqQyxFQUF1Q0MsS0FBdkMsRUFBOEM7QUFDMUMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcEMsTUFBSXdDLFVBQVUsR0FBR0gsU0FBUyxDQUFDdEMsSUFBRCxFQUFPQyxLQUFQLENBQTFCOztBQUNBLE1BQUl3QyxVQUFKLEVBQWdCO0FBQ1osUUFBSUMsT0FBTyxHQUFHRCxVQUFVLENBQUN4QyxLQUF6QjtBQUFBLFFBQWdDSSxHQUFHLEdBQUdvQyxVQUFVLENBQUNwQyxHQUFqRDtBQUNBLFFBQUl6TyxLQUFLLEdBQUc2USxVQUFVLENBQUM3USxLQUF2Qjs7QUFDQSxRQUFJQSxLQUFLLENBQUMyUSxJQUFOLEtBQWUsR0FBbkIsRUFBd0I7QUFDcEIzUSxXQUFLLENBQUNBLEtBQU4sSUFBZSxHQUFmO0FBQ0gsS0FGRCxNQUdLLElBQUksQ0FBQ0EsS0FBSyxDQUFDMlEsSUFBWCxFQUFpQjtBQUNsQjNRLFdBQUssQ0FBQzJRLElBQU4sR0FBYSxLQUFiO0FBQ0gsS0FGSSxNQUdBLElBQUkzUSxLQUFLLENBQUMyUSxJQUFOLEtBQWUsSUFBZixJQUF1QjNRLEtBQUssQ0FBQzJRLElBQU4sS0FBZSxLQUExQyxFQUFpRCxDQUNyRCxDQURJLE1BRUE7QUFDRCxhQUFPLElBQVA7QUFDSDs7QUFDRCxXQUFPO0FBQUV0QyxXQUFLLEVBQUV5QyxPQUFUO0FBQWtCckMsU0FBRyxFQUFFQSxHQUF2QjtBQUE0QnpPLFdBQUssRUFBRUE7QUFBbkMsS0FBUDtBQUNIOztBQUNELFNBQU8sSUFBUDtBQUNIOztBQUNERCxPQUFPLENBQUM2USx1QkFBUixHQUFrQ0EsdUJBQWxDO0FBQ0EsSUFBSUcsa0JBQWtCLEdBQUc7QUFDckIsU0FBTyxhQUFVMUMsS0FBVixFQUFpQkksR0FBakIsRUFBc0J1QyxJQUF0QixFQUEyQjtBQUFFLFdBQVE7QUFBRTNDLFdBQUssRUFBRUEsS0FBVDtBQUFnQkksU0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFdBQUssRUFBRWdSLElBQUcsR0FBRyxHQUFOLEdBQVlsTixJQUFJLENBQUNtTjtBQUFsRCxLQUFSO0FBQWtFLEdBRGpGO0FBRXJCLFNBQU8sYUFBVTVDLEtBQVYsRUFBaUJJLEdBQWpCLEVBQXNCeUMsSUFBdEIsRUFBMkI7QUFBRSxXQUFRO0FBQUU3QyxXQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLFNBQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxXQUFLLEVBQUVrUjtBQUFqQyxLQUFSO0FBQWtELEdBRmpFO0FBR3JCLFVBQVEsY0FBVTdDLEtBQVYsRUFBaUJJLEdBQWpCLEVBQXNCMEMsS0FBdEIsRUFBNEI7QUFBRSxXQUFRO0FBQUU5QyxXQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLFNBQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxXQUFLLEVBQUVtUixLQUFJLEdBQUcsR0FBUCxHQUFhck4sSUFBSSxDQUFDbU47QUFBbkQsS0FBUjtBQUFtRSxHQUhwRjtBQUlyQixVQUFRLGNBQVU1QyxLQUFWLEVBQWlCSSxHQUFqQixFQUFzQjJDLEtBQXRCLEVBQTRCO0FBQUUsV0FBUTtBQUFFL0MsV0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxTQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sV0FBSyxFQUFFb1IsS0FBSSxHQUFHdE4sSUFBSSxDQUFDbU4sRUFBWixHQUFpQjtBQUFsRCxLQUFSO0FBQWlFO0FBSmxGLENBQXpCOztBQU1BLFNBQVNJLFVBQVQsQ0FBb0JyUixLQUFwQixFQUEyQnFPLEtBQTNCLEVBQWtDO0FBQzlCLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDLE1BQUlpRCxXQUFXLEdBQUdaLFNBQVMsQ0FBQzFRLEtBQUQsRUFBUXFPLEtBQVIsQ0FBM0I7O0FBQ0EsTUFBSWlELFdBQUosRUFBaUI7QUFDYixRQUFJQyxPQUFPLEdBQUdELFdBQVcsQ0FBQ2pELEtBQTFCO0FBQUEsUUFBaUNJLEdBQUcsR0FBRzZDLFdBQVcsQ0FBQzdDLEdBQW5EO0FBQUEsUUFBd0QrQyxPQUFPLEdBQUdGLFdBQVcsQ0FBQ3RSLEtBQTlFO0FBQ0EsV0FBTyxDQUFDK1Esa0JBQWtCLENBQUNTLE9BQU8sQ0FBQ2IsSUFBVCxDQUFsQixJQUFxQyxVQUFVYyxDQUFWLEVBQWFDLEVBQWIsRUFBaUJDLEdBQWpCLEVBQXNCO0FBQUUsYUFBTyxJQUFQO0FBQWMsS0FBNUUsRUFBK0VKLE9BQS9FLEVBQXdGOUMsR0FBeEYsRUFBNkYrQyxPQUFPLENBQUN4UixLQUFyRyxDQUFQO0FBQ0g7O0FBQ0QsU0FBTyxJQUFQO0FBQ0g7O0FBQ0RELE9BQU8sQ0FBQ3NSLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0EsSUFBSU8sc0JBQXNCLEdBQUcsSUFBSXZCLEdBQUosQ0FBUSxDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLE9BQXBCLENBQVIsQ0FBN0I7O0FBQ0EsU0FBU3dCLG1CQUFULENBQTZCN1IsS0FBN0IsRUFBb0NxTyxLQUFwQyxFQUEyQzBCLE9BQTNDLEVBQW9EO0FBQ2hELE1BQUkxQixLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsQ0FBUjtBQUFZOztBQUNwQyxNQUFJMEIsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFBRUEsV0FBTyxHQUFHQyxZQUFZLENBQUNoUSxLQUFELEVBQVFxTyxLQUFSLENBQXRCO0FBQXVDOztBQUNqRSxNQUFJSSxHQUFHLEdBQUdKLEtBQVY7O0FBQ0EsTUFBSTBCLE9BQU8sSUFBSTZCLHNCQUFzQixDQUFDckIsR0FBdkIsQ0FBMkJSLE9BQU8sQ0FBQy9QLEtBQW5DLENBQWYsRUFBMEQ7QUFDdER5TyxPQUFHLEdBQUdzQixPQUFPLENBQUN0QixHQUFkO0FBQ0EsUUFBSXFELE9BQU8sR0FBRy9CLE9BQU8sQ0FBQy9QLEtBQXRCO0FBQ0EsV0FBTztBQUFFcU8sV0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxTQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sV0FBSyxFQUFFOFI7QUFBakMsS0FBUDtBQUNIOztBQUNELE1BQUlDLFdBQVcsR0FBR25CLHVCQUF1QixDQUFDNVEsS0FBRCxFQUFReU8sR0FBUixDQUF6Qzs7QUFDQSxNQUFJc0QsV0FBSixFQUFpQjtBQUNidEQsT0FBRyxHQUFHc0QsV0FBVyxDQUFDdEQsR0FBbEI7QUFDQSxRQUFJdUQsWUFBWSxHQUFHcEIsdUJBQXVCLENBQUM1USxLQUFELEVBQVErUixXQUFXLENBQUN0RCxHQUFwQixDQUExQzs7QUFDQSxRQUFJdUQsWUFBSixFQUFrQjtBQUNkdkQsU0FBRyxHQUFHdUQsWUFBWSxDQUFDdkQsR0FBbkI7QUFDQSxhQUFPO0FBQUVKLGFBQUssRUFBRUEsS0FBVDtBQUFnQkksV0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLGFBQUssRUFBRTtBQUFFaVMsV0FBQyxFQUFFRixXQUFXLENBQUMvUixLQUFqQjtBQUF3QmtTLFdBQUMsRUFBRUYsWUFBWSxDQUFDaFM7QUFBeEM7QUFBakMsT0FBUDtBQUNILEtBSEQsTUFJSztBQUNELGFBQU87QUFBRXFPLGFBQUssRUFBRUEsS0FBVDtBQUFnQkksV0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLGFBQUssRUFBRTtBQUFFaVMsV0FBQyxFQUFFRixXQUFXLENBQUMvUixLQUFqQjtBQUF3QmtTLFdBQUMsRUFBRTtBQUEzQjtBQUFqQyxPQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFDRG5TLE9BQU8sQ0FBQzhSLG1CQUFSLEdBQThCQSxtQkFBOUI7QUFDQSxJQUFJTSwwQkFBMEIsR0FBR3RTLE1BQU0sQ0FBQ3VTLE1BQVAsQ0FBYyxJQUFJL0IsR0FBSixDQUFRLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsS0FBbEIsRUFBeUIsUUFBekIsRUFBbUMsUUFBbkMsQ0FBUixDQUFkLENBQWpDO0FBQ0EsSUFBSWdDLG1DQUFtQyxHQUFHO0FBQ3RDLFVBQVEsR0FEOEI7QUFFdEMsV0FBUyxHQUY2QjtBQUd0QyxZQUFVLFFBSDRCO0FBSXRDLFNBQU8sR0FKK0I7QUFLdEMsWUFBVTtBQUw0QixDQUExQzs7QUFPQSxTQUFTQyx1QkFBVCxDQUFpQ2xFLElBQWpDLEVBQXVDQyxLQUF2QyxFQUE4QzBCLE9BQTlDLEVBQXVEO0FBQ25ELE1BQUkxQixLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsQ0FBUjtBQUFZOztBQUNwQyxNQUFJMEIsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFBRUEsV0FBTyxHQUFHQyxZQUFZLENBQUM1QixJQUFELEVBQU9DLEtBQVAsQ0FBdEI7QUFBc0M7O0FBQ2hFLFdBQVNrRSxPQUFULENBQWlCQyxLQUFqQixFQUF3QkMsTUFBeEIsRUFBZ0M7QUFDNUIsUUFBSUQsS0FBSyxDQUFDeFMsS0FBTixLQUFnQixRQUFwQixFQUE4QjtBQUMxQixhQUFPLFFBQVA7QUFDSDs7QUFDRCxRQUFJeVMsTUFBTSxJQUFJQSxNQUFNLENBQUN6UyxLQUFQLENBQWFBLEtBQWIsS0FBdUIsQ0FBckMsRUFBd0M7QUFDcEMsYUFBTztBQUFFd1MsYUFBSyxFQUFFQSxLQUFLLENBQUN4UyxLQUFmO0FBQXNCeVMsY0FBTSxFQUFFQSxNQUFNLENBQUN6UztBQUFyQyxPQUFQO0FBQ0g7O0FBQ0QsV0FBT3dTLEtBQUssQ0FBQ3hTLEtBQWI7QUFDSDs7QUFDRCxXQUFTMFMsT0FBVCxDQUFpQkYsS0FBakIsRUFBd0JDLE1BQXhCLEVBQWdDO0FBQzVCLFFBQUlELEtBQUssQ0FBQ3hTLEtBQU4sS0FBZ0IsUUFBcEIsRUFBOEI7QUFDMUIsYUFBTyxRQUFQO0FBQ0g7O0FBQ0QsUUFBSXlTLE1BQU0sSUFBSUEsTUFBTSxDQUFDelMsS0FBUCxDQUFhQSxLQUFiLEtBQXVCLENBQXJDLEVBQXdDO0FBQ3BDLGFBQU87QUFBRXdTLGFBQUssRUFBRUEsS0FBSyxDQUFDeFMsS0FBZjtBQUFzQnlTLGNBQU0sRUFBRUEsTUFBTSxDQUFDelM7QUFBckMsT0FBUDtBQUNIOztBQUNELFdBQU93UyxLQUFLLENBQUN4UyxLQUFiO0FBQ0g7O0FBQ0QsTUFBSXlPLEdBQUcsR0FBR0osS0FBVjs7QUFDQSxNQUFJMEIsT0FBTyxJQUFJb0MsMEJBQTBCLENBQUM1QixHQUEzQixDQUErQlIsT0FBTyxDQUFDL1AsS0FBdkMsQ0FBZixFQUE4RDtBQUMxRHlPLE9BQUcsR0FBR3NCLE9BQU8sQ0FBQ3RCLEdBQWQ7QUFDQSxRQUFJa0UsY0FBYyxHQUFHTixtQ0FBbUMsQ0FBQ3RDLE9BQU8sQ0FBQy9QLEtBQVQsQ0FBeEQ7QUFDQSxRQUFJK1IsV0FBVyxHQUFHWSxjQUFjLEtBQUssUUFBbkIsSUFBK0IvQix1QkFBdUIsQ0FBQ3hDLElBQUQsRUFBT0ssR0FBUCxDQUF4RTs7QUFDQSxRQUFJc0QsV0FBSixFQUFpQjtBQUNidEQsU0FBRyxHQUFHc0QsV0FBVyxDQUFDdEQsR0FBbEI7QUFDSDs7QUFDRCxRQUFJbUUsYUFBYSxHQUFHNUMsWUFBWSxDQUFDNUIsSUFBRCxFQUFPSyxHQUFQLENBQWhDOztBQUNBLFFBQUltRSxhQUFhLElBQUlULDBCQUEwQixDQUFDNUIsR0FBM0IsQ0FBK0JxQyxhQUFhLENBQUM1UyxLQUE3QyxDQUFyQixFQUEwRTtBQUN0RXlPLFNBQUcsR0FBR21FLGFBQWEsQ0FBQ25FLEdBQXBCO0FBQ0EsVUFBSW9FLGVBQWUsR0FBR1IsbUNBQW1DLENBQUNPLGFBQWEsQ0FBQ25FLEdBQWYsQ0FBekQ7O0FBQ0EsVUFBSWtFLGNBQWMsS0FBS0UsZUFBbkIsSUFBc0NGLGNBQWMsS0FBSyxRQUE3RCxFQUF1RTtBQUNuRSxlQUFPLElBQVA7QUFDSDs7QUFDRCxVQUFJWCxZQUFZLEdBQUdhLGVBQWUsS0FBSyxRQUFwQixJQUFnQ2pDLHVCQUF1QixDQUFDeEMsSUFBRCxFQUFPSyxHQUFQLENBQTFFOztBQUNBLFVBQUl1RCxZQUFKLEVBQWtCO0FBQ2R2RCxXQUFHLEdBQUd1RCxZQUFZLENBQUN2RCxHQUFuQjtBQUNIOztBQUNELFVBQUtrRSxjQUFjLEtBQUtFLGVBQW5CLElBQXNDQSxlQUFlLEtBQUssUUFBM0QsSUFBeUVGLGNBQWMsS0FBSyxHQUFuQixJQUEwQkUsZUFBZSxLQUFLLEdBQTNILEVBQWlJO0FBQzdILGVBQU87QUFDSHhFLGVBQUssRUFBRUEsS0FESjtBQUNXSSxhQUFHLEVBQUVBLEdBRGhCO0FBQ3FCek8sZUFBSyxFQUFFO0FBQzNCaVMsYUFBQyxFQUFFTSxPQUFPLENBQUN4QyxPQUFELEVBQVVnQyxXQUFWLENBRGlCO0FBRTNCRyxhQUFDLEVBQUVRLE9BQU8sQ0FBQ0UsYUFBRCxFQUFnQlosWUFBaEI7QUFGaUI7QUFENUIsU0FBUDtBQU1ILE9BUEQsTUFRSztBQUNELGVBQU87QUFDSDNELGVBQUssRUFBRUEsS0FESjtBQUNXSSxhQUFHLEVBQUVBLEdBRGhCO0FBQ3FCek8sZUFBSyxFQUFFO0FBQzNCaVMsYUFBQyxFQUFFTSxPQUFPLENBQUNLLGFBQUQsRUFBZ0JaLFlBQWhCLENBRGlCO0FBRTNCRSxhQUFDLEVBQUVRLE9BQU8sQ0FBQzNDLE9BQUQsRUFBVWdDLFdBQVY7QUFGaUI7QUFENUIsU0FBUDtBQU1IO0FBQ0osS0ExQkQsTUEyQks7QUFDRCxVQUFJWSxjQUFjLEtBQUssUUFBdkIsRUFBaUM7QUFDN0IsZUFBTztBQUFFdEUsZUFBSyxFQUFFQSxLQUFUO0FBQWdCSSxhQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sZUFBSyxFQUFFO0FBQUVpUyxhQUFDLEVBQUUsUUFBTDtBQUFlQyxhQUFDLEVBQUU7QUFBbEI7QUFBakMsU0FBUDtBQUNILE9BRkQsTUFHSyxJQUFJUyxjQUFjLEtBQUssR0FBdkIsRUFBNEI7QUFDN0IsZUFBTztBQUFFdEUsZUFBSyxFQUFFQSxLQUFUO0FBQWdCSSxhQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sZUFBSyxFQUFFO0FBQUVpUyxhQUFDLEVBQUVNLE9BQU8sQ0FBQ3hDLE9BQUQsRUFBVWdDLFdBQVYsQ0FBWjtBQUFvQ0csYUFBQyxFQUFFO0FBQXZDO0FBQWpDLFNBQVA7QUFDSCxPQUZJLE1BR0E7QUFDRCxlQUFPO0FBQUU3RCxlQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLGFBQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxlQUFLLEVBQUU7QUFBRWlTLGFBQUMsRUFBRSxRQUFMO0FBQWVDLGFBQUMsRUFBRVEsT0FBTyxDQUFDM0MsT0FBRCxFQUFVZ0MsV0FBVjtBQUF6QjtBQUFqQyxTQUFQO0FBQ0g7QUFDSjtBQUNKLEdBOUNELE1BK0NLO0FBQ0QsUUFBSUEsV0FBVyxHQUFHbkIsdUJBQXVCLENBQUN4QyxJQUFELEVBQU9LLEdBQVAsQ0FBekM7O0FBQ0EsUUFBSXNELFdBQUosRUFBaUI7QUFDYnRELFNBQUcsR0FBR3NELFdBQVcsQ0FBQ3RELEdBQWxCO0FBQ0EsVUFBSXVELFlBQVksR0FBR3BCLHVCQUF1QixDQUFDeEMsSUFBRCxFQUFPSyxHQUFQLENBQTFDOztBQUNBLFVBQUl1RCxZQUFKLEVBQWtCO0FBQ2R2RCxXQUFHLEdBQUd1RCxZQUFZLENBQUN2RCxHQUFuQjtBQUNBLGVBQU87QUFBRUosZUFBSyxFQUFFQSxLQUFUO0FBQWdCSSxhQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sZUFBSyxFQUFFO0FBQUVpUyxhQUFDLEVBQUU7QUFBRU8sbUJBQUssRUFBRSxNQUFUO0FBQWlCQyxvQkFBTSxFQUFFVixXQUFXLENBQUMvUjtBQUFyQyxhQUFMO0FBQW1Ea1MsYUFBQyxFQUFFO0FBQUVNLG1CQUFLLEVBQUUsS0FBVDtBQUFnQkMsb0JBQU0sRUFBRVQsWUFBWSxDQUFDaFM7QUFBckM7QUFBdEQ7QUFBakMsU0FBUDtBQUNILE9BSEQsTUFJSztBQUNELGVBQU87QUFBRXFPLGVBQUssRUFBRUEsS0FBVDtBQUFnQkksYUFBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLGVBQUssRUFBRTtBQUFFaVMsYUFBQyxFQUFFO0FBQUVPLG1CQUFLLEVBQUUsTUFBVDtBQUFpQkMsb0JBQU0sRUFBRVYsV0FBVyxDQUFDL1I7QUFBckMsYUFBTDtBQUFtRGtTLGFBQUMsRUFBRTtBQUF0RDtBQUFqQyxTQUFQO0FBQ0g7QUFDSixLQVZELE1BV0s7QUFDRCxhQUFPLElBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBQ0RuUyxPQUFPLENBQUN1Uyx1QkFBUixHQUFrQ0EsdUJBQWxDO0FBQ0EsSUFBSVEsY0FBYyxHQUFHLGlFQUFyQjtBQUNBLElBQUlDLGNBQWMsR0FBRztBQUNqQkMsS0FBRyxFQUFFbFAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYyxDQURGO0FBRWpCZ0MsT0FBSyxFQUFFblAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYyxDQUZKO0FBR2pCaUMsUUFBTSxFQUFFcFAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYyxDQUhMO0FBSWpCa0MsTUFBSSxFQUFFclAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYztBQUpILENBQXJCO0FBTUEsSUFBSW1DLGdCQUFnQixHQUFHO0FBQ25CSixLQUFHLEVBQUU7QUFDREMsU0FBSyxFQUFFblAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYyxDQURwQjtBQUVEa0MsUUFBSSxFQUFFclAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYztBQUZuQixHQURjO0FBS25CZ0MsT0FBSyxFQUFFO0FBQ0hELE9BQUcsRUFBRWxQLElBQUksQ0FBQ21OLEVBQUwsR0FBVSxDQUFWLEdBQWMsQ0FEaEI7QUFFSGlDLFVBQU0sRUFBRXBQLElBQUksQ0FBQ21OLEVBQUwsR0FBVSxDQUFWLEdBQWM7QUFGbkIsR0FMWTtBQVNuQmlDLFFBQU0sRUFBRTtBQUNKRCxTQUFLLEVBQUVuUCxJQUFJLENBQUNtTixFQUFMLEdBQVUsQ0FBVixHQUFjLENBRGpCO0FBRUprQyxRQUFJLEVBQUVyUCxJQUFJLENBQUNtTixFQUFMLEdBQVUsQ0FBVixHQUFjO0FBRmhCLEdBVFc7QUFhbkJrQyxNQUFJLEVBQUU7QUFDRkgsT0FBRyxFQUFFbFAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYyxDQURqQjtBQUVGaUMsVUFBTSxFQUFFcFAsSUFBSSxDQUFDbU4sRUFBTCxHQUFVLENBQVYsR0FBYztBQUZwQjtBQWJhLENBQXZCOztBQWtCQSxTQUFTb0MsY0FBVCxDQUF3QmpGLElBQXhCLEVBQThCQyxLQUE5QixFQUFxQztBQUNqQyxNQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsQ0FBUjtBQUFZOztBQUNwQ3lFLGdCQUFjLENBQUN4RSxTQUFmLEdBQTJCRCxLQUEzQjtBQUNBLE1BQUlFLE1BQU0sR0FBR3VFLGNBQWMsQ0FBQ3RFLElBQWYsQ0FBb0JKLElBQXBCLENBQWI7O0FBQ0EsTUFBSSxDQUFDRyxNQUFMLEVBQWE7QUFDVCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJRSxHQUFHLEdBQUdxRSxjQUFjLENBQUN4RSxTQUF6QjtBQUNBLE1BQUlxRSxjQUFjLEdBQUdwRSxNQUFNLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxNQUFJQSxNQUFNLENBQUMsQ0FBRCxDQUFWLEVBQWU7QUFDWCxRQUFJc0UsZUFBZSxHQUFHdEUsTUFBTSxDQUFDLENBQUQsQ0FBNUI7QUFDQSxRQUFJdk8sS0FBSyxHQUFHb1QsZ0JBQWdCLENBQUNULGNBQUQsQ0FBaEIsQ0FBaUNFLGVBQWpDLENBQVo7QUFDQSxXQUFPN1MsS0FBSyxLQUFLb0MsU0FBVixHQUFzQixJQUF0QixHQUE2QjtBQUFFaU0sV0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxTQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sV0FBSyxFQUFFQTtBQUFqQyxLQUFwQztBQUNILEdBSkQsTUFLSztBQUNELFdBQU87QUFBRXFPLFdBQUssRUFBRUEsS0FBVDtBQUFnQkksU0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFdBQUssRUFBRStTLGNBQWMsQ0FBQ0osY0FBRDtBQUEvQyxLQUFQO0FBQ0g7QUFDSjs7QUFDRCxJQUFJVyxtQkFBbUIsR0FBRyxZQUExQjtBQUNBLElBQUlDLG1CQUFtQixHQUFHLFlBQTFCO0FBQ0EsSUFBSUMsMEJBQTBCLEdBQUcsZ0JBQWpDOztBQUNBLFNBQVNDLGtCQUFULENBQTRCckYsSUFBNUIsRUFBa0NDLEtBQWxDLEVBQXlDcUYsUUFBekMsRUFBbUQ7QUFDL0NKLHFCQUFtQixDQUFDaEYsU0FBcEIsR0FBZ0NELEtBQWhDO0FBQ0EsTUFBSXNGLGNBQWMsR0FBR0wsbUJBQW1CLENBQUM5RSxJQUFwQixDQUF5QkosSUFBekIsQ0FBckI7O0FBQ0EsTUFBSSxDQUFDdUYsY0FBTCxFQUFxQjtBQUNqQixXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJbEYsR0FBRyxHQUFHNkUsbUJBQW1CLENBQUNoRixTQUE5QjtBQUNBLE1BQUl0TyxLQUFLLEdBQUcsRUFBWjtBQUNBdVQscUJBQW1CLENBQUNqRixTQUFwQixHQUFnQ0csR0FBaEM7QUFDQSxNQUFJbUYsY0FBYyxHQUFHTCxtQkFBbUIsQ0FBQy9FLElBQXBCLENBQXlCSixJQUF6QixDQUFyQjs7QUFDQSxNQUFJd0YsY0FBSixFQUFvQjtBQUNoQixXQUFPO0FBQUV2RixXQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLFNBQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxXQUFLLEVBQUVBO0FBQWpDLEtBQVA7QUFDSDs7QUFDRCxPQUFLLElBQUk2VCxPQUFPLEdBQUcsQ0FBbkIsRUFBc0IsSUFBdEIsRUFBNEJBLE9BQU8sRUFBbkMsRUFBdUM7QUFDbkMsUUFBSW5ULEdBQUcsR0FBR2dULFFBQVEsQ0FBQ3RGLElBQUQsRUFBT0ssR0FBUCxFQUFZb0YsT0FBWixDQUFsQjs7QUFDQSxRQUFJLENBQUNuVCxHQUFMLEVBQVU7QUFDTixhQUFPLElBQVA7QUFDSDs7QUFDRCtOLE9BQUcsR0FBRy9OLEdBQUcsQ0FBQytOLEdBQVY7QUFDQXpPLFNBQUssQ0FBQzhULElBQU4sQ0FBV3BULEdBQVg7QUFDQThTLDhCQUEwQixDQUFDbEYsU0FBM0IsR0FBdUNHLEdBQXZDO0FBQ0EsUUFBSXNGLHFCQUFxQixHQUFHUCwwQkFBMEIsQ0FBQ2hGLElBQTNCLENBQWdDSixJQUFoQyxDQUE1Qjs7QUFDQSxRQUFJMkYscUJBQUosRUFBMkI7QUFDdkJ0RixTQUFHLEdBQUcrRSwwQkFBMEIsQ0FBQ2xGLFNBQWpDOztBQUNBLFVBQUl5RixxQkFBcUIsQ0FBQyxDQUFELENBQXJCLEtBQTZCLEdBQWpDLEVBQXNDO0FBQ2xDO0FBQ0gsT0FGRCxNQUdLLElBQUlBLHFCQUFxQixDQUFDLENBQUQsQ0FBckIsS0FBNkIsR0FBakMsRUFBc0M7QUFDdkMsZUFBTztBQUFFMUYsZUFBSyxFQUFFQSxLQUFUO0FBQWdCSSxhQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sZUFBSyxFQUFFQTtBQUFqQyxTQUFQO0FBQ0g7QUFDSixLQVJELE1BU0s7QUFDRCxhQUFPLElBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBU2dVLGNBQVQsQ0FBd0I1RixJQUF4QixFQUE4QkMsS0FBOUIsRUFBcUM7QUFDakMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcEMsTUFBSTRGLEtBQUssR0FBRy9ELFVBQVUsQ0FBQzlCLElBQUQsRUFBT0MsS0FBUCxDQUF0Qjs7QUFDQSxNQUFJLENBQUM0RixLQUFMLEVBQVk7QUFDUixXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJeEYsR0FBRyxHQUFHd0YsS0FBSyxDQUFDeEYsR0FBaEI7QUFDQSxNQUFJZ0UsTUFBTSxHQUFHN0IsdUJBQXVCLENBQUN4QyxJQUFELEVBQU9LLEdBQVAsQ0FBcEM7O0FBQ0EsTUFBSWdFLE1BQUosRUFBWTtBQUNSaEUsT0FBRyxHQUFHZ0UsTUFBTSxDQUFDaEUsR0FBYjtBQUNBLFdBQU87QUFBRUosV0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxTQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sV0FBSyxFQUFFO0FBQUUwQyxZQUFJLEVBQUV1UixLQUFLLENBQUNqVSxLQUFkO0FBQXFCeVMsY0FBTSxFQUFFQSxNQUFNLENBQUN6UztBQUFwQztBQUFqQyxLQUFQO0FBQ0g7O0FBQ0QsU0FBTztBQUFFcU8sU0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxPQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sU0FBSyxFQUFFO0FBQUUwQyxVQUFJLEVBQUV1UixLQUFLLENBQUNqVTtBQUFkO0FBQWpDLEdBQVA7QUFDSDs7QUFDREQsT0FBTyxDQUFDaVUsY0FBUixHQUF5QkEsY0FBekI7QUFDQSxJQUFJRSx3QkFBd0IsR0FBRyx5QkFBL0I7O0FBQ0EsU0FBU0MsbUJBQVQsQ0FBNkIvRixJQUE3QixFQUFtQ0MsS0FBbkMsRUFBMEM7QUFDdEMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcEM2RiwwQkFBd0IsQ0FBQzVGLFNBQXpCLEdBQXFDRCxLQUFyQztBQUNBLE1BQUkrRixHQUFHLEdBQUdGLHdCQUF3QixDQUFDMUYsSUFBekIsQ0FBOEJKLElBQTlCLENBQVY7O0FBQ0EsTUFBSSxDQUFDZ0csR0FBTCxFQUFVO0FBQ04sV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSTNGLEdBQUcsR0FBR3lGLHdCQUF3QixDQUFDNUYsU0FBbkM7QUFDQSxNQUFJK0YsS0FBSyxHQUFHdlEsSUFBSSxDQUFDbU4sRUFBakI7QUFDQSxNQUFJcEIsTUFBTSxHQUFHLEVBQWI7QUFDQSxNQUFJeUUsVUFBVSxHQUFHYixrQkFBa0IsQ0FBQ3JGLElBQUQsRUFBT0ssR0FBUCxFQUFZLFVBQVVMLElBQVYsRUFBZ0JDLEtBQWhCLEVBQXVCa0csS0FBdkIsRUFBOEI7QUFDekUsUUFBSUEsS0FBSyxLQUFLLENBQWQsRUFBaUI7QUFDYixVQUFJQyxRQUFRLEdBQUduRCxVQUFVLENBQUNqRCxJQUFELEVBQU9DLEtBQVAsQ0FBVixJQUEyQmdGLGNBQWMsQ0FBQ2pGLElBQUQsRUFBT0MsS0FBUCxDQUF4RDs7QUFDQSxVQUFJbUcsUUFBSixFQUFjO0FBQ1ZILGFBQUssR0FBR0csUUFBUSxDQUFDeFUsS0FBakI7QUFDQSxlQUFPd1UsUUFBUDtBQUNIO0FBQ0o7O0FBQ0QsUUFBSUMsU0FBUyxHQUFHVCxjQUFjLENBQUM1RixJQUFELEVBQU9DLEtBQVAsQ0FBOUI7O0FBQ0EsUUFBSW9HLFNBQUosRUFBZTtBQUNYNUUsWUFBTSxDQUFDaUUsSUFBUCxDQUFZVyxTQUFTLENBQUN6VSxLQUF0QjtBQUNBLGFBQU95VSxTQUFQO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0Fka0MsQ0FBbkM7O0FBZUEsTUFBSSxDQUFDSCxVQUFMLEVBQWlCO0FBQ2IsV0FBTyxJQUFQO0FBQ0g7O0FBQ0Q3RixLQUFHLEdBQUc2RixVQUFVLENBQUM3RixHQUFqQjtBQUNBLFNBQU87QUFBRUosU0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxPQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sU0FBSyxFQUFFO0FBQUVxVSxXQUFLLEVBQUVBLEtBQVQ7QUFBZ0J4RSxZQUFNLEVBQUVBO0FBQXhCO0FBQWpDLEdBQVA7QUFDSDs7QUFDRDlQLE9BQU8sQ0FBQ29VLG1CQUFSLEdBQThCQSxtQkFBOUI7QUFDQSxJQUFJTyxVQUFVLEdBQUcsY0FBakI7O0FBQ0EsU0FBU0MsVUFBVCxDQUFvQnZHLElBQXBCLEVBQTBCQyxLQUExQixFQUFpQztBQUM3QnFHLFlBQVUsQ0FBQ3BHLFNBQVgsR0FBdUJELEtBQXZCO0FBQ0EsTUFBSXVHLEtBQUssR0FBR0YsVUFBVSxDQUFDbEcsSUFBWCxDQUFnQkosSUFBaEIsQ0FBWjs7QUFDQSxNQUFJLENBQUN3RyxLQUFMLEVBQVk7QUFDUixXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJbkcsR0FBRyxHQUFHaUcsVUFBVSxDQUFDcEcsU0FBckI7QUFDQSxTQUFPO0FBQUVELFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRTtBQUFqQyxHQUFQO0FBQ0g7O0FBQ0QsU0FBUzZVLGVBQVQsQ0FBeUJ6RyxJQUF6QixFQUErQkMsS0FBL0IsRUFBc0M7QUFDbEMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcEMsTUFBSXJPLEtBQUssR0FBRyxFQUFaO0FBQ0EsTUFBSXlPLEdBQUcsR0FBR0osS0FBVjs7QUFDQSxTQUFPSSxHQUFHLEdBQUdMLElBQUksQ0FBQzNOLE1BQWxCLEVBQTBCO0FBQ3RCLFFBQUlzUCxPQUFPLEdBQUdDLFlBQVksQ0FBQzVCLElBQUQsRUFBT0ssR0FBUCxDQUExQjtBQUNBLFFBQUl3RixLQUFLLEdBQUcvRCxVQUFVLENBQUM5QixJQUFELEVBQU9LLEdBQVAsRUFBWXNCLE9BQVosQ0FBdEI7O0FBQ0EsUUFBSWtFLEtBQUosRUFBVztBQUNQalUsV0FBSyxDQUFDaVUsS0FBTixHQUFjQSxLQUFLLENBQUNqVSxLQUFwQjtBQUNBeU8sU0FBRyxHQUFHd0YsS0FBSyxDQUFDeEYsR0FBWjtBQUNBO0FBQ0g7O0FBQ0QsUUFBSXFHLE1BQU0sR0FBR3hFLFdBQVcsQ0FBQ2xDLElBQUQsRUFBT0ssR0FBUCxFQUFZc0IsT0FBWixDQUF4Qjs7QUFDQSxRQUFJK0UsTUFBSixFQUFZO0FBQ1I5VSxXQUFLLENBQUM4VSxNQUFOLEdBQWVBLE1BQU0sQ0FBQzlVLEtBQXRCO0FBQ0F5TyxTQUFHLEdBQUdxRyxNQUFNLENBQUNyRyxHQUFiO0FBQ0E7QUFDSDs7QUFDRCxRQUFJc0csUUFBUSxHQUFHekMsdUJBQXVCLENBQUNsRSxJQUFELEVBQU9LLEdBQVAsRUFBWXNCLE9BQVosQ0FBdEM7O0FBQ0EsUUFBSWdGLFFBQUosRUFBYztBQUNWQSxjQUFRLENBQUMvVSxLQUFULENBQWVvTyxJQUFmLEdBQXNCQSxJQUFJLENBQUM0RyxTQUFMLENBQWVELFFBQVEsQ0FBQzFHLEtBQXhCLEVBQStCMEcsUUFBUSxDQUFDdEcsR0FBeEMsQ0FBdEI7QUFDQXpPLFdBQUssQ0FBQytVLFFBQU4sR0FBaUJBLFFBQVEsQ0FBQy9VLEtBQTFCO0FBQ0F5TyxTQUFHLEdBQUdzRyxRQUFRLENBQUN0RyxHQUFmO0FBQ0EsVUFBSW1HLEtBQUssR0FBR0QsVUFBVSxDQUFDdkcsSUFBRCxFQUFPSyxHQUFQLENBQXRCOztBQUNBLFVBQUltRyxLQUFKLEVBQVc7QUFDUG5HLFdBQUcsR0FBR21HLEtBQUssQ0FBQ25HLEdBQVo7QUFDQSxZQUFJd0csSUFBSSxHQUFHcEQsbUJBQW1CLENBQUN6RCxJQUFELEVBQU9LLEdBQVAsQ0FBOUI7O0FBQ0EsWUFBSSxDQUFDd0csSUFBTCxFQUFXO0FBQ1AsaUJBQU8sSUFBUDtBQUNIOztBQUNEalYsYUFBSyxDQUFDaVYsSUFBTixHQUFhQSxJQUFJLENBQUNqVixLQUFsQjtBQUNBeU8sV0FBRyxHQUFHd0csSUFBSSxDQUFDeEcsR0FBWDtBQUNIOztBQUNEO0FBQ0g7O0FBQ0QsUUFBSXlHLEdBQUcsR0FBRy9HLFFBQVEsQ0FBQ0MsSUFBRCxFQUFPSyxHQUFQLENBQWxCOztBQUNBLFFBQUl5RyxHQUFKLEVBQVM7QUFDTGxWLFdBQUssQ0FBQ21WLEtBQU4sR0FBY0QsR0FBRyxDQUFDbFYsS0FBbEI7QUFDQXlPLFNBQUcsR0FBR3lHLEdBQUcsQ0FBQ3pHLEdBQVY7QUFDQTtBQUNIOztBQUNELFFBQUkyRyxRQUFRLEdBQUdqQixtQkFBbUIsQ0FBQy9GLElBQUQsRUFBT0ssR0FBUCxDQUFsQzs7QUFDQSxRQUFJMkcsUUFBSixFQUFjO0FBQ1ZwVixXQUFLLENBQUNtVixLQUFOLEdBQWNDLFFBQVEsQ0FBQ3BWLEtBQXZCO0FBQ0F5TyxTQUFHLEdBQUcyRyxRQUFRLENBQUMzRyxHQUFmO0FBQ0E7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFPO0FBQUVKLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRUE7QUFBakMsR0FBUDtBQUNIOztBQUNERCxPQUFPLENBQUM4VSxlQUFSLEdBQTBCQSxlQUExQjtBQUNBLElBQUlRLHNCQUFzQixHQUFHLE1BQTdCOztBQUNBLFNBQVNDLHNCQUFULENBQWdDbEgsSUFBaEMsRUFBc0NDLEtBQXRDLEVBQTZDO0FBQ3pDLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDZ0gsd0JBQXNCLENBQUMvRyxTQUF2QixHQUFtQ0QsS0FBbkM7QUFDQSxNQUFJRSxNQUFNLEdBQUc4RyxzQkFBc0IsQ0FBQzdHLElBQXZCLENBQTRCSixJQUE1QixDQUFiOztBQUNBLE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHNEcsc0JBQXNCLENBQUMvRyxTQUFqQztBQUNBLFNBQU87QUFBRUQsU0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxPQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sU0FBSyxFQUFFO0FBQUV1VixVQUFJLEVBQUU7QUFBUjtBQUFqQyxHQUFQO0FBQ0g7O0FBQ0R4VixPQUFPLENBQUN1VixzQkFBUixHQUFpQ0Esc0JBQWpDO0FBQ0EsSUFBSUUsNkJBQTZCLEdBQUcsbUNBQXBDOztBQUNBLFNBQVNDLDZCQUFULENBQXVDckgsSUFBdkMsRUFBNkNDLEtBQTdDLEVBQW9EO0FBQ2hELE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDbUgsK0JBQTZCLENBQUNsSCxTQUE5QixHQUEwQ0QsS0FBMUM7QUFDQSxNQUFJRSxNQUFNLEdBQUdpSCw2QkFBNkIsQ0FBQ2hILElBQTlCLENBQW1DSixJQUFuQyxDQUFiOztBQUNBLE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHK0csNkJBQTZCLENBQUNsSCxTQUF4QztBQUNBLE1BQUlpSCxJQUFJLEdBQUdoSCxNQUFNLENBQUMsQ0FBRCxDQUFqQjtBQUNBLE1BQUltSCxVQUFVLEdBQUduSCxNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVUvSyxPQUFWLENBQWtCLEtBQWxCLEVBQXlCLEVBQXpCLENBQWpCO0FBQ0EsTUFBSXhELEtBQUssR0FBRztBQUFFdVYsUUFBSSxFQUFFQSxJQUFSO0FBQWNHLGNBQVUsRUFBRUE7QUFBMUIsR0FBWjtBQUNBLFNBQU87QUFBRXJILFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRUE7QUFBakMsR0FBUDtBQUNIOztBQUNERCxPQUFPLENBQUMwViw2QkFBUixHQUF3Q0EsNkJBQXhDO0FBQ0EsSUFBSUUsc0JBQXNCLEdBQUcsc0tBQTdCOztBQUNBLFNBQVNDLHNCQUFULENBQWdDeEgsSUFBaEMsRUFBc0NDLEtBQXRDLEVBQTZDO0FBQ3pDc0gsd0JBQXNCLENBQUNySCxTQUF2QixHQUFtQ0QsS0FBbkM7QUFDQSxNQUFJRSxNQUFNLEdBQUdvSCxzQkFBc0IsQ0FBQ25ILElBQXZCLENBQTRCSixJQUE1QixDQUFiOztBQUNBLE1BQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHa0gsc0JBQXNCLENBQUNySCxTQUFqQztBQUNBLE1BQUl1SCxRQUFRLEdBQUd0SCxNQUFNLENBQUMsQ0FBRCxDQUFyQjs7QUFDQSxNQUFJQSxNQUFNLENBQUMsQ0FBRCxDQUFWLEVBQWU7QUFDWCxRQUFJdUgsTUFBTSxHQUFHdkgsTUFBTSxDQUFDLENBQUQsQ0FBbkI7QUFDQSxRQUFJdk8sS0FBSyxHQUFHdU8sTUFBTSxDQUFDLENBQUQsQ0FBTixJQUFhQSxNQUFNLENBQUMsQ0FBRCxDQUFuQixJQUEwQkEsTUFBTSxDQUFDLENBQUQsQ0FBNUM7QUFDQSxXQUFPO0FBQUVGLFdBQUssRUFBRUEsS0FBVDtBQUFnQkksU0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFdBQUssRUFBRTtBQUFFdVYsWUFBSSxFQUFFLElBQVI7QUFBY00sZ0JBQVEsRUFBRUEsUUFBeEI7QUFBa0N2VSxZQUFJLEVBQUV3VSxNQUF4QztBQUFnRDlWLGFBQUssRUFBRUE7QUFBdkQ7QUFBakMsS0FBUDtBQUNIOztBQUNELFNBQU87QUFBRXFPLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRTtBQUFFdVYsVUFBSSxFQUFFLElBQVI7QUFBY00sY0FBUSxFQUFFQTtBQUF4QjtBQUFqQyxHQUFQO0FBQ0g7O0FBQ0Q5VixPQUFPLENBQUM2VixzQkFBUixHQUFpQ0Esc0JBQWpDOztBQUNBLFNBQVNHLG1CQUFULENBQTZCM0gsSUFBN0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3RDLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDLFNBQU9pSCxzQkFBc0IsQ0FBQ2xILElBQUQsRUFBT0MsS0FBUCxDQUF0QixJQUNIb0gsNkJBQTZCLENBQUNySCxJQUFELEVBQU9DLEtBQVAsQ0FEMUIsSUFFSHVILHNCQUFzQixDQUFDeEgsSUFBRCxFQUFPQyxLQUFQLENBRjFCO0FBR0g7O0FBQ0R0TyxPQUFPLENBQUNnVyxtQkFBUixHQUE4QkEsbUJBQTlCOztBQUNBLFNBQVNDLDJCQUFULENBQXFDNUgsSUFBckMsRUFBMkNDLEtBQTNDLEVBQWtEO0FBQzlDLE1BQUk0SCxjQUFjLEdBQUdGLG1CQUFtQixDQUFDM0gsSUFBRCxFQUFPQyxLQUFQLENBQXhDOztBQUNBLE1BQUksQ0FBQzRILGNBQUwsRUFBcUI7QUFDakIsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSXhILEdBQUcsR0FBR3dILGNBQWMsQ0FBQ3hILEdBQXpCO0FBQ0EsTUFBSXpPLEtBQUssR0FBRyxFQUFaOztBQUNBLFNBQU9pVyxjQUFQLEVBQXVCO0FBQ25CalcsU0FBSyxDQUFDOFQsSUFBTixDQUFXbUMsY0FBYyxDQUFDalcsS0FBMUI7QUFDQXlPLE9BQUcsR0FBR3dILGNBQWMsQ0FBQ3hILEdBQXJCO0FBQ0F3SCxrQkFBYyxHQUFHRixtQkFBbUIsQ0FBQzNILElBQUQsRUFBT0ssR0FBUCxDQUFwQztBQUNIOztBQUNELFNBQU87QUFBRUosU0FBSyxFQUFFQSxLQUFUO0FBQWdCSSxPQUFHLEVBQUVBLEdBQXJCO0FBQTBCek8sU0FBSyxFQUFFQTtBQUFqQyxHQUFQO0FBQ0g7O0FBQ0RELE9BQU8sQ0FBQ2lXLDJCQUFSLEdBQXNDQSwyQkFBdEM7QUFDQSxJQUFJRSxlQUFlLEdBQUcsbUJBQXRCOztBQUNBLFNBQVNDLGVBQVQsQ0FBeUIvSCxJQUF6QixFQUErQkMsS0FBL0IsRUFBc0M7QUFDbEMsTUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsU0FBSyxHQUFHLENBQVI7QUFBWTs7QUFDcEM2SCxpQkFBZSxDQUFDNUgsU0FBaEIsR0FBNEJELEtBQTVCO0FBQ0EsTUFBSUUsTUFBTSxHQUFHMkgsZUFBZSxDQUFDMUgsSUFBaEIsQ0FBcUJKLElBQXJCLENBQWI7O0FBQ0EsTUFBSSxDQUFDRyxNQUFMLEVBQWE7QUFDVCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJRSxHQUFHLEdBQUd5SCxlQUFlLENBQUM1SCxTQUExQjtBQUNBLE1BQUl0TyxLQUFLLEdBQUd1TyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWEsR0FBekI7QUFDQSxTQUFPO0FBQUVGLFNBQUssRUFBRUEsS0FBVDtBQUFnQkksT0FBRyxFQUFFQSxHQUFyQjtBQUEwQnpPLFNBQUssRUFBRUE7QUFBakMsR0FBUDtBQUNIOztBQUNERCxPQUFPLENBQUNvVyxlQUFSLEdBQTBCQSxlQUExQjtBQUNBLElBQUlDLGVBQWUsR0FBRyxPQUF0Qjs7QUFDQSxTQUFTQyxhQUFULENBQXVCakksSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQ2hDLE1BQUlBLEtBQUssS0FBSyxLQUFLLENBQW5CLEVBQXNCO0FBQUVBLFNBQUssR0FBRyxDQUFSO0FBQVk7O0FBQ3BDLE1BQUlJLEdBQUcsR0FBR0osS0FBVjtBQUNBK0gsaUJBQWUsQ0FBQzlILFNBQWhCLEdBQTRCRyxHQUE1QjtBQUNBLE1BQUk2SCxpQkFBaUIsR0FBR0YsZUFBZSxDQUFDNUgsSUFBaEIsQ0FBcUJKLElBQXJCLENBQXhCOztBQUNBLE1BQUlrSSxpQkFBSixFQUF1QjtBQUNuQjdILE9BQUcsR0FBRzJILGVBQWUsQ0FBQzlILFNBQXRCO0FBQ0g7O0FBQ0QsTUFBSXRPLEtBQUssR0FBRyxFQUFaO0FBQ0EsTUFBSXVXLFVBQUo7QUFDQSxNQUFJQyxvQkFBb0IsR0FBRyxJQUEzQjtBQUNBLE1BQUlDLElBQUo7O0FBQ0EsS0FBRztBQUNDLFFBQUlDLHNCQUFzQixHQUFHViwyQkFBMkIsQ0FBQzVILElBQUQsRUFBT0ssR0FBUCxDQUF4RDs7QUFDQSxRQUFJLENBQUNpSSxzQkFBTCxFQUE2QjtBQUN6QixVQUFJRixvQkFBSixFQUEwQjtBQUN0QixlQUFPLElBQVA7QUFDSCxPQUZELE1BR0s7QUFDRDtBQUNIO0FBQ0o7O0FBQ0QvSCxPQUFHLEdBQUdpSSxzQkFBc0IsQ0FBQ2pJLEdBQTdCOztBQUNBLFFBQUk4SCxVQUFKLEVBQWdCO0FBQ1pFLFVBQUksQ0FBQyxDQUFELENBQUosR0FBVUYsVUFBVSxDQUFDdlcsS0FBckI7QUFDSDs7QUFDRHlXLFFBQUksR0FBRyxDQUFDQyxzQkFBc0IsQ0FBQzFXLEtBQXhCLEVBQStCb0MsU0FBL0IsQ0FBUDtBQUNBcEMsU0FBSyxDQUFDOFQsSUFBTixDQUFXMkMsSUFBWDtBQUNBRixjQUFVLEdBQUdKLGVBQWUsQ0FBQy9ILElBQUQsRUFBT0ssR0FBUCxDQUE1Qjs7QUFDQSxRQUFJOEgsVUFBSixFQUFnQjtBQUNaOUgsU0FBRyxHQUFHOEgsVUFBVSxDQUFDOUgsR0FBakI7QUFDSDs7QUFDRCtILHdCQUFvQixHQUFHRCxVQUFVLElBQUlBLFVBQVUsQ0FBQ3ZXLEtBQVgsS0FBcUIsR0FBMUQ7QUFDSCxHQXJCRCxRQXFCU3VXLFVBckJUOztBQXNCQSxTQUFPO0FBQUVsSSxTQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLE9BQUcsRUFBRUEsR0FBckI7QUFBMEJ6TyxTQUFLLEVBQUVBO0FBQWpDLEdBQVA7QUFDSDs7QUFDREQsT0FBTyxDQUFDc1csYUFBUixHQUF3QkEsYUFBeEI7QUFDQSxJQUFJTSxlQUFlLEdBQUcsa0JBQXRCO0FBQ0EsSUFBSUMsc0JBQXNCLEdBQUcsK0RBQTdCO0FBQ0EsSUFBSUMsc0JBQXNCLEdBQUcsK0RBQTdCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLGlDQUFuQjtBQUNBLElBQUlDLFdBQVcsR0FBRyxxREFBbEI7QUFDQSxJQUFJQyxTQUFTLEdBQUcseUhBQWhCOztBQUNBLElBQUlDLFVBQVUsR0FBSSxZQUFZO0FBQzFCLFdBQVNBLFVBQVQsQ0FBb0I3SSxJQUFwQixFQUEwQjtBQUN0QixTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLOEksdUJBQUwsR0FBK0IsQ0FBL0I7QUFDSDs7QUFDREQsWUFBVSxDQUFDdlYsU0FBWCxDQUFxQnlWLFFBQXJCLEdBQWdDLFlBQVk7QUFDeEMsUUFBSUMsTUFBTSxHQUFHLEVBQWI7QUFDQSxRQUFJQyxVQUFKOztBQUNBLE9BQUc7QUFDQ0EsZ0JBQVUsR0FBRyxLQUFLQyxhQUFMLEVBQWI7QUFDQUYsWUFBTSxDQUFDdEQsSUFBUCxDQUFZdUQsVUFBWjtBQUNILEtBSEQsUUFHU0EsVUFIVDs7QUFJQSxXQUFPRCxNQUFQO0FBQ0gsR0FSRDs7QUFTQUgsWUFBVSxDQUFDdlYsU0FBWCxDQUFxQjRWLGFBQXJCLEdBQXFDLFlBQVk7QUFDN0MsUUFBSSxLQUFLQyxvQkFBVCxFQUErQjtBQUMzQixVQUFJaEosTUFBTSxHQUFHLEtBQUtnSixvQkFBbEI7QUFDQSxXQUFLQSxvQkFBTCxHQUE0QixJQUE1QjtBQUNBLGFBQU9oSixNQUFQO0FBQ0g7O0FBQ0QsUUFBSWlKLElBQUksR0FBRyxLQUFLcEosSUFBTCxDQUFVLEtBQUs4SSx1QkFBZixDQUFYOztBQUNBLFlBQVFNLElBQVI7QUFDSSxXQUFLLElBQUw7QUFBVyxlQUFPLEtBQUtDLG1CQUFMLEVBQVA7O0FBQ1gsV0FBSyxHQUFMO0FBQVUsZUFBTyxLQUFLQSxtQkFBTCxFQUFQOztBQUNWLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNJLGFBQUtQLHVCQUFMO0FBQ0EsZUFBT00sSUFBUDs7QUFDSixXQUFLLEdBQUw7QUFBVSxlQUFPLEtBQUtFLGlCQUFMLE1BQTRCLEtBQUtDLGtCQUFMLEVBQW5DOztBQUNWLFdBQUssR0FBTDtBQUNBLFdBQUssSUFBTDtBQUNBLFdBQUssSUFBTDtBQUNBLFdBQUssSUFBTDtBQUNBLFdBQUssSUFBTDtBQUNJLGVBQU8sS0FBS0Msa0JBQUwsRUFBUDs7QUFDSixXQUFLLEdBQUw7QUFBVSxlQUFPLEtBQUtDLGdCQUFMLE1BQTJCLEtBQUtGLGtCQUFMLEVBQWxDOztBQUNWLFdBQUssSUFBTDtBQUFXLGVBQU8sS0FBS0csdUJBQUwsTUFBa0MsS0FBS0gsa0JBQUwsRUFBekM7O0FBQ1gsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0EsV0FBSyxHQUFMO0FBQ0ksZUFBTyxLQUFLSSxvQkFBTCxFQUFQOztBQUNKLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNJLFlBQUksS0FBSzNKLElBQUwsQ0FBVSxLQUFLOEksdUJBQUwsR0FBK0IsQ0FBekMsTUFBZ0QsR0FBcEQsRUFBeUQ7QUFDckQsY0FBSWMsU0FBUyxHQUFHLEtBQUs1SixJQUFMLENBQVUsS0FBSzhJLHVCQUFMLEdBQStCLENBQXpDLENBQWhCOztBQUNBLGNBQUljLFNBQVMsSUFBSSxHQUFiLElBQW9CQSxTQUFTLElBQUksR0FBakMsSUFBd0NBLFNBQVMsS0FBSyxHQUExRCxFQUErRDtBQUMzRCxrQkFBTSxJQUFJeFcsS0FBSixDQUFVLCtCQUFWLENBQU47QUFDSDtBQUNKOztBQUNELGVBQU8sS0FBS3NXLHVCQUFMLE1BQWtDLEtBQUtILGtCQUFMLEVBQXpDOztBQUNKLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNJLGVBQU8sS0FBS00sa0JBQUwsTUFBNkIsS0FBS04sa0JBQUwsRUFBcEM7O0FBQ0osV0FBSyxHQUFMO0FBQVUsZUFBTyxLQUFLSSxvQkFBTCxNQUErQixLQUFLRCx1QkFBTCxFQUEvQixJQUFpRSxLQUFLSSxVQUFMLEVBQWpFLElBQXNGLEtBQUtQLGtCQUFMLEVBQTdGOztBQUNWLFdBQUssR0FBTDtBQUNBLFdBQUssR0FBTDtBQUNJLGVBQU8sS0FBS0ksb0JBQUwsTUFBK0IsS0FBS0osa0JBQUwsRUFBdEM7O0FBQ0osV0FBSyxHQUFMO0FBQVUsZUFBTyxLQUFLUSxlQUFMLE1BQTBCLEtBQUtSLGtCQUFMLEVBQWpDOztBQUNWLFdBQUssR0FBTDtBQUFVLGVBQU8sS0FBS1MsVUFBTCxNQUFxQixLQUFLVCxrQkFBTCxFQUE1Qjs7QUFDVixXQUFLdlYsU0FBTDtBQUFnQixlQUFPQSxTQUFQOztBQUNoQjtBQUFTLGVBQU8sS0FBSzBWLHVCQUFMLE1BQWtDLEtBQUtILGtCQUFMLEVBQXpDO0FBeERiO0FBMERILEdBakVEOztBQWtFQVYsWUFBVSxDQUFDdlYsU0FBWCxDQUFxQmlXLGtCQUFyQixHQUEwQyxZQUFZO0FBQ2xELFdBQU87QUFBRXBDLFVBQUksRUFBRSxDQUFSO0FBQVduSCxVQUFJLEVBQUUsS0FBS0EsSUFBTCxDQUFVLEtBQUs4SSx1QkFBTCxFQUFWO0FBQWpCLEtBQVA7QUFDSCxHQUZEOztBQUdBRCxZQUFVLENBQUN2VixTQUFYLENBQXFCa1csa0JBQXJCLEdBQTBDLFlBQVk7QUFDbERqQixtQkFBZSxDQUFDckksU0FBaEIsR0FBNEIsS0FBSzRJLHVCQUFqQztBQUNBUCxtQkFBZSxDQUFDbkksSUFBaEIsQ0FBcUIsS0FBS0osSUFBMUI7QUFDQSxTQUFLOEksdUJBQUwsR0FBK0JQLGVBQWUsQ0FBQ3JJLFNBQS9DO0FBQ0EsV0FBTyxHQUFQO0FBQ0gsR0FMRDs7QUFNQTJJLFlBQVUsQ0FBQ3ZWLFNBQVgsQ0FBcUJnVyxpQkFBckIsR0FBeUMsWUFBWTtBQUNqRCxTQUFLUix1QkFBTDtBQUNBLFFBQUltQixRQUFRLEdBQUcsS0FBS0MsWUFBTCxFQUFmOztBQUNBLFFBQUlELFFBQUosRUFBYztBQUNWLGFBQU87QUFBRTlDLFlBQUksRUFBRSxFQUFSO0FBQVluSCxZQUFJLEVBQUUsTUFBTWlLLFFBQVEsQ0FBQ2pLO0FBQWpDLE9BQVA7QUFDSDs7QUFDRCxTQUFLOEksdUJBQUw7QUFDQSxXQUFPLElBQVA7QUFDSCxHQVJEOztBQVNBRCxZQUFVLENBQUN2VixTQUFYLENBQXFCMFcsVUFBckIsR0FBa0MsWUFBWTtBQUMxQyxRQUFJLEtBQUtoSyxJQUFMLENBQVU5TCxNQUFWLENBQWlCLEtBQUs0VSx1QkFBdEIsRUFBK0MsQ0FBL0MsTUFBc0QsTUFBMUQsRUFBa0U7QUFDOUQsV0FBS0EsdUJBQUwsSUFBZ0MsQ0FBaEM7QUFDQSxhQUFPLE1BQVA7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQU5EOztBQU9BRCxZQUFVLENBQUN2VixTQUFYLENBQXFCd1csVUFBckIsR0FBa0MsWUFBWTtBQUMxQyxRQUFJLEtBQUs5SixJQUFMLENBQVU5TCxNQUFWLENBQWlCLEtBQUs0VSx1QkFBdEIsRUFBK0MsQ0FBL0MsTUFBc0QsS0FBMUQsRUFBaUU7QUFDN0QsV0FBS0EsdUJBQUwsSUFBZ0MsQ0FBaEM7QUFDQSxhQUFPLEtBQVA7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQU5EOztBQU9BRCxZQUFVLENBQUN2VixTQUFYLENBQXFCdVcsa0JBQXJCLEdBQTBDLFlBQVk7QUFDbEQsUUFBSSxLQUFLN0osSUFBTCxDQUFVLEtBQUs4SSx1QkFBTCxHQUErQixDQUF6QyxNQUFnRCxHQUFwRCxFQUF5RDtBQUNyRCxVQUFJcUIsS0FBSyxHQUFHLEtBQUtuSyxJQUFMLENBQVU5TCxNQUFWLENBQWlCLEtBQUs0VSx1QkFBdEIsRUFBK0MsQ0FBL0MsQ0FBWjtBQUNBLFdBQUtBLHVCQUFMLElBQWdDLENBQWhDO0FBQ0EsYUFBT3FCLEtBQVA7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVBEOztBQVFBdEIsWUFBVSxDQUFDdlYsU0FBWCxDQUFxQnFXLG9CQUFyQixHQUE0QyxZQUFZO0FBQ3BEaEIsZUFBVyxDQUFDekksU0FBWixHQUF3QixLQUFLNEksdUJBQTdCO0FBQ0EsUUFBSTNJLE1BQU0sR0FBR3dJLFdBQVcsQ0FBQ3ZJLElBQVosQ0FBaUIsS0FBS0osSUFBdEIsQ0FBYjs7QUFDQSxRQUFJLENBQUNHLE1BQUwsRUFBYTtBQUNULGFBQU8sSUFBUDtBQUNIOztBQUNELFNBQUsySSx1QkFBTCxHQUErQkgsV0FBVyxDQUFDekksU0FBM0M7O0FBQ0EsUUFBSSxLQUFLRixJQUFMLENBQVUsS0FBSzhJLHVCQUFmLE1BQTRDLEdBQWhELEVBQXFEO0FBQ2pELGFBQU87QUFBRTNCLFlBQUksRUFBRSxDQUFSO0FBQVduSCxZQUFJLEVBQUVHLE1BQU0sQ0FBQyxDQUFEO0FBQXZCLE9BQVA7QUFDSDs7QUFDRCxRQUFJcEosSUFBSSxHQUFHLEtBQUttVCxZQUFMLEVBQVg7O0FBQ0EsUUFBSW5ULElBQUosRUFBVTtBQUNOLGFBQU87QUFBRW9RLFlBQUksRUFBRSxDQUFSO0FBQVduSCxZQUFJLEVBQUVHLE1BQU0sQ0FBQyxDQUFELENBQU4sR0FBWXBKLElBQUksQ0FBQ2lKO0FBQWxDLE9BQVA7QUFDSDs7QUFDRCxXQUFPO0FBQUVtSCxVQUFJLEVBQUUsQ0FBUjtBQUFXbkgsVUFBSSxFQUFFRyxNQUFNLENBQUMsQ0FBRDtBQUF2QixLQUFQO0FBQ0gsR0FmRDs7QUFnQkEwSSxZQUFVLENBQUN2VixTQUFYLENBQXFCb1csdUJBQXJCLEdBQStDLFlBQVk7QUFDdkQsUUFBSTNTLElBQUksR0FBRyxLQUFLbVQsWUFBTCxFQUFYOztBQUNBLFFBQUksQ0FBQ25ULElBQUwsRUFBVztBQUNQLGFBQU8sSUFBUDtBQUNIOztBQUNELFFBQUksS0FBS2lKLElBQUwsQ0FBVSxLQUFLOEksdUJBQWYsTUFBNEMsR0FBaEQsRUFBcUQ7QUFDakQsV0FBS0EsdUJBQUw7O0FBQ0EsVUFBSS9SLElBQUksQ0FBQ2lKLElBQUwsQ0FBVWhMLFdBQVYsT0FBNEIsS0FBaEMsRUFBdUM7QUFDbkMsZUFBTyxLQUFLb1YsZ0JBQUwsRUFBUDtBQUNIOztBQUNELGFBQU87QUFBRWpELFlBQUksRUFBRSxDQUFSO0FBQVdwUSxZQUFJLEVBQUVBLElBQUksQ0FBQ2lKLElBQXRCO0FBQTRCQSxZQUFJLEVBQUVqSixJQUFJLENBQUNpSixJQUFMLEdBQVk7QUFBOUMsT0FBUDtBQUNIOztBQUNELFdBQU9qSixJQUFQO0FBQ0gsR0FiRDs7QUFjQThSLFlBQVUsQ0FBQ3ZWLFNBQVgsQ0FBcUIrVixtQkFBckIsR0FBMkMsWUFBWTtBQUNuRCxRQUFJRCxJQUFJLEdBQUcsS0FBS3BKLElBQUwsQ0FBVSxLQUFLOEksdUJBQWYsQ0FBWDtBQUNBLFFBQUkzSSxNQUFKOztBQUNBLFFBQUlpSixJQUFJLEtBQUssR0FBYixFQUFrQjtBQUNkWiw0QkFBc0IsQ0FBQ3RJLFNBQXZCLEdBQW1DLEtBQUs0SSx1QkFBeEM7QUFDQTNJLFlBQU0sR0FBR3FJLHNCQUFzQixDQUFDcEksSUFBdkIsQ0FBNEIsS0FBS0osSUFBakMsQ0FBVDs7QUFDQSxVQUFJLENBQUNHLE1BQUwsRUFBYTtBQUNULGVBQU8sSUFBUDtBQUNIOztBQUNELFdBQUsySSx1QkFBTCxHQUErQk4sc0JBQXNCLENBQUN0SSxTQUF0RDtBQUNILEtBUEQsTUFRSyxJQUFJa0osSUFBSSxLQUFLLElBQWIsRUFBbUI7QUFDcEJYLDRCQUFzQixDQUFDdkksU0FBdkIsR0FBbUMsS0FBSzRJLHVCQUF4QztBQUNBM0ksWUFBTSxHQUFHc0ksc0JBQXNCLENBQUNySSxJQUF2QixDQUE0QixLQUFLSixJQUFqQyxDQUFUOztBQUNBLFVBQUksQ0FBQ0csTUFBTCxFQUFhO0FBQ1QsZUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBSzJJLHVCQUFMLEdBQStCTCxzQkFBc0IsQ0FBQ3ZJLFNBQXREO0FBQ0g7O0FBQ0QsV0FBTztBQUFFaUgsVUFBSSxFQUFFLENBQVI7QUFBV25ILFVBQUksRUFBRUcsTUFBTSxDQUFDLENBQUQ7QUFBdkIsS0FBUDtBQUNILEdBcEJEOztBQXFCQTBJLFlBQVUsQ0FBQ3ZWLFNBQVgsQ0FBcUI4VyxnQkFBckIsR0FBd0MsWUFBWTtBQUNoRCxRQUFJbkssS0FBSyxHQUFHLEtBQUs2SSx1QkFBTCxHQUErQixDQUEvQixHQUFtQyxDQUEvQztBQUNBLFFBQUl1QixRQUFRLEdBQUc7QUFBRWxELFVBQUksRUFBRSxDQUFSO0FBQVduSCxVQUFJLEVBQUVoTTtBQUFqQixLQUFmO0FBQ0EsU0FBS3dWLGtCQUFMOztBQUNBLFFBQUksS0FBS1YsdUJBQUwsSUFBZ0MsS0FBSzlJLElBQUwsQ0FBVTNOLE1BQTlDLEVBQXNEO0FBQ2xELGFBQU9nWSxRQUFQO0FBQ0g7O0FBQ0QsUUFBSUMsa0JBQWtCLEdBQUcsS0FBS3RLLElBQUwsQ0FBVSxLQUFLOEksdUJBQWYsQ0FBekI7O0FBQ0EsUUFBSXdCLGtCQUFrQixLQUFLLElBQXZCLElBQStCQSxrQkFBa0IsS0FBSyxHQUExRCxFQUErRDtBQUMzRCxVQUFJQyxXQUFXLEdBQUcsS0FBS2xCLG1CQUFMLEVBQWxCO0FBQ0FnQixjQUFRLENBQUNySyxJQUFULEdBQWdCdUssV0FBVyxDQUFDdkssSUFBNUI7QUFDQSxXQUFLd0osa0JBQUw7O0FBQ0EsVUFBSSxLQUFLeEosSUFBTCxDQUFVLEtBQUs4SSx1QkFBZixNQUE0QyxHQUE1QyxJQUFtRCxLQUFLQSx1QkFBTCxJQUFnQyxLQUFLOUksSUFBTCxDQUFVM04sTUFBakcsRUFBeUc7QUFDckcsYUFBS3lXLHVCQUFMO0FBQ0EsWUFBSXpJLEdBQUcsR0FBRyxLQUFLeUksdUJBQWY7QUFDQXVCLGdCQUFRLENBQUNySyxJQUFULEdBQWdCLEtBQUtBLElBQUwsQ0FBVTRHLFNBQVYsQ0FBb0IzRyxLQUFwQixFQUEyQkksR0FBM0IsQ0FBaEI7QUFDQSxlQUFPZ0ssUUFBUDtBQUNILE9BTEQsTUFNSztBQUNELGVBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBQ0QsV0FBTyxLQUFLdkIsdUJBQUwsR0FBK0IsS0FBSzlJLElBQUwsQ0FBVTNOLE1BQWhELEVBQXdEO0FBQ3BELFVBQUkrVyxJQUFJLEdBQUcsS0FBS3BKLElBQUwsQ0FBVSxLQUFLOEksdUJBQUwsRUFBVixDQUFYOztBQUNBLGNBQVFNLElBQVI7QUFDSSxhQUFLLEdBQUw7QUFBVSxpQkFBT2lCLFFBQVA7O0FBQ1YsYUFBSyxHQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0ksZUFBS2Isa0JBQUw7O0FBQ0EsY0FBSSxLQUFLeEosSUFBTCxDQUFVLEtBQUs4SSx1QkFBZixNQUE0QyxHQUFoRCxFQUFxRDtBQUNqRCxpQkFBS0EsdUJBQUw7QUFDQSxtQkFBT3VCLFFBQVA7QUFDSCxXQUhELE1BSUs7QUFDRCxtQkFBTyxJQUFQO0FBQ0g7O0FBQ0wsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0ksaUJBQU8sSUFBUDs7QUFDSixhQUFLLElBQUw7QUFDSSxnQkFBTSxJQUFJalgsS0FBSixDQUFVLDZCQUFWLENBQU47O0FBQ0o7QUFDSWlYLGtCQUFRLENBQUNySyxJQUFULElBQWlCb0osSUFBakI7QUFyQlI7QUF1Qkg7O0FBQ0QsV0FBT2lCLFFBQVA7QUFDSCxHQWpERDs7QUFrREF4QixZQUFVLENBQUN2VixTQUFYLENBQXFCNFcsWUFBckIsR0FBb0MsWUFBWTtBQUM1Q3RCLGFBQVMsQ0FBQzFJLFNBQVYsR0FBc0IsS0FBSzRJLHVCQUEzQjtBQUNBLFFBQUkzSSxNQUFNLEdBQUd5SSxTQUFTLENBQUN4SSxJQUFWLENBQWUsS0FBS0osSUFBcEIsQ0FBYjs7QUFDQSxRQUFJLENBQUNHLE1BQUwsRUFBYTtBQUNULGFBQU8sSUFBUDtBQUNIOztBQUNELFNBQUsySSx1QkFBTCxHQUErQkYsU0FBUyxDQUFDMUksU0FBekM7QUFDQSxXQUFPO0FBQUVpSCxVQUFJLEVBQUUsQ0FBUjtBQUFXbkgsVUFBSSxFQUFFRyxNQUFNLENBQUMsQ0FBRDtBQUF2QixLQUFQO0FBQ0gsR0FSRDs7QUFTQTBJLFlBQVUsQ0FBQ3ZWLFNBQVgsQ0FBcUJtVyxnQkFBckIsR0FBd0MsWUFBWTtBQUNoRCxTQUFLWCx1QkFBTDtBQUNBLFFBQUkvUixJQUFJLEdBQUcsS0FBS21ULFlBQUwsRUFBWDs7QUFDQSxRQUFJblQsSUFBSixFQUFVO0FBQ04sYUFBTztBQUFFb1EsWUFBSSxFQUFFLEVBQVI7QUFBWW5ILFlBQUksRUFBRWpKLElBQUksQ0FBQ2lKO0FBQXZCLE9BQVA7QUFDSDs7QUFDRCxTQUFLOEksdUJBQUw7QUFDQSxXQUFPLElBQVA7QUFDSCxHQVJEOztBQVNBRCxZQUFVLENBQUN2VixTQUFYLENBQXFCeVcsZUFBckIsR0FBdUMsWUFBWTtBQUMvQyxRQUFJLEtBQUsvSixJQUFMLENBQVUsS0FBSzhJLHVCQUFMLEdBQStCLENBQXpDLE1BQWdELEdBQXBELEVBQXlEO0FBQ3JESixrQkFBWSxDQUFDeEksU0FBYixHQUF5QixLQUFLNEksdUJBQTlCO0FBQ0EsVUFBSTNJLE1BQU0sR0FBR3VJLFlBQVksQ0FBQ3RJLElBQWIsQ0FBa0IsS0FBS0osSUFBdkIsQ0FBYjs7QUFDQSxVQUFJLENBQUNHLE1BQUwsRUFBYTtBQUNULGVBQU8sSUFBUDtBQUNIOztBQUNELFdBQUsySSx1QkFBTCxHQUErQkosWUFBWSxDQUFDeEksU0FBNUM7QUFDQSxhQUFPLEtBQUtnSixhQUFMLEVBQVA7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVhEOztBQVlBTCxZQUFVLENBQUN2VixTQUFYLENBQXFCa1gsNkJBQXJCLEdBQXFELFVBQVVDLGlCQUFWLEVBQTZCO0FBQzlFLFNBQUt0QixvQkFBTCxHQUE0QnNCLGlCQUE1QjtBQUNILEdBRkQ7O0FBR0E1QixZQUFVLENBQUN2VixTQUFYLENBQXFCb1gsZ0JBQXJCLEdBQXdDLFlBQVk7QUFDaEQsU0FBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNBLFFBQUlDLFVBQVUsR0FBRztBQUNiQyxXQUFLLEVBQUUsS0FBS0MsbUJBQUw7QUFETSxLQUFqQjtBQUdBLFdBQU9GLFVBQVA7QUFDSCxHQU5EOztBQU9BL0IsWUFBVSxDQUFDdlYsU0FBWCxDQUFxQndYLG1CQUFyQixHQUEyQyxZQUFZO0FBQ25ELFFBQUlELEtBQUssR0FBRyxFQUFaO0FBQ0EsUUFBSTVCLFVBQUo7O0FBQ0EsV0FBT0EsVUFBVSxHQUFHLEtBQUtDLGFBQUwsRUFBcEIsRUFBMEM7QUFDdEMsY0FBUUQsVUFBUjtBQUNJLGFBQUssR0FBTDtBQUFVOztBQUNWLGFBQUssTUFBTDtBQUNBLGFBQUssS0FBTDtBQUNJLGNBQUksS0FBSzBCLFlBQVQsRUFBdUI7QUFDbkI7QUFDSDs7QUFDRCxlQUFLSCw2QkFBTCxDQUFtQ3ZCLFVBQW5DO0FBQ0EsY0FBSThCLE1BQU0sR0FBRyxLQUFLQyxlQUFMLEVBQWI7O0FBQ0EsY0FBSUQsTUFBSixFQUFZO0FBQ1JGLGlCQUFLLENBQUNuRixJQUFOLENBQVdxRixNQUFYO0FBQ0g7O0FBQ0Q7QUFaUjs7QUFjQSxVQUFJOUIsVUFBVSxDQUFDOUIsSUFBWCxLQUFvQixFQUF4QixFQUE0QjtBQUN4QixhQUFLcUQsNkJBQUwsQ0FBbUN2QixVQUFuQztBQUNBLFlBQUk4QixNQUFNLEdBQUcsS0FBS0MsZUFBTCxFQUFiOztBQUNBLFlBQUlELE1BQUosRUFBWTtBQUNSRixlQUFLLENBQUNuRixJQUFOLENBQVdxRixNQUFYO0FBQ0g7O0FBQ0Q7QUFDSDs7QUFDRCxXQUFLUCw2QkFBTCxDQUFtQ3ZCLFVBQW5DO0FBQ0EsVUFBSWdDLGFBQWEsR0FBRyxLQUFLQyxxQkFBTCxFQUFwQjs7QUFDQSxVQUFJRCxhQUFKLEVBQW1CO0FBQ2ZKLGFBQUssQ0FBQ25GLElBQU4sQ0FBV3VGLGFBQVg7QUFDSDtBQUNKOztBQUNELFdBQU9KLEtBQVA7QUFDSCxHQWpDRDs7QUFrQ0FoQyxZQUFVLENBQUN2VixTQUFYLENBQXFCMFgsZUFBckIsR0FBdUMsWUFBWTtBQUMvQyxRQUFJL0IsVUFBVSxHQUFHLEtBQUtDLGFBQUwsRUFBakI7QUFDQSxRQUFJNkIsTUFBTSxHQUFHO0FBQ1Q1RCxVQUFJLEVBQUUsU0FERztBQUVUcFEsVUFBSSxFQUFFa1MsVUFBVSxDQUFDakosSUFGUjtBQUdUbUwsYUFBTyxFQUFFLEVBSEE7QUFJVEMsV0FBSyxFQUFFcFg7QUFKRSxLQUFiOztBQU1BLFdBQU9pVixVQUFVLEdBQUcsS0FBS0MsYUFBTCxFQUFwQixFQUEwQztBQUN0QyxVQUFJRCxVQUFVLEtBQUssR0FBbkIsRUFBd0I7QUFDcEIsZUFBTzhCLE1BQVA7QUFDSCxPQUZELE1BR0ssSUFBSTlCLFVBQVUsS0FBSyxHQUFuQixFQUF3QjtBQUN6QjhCLGNBQU0sQ0FBQ0ssS0FBUCxHQUFlLEtBQUtDLG1CQUFMLENBQXlCcEMsVUFBekIsQ0FBZjtBQUNBLGVBQU84QixNQUFQO0FBQ0gsT0FISSxNQUlBLElBQUk5QixVQUFVLENBQUM5QixJQUFYLEtBQW9CLENBQXBCLElBQXlCOEIsVUFBVSxDQUFDcUMsZUFBWCxLQUErQixHQUE1RCxFQUFpRTtBQUNsRVAsY0FBTSxDQUFDSyxLQUFQLEdBQWVuQyxVQUFmO0FBQ0EsZUFBTzhCLE1BQVA7QUFDSDs7QUFDRCxXQUFLUCw2QkFBTCxDQUFtQ3ZCLFVBQW5DO0FBQ0EsVUFBSXRVLFNBQVMsR0FBRyxLQUFLNFcsc0JBQUwsRUFBaEI7O0FBQ0EsVUFBSTVXLFNBQUosRUFBZTtBQUNYb1csY0FBTSxDQUFDSSxPQUFQLENBQWV6RixJQUFmLENBQW9CL1EsU0FBcEI7QUFDSDtBQUNKOztBQUNELFdBQU9vVyxNQUFQO0FBQ0gsR0EzQkQ7O0FBNEJBbEMsWUFBVSxDQUFDdlYsU0FBWCxDQUFxQjRYLHFCQUFyQixHQUE2QyxZQUFZO0FBQ3JELFFBQUlELGFBQWEsR0FBRztBQUNoQjlELFVBQUksRUFBRSxnQkFEVTtBQUVoQmdFLGFBQU8sRUFBRSxFQUZPO0FBR2hCQyxXQUFLLEVBQUVwWDtBQUhTLEtBQXBCO0FBS0EsUUFBSWlWLFVBQUo7O0FBQ0EsV0FBT0EsVUFBVSxHQUFHLEtBQUtDLGFBQUwsRUFBcEIsRUFBMEM7QUFDdEMsVUFBSUQsVUFBVSxLQUFLLEdBQW5CLEVBQXdCO0FBQ3BCLFlBQUltQyxLQUFLLEdBQUcsS0FBS0MsbUJBQUwsQ0FBeUJwQyxVQUF6QixDQUFaO0FBQ0FnQyxxQkFBYSxDQUFDRyxLQUFkLEdBQXNCQSxLQUF0QjtBQUNBLGVBQU9ILGFBQVA7QUFDSCxPQUpELE1BS0ssSUFBSWhDLFVBQVUsQ0FBQzlCLElBQVgsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDNUIsWUFBSXFFLFdBQVcsR0FBR3ZDLFVBQWxCOztBQUNBLFlBQUl1QyxXQUFXLENBQUNGLGVBQVosS0FBZ0MsR0FBcEMsRUFBeUM7QUFDckNMLHVCQUFhLENBQUNHLEtBQWQsR0FBc0JJLFdBQXRCO0FBQ0EsaUJBQU9QLGFBQVA7QUFDSDtBQUNKOztBQUNELFdBQUtULDZCQUFMLENBQW1DdkIsVUFBbkM7QUFDQSxVQUFJd0MsY0FBYyxHQUFHLEtBQUtGLHNCQUFMLEVBQXJCOztBQUNBLFVBQUlFLGNBQUosRUFBb0I7QUFDaEJSLHFCQUFhLENBQUNFLE9BQWQsQ0FBc0J6RixJQUF0QixDQUEyQitGLGNBQTNCO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQTNCRDs7QUE0QkE1QyxZQUFVLENBQUN2VixTQUFYLENBQXFCaVksc0JBQXJCLEdBQThDLFlBQVk7QUFDdEQsUUFBSXRDLFVBQVUsR0FBRyxLQUFLQyxhQUFMLEVBQWpCOztBQUNBLFlBQVFELFVBQVI7QUFDSSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDSSxhQUFLSCx1QkFBTDtBQUNBLGVBQU8sS0FBS3VDLG1CQUFMLENBQXlCcEMsVUFBekIsQ0FBUDtBQUxSOztBQU9BLFFBQUksT0FBT0EsVUFBUCxLQUFzQixRQUF0QixJQUFrQ0EsVUFBVSxDQUFDOUIsSUFBWCxLQUFvQixDQUExRCxFQUE2RDtBQUN6RCxhQUFPLEtBQUt1RSxnQkFBTCxDQUFzQnpDLFVBQVUsQ0FBQ2xTLElBQWpDLENBQVA7QUFDSDs7QUFDRCxXQUFPa1MsVUFBUDtBQUNILEdBYkQ7O0FBY0FKLFlBQVUsQ0FBQ3ZWLFNBQVgsQ0FBcUIrWCxtQkFBckIsR0FBMkMsVUFBVUMsZUFBVixFQUEyQjtBQUNsRSxRQUFJSyxXQUFXLEdBQUc7QUFDZCxXQUFLLEdBRFM7QUFFZCxXQUFLLEdBRlM7QUFHZCxXQUFLO0FBSFMsTUFJaEJMLGVBSmdCLENBQWxCO0FBS0EsUUFBSXJMLEtBQUssR0FBRyxLQUFLNkksdUJBQUwsR0FBK0IsQ0FBM0M7QUFDQSxRQUFJc0MsS0FBSyxHQUFHO0FBQ1JqRSxVQUFJLEVBQUUsQ0FERTtBQUVSbkgsVUFBSSxFQUFFaE0sU0FGRTtBQUdSc1gscUJBQWUsRUFBRUEsZUFIVDtBQUlSTSxZQUFNLEVBQUU7QUFKQSxLQUFaO0FBTUEsUUFBSUMsY0FBSjs7QUFDQSxXQUFPQSxjQUFjLEdBQUcsS0FBSzdMLElBQUwsQ0FBVSxLQUFLOEksdUJBQWYsQ0FBeEIsRUFBaUU7QUFDN0QsVUFBSStDLGNBQWMsS0FBS0YsV0FBdkIsRUFBb0M7QUFDaEMsYUFBSzdDLHVCQUFMO0FBQ0EsWUFBSXpJLEdBQUcsR0FBRyxLQUFLeUksdUJBQWY7QUFDQXNDLGFBQUssQ0FBQ3BMLElBQU4sR0FBYSxLQUFLQSxJQUFMLENBQVU0RyxTQUFWLENBQW9CM0csS0FBcEIsRUFBMkJJLEdBQTNCLENBQWI7QUFDQSxlQUFPK0ssS0FBUDtBQUNIOztBQUNELFVBQUl4WixLQUFLLEdBQUcsS0FBSzJaLHNCQUFMLEVBQVo7O0FBQ0EsVUFBSTNaLEtBQUosRUFBVztBQUNQd1osYUFBSyxDQUFDUSxNQUFOLENBQWFsRyxJQUFiLENBQWtCOVQsS0FBbEI7QUFDSDtBQUNKOztBQUNEd1osU0FBSyxDQUFDcEwsSUFBTixHQUFhLEtBQUtBLElBQUwsQ0FBVTRHLFNBQVYsQ0FBb0IzRyxLQUFwQixDQUFiO0FBQ0EsV0FBT21MLEtBQVA7QUFDSCxHQTVCRDs7QUE2QkF2QyxZQUFVLENBQUN2VixTQUFYLENBQXFCb1ksZ0JBQXJCLEdBQXdDLFVBQVUzVSxJQUFWLEVBQWdCO0FBQ3BELFFBQUlrSixLQUFLLEdBQUcsS0FBSzZJLHVCQUFqQjtBQUNBLFFBQUlnRCxTQUFTLEdBQUc7QUFBRTNFLFVBQUksRUFBRSxFQUFSO0FBQVlwUSxVQUFJLEVBQUVBLElBQWxCO0FBQXdCaUosVUFBSSxFQUFFaE0sU0FBOUI7QUFBeUMrWCxnQkFBVSxFQUFFO0FBQXJELEtBQWhCOztBQUNBLE9BQUc7QUFDQyxVQUFJLEtBQUtqRCx1QkFBTCxJQUFnQyxLQUFLOUksSUFBTCxDQUFVM04sTUFBOUMsRUFBc0Q7QUFDbER5WixpQkFBUyxDQUFDOUwsSUFBVixHQUFpQmpKLElBQUksR0FBRyxHQUFQLEdBQWEsS0FBS2lKLElBQUwsQ0FBVTRHLFNBQVYsQ0FBb0IzRyxLQUFwQixDQUE5QjtBQUNBLGVBQU82TCxTQUFQO0FBQ0g7O0FBQ0QsVUFBSUQsY0FBYyxHQUFHLEtBQUs3TCxJQUFMLENBQVUsS0FBSzhJLHVCQUFmLENBQXJCOztBQUNBLGNBQVErQyxjQUFSO0FBQ0ksYUFBSyxHQUFMO0FBQ0ksZUFBSy9DLHVCQUFMO0FBQ0EsY0FBSXpJLEdBQUcsR0FBRyxLQUFLeUksdUJBQWY7QUFDQWdELG1CQUFTLENBQUM5TCxJQUFWLEdBQWlCakosSUFBSSxHQUFHLEdBQVAsR0FBYSxLQUFLaUosSUFBTCxDQUFVNEcsU0FBVixDQUFvQjNHLEtBQXBCLEVBQTJCSSxHQUEzQixDQUE5QjtBQUNBLGlCQUFPeUwsU0FBUDs7QUFDSjtBQUNJLGNBQUluWCxTQUFTLEdBQUcsS0FBSzRXLHNCQUFMLEVBQWhCOztBQUNBLGNBQUk1VyxTQUFKLEVBQWU7QUFDWG1YLHFCQUFTLENBQUNDLFVBQVYsQ0FBcUJyRyxJQUFyQixDQUEwQi9RLFNBQTFCO0FBQ0g7O0FBVlQ7QUFZSCxLQWxCRCxRQWtCUyxJQWxCVDtBQW1CSCxHQXRCRDs7QUF1QkEsU0FBT2tVLFVBQVA7QUFDSCxDQWxhaUIsRUFBbEI7O0FBbWFBbFgsT0FBTyxDQUFDa1gsVUFBUixHQUFxQkEsVUFBckI7O0FBQ0EsSUFBSW1ELGVBQWUsR0FBSSxZQUFZO0FBQy9CLFdBQVNBLGVBQVQsR0FBMkIsQ0FDMUI7O0FBQ0RBLGlCQUFlLENBQUMxWSxTQUFoQixDQUEwQjJZLGVBQTFCLEdBQTRDLFVBQVVyQixVQUFWLEVBQXNCO0FBQzlELFdBQU87QUFDSHpELFVBQUksRUFBRSxZQURIO0FBRUh5RCxnQkFBVSxFQUFFO0FBQ1JDLGFBQUssRUFBRSxLQUFLcUIsVUFBTCxDQUFnQnRCLFVBQVUsQ0FBQ0MsS0FBM0I7QUFEQztBQUZULEtBQVA7QUFNSCxHQVBEOztBQVFBbUIsaUJBQWUsQ0FBQzFZLFNBQWhCLENBQTBCNFksVUFBMUIsR0FBdUMsVUFBVXJCLEtBQVYsRUFBaUI7QUFDcEQsUUFBSXNCLEtBQUssR0FBRyxJQUFaOztBQUNBLFdBQU90QixLQUFLLENBQUN1QixHQUFOLENBQVUsVUFBVUMsSUFBVixFQUFnQjtBQUFFLGFBQU9GLEtBQUssQ0FBQ0csU0FBTixDQUFnQkQsSUFBaEIsQ0FBUDtBQUErQixLQUEzRCxDQUFQO0FBQ0gsR0FIRDs7QUFJQUwsaUJBQWUsQ0FBQzFZLFNBQWhCLENBQTBCZ1osU0FBMUIsR0FBc0MsVUFBVUQsSUFBVixFQUFnQjtBQUNsRCxRQUFJQSxJQUFJLENBQUNsRixJQUFMLEtBQWMsU0FBbEIsRUFBNkI7QUFDekIsYUFBTyxLQUFLb0YsV0FBTCxDQUFpQkYsSUFBakIsQ0FBUDtBQUNILEtBRkQsTUFHSyxJQUFJQSxJQUFJLENBQUNsRixJQUFMLEtBQWMsZ0JBQWxCLEVBQW9DO0FBQ3JDLGFBQU8sS0FBS3FGLGtCQUFMLENBQXdCSCxJQUF4QixDQUFQO0FBQ0g7QUFDSixHQVBEOztBQVFBTCxpQkFBZSxDQUFDMVksU0FBaEIsQ0FBMEJpWixXQUExQixHQUF3QyxVQUFVRixJQUFWLEVBQWdCO0FBQ3BELFFBQUlBLElBQUksQ0FBQ3RWLElBQUwsS0FBYyxRQUFsQixFQUE0QjtBQUN4QixhQUFPO0FBQ0gwVixjQUFNLEVBQUVKLElBQUksQ0FBQ2xCLE9BQUwsQ0FBYWlCLEdBQWIsQ0FBaUIsVUFBVWpMLENBQVYsRUFBYTtBQUFFLGlCQUFPLE9BQU9BLENBQVAsS0FBYSxRQUFiLEdBQXdCQSxDQUF4QixHQUE0QkEsQ0FBQyxDQUFDbkIsSUFBckM7QUFBNEMsU0FBNUUsRUFBOEUwTSxJQUE5RSxDQUFtRixFQUFuRixFQUF1RnJYLElBQXZGLEVBREw7QUFFSDhSLFlBQUksRUFBRTtBQUZILE9BQVA7QUFJSDs7QUFDRDtBQUNILEdBUkQ7O0FBU0E2RSxpQkFBZSxDQUFDMVksU0FBaEIsQ0FBMEJrWixrQkFBMUIsR0FBK0MsVUFBVUgsSUFBVixFQUFnQjtBQUMzRCxXQUFPO0FBQ0hsRixVQUFJLEVBQUUsTUFESDtBQUVId0YsZUFBUyxFQUFFLEtBQUtDLDZCQUFMLENBQW1DUCxJQUFJLENBQUNsQixPQUF4QyxDQUZSO0FBR0gwQixrQkFBWSxFQUFFLEtBQUtDLHVCQUFMLENBQTZCVCxJQUFJLENBQUNqQixLQUFMLENBQVdRLE1BQXhDO0FBSFgsS0FBUDtBQUtILEdBTkQ7O0FBT0FJLGlCQUFlLENBQUMxWSxTQUFoQixDQUEwQndaLHVCQUExQixHQUFvRCxVQUFVQyx1QkFBVixFQUFtQztBQUNuRixRQUFJRixZQUFZLEdBQUcsRUFBbkI7QUFDQSxRQUFJcEYsUUFBUSxHQUFHLEVBQWY7QUFDQSxRQUFJN1YsS0FBSyxHQUFHLEVBQVo7QUFDQSxRQUFJb2IsT0FBTyxHQUFHLFVBQWQ7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRix1QkFBdUIsQ0FBQzFhLE1BQTVDLEVBQW9ENGEsQ0FBQyxFQUFyRCxFQUF5RDtBQUNyRCxVQUFJaEUsVUFBVSxHQUFHOEQsdUJBQXVCLENBQUNFLENBQUQsQ0FBeEM7O0FBQ0EsVUFBSUQsT0FBTyxLQUFLLFVBQWhCLEVBQTRCO0FBQ3hCLFlBQUkvRCxVQUFVLEtBQUssR0FBbkIsRUFBd0I7QUFDcEIrRCxpQkFBTyxHQUFHLE9BQVY7QUFDSCxTQUZELE1BR0ssSUFBSSxPQUFPL0QsVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUNyQ3hCLGtCQUFRLElBQUl3QixVQUFaO0FBQ0gsU0FGSSxNQUdBO0FBQ0R4QixrQkFBUSxJQUFJd0IsVUFBVSxDQUFDakosSUFBdkI7QUFDSDtBQUNKLE9BVkQsTUFXSztBQUNELFlBQUlpSixVQUFVLEtBQUssR0FBbkIsRUFBd0I7QUFDcEJ4QixrQkFBUSxHQUFHQSxRQUFRLENBQUNwUyxJQUFULEVBQVg7QUFDQXpELGVBQUssR0FBR0EsS0FBSyxDQUFDeUQsSUFBTixFQUFSO0FBQ0F3WCxzQkFBWSxDQUFDbkgsSUFBYixDQUFrQjtBQUFFeUIsZ0JBQUksRUFBRSxhQUFSO0FBQXVCTSxvQkFBUSxFQUFFQSxRQUFqQztBQUEyQzdWLGlCQUFLLEVBQUVBO0FBQWxELFdBQWxCO0FBQ0E2VixrQkFBUSxHQUFHLEVBQVg7QUFDQTdWLGVBQUssR0FBRyxFQUFSO0FBQ0FvYixpQkFBTyxHQUFHLFVBQVY7QUFDSCxTQVBELE1BUUssSUFBSSxPQUFPL0QsVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUNyQ3JYLGVBQUssSUFBSXFYLFVBQVQ7QUFDSCxTQUZJLE1BR0E7QUFDRHJYLGVBQUssSUFBSXFYLFVBQVUsQ0FBQ2pKLElBQXBCO0FBQ0g7QUFDSjtBQUNKOztBQUNEeUgsWUFBUSxHQUFHQSxRQUFRLENBQUNwUyxJQUFULEVBQVg7QUFDQXpELFNBQUssR0FBR0EsS0FBSyxDQUFDeUQsSUFBTixFQUFSOztBQUNBLFFBQUlvUyxRQUFRLElBQUk3VixLQUFoQixFQUF1QjtBQUNuQmliLGtCQUFZLENBQUNuSCxJQUFiLENBQWtCO0FBQUV5QixZQUFJLEVBQUUsYUFBUjtBQUF1Qk0sZ0JBQVEsRUFBRUEsUUFBakM7QUFBMkM3VixhQUFLLEVBQUVBO0FBQWxELE9BQWxCO0FBQ0g7O0FBQ0QsV0FBT2liLFlBQVA7QUFDSCxHQXpDRDs7QUEwQ0FiLGlCQUFlLENBQUMxWSxTQUFoQixDQUEwQnNaLDZCQUExQixHQUEwRCxVQUFVekIsT0FBVixFQUFtQjtBQUN6RSxRQUFJd0IsU0FBUyxHQUFHLEVBQWhCO0FBQ0EsUUFBSU8sUUFBUSxHQUFHLEVBQWY7QUFDQS9CLFdBQU8sQ0FBQ2dDLE9BQVIsQ0FBZ0IsVUFBVWxFLFVBQVYsRUFBc0I7QUFDbEMsVUFBSSxPQUFPQSxVQUFQLEtBQXNCLFFBQTFCLEVBQW9DO0FBQ2hDLFlBQUlBLFVBQVUsS0FBSyxHQUFuQixFQUF3QjtBQUNwQixjQUFJaUUsUUFBSixFQUFjO0FBQ1ZQLHFCQUFTLENBQUNqSCxJQUFWLENBQWV3SCxRQUFRLENBQUM3WCxJQUFULEVBQWY7QUFDSDs7QUFDRDZYLGtCQUFRLEdBQUcsRUFBWDtBQUNILFNBTEQsTUFNSztBQUNEQSxrQkFBUSxJQUFJakUsVUFBWjtBQUNIO0FBQ0osT0FWRCxNQVdLLElBQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUNyQ2lFLGdCQUFRLElBQUlqRSxVQUFVLENBQUNqSixJQUF2QjtBQUNIO0FBQ0osS0FmRDs7QUFnQkEsUUFBSWtOLFFBQUosRUFBYztBQUNWUCxlQUFTLENBQUNqSCxJQUFWLENBQWV3SCxRQUFRLENBQUM3WCxJQUFULEVBQWY7QUFDSDs7QUFDRCxXQUFPc1gsU0FBUDtBQUNILEdBdkJEOztBQXdCQSxTQUFPWCxlQUFQO0FBQ0gsQ0ExR3NCLEVBQXZCOztBQTJHQXJhLE9BQU8sQ0FBQ3FhLGVBQVIsR0FBMEJBLGVBQTFCLEM7Ozs7Ozs7QUMzMENBdmEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxPQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxTQUFTVyxRQUFULENBQWtCWCxLQUFsQixFQUF5QjtBQUNyQixTQUFPLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJBLEtBQUssWUFBWXdiLE1BQXJEO0FBQ0g7O0FBQ0R6YixPQUFPLENBQUNZLFFBQVIsR0FBbUJBLFFBQW5COztBQUNBLFNBQVNjLFFBQVQsQ0FBa0J6QixLQUFsQixFQUF5QjtBQUNyQixTQUFPLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJBLEtBQUssWUFBWXliLE1BQXJEO0FBQ0g7O0FBQ0QxYixPQUFPLENBQUMwQixRQUFSLEdBQW1CQSxRQUFuQjs7QUFDQSxTQUFTaWEsU0FBVCxDQUFtQjFiLEtBQW5CLEVBQTBCO0FBQ3RCLFNBQU8sT0FBT0EsS0FBUCxLQUFpQixTQUFqQixJQUE4QkEsS0FBSyxZQUFZMmIsT0FBdEQ7QUFDSDs7QUFDRDViLE9BQU8sQ0FBQzJiLFNBQVIsR0FBb0JBLFNBQXBCOztBQUNBLFNBQVNFLFVBQVQsQ0FBb0I1YixLQUFwQixFQUEyQjtBQUN2QixNQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNSLFdBQU8sS0FBUDtBQUNIOztBQUNELFNBQU8sT0FBT0EsS0FBUCxLQUFpQixVQUF4QjtBQUNIOztBQUNERCxPQUFPLENBQUM2YixVQUFSLEdBQXFCQSxVQUFyQjs7QUFDQSxTQUFTQyxRQUFULENBQWtCN2IsS0FBbEIsRUFBeUI7QUFDckIsTUFBSSxDQUFDQSxLQUFMLEVBQVk7QUFDUixXQUFPLEtBQVA7QUFDSDs7QUFDRCxTQUFPLE9BQU9BLEtBQVAsS0FBaUIsUUFBeEI7QUFDSDs7QUFDREQsT0FBTyxDQUFDOGIsUUFBUixHQUFtQkEsUUFBbkI7O0FBQ0EsU0FBU0MsV0FBVCxDQUFxQjliLEtBQXJCLEVBQTRCO0FBQ3hCLFNBQU9BLEtBQUssS0FBS29DLFNBQWpCO0FBQ0g7O0FBQ0RyQyxPQUFPLENBQUMrYixXQUFSLEdBQXNCQSxXQUF0Qjs7QUFDQSxTQUFTQyxTQUFULENBQW1CL2IsS0FBbkIsRUFBMEI7QUFDdEIsU0FBTyxPQUFPQSxLQUFQLEtBQWlCLFdBQXhCO0FBQ0g7O0FBQ0RELE9BQU8sQ0FBQ2djLFNBQVIsR0FBb0JBLFNBQXBCOztBQUNBLFNBQVNqWixpQkFBVCxDQUEyQjlDLEtBQTNCLEVBQWtDO0FBQzlCLFNBQU9BLEtBQUssS0FBS29DLFNBQVYsSUFBdUJwQyxLQUFLLEtBQUssSUFBeEM7QUFDSDs7QUFDREQsT0FBTyxDQUFDK0MsaUJBQVIsR0FBNEJBLGlCQUE1Qjs7QUFDQSxTQUFTa1osY0FBVCxDQUF3QmhjLEtBQXhCLEVBQStCO0FBQzNCLE1BQUlBLEtBQUssSUFBSSxDQUFDNGIsVUFBVSxDQUFDNWIsS0FBRCxDQUF4QixFQUFpQztBQUM3QixVQUFNLElBQUlpYyxTQUFKLENBQWMsb0NBQWQsQ0FBTjtBQUNIO0FBQ0o7O0FBQ0RsYyxPQUFPLENBQUNpYyxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBLElBQUlFLGFBQWEsR0FBRyxJQUFJQyxHQUFKLEVBQXBCO0FBQ0EsSUFBSUMsYUFBYSxHQUFHLCtCQUFwQjs7QUFDQSxTQUFTQyxRQUFULENBQWtCQyxNQUFsQixFQUEwQjtBQUN0QixTQUFPQyxZQUFZLENBQUNELE1BQUQsQ0FBWixDQUFxQm5YLElBQTVCO0FBQ0g7O0FBQ0RwRixPQUFPLENBQUNzYyxRQUFSLEdBQW1CQSxRQUFuQjs7QUFDQSxTQUFTRSxZQUFULENBQXNCRCxNQUF0QixFQUE4QjtBQUMxQixNQUFJRSxXQUFXLEdBQUdGLE1BQU0sQ0FBQ0UsV0FBekI7QUFDQSxNQUFJak8sTUFBTSxHQUFHMk4sYUFBYSxDQUFDdmEsR0FBZCxDQUFrQjZhLFdBQWxCLENBQWI7O0FBQ0EsTUFBSSxDQUFDak8sTUFBTCxFQUFhO0FBQ1RBLFVBQU0sR0FBRyxJQUFJa08sU0FBSixDQUFjRCxXQUFkLENBQVQ7QUFDQU4saUJBQWEsQ0FBQ1EsR0FBZCxDQUFrQkYsV0FBbEIsRUFBK0JqTyxNQUEvQjtBQUNIOztBQUNELFNBQU9BLE1BQVA7QUFDSDs7QUFDRHhPLE9BQU8sQ0FBQ3djLFlBQVIsR0FBdUJBLFlBQXZCOztBQUNBLFNBQVNJLGNBQVQsQ0FBd0JMLE1BQXhCLEVBQWdDO0FBQzVCLE1BQUkvTixNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlxTyxJQUFJLEdBQUdMLFlBQVksQ0FBQ0QsTUFBRCxDQUF2Qjs7QUFDQSxTQUFPTSxJQUFQLEVBQWE7QUFDVHJPLFVBQU0sQ0FBQ3VGLElBQVAsQ0FBWThJLElBQUksQ0FBQ3pYLElBQWpCO0FBQ0F5WCxRQUFJLEdBQUdBLElBQUksQ0FBQ0MsYUFBWjtBQUNIOztBQUNELFNBQU90TyxNQUFQO0FBQ0g7O0FBQ0R4TyxPQUFPLENBQUM0YyxjQUFSLEdBQXlCQSxjQUF6Qjs7QUFDQSxJQUFJRixTQUFTLEdBQUksWUFBWTtBQUN6QixXQUFTQSxTQUFULENBQW1CSyxlQUFuQixFQUFvQztBQUNoQyxTQUFLQyxnQkFBTCxHQUF3QkQsZUFBeEI7QUFDSDs7QUFDRGpkLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQjJjLFNBQVMsQ0FBQy9hLFNBQWhDLEVBQTJDLE1BQTNDLEVBQW1EO0FBQy9DQyxPQUFHLEVBQUUsZUFBWTtBQUNiLFVBQUksQ0FBQyxLQUFLUCxLQUFWLEVBQWlCO0FBQ2IsWUFBSTRiLE9BQU8sR0FBSVosYUFBRCxDQUFnQjVOLElBQWhCLENBQXFCLEtBQUt1TyxnQkFBTCxDQUFzQi9aLFFBQXRCLEVBQXJCLENBQWQ7QUFDQSxhQUFLNUIsS0FBTCxHQUFjNGIsT0FBTyxJQUFJQSxPQUFPLENBQUN2YyxNQUFSLEdBQWlCLENBQTdCLEdBQWtDdWMsT0FBTyxDQUFDLENBQUQsQ0FBekMsR0FBK0MsRUFBNUQ7QUFDSDs7QUFDRCxhQUFPLEtBQUs1YixLQUFaO0FBQ0gsS0FQOEM7QUFRL0NRLGNBQVUsRUFBRSxJQVJtQztBQVMvQ0MsZ0JBQVksRUFBRTtBQVRpQyxHQUFuRDtBQVdBaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCMmMsU0FBUyxDQUFDL2EsU0FBaEMsRUFBMkMsZUFBM0MsRUFBNEQ7QUFDeERDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsVUFBSW1hLFdBQVcsQ0FBQyxLQUFLbUIsY0FBTixDQUFmLEVBQXNDO0FBQ2xDLGFBQUtBLGNBQUwsR0FBc0JSLFNBQVMsQ0FBQ1MsUUFBVixDQUFtQixJQUFuQixDQUF0Qjs7QUFDQSxZQUFJLEtBQUtELGNBQUwsSUFBdUIsS0FBS0EsY0FBTCxDQUFvQjlYLElBQXBCLEtBQTZCLEtBQUtBLElBQTdELEVBQW1FO0FBQy9ELGVBQUs4WCxjQUFMLEdBQXNCUixTQUFTLENBQUNTLFFBQVYsQ0FBbUIsS0FBS0QsY0FBeEIsQ0FBdEI7QUFDSDtBQUNKOztBQUNELGFBQU8sS0FBS0EsY0FBWjtBQUNILEtBVHVEO0FBVXhEcmIsY0FBVSxFQUFFLElBVjRDO0FBV3hEQyxnQkFBWSxFQUFFO0FBWDBDLEdBQTVEOztBQWFBNGEsV0FBUyxDQUFDUyxRQUFWLEdBQXFCLFVBQVVOLElBQVYsRUFBZ0I7QUFDakMsUUFBSXJPLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSTRPLGdCQUFnQixHQUFHUCxJQUFJLENBQUNHLGdCQUFMLENBQXNCcmIsU0FBN0M7O0FBQ0EsUUFBSXliLGdCQUFnQixDQUFDQyxTQUFyQixFQUFnQztBQUM1QjdPLFlBQU0sR0FBR2dPLFlBQVksQ0FBQ1ksZ0JBQWdCLENBQUNDLFNBQWxCLENBQXJCO0FBQ0g7O0FBQ0QsV0FBTzdPLE1BQVA7QUFDSCxHQVBEOztBQVFBLFNBQU9rTyxTQUFQO0FBQ0gsQ0FyQ2dCLEVBQWpCOztBQXNDQTFjLE9BQU8sQ0FBQzBjLFNBQVIsR0FBb0JBLFNBQXBCOztBQUNBLFNBQVNZLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO0FBQ3JCLFNBQU94YSxpQkFBaUIsQ0FBQ3dhLEdBQUQsQ0FBakIsR0FBeUIsRUFBekIsR0FBOEJBLEdBQUcsR0FBRyxFQUEzQztBQUNIOztBQUNEdmQsT0FBTyxDQUFDc2QsVUFBUixHQUFxQkEsVUFBckIsQzs7Ozs7OztBQ2pIQTs7OztBQUlBO0FBQ0FFLE1BQU0sQ0FBQ3hkLE9BQVAsR0FBaUIsVUFBU3lkLFlBQVQsRUFBdUI7QUFDdkMsTUFBSUMsSUFBSSxHQUFHLEVBQVgsQ0FEdUMsQ0FHdkM7O0FBQ0FBLE1BQUksQ0FBQ3phLFFBQUwsR0FBZ0IsU0FBU0EsUUFBVCxHQUFvQjtBQUNuQyxXQUFPLEtBQUt3WCxHQUFMLENBQVMsVUFBVWtELElBQVYsRUFBZ0I7QUFDL0IsVUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0YsSUFBRCxFQUFPRixZQUFQLENBQXBDOztBQUNBLFVBQUdFLElBQUksQ0FBQyxDQUFELENBQVAsRUFBWTtBQUNYLGVBQU8sWUFBWUEsSUFBSSxDQUFDLENBQUQsQ0FBaEIsR0FBc0IsR0FBdEIsR0FBNEJDLE9BQTVCLEdBQXNDLEdBQTdDO0FBQ0EsT0FGRCxNQUVPO0FBQ04sZUFBT0EsT0FBUDtBQUNBO0FBQ0QsS0FQTSxFQU9KN0MsSUFQSSxDQU9DLEVBUEQsQ0FBUDtBQVFBLEdBVEQsQ0FKdUMsQ0FldkM7OztBQUNBMkMsTUFBSSxDQUFDcEMsQ0FBTCxHQUFTLFVBQVN3QyxPQUFULEVBQWtCQyxVQUFsQixFQUE4QjtBQUN0QyxRQUFHLE9BQU9ELE9BQVAsS0FBbUIsUUFBdEIsRUFDQ0EsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFELEVBQU9BLE9BQVAsRUFBZ0IsRUFBaEIsQ0FBRCxDQUFWO0FBQ0QsUUFBSUUsc0JBQXNCLEdBQUcsRUFBN0I7O0FBQ0EsU0FBSSxJQUFJMUMsQ0FBQyxHQUFHLENBQVosRUFBZUEsQ0FBQyxHQUFHLEtBQUs1YSxNQUF4QixFQUFnQzRhLENBQUMsRUFBakMsRUFBcUM7QUFDcEMsVUFBSTJDLEVBQUUsR0FBRyxLQUFLM0MsQ0FBTCxFQUFRLENBQVIsQ0FBVDtBQUNBLFVBQUcsT0FBTzJDLEVBQVAsS0FBYyxRQUFqQixFQUNDRCxzQkFBc0IsQ0FBQ0MsRUFBRCxDQUF0QixHQUE2QixJQUE3QjtBQUNEOztBQUNELFNBQUkzQyxDQUFDLEdBQUcsQ0FBUixFQUFXQSxDQUFDLEdBQUd3QyxPQUFPLENBQUNwZCxNQUF2QixFQUErQjRhLENBQUMsRUFBaEMsRUFBb0M7QUFDbkMsVUFBSXFDLElBQUksR0FBR0csT0FBTyxDQUFDeEMsQ0FBRCxDQUFsQixDQURtQyxDQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFHLE9BQU9xQyxJQUFJLENBQUMsQ0FBRCxDQUFYLEtBQW1CLFFBQW5CLElBQStCLENBQUNLLHNCQUFzQixDQUFDTCxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQXpELEVBQW9FO0FBQ25FLFlBQUdJLFVBQVUsSUFBSSxDQUFDSixJQUFJLENBQUMsQ0FBRCxDQUF0QixFQUEyQjtBQUMxQkEsY0FBSSxDQUFDLENBQUQsQ0FBSixHQUFVSSxVQUFWO0FBQ0EsU0FGRCxNQUVPLElBQUdBLFVBQUgsRUFBZTtBQUNyQkosY0FBSSxDQUFDLENBQUQsQ0FBSixHQUFVLE1BQU1BLElBQUksQ0FBQyxDQUFELENBQVYsR0FBZ0IsU0FBaEIsR0FBNEJJLFVBQTVCLEdBQXlDLEdBQW5EO0FBQ0E7O0FBQ0RMLFlBQUksQ0FBQzNKLElBQUwsQ0FBVTRKLElBQVY7QUFDQTtBQUNEO0FBQ0QsR0F4QkQ7O0FBeUJBLFNBQU9ELElBQVA7QUFDQSxDQTFDRDs7QUE0Q0EsU0FBU0csc0JBQVQsQ0FBZ0NGLElBQWhDLEVBQXNDRixZQUF0QyxFQUFvRDtBQUNuRCxNQUFJRyxPQUFPLEdBQUdELElBQUksQ0FBQyxDQUFELENBQUosSUFBVyxFQUF6QjtBQUNBLE1BQUlPLFVBQVUsR0FBR1AsSUFBSSxDQUFDLENBQUQsQ0FBckI7O0FBQ0EsTUFBSSxDQUFDTyxVQUFMLEVBQWlCO0FBQ2hCLFdBQU9OLE9BQVA7QUFDQTs7QUFFRCxNQUFJSCxZQUFZLElBQUksT0FBT1UsSUFBUCxLQUFnQixVQUFwQyxFQUFnRDtBQUMvQyxRQUFJQyxhQUFhLEdBQUdDLFNBQVMsQ0FBQ0gsVUFBRCxDQUE3QjtBQUNBLFFBQUlJLFVBQVUsR0FBR0osVUFBVSxDQUFDSyxPQUFYLENBQW1COUQsR0FBbkIsQ0FBdUIsVUFBVStELE1BQVYsRUFBa0I7QUFDekQsYUFBTyxtQkFBbUJOLFVBQVUsQ0FBQ08sVUFBOUIsR0FBMkNELE1BQTNDLEdBQW9ELEtBQTNEO0FBQ0EsS0FGZ0IsQ0FBakI7QUFJQSxXQUFPLENBQUNaLE9BQUQsRUFBVWMsTUFBVixDQUFpQkosVUFBakIsRUFBNkJJLE1BQTdCLENBQW9DLENBQUNOLGFBQUQsQ0FBcEMsRUFBcURyRCxJQUFyRCxDQUEwRCxJQUExRCxDQUFQO0FBQ0E7O0FBRUQsU0FBTyxDQUFDNkMsT0FBRCxFQUFVN0MsSUFBVixDQUFlLElBQWYsQ0FBUDtBQUNBLEMsQ0FFRDs7O0FBQ0EsU0FBU3NELFNBQVQsQ0FBbUJNLFNBQW5CLEVBQThCO0FBQzdCO0FBQ0EsTUFBSUMsTUFBTSxHQUFHVCxJQUFJLENBQUNVLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxTQUFmLENBQUQsQ0FBbkIsQ0FBVCxDQUFqQjtBQUNBLE1BQUlNLElBQUksR0FBRyxpRUFBaUVMLE1BQTVFO0FBRUEsU0FBTyxTQUFTSyxJQUFULEdBQWdCLEtBQXZCO0FBQ0EsQzs7Ozs7Ozs7QUMzRVk7O0FBQ2JuZixNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLE9BQUssRUFBRTtBQUFULENBQTdDOztBQUNBLElBQUlpZixNQUFNLEdBQUcvZSxtQkFBTyxDQUFDLCtCQUFELENBQXBCOztBQUNBLElBQUlnZixTQUFTLEdBQUdoZixtQkFBTyxDQUFDLDZCQUFELENBQXZCOztBQUNBLElBQUlpZixZQUFZLEdBQUdqZixtQkFBTyxDQUFDLGtDQUFELENBQTFCOztBQUNBLElBQUlrZixrQkFBa0IsR0FBR2xmLG1CQUFPLENBQUMsd0NBQUQsQ0FBaEM7O0FBQ0EsSUFBSW1mLHFCQUFxQixHQUFHbmYsbUJBQU8sQ0FBQyw4Q0FBRCxDQUFuQzs7QUFDQSxJQUFJb2YsT0FBTyxHQUFHcGYsbUJBQU8sQ0FBQywyQkFBRCxDQUFyQjs7QUFDQSxJQUFJcWYsVUFBVSxHQUFHcmYsbUJBQU8sQ0FBQywyQkFBRCxDQUF4Qjs7QUFDQSxJQUFJc2Ysc0JBQXNCLEdBQUcsQ0FBQyxDQUE5QjtBQUNBLElBQUlDLGdCQUFKOztBQUNBLENBQUMsVUFBVUEsZ0JBQVYsRUFBNEI7QUFDekJBLGtCQUFnQixDQUFDQyxLQUFqQixHQUF5QixPQUF6QjtBQUNILENBRkQsRUFFR0QsZ0JBQWdCLEdBQUcxZixPQUFPLENBQUMwZixnQkFBUixLQUE2QjFmLE9BQU8sQ0FBQzBmLGdCQUFSLEdBQTJCLEVBQXhELENBRnRCOztBQUdBLElBQUlFLGNBQUo7O0FBQ0EsQ0FBQyxVQUFVQSxjQUFWLEVBQTBCO0FBQ3ZCQSxnQkFBYyxDQUFDQyxrQkFBZixHQUFvQyxvQkFBcEM7QUFDQUQsZ0JBQWMsQ0FBQ0UsbUJBQWYsR0FBcUMscUJBQXJDO0FBQ0FGLGdCQUFjLENBQUNHLGNBQWYsR0FBZ0MsZ0JBQWhDO0FBQ0FILGdCQUFjLENBQUNJLGNBQWYsR0FBZ0MsZ0JBQWhDO0FBQ0gsQ0FMRCxFQUtHSixjQUFjLEdBQUc1ZixPQUFPLENBQUM0ZixjQUFSLEtBQTJCNWYsT0FBTyxDQUFDNGYsY0FBUixHQUF5QixFQUFwRCxDQUxwQjs7QUFNQSxJQUFJSyxtQkFBSjs7QUFDQSxDQUFDLFVBQVVBLG1CQUFWLEVBQStCO0FBQzVCQSxxQkFBbUIsQ0FBQ0MsbUJBQXBCLEdBQTBDLHFCQUExQztBQUNBRCxxQkFBbUIsQ0FBQ0Usb0JBQXBCLEdBQTJDLHNCQUEzQztBQUNBRixxQkFBbUIsQ0FBQ0csZUFBcEIsR0FBc0MsaUJBQXRDO0FBQ0FILHFCQUFtQixDQUFDSSxlQUFwQixHQUFzQyxpQkFBdEM7QUFDSCxDQUxELEVBS0dKLG1CQUFtQixHQUFHamdCLE9BQU8sQ0FBQ2lnQixtQkFBUixLQUFnQ2pnQixPQUFPLENBQUNpZ0IsbUJBQVIsR0FBOEIsRUFBOUQsQ0FMekI7O0FBTUEsSUFBSUssYUFBYSxHQUFJLFVBQVU5YixNQUFWLEVBQWtCO0FBQ25DQyxXQUFTLENBQUM2YixhQUFELEVBQWdCOWIsTUFBaEIsQ0FBVDs7QUFDQSxXQUFTOGIsYUFBVCxHQUF5QjtBQUNyQixRQUFJOUYsS0FBSyxHQUFHaFcsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsRUFBbUJqRSxTQUFuQixDQUFuQixJQUFvRCxJQUFoRTs7QUFDQStaLFNBQUssQ0FBQytGLGNBQU4sR0FBdUIsS0FBdkI7QUFDQS9GLFNBQUssQ0FBQ2dHLHlCQUFOLEdBQWtDZixzQkFBbEM7QUFDQWpGLFNBQUssQ0FBQ2lHLDZCQUFOLEdBQXNDaEIsc0JBQXRDO0FBQ0FqRixTQUFLLENBQUNrRyw4QkFBTixHQUF1Q2pCLHNCQUF2QztBQUNBakYsU0FBSyxDQUFDbUcseUJBQU4sR0FBa0NsQixzQkFBbEM7QUFDQWpGLFNBQUssQ0FBQ29HLFVBQU4sR0FBbUIsT0FBbkI7O0FBQ0FwRyxTQUFLLENBQUNxRyxnQkFBTixHQUF5QixVQUFVQyxLQUFWLEVBQWlCdE0sS0FBakIsRUFBd0I7QUFBRSxhQUFPQSxLQUFQO0FBQWUsS0FBbEU7O0FBQ0FnRyxTQUFLLENBQUN1RyxpQkFBTixHQUEwQixVQUFVRCxLQUFWLEVBQWlCdE0sS0FBakIsRUFBd0I7QUFBRSxhQUFPQSxLQUFQO0FBQWUsS0FBbkU7O0FBQ0FnRyxTQUFLLENBQUN3RywrQkFBTixHQUF3QyxJQUFJekIsT0FBTyxDQUFDMEIsS0FBWixFQUF4QztBQUNBekcsU0FBSyxDQUFDMEcsc0JBQU4sR0FBK0I7QUFDM0JDLFNBQUcsRUFBRSxTQURzQjtBQUUzQkMsZ0JBQVUsRUFBRSxzQkFBWTtBQUNwQixZQUFJNUcsS0FBSyxDQUFDdUYsY0FBVixFQUEwQjtBQUN0QixpQkFBT1osU0FBUyxDQUFDa0MsS0FBVixDQUFnQjdHLEtBQUssQ0FBQ3VGLGNBQXRCLEVBQXNDdkYsS0FBdEMsQ0FBUDtBQUNIOztBQUNELGVBQU9uWSxTQUFQO0FBQ0g7QUFQMEIsS0FBL0I7QUFTQW1ZLFNBQUssQ0FBQzhHLHdCQUFOLEdBQWlDLElBQUlDLEtBQUosQ0FBVS9HLEtBQUssQ0FBQzBHLHNCQUFoQixDQUFqQztBQUNBMUcsU0FBSyxDQUFDZ0gsbUNBQU4sR0FBNEMsSUFBSWpDLE9BQU8sQ0FBQzBCLEtBQVosRUFBNUM7QUFDQXpHLFNBQUssQ0FBQ2lILDBCQUFOLEdBQW1DO0FBQy9CTixTQUFHLEVBQUUsU0FEMEI7QUFFL0JDLGdCQUFVLEVBQUUsc0JBQVk7QUFDcEIsWUFBSTVHLEtBQUssQ0FBQ3FGLGtCQUFWLEVBQThCO0FBQzFCLGlCQUFPVixTQUFTLENBQUNrQyxLQUFWLENBQWdCN0csS0FBSyxDQUFDcUYsa0JBQXRCLEVBQTBDckYsS0FBMUMsQ0FBUDtBQUNIOztBQUNELGVBQU9uWSxTQUFQO0FBQ0g7QUFQOEIsS0FBbkM7QUFTQW1ZLFNBQUssQ0FBQ2tILDRCQUFOLEdBQXFDLElBQUlILEtBQUosQ0FBVS9HLEtBQUssQ0FBQ2lILDBCQUFoQixDQUFyQztBQUNBakgsU0FBSyxDQUFDbUgsb0NBQU4sR0FBNkMsSUFBSXBDLE9BQU8sQ0FBQzBCLEtBQVosRUFBN0M7QUFDQXpHLFNBQUssQ0FBQ29ILDJCQUFOLEdBQW9DO0FBQ2hDVCxTQUFHLEVBQUUsU0FEMkI7QUFFaENDLGdCQUFVLEVBQUUsc0JBQVk7QUFDcEIsWUFBSTVHLEtBQUssQ0FBQ3NGLG1CQUFWLEVBQStCO0FBQzNCLGlCQUFPWCxTQUFTLENBQUNrQyxLQUFWLENBQWdCN0csS0FBSyxDQUFDc0YsbUJBQXRCLEVBQTJDdEYsS0FBM0MsQ0FBUDtBQUNIOztBQUNELGVBQU9uWSxTQUFQO0FBQ0g7QUFQK0IsS0FBcEM7QUFTQW1ZLFNBQUssQ0FBQ3FILDZCQUFOLEdBQXNDLElBQUlOLEtBQUosQ0FBVS9HLEtBQUssQ0FBQ29ILDJCQUFoQixDQUF0QztBQUNBcEgsU0FBSyxDQUFDc0gsK0JBQU4sR0FBd0MsSUFBSXZDLE9BQU8sQ0FBQzBCLEtBQVosRUFBeEM7QUFDQXpHLFNBQUssQ0FBQ3VILHNCQUFOLEdBQStCO0FBQzNCWixTQUFHLEVBQUUsU0FEc0I7QUFFM0JDLGdCQUFVLEVBQUUsc0JBQVk7QUFDcEIsWUFBSTVHLEtBQUssQ0FBQ3dGLGNBQVYsRUFBMEI7QUFDdEIsaUJBQU9iLFNBQVMsQ0FBQ2tDLEtBQVYsQ0FBZ0I3RyxLQUFLLENBQUN3RixjQUF0QixFQUFzQ3hGLEtBQXRDLENBQVA7QUFDSDs7QUFDRCxlQUFPblksU0FBUDtBQUNIO0FBUDBCLEtBQS9CO0FBU0FtWSxTQUFLLENBQUN3SCx3QkFBTixHQUFpQyxJQUFJVCxLQUFKLENBQVUvRyxLQUFLLENBQUN1SCxzQkFBaEIsQ0FBakM7O0FBQ0F2SCxTQUFLLENBQUN5SCxhQUFOLEdBQXNCLFlBQVk7QUFDOUIsVUFBSUMsUUFBUSxHQUFHMUgsS0FBSyxDQUFDOEcsd0JBQU4sSUFBa0M5RyxLQUFLLENBQUM4Ryx3QkFBTixDQUErQjVnQixNQUEvQixHQUF3QyxDQUF6RjtBQUNBLGFBQU8sQ0FBQyxFQUFFOFosS0FBSyxDQUFDdUYsY0FBTixJQUF3Qm1DLFFBQTFCLENBQVI7QUFDSCxLQUhEOztBQUlBMUgsU0FBSyxDQUFDMkgsYUFBTixHQUFzQixZQUFZO0FBQzlCLFVBQUlELFFBQVEsR0FBRzFILEtBQUssQ0FBQ3dILHdCQUFOLElBQWtDeEgsS0FBSyxDQUFDd0gsd0JBQU4sQ0FBK0J0aEIsTUFBL0IsR0FBd0MsQ0FBekY7QUFDQSxhQUFPLENBQUMsRUFBRThaLEtBQUssQ0FBQ3dGLGNBQU4sSUFBd0JrQyxRQUExQixDQUFSO0FBQ0gsS0FIRDs7QUFJQSxXQUFPMUgsS0FBUDtBQUNIOztBQUNEMWEsUUFBTSxDQUFDQyxjQUFQLENBQXNCdWdCLGFBQWEsQ0FBQzNlLFNBQXBDLEVBQStDLGlCQUEvQyxFQUFrRTtBQUM5REMsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPLEtBQUtpZixnQkFBWjtBQUNILEtBSDZEO0FBSTlEbEUsT0FBRyxFQUFFLGFBQVV5RixXQUFWLEVBQXVCO0FBQ3hCLFdBQUt2QixnQkFBTCxHQUF3QnVCLFdBQXhCO0FBQ0gsS0FONkQ7QUFPOUR2Z0IsY0FBVSxFQUFFLElBUGtEO0FBUTlEQyxnQkFBWSxFQUFFO0FBUmdELEdBQWxFO0FBVUFoQyxRQUFNLENBQUNDLGNBQVAsQ0FBc0J1Z0IsYUFBYSxDQUFDM2UsU0FBcEMsRUFBK0Msa0JBQS9DLEVBQW1FO0FBQy9EQyxPQUFHLEVBQUUsZUFBWTtBQUNiLGFBQU8sS0FBS2lmLGdCQUFaO0FBQ0gsS0FIOEQ7QUFJL0RsRSxPQUFHLEVBQUUsYUFBVXlGLFdBQVYsRUFBdUI7QUFDeEIsV0FBS3JCLGlCQUFMLEdBQXlCcUIsV0FBekI7QUFDSCxLQU44RDtBQU8vRHZnQixjQUFVLEVBQUUsSUFQbUQ7QUFRL0RDLGdCQUFZLEVBQUU7QUFSaUQsR0FBbkU7QUFVQWhDLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQnVnQixhQUFhLENBQUMzZSxTQUFwQyxFQUErQyx3QkFBL0MsRUFBeUU7QUFDckVDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsYUFBTyxLQUFLeWdCLHVCQUFaO0FBQ0gsS0FIb0U7QUFJckUxRixPQUFHLEVBQUUsYUFBVTFjLEtBQVYsRUFBaUI7QUFDbEIsVUFBSXVhLEtBQUssR0FBRyxJQUFaOztBQUNBLFVBQUksT0FBT3ZhLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsYUFBSytnQiwrQkFBTCxDQUFxQ3NCLElBQXJDLENBQTBDO0FBQ3RDQyx3QkFBYyxFQUFFLElBRHNCO0FBRXRDQyx3QkFBYyxFQUFFLGFBRnNCO0FBR3RDQyxvQkFBVSxFQUFFeGlCO0FBSDBCLFNBQTFDOztBQUtBLGFBQUtvaUIsdUJBQUwsR0FBK0IsVUFBVTFFLElBQVYsRUFBZ0JuSixLQUFoQixFQUF1Qm1MLEtBQXZCLEVBQThCO0FBQ3pEaEMsY0FBSSxDQUFDLFFBQUQsQ0FBSixHQUFpQm5KLEtBQWpCO0FBQ0FnRyxlQUFLLENBQUN3RywrQkFBTixDQUFzQzBCLGNBQXRDLEdBQXVEL0UsSUFBdkQ7QUFDQSxpQkFBT25ELEtBQUssQ0FBQ3dHLCtCQUFOLENBQXNDcGYsR0FBdEMsQ0FBMEMsYUFBMUMsQ0FBUDtBQUNILFNBSkQ7QUFLSCxPQVhELE1BWUssSUFBSSxPQUFPM0IsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUNsQyxhQUFLb2lCLHVCQUFMLEdBQStCcGlCLEtBQS9CO0FBQ0g7QUFDSixLQXJCb0U7QUFzQnJFNEIsY0FBVSxFQUFFLElBdEJ5RDtBQXVCckVDLGdCQUFZLEVBQUU7QUF2QnVELEdBQXpFO0FBeUJBaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCdWdCLGFBQWEsQ0FBQzNlLFNBQXBDLEVBQStDLDRCQUEvQyxFQUE2RTtBQUN6RUMsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPLEtBQUsrZ0IsMkJBQVo7QUFDSCxLQUh3RTtBQUl6RWhHLE9BQUcsRUFBRSxhQUFVMWMsS0FBVixFQUFpQjtBQUNsQixVQUFJdWEsS0FBSyxHQUFHLElBQVo7O0FBQ0EsVUFBSSxPQUFPdmEsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUMzQixhQUFLdWhCLG1DQUFMLENBQXlDYyxJQUF6QyxDQUE4QztBQUMxQ0Msd0JBQWMsRUFBRSxJQUQwQjtBQUUxQ0Msd0JBQWMsRUFBRSxhQUYwQjtBQUcxQ0Msb0JBQVUsRUFBRXhpQjtBQUg4QixTQUE5Qzs7QUFLQSxhQUFLMGlCLDJCQUFMLEdBQW1DLFVBQVVoRixJQUFWLEVBQWdCbkosS0FBaEIsRUFBdUJtTCxLQUF2QixFQUE4QjtBQUM3RGhDLGNBQUksQ0FBQyxRQUFELENBQUosR0FBaUJuSixLQUFqQjtBQUNBZ0csZUFBSyxDQUFDZ0gsbUNBQU4sQ0FBMENrQixjQUExQyxHQUEyRC9FLElBQTNEO0FBQ0EsaUJBQU9uRCxLQUFLLENBQUNnSCxtQ0FBTixDQUEwQzVmLEdBQTFDLENBQThDLGFBQTlDLENBQVA7QUFDSCxTQUpEO0FBS0gsT0FYRCxNQVlLLElBQUksT0FBTzNCLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDbEMsYUFBSzBpQiwyQkFBTCxHQUFtQzFpQixLQUFuQztBQUNIO0FBQ0osS0FyQndFO0FBc0J6RTRCLGNBQVUsRUFBRSxJQXRCNkQ7QUF1QnpFQyxnQkFBWSxFQUFFO0FBdkIyRCxHQUE3RTtBQXlCQWhDLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQnVnQixhQUFhLENBQUMzZSxTQUFwQyxFQUErQyw2QkFBL0MsRUFBOEU7QUFDMUVDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsYUFBTyxLQUFLZ2hCLDRCQUFaO0FBQ0gsS0FIeUU7QUFJMUVqRyxPQUFHLEVBQUUsYUFBVTFjLEtBQVYsRUFBaUI7QUFDbEIsVUFBSXVhLEtBQUssR0FBRyxJQUFaOztBQUNBLFVBQUksT0FBT3ZhLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsYUFBSzBoQixvQ0FBTCxDQUEwQ1csSUFBMUMsQ0FBK0M7QUFDM0NDLHdCQUFjLEVBQUUsSUFEMkI7QUFFM0NDLHdCQUFjLEVBQUUsYUFGMkI7QUFHM0NDLG9CQUFVLEVBQUV4aUI7QUFIK0IsU0FBL0M7O0FBS0EsYUFBSzJpQiw0QkFBTCxHQUFvQyxVQUFVakYsSUFBVixFQUFnQmtGLFdBQWhCLEVBQTZCck8sS0FBN0IsRUFBb0NtTCxLQUFwQyxFQUEyQztBQUMzRWhDLGNBQUksQ0FBQyxRQUFELENBQUosR0FBaUJuSixLQUFqQjtBQUNBbUosY0FBSSxDQUFDLGNBQUQsQ0FBSixHQUF1QmtGLFdBQXZCO0FBQ0FySSxlQUFLLENBQUNtSCxvQ0FBTixDQUEyQ2UsY0FBM0MsR0FBNEQvRSxJQUE1RDtBQUNBLGlCQUFPbkQsS0FBSyxDQUFDbUgsb0NBQU4sQ0FBMkMvZixHQUEzQyxDQUErQyxhQUEvQyxDQUFQO0FBQ0gsU0FMRDtBQU1ILE9BWkQsTUFhSyxJQUFJLE9BQU8zQixLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQ2xDLGFBQUsyaUIsNEJBQUwsR0FBb0MzaUIsS0FBcEM7QUFDSDtBQUNKLEtBdEJ5RTtBQXVCMUU0QixjQUFVLEVBQUUsSUF2QjhEO0FBd0IxRUMsZ0JBQVksRUFBRTtBQXhCNEQsR0FBOUU7QUEwQkFoQyxRQUFNLENBQUNDLGNBQVAsQ0FBc0J1Z0IsYUFBYSxDQUFDM2UsU0FBcEMsRUFBK0Msd0JBQS9DLEVBQXlFO0FBQ3JFQyxPQUFHLEVBQUUsZUFBWTtBQUNiLGFBQU8sS0FBS2toQix1QkFBWjtBQUNILEtBSG9FO0FBSXJFbkcsT0FBRyxFQUFFLGFBQVUxYyxLQUFWLEVBQWlCO0FBQ2xCLFVBQUl1YSxLQUFLLEdBQUcsSUFBWjs7QUFDQSxVQUFJLE9BQU92YSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQUs2aEIsK0JBQUwsQ0FBcUNRLElBQXJDLENBQTBDO0FBQ3RDQyx3QkFBYyxFQUFFLElBRHNCO0FBRXRDQyx3QkFBYyxFQUFFLGFBRnNCO0FBR3RDQyxvQkFBVSxFQUFFeGlCO0FBSDBCLFNBQTFDOztBQUtBLGFBQUs2aUIsdUJBQUwsR0FBK0IsVUFBVW5GLElBQVYsRUFBZ0JuSixLQUFoQixFQUF1Qm1MLEtBQXZCLEVBQThCO0FBQ3pEaEMsY0FBSSxDQUFDLFFBQUQsQ0FBSixHQUFpQm5KLEtBQWpCO0FBQ0FnRyxlQUFLLENBQUNzSCwrQkFBTixDQUFzQ1ksY0FBdEMsR0FBdUQvRSxJQUF2RDtBQUNBLGlCQUFPbkQsS0FBSyxDQUFDc0gsK0JBQU4sQ0FBc0NsZ0IsR0FBdEMsQ0FBMEMsYUFBMUMsQ0FBUDtBQUNILFNBSkQ7QUFLSCxPQVhELE1BWUssSUFBSSxPQUFPM0IsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUNsQyxhQUFLNmlCLHVCQUFMLEdBQStCN2lCLEtBQS9CO0FBQ0g7QUFDSixLQXJCb0U7QUFzQnJFNEIsY0FBVSxFQUFFLElBdEJ5RDtBQXVCckVDLGdCQUFZLEVBQUU7QUF2QnVELEdBQXpFOztBQXlCQXdlLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0JvaEIsa0JBQXhCLEdBQTZDLFVBQVV2TyxLQUFWLEVBQWlCO0FBQzFELFFBQUl3TyxXQUFXLEdBQUcsU0FBbEI7O0FBQ0EsUUFBSSxLQUFLQyxzQkFBVCxFQUFpQztBQUM3QixVQUFJQyxRQUFRLEdBQUcsS0FBS0MsY0FBTCxDQUFvQjNPLEtBQXBCLENBQWY7O0FBQ0F3TyxpQkFBVyxHQUFHLEtBQUtYLHVCQUFMLENBQTZCYSxRQUE3QixFQUF1QzFPLEtBQXZDLEVBQThDLEtBQUttTCxLQUFuRCxDQUFkO0FBQ0g7O0FBQ0QsU0FBSyxJQUFJckUsQ0FBQyxHQUFHLENBQVIsRUFBVzhILFFBQVEsR0FBRyxLQUFLOUIsd0JBQUwsQ0FBOEI1Z0IsTUFBekQsRUFBaUU0YSxDQUFDLEdBQUc4SCxRQUFyRSxFQUErRTlILENBQUMsRUFBaEYsRUFBb0Y7QUFDaEYsVUFBSSxLQUFLZ0csd0JBQUwsQ0FBOEJoRyxDQUE5QixFQUFpQzZGLEdBQWpDLEtBQXlDNkIsV0FBN0MsRUFBMEQ7QUFDdEQsZUFBTyxLQUFLMUIsd0JBQUwsQ0FBOEJoRyxDQUE5QixDQUFQO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLEtBQUtnRyx3QkFBTCxDQUE4QixDQUE5QixDQUFQO0FBQ0gsR0FaRDs7QUFhQWhCLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0IwaEIsc0JBQXhCLEdBQWlELFVBQVU3TyxLQUFWLEVBQWlCO0FBQzlELFFBQUl3TyxXQUFXLEdBQUcsU0FBbEI7O0FBQ0EsUUFBSSxLQUFLTSwwQkFBVCxFQUFxQztBQUNqQyxVQUFJSixRQUFRLEdBQUcsS0FBS0MsY0FBTCxDQUFvQjNPLEtBQXBCLENBQWY7O0FBQ0F3TyxpQkFBVyxHQUFHLEtBQUtMLDJCQUFMLENBQWlDTyxRQUFqQyxFQUEyQzFPLEtBQTNDLEVBQWtELEtBQUttTCxLQUF2RCxDQUFkO0FBQ0g7O0FBQ0QsU0FBSyxJQUFJckUsQ0FBQyxHQUFHLENBQVIsRUFBV2lJLFFBQVEsR0FBRyxLQUFLN0IsNEJBQUwsQ0FBa0NoaEIsTUFBN0QsRUFBcUU0YSxDQUFDLEdBQUdpSSxRQUF6RSxFQUFtRmpJLENBQUMsRUFBcEYsRUFBd0Y7QUFDcEYsVUFBSSxLQUFLb0csNEJBQUwsQ0FBa0NwRyxDQUFsQyxFQUFxQzZGLEdBQXJDLEtBQTZDNkIsV0FBakQsRUFBOEQ7QUFDMUQsZUFBTyxLQUFLdEIsNEJBQUwsQ0FBa0NwRyxDQUFsQyxDQUFQO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLEtBQUtvRyw0QkFBTCxDQUFrQyxDQUFsQyxDQUFQO0FBQ0gsR0FaRDs7QUFhQXBCLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0I2aEIsdUJBQXhCLEdBQWtELFVBQVVoUCxLQUFWLEVBQWlCaVAsVUFBakIsRUFBNkI7QUFDM0UsUUFBSVQsV0FBVyxHQUFHLFNBQWxCOztBQUNBLFFBQUksS0FBS1UsMkJBQVQsRUFBc0M7QUFDbEMsVUFBSUMsV0FBVyxHQUFJbkUsVUFBVSxDQUFDb0UsS0FBWCxHQUFtQkgsVUFBVSxHQUFHLENBQWhDLEdBQW9DQSxVQUF2RDs7QUFDQSxVQUFJUCxRQUFRLEdBQUcsS0FBS1csYUFBTCxDQUFtQnJQLEtBQW5CLEVBQTBCLEtBQUt5TixhQUFMLEtBQXVCMEIsV0FBVyxHQUFHLENBQXJDLEdBQXlDQSxXQUFuRSxDQUFmOztBQUNBLFVBQUloRSxLQUFLLEdBQUcsS0FBS0EsS0FBTCxDQUFXbUUsT0FBWCxHQUFxQixLQUFLbkUsS0FBTCxDQUFXbUUsT0FBWCxDQUFtQnRQLEtBQW5CLEVBQTBCLEtBQUtvTSxVQUEvQixDQUFyQixHQUFrRSxLQUFLakIsS0FBTCxDQUFXLEtBQUtpQixVQUFoQixDQUE5RTtBQUNBb0MsaUJBQVcsR0FBRyxLQUFLSiw0QkFBTCxDQUFrQ00sUUFBbEMsRUFBNEMxTyxLQUE1QyxFQUFtRGlQLFVBQW5ELEVBQStEOUQsS0FBL0QsQ0FBZDtBQUNIOztBQUNELFNBQUssSUFBSXJFLENBQUMsR0FBRyxDQUFSLEVBQVd5SSxRQUFRLEdBQUcsS0FBS2xDLDZCQUFMLENBQW1DbmhCLE1BQTlELEVBQXNFNGEsQ0FBQyxHQUFHeUksUUFBMUUsRUFBb0Z6SSxDQUFDLEVBQXJGLEVBQXlGO0FBQ3JGLFVBQUksS0FBS3VHLDZCQUFMLENBQW1DdkcsQ0FBbkMsRUFBc0M2RixHQUF0QyxLQUE4QzZCLFdBQWxELEVBQStEO0FBQzNELGVBQU8sS0FBS25CLDZCQUFMLENBQW1DdkcsQ0FBbkMsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0QsV0FBTyxLQUFLdUcsNkJBQUwsQ0FBbUMsQ0FBbkMsQ0FBUDtBQUNILEdBZEQ7O0FBZUF2QixlQUFhLENBQUMzZSxTQUFkLENBQXdCcWlCLGtCQUF4QixHQUE2QyxVQUFVeFAsS0FBVixFQUFpQjtBQUMxRCxRQUFJd08sV0FBVyxHQUFHLFNBQWxCOztBQUNBLFFBQUksS0FBS2lCLHNCQUFULEVBQWlDO0FBQzdCLFVBQUlmLFFBQVEsR0FBRyxLQUFLQyxjQUFMLENBQW9CM08sS0FBcEIsQ0FBZjs7QUFDQXdPLGlCQUFXLEdBQUcsS0FBS0YsdUJBQUwsQ0FBNkJJLFFBQTdCLEVBQXVDMU8sS0FBdkMsRUFBOEMsS0FBS21MLEtBQW5ELENBQWQ7QUFDSDs7QUFDRCxTQUFLLElBQUlyRSxDQUFDLEdBQUcsQ0FBUixFQUFXNEksUUFBUSxHQUFHLEtBQUtsQyx3QkFBTCxDQUE4QnRoQixNQUF6RCxFQUFpRTRhLENBQUMsR0FBRzRJLFFBQXJFLEVBQStFNUksQ0FBQyxFQUFoRixFQUFvRjtBQUNoRixVQUFJLEtBQUswRyx3QkFBTCxDQUE4QjFHLENBQTlCLEVBQWlDNkYsR0FBakMsS0FBeUM2QixXQUE3QyxFQUEwRDtBQUN0RCxlQUFPLEtBQUtoQix3QkFBTCxDQUE4QjFHLENBQTlCLENBQVA7QUFDSDtBQUNKOztBQUNELFdBQU8sS0FBSzBHLHdCQUFMLENBQThCLENBQTlCLENBQVA7QUFDSCxHQVpEOztBQWFBMUIsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QndpQix3QkFBeEIsR0FBbUQsVUFBVTNQLEtBQVYsRUFBaUI7QUFDaEUsUUFBSTRQLEdBQUcsR0FBRyxJQUFJN0UsT0FBTyxDQUFDMEIsS0FBWixFQUFWO0FBQ0FtRCxPQUFHLENBQUM5QixJQUFKLENBQVM7QUFDTEUsb0JBQWMsRUFBRSxNQURYO0FBRUxELG9CQUFjLEVBQUU7QUFGWCxLQUFUO0FBSUEsV0FBTzZCLEdBQVA7QUFDSCxHQVBEOztBQVFBOUQsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QjBpQiw0QkFBeEIsR0FBdUQsVUFBVTdQLEtBQVYsRUFBaUI7QUFDcEUsUUFBSTRQLEdBQUcsR0FBRyxJQUFJN0UsT0FBTyxDQUFDMEIsS0FBWixFQUFWO0FBQ0FtRCxPQUFHLENBQUM5QixJQUFKLENBQVM7QUFDTEUsb0JBQWMsRUFBRSxNQURYO0FBRUxELG9CQUFjLEVBQUU7QUFGWCxLQUFUO0FBSUEsV0FBTzZCLEdBQVA7QUFDSCxHQVBEOztBQVFBOUQsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QjJpQiw2QkFBeEIsR0FBd0QsVUFBVTlQLEtBQVYsRUFBaUJpUCxVQUFqQixFQUE2QjtBQUNqRixRQUFJVyxHQUFHLEdBQUcsSUFBSTdFLE9BQU8sQ0FBQzBCLEtBQVosRUFBVjtBQUNBbUQsT0FBRyxDQUFDOUIsSUFBSixDQUFTO0FBQ0xFLG9CQUFjLEVBQUUsTUFEWDtBQUVMRCxvQkFBYyxFQUFFO0FBRlgsS0FBVDtBQUlBLFdBQU82QixHQUFQO0FBQ0gsR0FQRDs7QUFRQTlELGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0I0aUIsd0JBQXhCLEdBQW1ELFVBQVUvUCxLQUFWLEVBQWlCO0FBQ2hFLFFBQUk0UCxHQUFHLEdBQUcsSUFBSTdFLE9BQU8sQ0FBQzBCLEtBQVosRUFBVjtBQUNBbUQsT0FBRyxDQUFDOUIsSUFBSixDQUFTO0FBQ0xFLG9CQUFjLEVBQUUsTUFEWDtBQUVMRCxvQkFBYyxFQUFFO0FBRlgsS0FBVDtBQUlBLFdBQU82QixHQUFQO0FBQ0gsR0FQRDs7QUFRQTlELGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0I2aUIsa0JBQXhCLEdBQTZDLFVBQVU3RyxJQUFWLEVBQWdCbkosS0FBaEIsRUFBdUI7QUFDaEUsUUFBSW1KLElBQUosRUFBVTtBQUNOQSxVQUFJLENBQUMrRSxjQUFMLEdBQXNCLEtBQUtTLGNBQUwsQ0FBb0IzTyxLQUFwQixDQUF0QjtBQUNIO0FBQ0osR0FKRDs7QUFLQThMLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0I4aUIsa0JBQXhCLEdBQTZDLFVBQVU5RyxJQUFWLEVBQWdCbkosS0FBaEIsRUFBdUI7QUFDaEUsUUFBSW1KLElBQUosRUFBVTtBQUNOQSxVQUFJLENBQUMrRSxjQUFMLEdBQXNCLEtBQUtTLGNBQUwsQ0FBb0IzTyxLQUFwQixDQUF0QjtBQUNIO0FBQ0osR0FKRDs7QUFLQThMLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0IraUIsbUJBQXhCLEdBQThDLFVBQVUvRyxJQUFWLEVBQWdCbkosS0FBaEIsRUFBdUJpUCxVQUF2QixFQUFtQztBQUM3RSxRQUFJOUYsSUFBSixFQUFVO0FBQ05BLFVBQUksQ0FBQytFLGNBQUwsR0FBc0IsS0FBS21CLGFBQUwsQ0FBbUJyUCxLQUFuQixFQUEwQmlQLFVBQTFCLENBQXRCO0FBQ0g7QUFDSixHQUpEOztBQUtBbkQsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QmdqQixrQkFBeEIsR0FBNkMsVUFBVWhILElBQVYsRUFBZ0JuSixLQUFoQixFQUF1QjtBQUNoRSxRQUFJbUosSUFBSixFQUFVO0FBQ05BLFVBQUksQ0FBQytFLGNBQUwsR0FBc0IsS0FBS1MsY0FBTCxDQUFvQjNPLEtBQXBCLENBQXRCO0FBQ0g7QUFDSixHQUpEOztBQUtBOEwsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QmlqQixpQ0FBeEIsR0FBNEQsVUFBVUMsUUFBVixFQUFvQkMsUUFBcEIsRUFBOEI7QUFDdEYsU0FBS0MsT0FBTDtBQUNILEdBRkQ7O0FBR0F6RSxlQUFhLENBQUMzZSxTQUFkLENBQXdCcWpCLHFDQUF4QixHQUFnRSxVQUFVSCxRQUFWLEVBQW9CQyxRQUFwQixFQUE4QjtBQUMxRixTQUFLQyxPQUFMO0FBQ0gsR0FGRDs7QUFHQXpFLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0JzakIsc0NBQXhCLEdBQWlFLFVBQVVKLFFBQVYsRUFBb0JDLFFBQXBCLEVBQThCO0FBQzNGLFNBQUtDLE9BQUw7QUFDSCxHQUZEOztBQUdBekUsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QnVqQixpQ0FBeEIsR0FBNEQsVUFBVUwsUUFBVixFQUFvQkMsUUFBcEIsRUFBOEI7QUFDdEYsU0FBS0MsT0FBTDtBQUNILEdBRkQ7O0FBR0F6RSxlQUFhLENBQUMzZSxTQUFkLENBQXdCd2pCLGtDQUF4QixHQUE2RCxZQUFZO0FBQ3JFbmxCLFdBQU8sQ0FBQ29sQiwyQkFBUixDQUFvQ0MsTUFBcEMsQ0FBMkMsSUFBM0M7QUFDSCxHQUZEOztBQUdBL0UsZUFBYSxDQUFDM2UsU0FBZCxDQUF3QjJqQixtQ0FBeEIsR0FBOEQsWUFBWTtBQUN0RXRsQixXQUFPLENBQUN1bEIsNEJBQVIsQ0FBcUNGLE1BQXJDLENBQTRDLElBQTVDO0FBQ0gsR0FGRDs7QUFHQS9FLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0J3aEIsY0FBeEIsR0FBeUMsVUFBVU4sV0FBVixFQUF1QjtBQUM1RCxRQUFJbEQsS0FBSyxHQUFHLEtBQUtBLEtBQWpCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDbUUsT0FBTixHQUFnQm5FLEtBQUssQ0FBQ21FLE9BQU4sQ0FBY2pCLFdBQWQsQ0FBaEIsR0FBNkNsRCxLQUFLLENBQUNrRCxXQUFELENBQXpEO0FBQ0gsR0FIRDs7QUFJQXZDLGVBQWEsQ0FBQzNlLFNBQWQsQ0FBd0JraUIsYUFBeEIsR0FBd0MsVUFBVWhCLFdBQVYsRUFBdUJZLFVBQXZCLEVBQW1DO0FBQ3ZFLFFBQUk5RCxLQUFLLEdBQUcsS0FBS0EsS0FBakI7QUFDQSxXQUFPQSxLQUFLLENBQUNtRSxPQUFOLEdBQWdCbkUsS0FBSyxDQUFDbUUsT0FBTixDQUFjakIsV0FBZCxFQUEyQixLQUFLakMsVUFBaEMsRUFBNEM2QyxVQUE1QyxDQUFoQixHQUEwRTlELEtBQUssQ0FBQ2tELFdBQUQsQ0FBTCxDQUFtQixLQUFLakMsVUFBeEIsRUFBb0M2QyxVQUFwQyxDQUFqRjtBQUNILEdBSEQ7O0FBSUEzakIsUUFBTSxDQUFDQyxjQUFQLENBQXNCdWdCLGFBQWEsQ0FBQzNlLFNBQXBDLEVBQStDLGVBQS9DLEVBQWdFO0FBQzVEQyxPQUFHLEVBQUUsZUFBWTtBQUNiLGFBQU8sS0FBSzJlLGNBQVo7QUFDSCxLQUgyRDtBQUk1RDVELE9BQUcsRUFBRSxhQUFVMWMsS0FBVixFQUFpQjtBQUNsQixXQUFLc2dCLGNBQUwsR0FBc0J0Z0IsS0FBdEI7QUFDSCxLQU4yRDtBQU81RDRCLGNBQVUsRUFBRSxJQVBnRDtBQVE1REMsZ0JBQVksRUFBRTtBQVI4QyxHQUFoRTtBQVVBaEMsUUFBTSxDQUFDQyxjQUFQLENBQXNCdWdCLGFBQWEsQ0FBQzNlLFNBQXBDLEVBQStDLGdCQUEvQyxFQUFpRTtBQUM3REMsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPLEtBQUs0akIsS0FBTCxDQUFXQyxjQUFsQjtBQUNILEtBSDREO0FBSTdEOUksT0FBRyxFQUFFLGFBQVUxYyxLQUFWLEVBQWlCO0FBQ2xCLFdBQUt1bEIsS0FBTCxDQUFXQyxjQUFYLEdBQTRCeGxCLEtBQTVCO0FBQ0gsS0FONEQ7QUFPN0Q0QixjQUFVLEVBQUUsSUFQaUQ7QUFRN0RDLGdCQUFZLEVBQUU7QUFSK0MsR0FBakU7O0FBVUF3ZSxlQUFhLENBQUMzZSxTQUFkLENBQXdCK2pCLGVBQXhCLEdBQTBDLFVBQVVDLElBQVYsRUFBZ0I7QUFDdEQsU0FBS1osT0FBTDtBQUNILEdBRkQ7O0FBR0F6RSxlQUFhLENBQUNzRixrQkFBZCxHQUFtQyxlQUFuQztBQUNBdEYsZUFBYSxDQUFDdUYsa0JBQWQsR0FBbUMsZUFBbkM7QUFDQXZGLGVBQWEsQ0FBQ3dGLHNCQUFkLEdBQXVDLG1CQUF2QztBQUNBeEYsZUFBYSxDQUFDeUYsdUJBQWQsR0FBd0Msb0JBQXhDO0FBQ0F6RixlQUFhLENBQUMwRixrQkFBZCxHQUFtQyxlQUFuQztBQUNBMUYsZUFBYSxDQUFDMkYsbUJBQWQsR0FBb0MsZ0JBQXBDO0FBQ0EzRixlQUFhLENBQUM0RixrQkFBZCxHQUFtQyxlQUFuQztBQUNBNUYsZUFBYSxDQUFDNkYsMkJBQWQsR0FBNEMsd0JBQTVDO0FBQ0E3RixlQUFhLENBQUM4RixjQUFkLEdBQStCLENBQUMsNEJBQUQsRUFBK0IsNkJBQS9CLEVBQThELHdCQUE5RCxFQUMzQix3QkFEMkIsRUFDRCxpQkFEQyxFQUNrQixrQkFEbEIsQ0FBL0I7QUFFQTlGLGVBQWEsR0FBRytGLFVBQVUsQ0FBQyxDQUN2Qm5ILE1BQU0sQ0FBQ29ILE9BQVAsQ0FBZSxXQUFmLENBRHVCLENBQUQsRUFFdkJoRyxhQUZ1QixDQUExQjtBQUdBLFNBQU9BLGFBQVA7QUFDSCxDQXBXb0IsQ0FvV25CcEIsTUFBTSxDQUFDcUgsYUFwV1ksQ0FBckI7O0FBcVdBdm1CLE9BQU8sQ0FBQ3NnQixhQUFSLEdBQXdCQSxhQUF4QjtBQUNBdGdCLE9BQU8sQ0FBQ3dtQixzQkFBUixHQUFpQyxJQUFJdEgsTUFBTSxDQUFDdUgsV0FBWCxDQUF1QjtBQUNwRHJoQixNQUFJLEVBQUUsZ0JBRDhDO0FBRXBEc2hCLFNBQU8sRUFBRSxpQkFGMkM7QUFHcERDLGdCQUFjLEVBQUUsd0JBQVVDLENBQVYsRUFBYTtBQUFFLFdBQU9uTCxNQUFNLENBQUNtTCxDQUFELENBQWI7QUFBbUI7QUFIRSxDQUF2QixDQUFqQztBQUtBNW1CLE9BQU8sQ0FBQ3dtQixzQkFBUixDQUErQkssUUFBL0IsQ0FBd0MzSCxNQUFNLENBQUM0SCxLQUEvQztBQUNBOW1CLE9BQU8sQ0FBQyttQixzQkFBUixHQUFpQyxJQUFJN0gsTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUNqRDVoQixNQUFJLEVBQUUsZ0JBRDJDO0FBRWpENmhCLGVBQWEsRUFBRSxJQUZrQztBQUdqREMsY0FBWSxFQUFFLHNCQUFVQyxNQUFWLEVBQWtCO0FBQzVCQSxVQUFNLENBQUNwQyxPQUFQO0FBQ0g7QUFMZ0QsQ0FBcEIsQ0FBakM7QUFPQS9rQixPQUFPLENBQUMrbUIsc0JBQVIsQ0FBK0JGLFFBQS9CLENBQXdDdkcsYUFBeEM7QUFDQXRnQixPQUFPLENBQUNvbkIsdUJBQVIsR0FBa0MsSUFBSWxJLE1BQU0sQ0FBQzhILFFBQVgsQ0FBb0I7QUFDbEQ1aEIsTUFBSSxFQUFFLGlCQUQ0QztBQUN6QnVoQixnQkFBYyxFQUFFLHdCQUFVMW1CLEtBQVYsRUFBaUI7QUFDdEQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9rZixTQUFTLENBQUNrSSxzQkFBVixDQUFpQ3BuQixLQUFqQyxDQUFQO0FBQ0g7O0FBQ0QsV0FBT0EsS0FBUDtBQUNIO0FBTmlELENBQXBCLENBQWxDO0FBUUFELE9BQU8sQ0FBQ29uQix1QkFBUixDQUFnQ1AsUUFBaEMsQ0FBeUN2RyxhQUF6QztBQUNBdGdCLE9BQU8sQ0FBQ3NuQiwwQkFBUixHQUFxQyxJQUFJcEksTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUNyRDVoQixNQUFJLEVBQUUsb0JBRCtDO0FBRXJENmhCLGVBQWEsRUFBRSxJQUZzQztBQUdyREMsY0FBWSxFQUFFLHNCQUFVQyxNQUFWLEVBQWtCO0FBQzVCQSxVQUFNLENBQUNwQyxPQUFQO0FBQ0g7QUFMb0QsQ0FBcEIsQ0FBckM7QUFPQS9rQixPQUFPLENBQUNzbkIsMEJBQVIsQ0FBbUNULFFBQW5DLENBQTRDdkcsYUFBNUM7QUFDQXRnQixPQUFPLENBQUN1bkIsMkJBQVIsR0FBc0MsSUFBSXJJLE1BQU0sQ0FBQzhILFFBQVgsQ0FBb0I7QUFDdEQ1aEIsTUFBSSxFQUFFLHFCQURnRDtBQUN6QnVoQixnQkFBYyxFQUFFLHdCQUFVMW1CLEtBQVYsRUFBaUI7QUFDMUQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9rZixTQUFTLENBQUNrSSxzQkFBVixDQUFpQ3BuQixLQUFqQyxDQUFQO0FBQ0g7O0FBQ0QsV0FBT0EsS0FBUDtBQUNIO0FBTnFELENBQXBCLENBQXRDO0FBUUFELE9BQU8sQ0FBQ3VuQiwyQkFBUixDQUFvQ1YsUUFBcEMsQ0FBNkN2RyxhQUE3QztBQUNBdGdCLE9BQU8sQ0FBQ3duQiwyQkFBUixHQUFzQyxJQUFJdEksTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUN0RDVoQixNQUFJLEVBQUUscUJBRGdEO0FBRXRENmhCLGVBQWEsRUFBRSxJQUZ1QztBQUd0REMsY0FBWSxFQUFFLHNCQUFVQyxNQUFWLEVBQWtCO0FBQzVCQSxVQUFNLENBQUNwQyxPQUFQO0FBQ0g7QUFMcUQsQ0FBcEIsQ0FBdEM7QUFPQS9rQixPQUFPLENBQUN3bkIsMkJBQVIsQ0FBb0NYLFFBQXBDLENBQTZDdkcsYUFBN0M7QUFDQXRnQixPQUFPLENBQUN5bkIsNEJBQVIsR0FBdUMsSUFBSXZJLE1BQU0sQ0FBQzhILFFBQVgsQ0FBb0I7QUFDdkQ1aEIsTUFBSSxFQUFFLHNCQURpRDtBQUN6QnVoQixnQkFBYyxFQUFFLHdCQUFVMW1CLEtBQVYsRUFBaUI7QUFDM0QsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9rZixTQUFTLENBQUNrSSxzQkFBVixDQUFpQ3BuQixLQUFqQyxDQUFQO0FBQ0g7O0FBQ0QsV0FBT0EsS0FBUDtBQUNIO0FBTnNELENBQXBCLENBQXZDO0FBUUFELE9BQU8sQ0FBQ3luQiw0QkFBUixDQUFxQ1osUUFBckMsQ0FBOEN2RyxhQUE5QztBQUNBdGdCLE9BQU8sQ0FBQzBuQixzQkFBUixHQUFpQyxJQUFJeEksTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUNqRDVoQixNQUFJLEVBQUUsZ0JBRDJDO0FBRWpENmhCLGVBQWEsRUFBRSxJQUZrQztBQUdqREMsY0FBWSxFQUFFLHNCQUFVQyxNQUFWLEVBQWtCO0FBQzVCQSxVQUFNLENBQUNwQyxPQUFQO0FBQ0g7QUFMZ0QsQ0FBcEIsQ0FBakM7QUFPQS9rQixPQUFPLENBQUMwbkIsc0JBQVIsQ0FBK0JiLFFBQS9CLENBQXdDdkcsYUFBeEM7QUFDQXRnQixPQUFPLENBQUMybkIsdUJBQVIsR0FBa0MsSUFBSXpJLE1BQU0sQ0FBQzhILFFBQVgsQ0FBb0I7QUFDbEQ1aEIsTUFBSSxFQUFFLGlCQUQ0QztBQUN6QnVoQixnQkFBYyxFQUFFLHdCQUFVMW1CLEtBQVYsRUFBaUI7QUFDdEQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9rZixTQUFTLENBQUNrSSxzQkFBVixDQUFpQ3BuQixLQUFqQyxDQUFQO0FBQ0g7O0FBQ0QsV0FBT0EsS0FBUDtBQUNIO0FBTmlELENBQXBCLENBQWxDO0FBUUFELE9BQU8sQ0FBQzJuQix1QkFBUixDQUFnQ2QsUUFBaEMsQ0FBeUN2RyxhQUF6QztBQUNBdGdCLE9BQU8sQ0FBQzRuQixhQUFSLEdBQXdCLElBQUkxSSxNQUFNLENBQUM4SCxRQUFYLENBQW9CO0FBQ3hDNWhCLE1BQUksRUFBRSxPQURrQztBQUV4QzZoQixlQUFhLEVBQUUsSUFGeUI7QUFHeENDLGNBQVksRUFBRSxzQkFBVUMsTUFBVixFQUFrQnRDLFFBQWxCLEVBQTRCQyxRQUE1QixFQUFzQztBQUNoRCxRQUFJRCxRQUFRLFlBQVl6RixZQUFZLENBQUN5SSxVQUFyQyxFQUFpRDtBQUM3Q3ZJLDJCQUFxQixDQUFDd0ksdUJBQXRCLENBQThDakQsUUFBOUMsRUFBd0R4RixrQkFBa0IsQ0FBQzBJLGVBQW5CLENBQW1DQyxXQUEzRixFQUF3R2IsTUFBTSxDQUFDekIsZUFBL0csRUFBZ0l5QixNQUFoSTtBQUNIOztBQUNELFFBQUlyQyxRQUFRLFlBQVkxRixZQUFZLENBQUN5SSxVQUFyQyxFQUFpRDtBQUM3Q3ZJLDJCQUFxQixDQUFDMkksb0JBQXRCLENBQTJDbkQsUUFBM0MsRUFBcUR6RixrQkFBa0IsQ0FBQzBJLGVBQW5CLENBQW1DQyxXQUF4RixFQUFxR2IsTUFBTSxDQUFDekIsZUFBNUcsRUFBNkh5QixNQUE3SDtBQUNIOztBQUNEQSxVQUFNLENBQUNwQyxPQUFQO0FBQ0g7QUFYdUMsQ0FBcEIsQ0FBeEI7QUFhQS9rQixPQUFPLENBQUM0bkIsYUFBUixDQUFzQmYsUUFBdEIsQ0FBK0J2RyxhQUEvQjtBQUNBdGdCLE9BQU8sQ0FBQ2tvQix1QkFBUixHQUFrQyxJQUFJaEosTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUNsRDVoQixNQUFJLEVBQUUsaUJBRDRDO0FBRWxEK2lCLGNBQVksRUFBRSxFQUZvQztBQUdsRGpCLGNBQVksRUFBRSxzQkFBVUMsTUFBVixFQUFrQnRDLFFBQWxCLEVBQTRCQyxRQUE1QixFQUFzQztBQUNoRHFDLFVBQU0sQ0FBQ2lCLE1BQVAsQ0FBYztBQUNWQyxlQUFTLEVBQUUvSCxhQUFhLENBQUM2RiwyQkFEZjtBQUVWNUosWUFBTSxFQUFFNEssTUFGRTtBQUdWbUIsY0FBUSxFQUFFekQsUUFIQTtBQUlWMEQsY0FBUSxFQUFFekQ7QUFKQSxLQUFkO0FBTUFxQyxVQUFNLENBQUNxQixtQkFBUCxDQUEyQjNELFFBQTNCLEVBQXFDQyxRQUFyQztBQUNIO0FBWGlELENBQXBCLENBQWxDO0FBYUE5a0IsT0FBTyxDQUFDa29CLHVCQUFSLENBQWdDckIsUUFBaEMsQ0FBeUN2RyxhQUF6QztBQUNBLElBQUltSSxnQkFBZ0IsR0FBRyxNQUF2QjtBQUNBem9CLE9BQU8sQ0FBQzBvQix1QkFBUixHQUFrQyxJQUFJeEosTUFBTSxDQUFDeUosaUJBQVgsQ0FBNkI7QUFDM0R2akIsTUFBSSxFQUFFLGlCQURxRDtBQUNsQytpQixjQUFZLEVBQUVNLGdCQURvQjtBQUNGRyxrQkFBZ0IsRUFBRTFKLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY25tQixNQUQ5QjtBQUUzRG9tQixhQUFXLEVBQUUscUJBQVUzQixNQUFWLEVBQWtCbG5CLEtBQWxCLEVBQXlCO0FBQ2xDLFdBQU9rbkIsTUFBTSxDQUFDNEIsbUJBQVAsR0FBNkI5b0IsS0FBN0IsR0FBcUN3b0IsZ0JBQTVDO0FBQ0gsR0FKMEQ7QUFLM0R2QixjQUFZLEVBQUUsc0JBQVVDLE1BQVYsRUFBa0J0QyxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0M7QUFDaERxQyxVQUFNLENBQUMzRyx5QkFBUCxHQUFtQ3RCLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY0csY0FBZCxDQUE2QmxFLFFBQTdCLEVBQXVDckYsc0JBQXZDLENBQW5DOztBQUNBMEgsVUFBTSxDQUFDdkMsaUNBQVAsQ0FBeUNDLFFBQXpDLEVBQW1EQyxRQUFuRDtBQUNILEdBUjBEO0FBUXhENkIsZ0JBQWMsRUFBRXpILE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY3hIO0FBUjBCLENBQTdCLENBQWxDO0FBVUFyaEIsT0FBTyxDQUFDMG9CLHVCQUFSLENBQWdDN0IsUUFBaEMsQ0FBeUN2RyxhQUF6QztBQUNBdGdCLE9BQU8sQ0FBQ29sQiwyQkFBUixHQUFzQyxJQUFJbEcsTUFBTSxDQUFDeUosaUJBQVgsQ0FBNkI7QUFDL0R2akIsTUFBSSxFQUFFLHFCQUR5RDtBQUNsQytpQixjQUFZLEVBQUVNLGdCQURvQjtBQUNGRyxrQkFBZ0IsRUFBRTFKLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY25tQixNQUQ5QjtBQUUvRG9tQixhQUFXLEVBQUUscUJBQVUzQixNQUFWLEVBQWtCbG5CLEtBQWxCLEVBQXlCO0FBQ2xDLFdBQU9rbkIsTUFBTSxDQUFDNEIsbUJBQVAsR0FBNkI5b0IsS0FBN0IsR0FBcUN3b0IsZ0JBQTVDO0FBQ0gsR0FKOEQ7QUFLL0R2QixjQUFZLEVBQUUsc0JBQVVDLE1BQVYsRUFBa0J0QyxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0M7QUFDaERxQyxVQUFNLENBQUMxRyw2QkFBUCxHQUF1Q3ZCLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY0csY0FBZCxDQUE2QmxFLFFBQTdCLEVBQXVDckYsc0JBQXZDLENBQXZDOztBQUNBMEgsVUFBTSxDQUFDbkMscUNBQVAsQ0FBNkNILFFBQTdDLEVBQXVEQyxRQUF2RDtBQUNILEdBUjhEO0FBUTVENkIsZ0JBQWMsRUFBRXpILE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY3hIO0FBUjhCLENBQTdCLENBQXRDO0FBVUFyaEIsT0FBTyxDQUFDb2xCLDJCQUFSLENBQW9DeUIsUUFBcEMsQ0FBNkN2RyxhQUE3QztBQUNBdGdCLE9BQU8sQ0FBQ3VsQiw0QkFBUixHQUF1QyxJQUFJckcsTUFBTSxDQUFDeUosaUJBQVgsQ0FBNkI7QUFDaEV2akIsTUFBSSxFQUFFLHNCQUQwRDtBQUNsQytpQixjQUFZLEVBQUVNLGdCQURvQjtBQUNGRyxrQkFBZ0IsRUFBRTFKLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY25tQixNQUQ5QjtBQUVoRW9tQixhQUFXLEVBQUUscUJBQVUzQixNQUFWLEVBQWtCbG5CLEtBQWxCLEVBQXlCO0FBQ2xDLFdBQU9rbkIsTUFBTSxDQUFDNEIsbUJBQVAsR0FBNkI5b0IsS0FBN0IsR0FBcUN3b0IsZ0JBQTVDO0FBQ0gsR0FKK0Q7QUFLaEV2QixjQUFZLEVBQUUsc0JBQVVDLE1BQVYsRUFBa0J0QyxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0M7QUFDaERxQyxVQUFNLENBQUN6Ryw4QkFBUCxHQUF3Q3hCLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY0csY0FBZCxDQUE2QmxFLFFBQTdCLEVBQXVDckYsc0JBQXZDLENBQXhDOztBQUNBMEgsVUFBTSxDQUFDbEMsc0NBQVAsQ0FBOENKLFFBQTlDLEVBQXdEQyxRQUF4RDtBQUNILEdBUitEO0FBUTdENkIsZ0JBQWMsRUFBRXpILE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY3hIO0FBUitCLENBQTdCLENBQXZDO0FBVUFyaEIsT0FBTyxDQUFDdWxCLDRCQUFSLENBQXFDc0IsUUFBckMsQ0FBOEN2RyxhQUE5QztBQUNBdGdCLE9BQU8sQ0FBQ2lwQix1QkFBUixHQUFrQyxJQUFJL0osTUFBTSxDQUFDeUosaUJBQVgsQ0FBNkI7QUFDM0R2akIsTUFBSSxFQUFFLGlCQURxRDtBQUNsQytpQixjQUFZLEVBQUVNLGdCQURvQjtBQUNGRyxrQkFBZ0IsRUFBRTFKLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY25tQixNQUQ5QjtBQUUzRG9tQixhQUFXLEVBQUUscUJBQVUzQixNQUFWLEVBQWtCbG5CLEtBQWxCLEVBQXlCO0FBQ2xDLFdBQU9rbkIsTUFBTSxDQUFDNEIsbUJBQVAsR0FBNkI5b0IsS0FBN0IsR0FBcUN3b0IsZ0JBQTVDO0FBQ0gsR0FKMEQ7QUFLM0R2QixjQUFZLEVBQUUsc0JBQVVDLE1BQVYsRUFBa0J0QyxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0M7QUFDaERxQyxVQUFNLENBQUN4Ryx5QkFBUCxHQUFtQ3pCLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY0csY0FBZCxDQUE2QmxFLFFBQTdCLEVBQXVDckYsc0JBQXZDLENBQW5DOztBQUNBMEgsVUFBTSxDQUFDakMsaUNBQVAsQ0FBeUNMLFFBQXpDLEVBQW1EQyxRQUFuRDtBQUNILEdBUjBEO0FBUXhENkIsZ0JBQWMsRUFBRXpILE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY3hIO0FBUjBCLENBQTdCLENBQWxDO0FBVUFyaEIsT0FBTyxDQUFDaXBCLHVCQUFSLENBQWdDcEMsUUFBaEMsQ0FBeUN2RyxhQUF6QztBQUNBdGdCLE9BQU8sQ0FBQ2twQixtQ0FBUixHQUE4QyxJQUFJaEssTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUM5RDVoQixNQUFJLEVBQUUsNkJBRHdEO0FBQ3pCdWhCLGdCQUFjLEVBQUUsd0JBQVVDLENBQVYsRUFBYTtBQUFFLFdBQU8xSCxNQUFNLENBQUMySixNQUFQLENBQWN4SCxLQUFkLENBQW9CdUYsQ0FBcEIsQ0FBUDtBQUFnQztBQUR0QyxDQUFwQixDQUE5QztBQUdBNW1CLE9BQU8sQ0FBQ2twQixtQ0FBUixDQUE0Q3JDLFFBQTVDLENBQXFEdkcsYUFBckQ7QUFDQXRnQixPQUFPLENBQUNtcEIsdUNBQVIsR0FBa0QsSUFBSWpLLE1BQU0sQ0FBQzhILFFBQVgsQ0FBb0I7QUFDbEU1aEIsTUFBSSxFQUFFLGlDQUQ0RDtBQUN6QnVoQixnQkFBYyxFQUFFLHdCQUFVQyxDQUFWLEVBQWE7QUFBRSxXQUFPMUgsTUFBTSxDQUFDMkosTUFBUCxDQUFjeEgsS0FBZCxDQUFvQnVGLENBQXBCLENBQVA7QUFBZ0M7QUFEdEMsQ0FBcEIsQ0FBbEQ7QUFHQTVtQixPQUFPLENBQUNtcEIsdUNBQVIsQ0FBZ0R0QyxRQUFoRCxDQUF5RHZHLGFBQXpEO0FBQ0F0Z0IsT0FBTyxDQUFDb3BCLHdDQUFSLEdBQW1ELElBQUlsSyxNQUFNLENBQUM4SCxRQUFYLENBQW9CO0FBQ25FNWhCLE1BQUksRUFBRSxrQ0FENkQ7QUFDekJ1aEIsZ0JBQWMsRUFBRSx3QkFBVUMsQ0FBVixFQUFhO0FBQUUsV0FBTzFILE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY3hILEtBQWQsQ0FBb0J1RixDQUFwQixDQUFQO0FBQWdDO0FBRHRDLENBQXBCLENBQW5EO0FBR0E1bUIsT0FBTyxDQUFDb3BCLHdDQUFSLENBQWlEdkMsUUFBakQsQ0FBMER2RyxhQUExRDtBQUNBdGdCLE9BQU8sQ0FBQ3FwQixtQ0FBUixHQUE4QyxJQUFJbkssTUFBTSxDQUFDOEgsUUFBWCxDQUFvQjtBQUM5RDVoQixNQUFJLEVBQUUsNkJBRHdEO0FBQ3pCdWhCLGdCQUFjLEVBQUUsd0JBQVVDLENBQVYsRUFBYTtBQUFFLFdBQU8xSCxNQUFNLENBQUMySixNQUFQLENBQWN4SCxLQUFkLENBQW9CdUYsQ0FBcEIsQ0FBUDtBQUFnQztBQUR0QyxDQUFwQixDQUE5QztBQUdBNW1CLE9BQU8sQ0FBQ3FwQixtQ0FBUixDQUE0Q3hDLFFBQTVDLENBQXFEdkcsYUFBckQsRTs7Ozs7Ozs7QUNwaUJBLDhDQUFhOztBQUNieGdCLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsT0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsSUFBSWlmLE1BQU0sR0FBRy9lLG1CQUFPLENBQUMsK0JBQUQsQ0FBcEI7O0FBQ0EsSUFBSW9FLE1BQU0sR0FBR3BFLG1CQUFPLENBQUMsNERBQUQsQ0FBcEI7O0FBQ0EsSUFBSW1wQixrQkFBa0IsR0FBR25wQixtQkFBTyxDQUFDLDREQUFELENBQWhDOztBQUNBLElBQUlvcEIsT0FBTyxHQUFHcHBCLG1CQUFPLENBQUMsd0JBQUQsQ0FBckI7O0FBQ0EsSUFBSXFwQixLQUFLLEdBQUdycEIsbUJBQU8sQ0FBQyw4QkFBRCxDQUFuQjs7QUFDQSxJQUFJc3BCLFdBQVcsR0FBR3RwQixtQkFBTyxDQUFDLDRCQUFELENBQXpCOztBQUNBLElBQUlpZixZQUFZLEdBQUdqZixtQkFBTyxDQUFDLGtDQUFELENBQTFCOztBQUNBLElBQUl1cEIsc0JBQXNCLEdBQUd2cEIsbUJBQU8sQ0FBQywwQ0FBRCxDQUFwQzs7QUFDQSxJQUFJd3BCLGNBQWMsR0FBR3hwQixtQkFBTyxDQUFDLDBDQUFELENBQTVCOztBQUNBSCxPQUFPLENBQUM0cEIsT0FBUixHQUFrQixTQUFsQjtBQUNBLElBQUlDLE9BQU8sR0FBRyxZQUFkO0FBQ0FDLE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQnhsQixNQUFuQixFQUEyQnZFLE9BQTNCO0FBQ0EsSUFBSWdxQixjQUFjLEdBQUcsRUFBckI7QUFDQSxJQUFJQyxRQUFRLEdBQUdULEtBQUssQ0FBQ1UsTUFBTixDQUFhQyxlQUFiLENBQTZCLENBQTdCLEVBQWdDWCxLQUFLLENBQUNVLE1BQU4sQ0FBYUUsV0FBN0MsQ0FBZjtBQUNBLElBQUlDLFlBQVksR0FBR2IsS0FBSyxDQUFDYyxHQUFOLENBQVVDLFlBQTdCOztBQUNBLFNBQVNDLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsVUFBckMsRUFBaURDLElBQWpELEVBQXVEdEMsU0FBdkQsRUFBa0V1QyxTQUFsRSxFQUE2RTtBQUN6RSxNQUFJakYsSUFBSSxHQUFHO0FBQ1AwQyxhQUFTLEVBQUVBLFNBREo7QUFFUDlMLFVBQU0sRUFBRWtPLEtBRkQ7QUFHUGpXLFNBQUssRUFBRW9XLFNBQVMsQ0FBQ0MsT0FIVjtBQUlQcEgsY0FBVSxFQUFFbUgsU0FBUyxDQUFDRSxHQUpmO0FBS1BILFFBQUksRUFBRUEsSUFMQztBQU1QTCxPQUFHLEVBQUVJLFVBTkU7QUFPUEssV0FBTyxFQUFFMW9CO0FBUEYsR0FBWDtBQVNBb29CLE9BQUssQ0FBQ3JDLE1BQU4sQ0FBYXpDLElBQWI7QUFDQSxTQUFPQSxJQUFQO0FBQ0g7O0FBQ0QsU0FBU3FGLDhCQUFULENBQXdDUCxLQUF4QyxFQUErQ0MsVUFBL0MsRUFBMkRDLElBQTNELEVBQWlFdEMsU0FBakUsRUFBNEV4RixXQUE1RSxFQUF5RjtBQUNyRixNQUFJOEMsSUFBSSxHQUFHO0FBQ1AwQyxhQUFTLEVBQUVBLFNBREo7QUFFUDlMLFVBQU0sRUFBRWtPLEtBRkQ7QUFHUGpXLFNBQUssRUFBRXFPLFdBSEE7QUFJUDhILFFBQUksRUFBRUEsSUFKQztBQUtQTCxPQUFHLEVBQUVJLFVBTEU7QUFNUEssV0FBTyxFQUFFMW9CO0FBTkYsR0FBWDtBQVFBb29CLE9BQUssQ0FBQ3JDLE1BQU4sQ0FBYXpDLElBQWI7QUFDQSxTQUFPQSxJQUFQO0FBQ0g7O0FBQ0QsSUFBSXNGLGdDQUFnQyxHQUFHLElBQXZDOztBQUNBLElBQUlDLFNBQVMsR0FBSSxVQUFVMW1CLE1BQVYsRUFBa0I7QUFDL0JDLFdBQVMsQ0FBQ3ltQixTQUFELEVBQVkxbUIsTUFBWixDQUFUOztBQUNBLFdBQVMwbUIsU0FBVCxHQUFxQjtBQUNqQixRQUFJMVEsS0FBSyxHQUFHaFcsTUFBTSxDQUFDMm1CLElBQVAsQ0FBWSxJQUFaLEtBQXFCLElBQWpDOztBQUNBM1EsU0FBSyxDQUFDNFEsNEJBQU4sR0FBcUNwQixjQUFyQztBQUNBeFAsU0FBSyxDQUFDNlEsNkJBQU4sR0FBc0NyQixjQUF0QztBQUNBeFAsU0FBSyxDQUFDOFEsd0JBQU4sR0FBaUN0QixjQUFqQztBQUNBeFAsU0FBSyxDQUFDK1Esd0JBQU4sR0FBaUN2QixjQUFqQztBQUNBeFAsU0FBSyxDQUFDZ1IsbUJBQU4sR0FBNEIsRUFBNUI7QUFDQWhSLFNBQUssQ0FBQ2lSLGtCQUFOLEdBQTJCLEVBQTNCO0FBQ0FqUixTQUFLLENBQUNrUixjQUFOLEdBQXVCLEVBQXZCO0FBQ0FsUixTQUFLLENBQUNtUixjQUFOLEdBQXVCLEVBQXZCO0FBQ0FuUixTQUFLLENBQUNvUixJQUFOLEdBQWEsSUFBSXhQLEdBQUosRUFBYjtBQUNBNUIsU0FBSyxDQUFDcVIsZUFBTixHQUF3QixJQUFJelAsR0FBSixFQUF4QjtBQUNBNUIsU0FBSyxDQUFDc1IsY0FBTixHQUF1QixJQUFJMVAsR0FBSixFQUF2QjtBQUNBNUIsU0FBSyxDQUFDdVIsVUFBTixHQUFtQixJQUFJM1AsR0FBSixFQUFuQjtBQUNBNUIsU0FBSyxDQUFDd1IsVUFBTixHQUFtQixJQUFJNVAsR0FBSixFQUFuQjtBQUNBLFdBQU81QixLQUFQO0FBQ0g7O0FBQ0QwUSxXQUFTLENBQUN2cEIsU0FBVixDQUFvQnNxQixpQkFBcEIsR0FBd0MsVUFBVUMsUUFBVixFQUFvQkMsUUFBcEIsRUFBOEI7QUFDbEUsU0FBS3huQixJQUFMLENBQVV5bkIsVUFBVjtBQUNILEdBRkQ7O0FBR0FsQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQjBxQixnQkFBcEIsR0FBdUMsWUFBWTtBQUMvQyxXQUFPQyxlQUFlLENBQUNDLGFBQWhCLENBQThCLElBQUlDLE9BQUosQ0FBWSxJQUFaLENBQTlCLENBQVA7QUFDSCxHQUZEOztBQUdBdEIsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0I4cUIsY0FBcEIsR0FBcUMsWUFBWTtBQUM3Q2pvQixVQUFNLENBQUM3QyxTQUFQLENBQWlCOHFCLGNBQWpCLENBQWdDdEIsSUFBaEMsQ0FBcUMsSUFBckM7O0FBQ0EsUUFBSVQsVUFBVSxHQUFHLEtBQUszQixtQkFBdEI7QUFDQTJCLGNBQVUsQ0FBQ2dDLG1DQUFYLENBQStDQyx1QkFBdUIsQ0FBQ0MsS0FBeEIsRUFBL0MsRUFBZ0YsS0FBS25MLDBCQUFMLENBQWdDTixHQUFoSDtBQUNBdUosY0FBVSxDQUFDZ0MsbUNBQVgsQ0FBK0NHLHdCQUF3QixDQUFDRCxLQUF6QixFQUEvQyxFQUFpRixLQUFLaEwsMkJBQUwsQ0FBaUNULEdBQWxIO0FBQ0F1SixjQUFVLENBQUNnQyxtQ0FBWCxDQUErQ0ksbUJBQW1CLENBQUNGLEtBQXBCLEVBQS9DLEVBQTRFLEtBQUsxTCxzQkFBTCxDQUE0QkMsR0FBeEc7QUFDQXVKLGNBQVUsQ0FBQ2dDLG1DQUFYLENBQStDSyxtQkFBbUIsQ0FBQ0gsS0FBcEIsRUFBL0MsRUFBNEUsS0FBSzdLLHNCQUFMLENBQTRCWixHQUF4RztBQUNBdUosY0FBVSxDQUFDc0Msa0JBQVgsR0FBZ0NoRCxjQUFoQztBQUNBVSxjQUFVLENBQUN1QyxTQUFYLEdBQXVCQyw2QkFBdkI7QUFDQSxTQUFLNUMsR0FBTCxDQUFTN0UsY0FBVCxHQUEwQjdnQixPQUFPLENBQUN1b0IsVUFBbEM7QUFDQSxTQUFLN0MsR0FBTCxDQUFTOEMsZUFBVCxHQUEyQkMsTUFBTSxDQUFDQyxHQUFQLEVBQTNCOztBQUNBLFFBQUksS0FBSzdILGNBQVQsRUFBeUI7QUFDckIsV0FBSzZFLEdBQUwsQ0FBUzdFLGNBQVQsR0FBMEIsSUFBSThELE9BQU8sQ0FBQy9vQixLQUFaLENBQWtCLEtBQUtpbEIsY0FBdkIsRUFBdUM2RSxHQUFqRTtBQUNIOztBQUNELFNBQUtpRCxXQUFMLEdBQW1CQyxtQkFBbUIsQ0FBQ2pCLGFBQXBCLENBQWtDLElBQUlDLE9BQUosQ0FBWSxJQUFaLENBQWxDLENBQW5CO0FBQ0EsU0FBS2lCLFNBQUwsR0FBaUJDLHVCQUF1QixDQUFDbkIsYUFBeEIsQ0FBc0MsSUFBSUMsT0FBSixDQUFZLElBQVosQ0FBdEMsQ0FBakI7O0FBQ0EsU0FBS21CLHNCQUFMOztBQUNBLFNBQUtDLGNBQUwsR0FBc0IsSUFBSXhSLEdBQUosRUFBdEI7QUFDQSxTQUFLeVIsU0FBTCxHQUFpQkMsaUJBQWlCLENBQUNqcEIsS0FBbEIsR0FBMEJrcEIsSUFBMUIsRUFBakI7QUFDSCxHQW5CRDs7QUFvQkE3QyxXQUFTLENBQUN2cEIsU0FBVixDQUFvQnFzQixRQUFwQixHQUErQixZQUFZO0FBQ3ZDeHBCLFVBQU0sQ0FBQzdDLFNBQVAsQ0FBaUJxc0IsUUFBakIsQ0FBMEI3QyxJQUExQixDQUErQixJQUEvQjs7QUFDQSxRQUFJLEtBQUs4QyxZQUFULEVBQXVCO0FBQ25CLFdBQUtDLGFBQUw7QUFDQSxXQUFLbkosT0FBTDtBQUNIOztBQUNELFNBQUt1RixHQUFMLENBQVM2RCxVQUFULEdBQXNCLEtBQUtaLFdBQTNCO0FBQ0EsU0FBS2pELEdBQUwsQ0FBUzhELFFBQVQsR0FBb0IsS0FBS1gsU0FBekI7QUFDSCxHQVJEOztBQVNBdkMsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0Iwc0IsVUFBcEIsR0FBaUMsWUFBWTtBQUN6QyxTQUFLL0QsR0FBTCxDQUFTOEQsUUFBVCxHQUFvQixJQUFwQjs7QUFDQTVwQixVQUFNLENBQUM3QyxTQUFQLENBQWlCMHNCLFVBQWpCLENBQTRCbEQsSUFBNUIsQ0FBaUMsSUFBakM7QUFDSCxHQUhEOztBQUlBRCxXQUFTLENBQUN2cEIsU0FBVixDQUFvQjJzQixtQkFBcEIsR0FBMEMsVUFBVTlaLEtBQVYsRUFBaUI7QUFDdkQsV0FBTyxLQUFLaVgsa0JBQUwsQ0FBd0JqWCxLQUF4QixDQUFQO0FBQ0gsR0FGRDs7QUFHQTBXLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CNHNCLG1CQUFwQixHQUEwQyxVQUFVL1osS0FBVixFQUFpQnZVLEtBQWpCLEVBQXdCO0FBQzlELFNBQUt3ckIsa0JBQUwsQ0FBd0JqWCxLQUF4QixJQUFpQ3ZVLEtBQWpDO0FBQ0gsR0FGRDs7QUFHQWlyQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQjZzQixvQkFBcEIsR0FBMkMsVUFBVWhhLEtBQVYsRUFBaUI7QUFDeEQsV0FBTyxLQUFLZ1gsbUJBQUwsQ0FBeUJoWCxLQUF6QixDQUFQO0FBQ0gsR0FGRDs7QUFHQTBXLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9COHNCLG9CQUFwQixHQUEyQyxVQUFVamEsS0FBVixFQUFpQnZVLEtBQWpCLEVBQXdCO0FBQy9ELFNBQUt1ckIsbUJBQUwsQ0FBeUJoWCxLQUF6QixJQUFrQ3ZVLEtBQWxDO0FBQ0gsR0FGRDs7QUFHQWlyQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQitzQixlQUFwQixHQUFzQyxVQUFVbGEsS0FBVixFQUFpQjtBQUNuRCxXQUFPLEtBQUtrWCxjQUFMLENBQW9CbFgsS0FBcEIsQ0FBUDtBQUNILEdBRkQ7O0FBR0EwVyxXQUFTLENBQUN2cEIsU0FBVixDQUFvQmd0QixlQUFwQixHQUFzQyxVQUFVbmEsS0FBVixFQUFpQnZVLEtBQWpCLEVBQXdCO0FBQzFELFNBQUt5ckIsY0FBTCxDQUFvQmxYLEtBQXBCLElBQTZCdlUsS0FBN0I7QUFDSCxHQUZEOztBQUdBaXJCLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CaXRCLGVBQXBCLEdBQXNDLFVBQVVwYSxLQUFWLEVBQWlCO0FBQ25ELFdBQU8sS0FBS21YLGNBQUwsQ0FBb0JuWCxLQUFwQixDQUFQO0FBQ0gsR0FGRDs7QUFHQTBXLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9Ca3RCLGVBQXBCLEdBQXNDLFVBQVVyYSxLQUFWLEVBQWlCdlUsS0FBakIsRUFBd0I7QUFDMUQsU0FBSzByQixjQUFMLENBQW9CblgsS0FBcEIsSUFBNkJ2VSxLQUE3QjtBQUNILEdBRkQ7O0FBR0FpckIsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0JtdEIsaUJBQXBCLEdBQXdDLFlBQVk7QUFDaEQsU0FBS3hFLEdBQUwsQ0FBUzhELFFBQVQsR0FBb0IsSUFBcEI7O0FBQ0EsUUFBSSxLQUFLUCxTQUFULEVBQW9CO0FBQ2hCLFdBQUtBLFNBQUwsQ0FBZWtCLGdCQUFmO0FBQ0g7QUFDSixHQUxEOztBQU1BN0QsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0Jnc0Isc0JBQXBCLEdBQTZDLFlBQVk7QUFDckQsU0FBS3JELEdBQUwsQ0FBUzBFLGFBQVQsR0FBeUIsSUFBekI7QUFDSCxHQUZEOztBQUdBbHZCLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQm1yQixTQUFTLENBQUN2cEIsU0FBaEMsRUFBMkMsS0FBM0MsRUFBa0Q7QUFDOUNDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsYUFBTyxLQUFLbW5CLG1CQUFaO0FBQ0gsS0FINkM7QUFJOUNsbkIsY0FBVSxFQUFFLElBSmtDO0FBSzlDQyxnQkFBWSxFQUFFO0FBTGdDLEdBQWxEOztBQU9Bb3BCLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9Cb2pCLE9BQXBCLEdBQThCLFlBQVk7QUFDdEMsU0FBSzZHLElBQUwsQ0FBVXBRLE9BQVYsQ0FBa0IsVUFBVW1QLElBQVYsRUFBZ0JELFVBQWhCLEVBQTRCalEsR0FBNUIsRUFBaUM7QUFDL0MsVUFBSSxFQUFFa1EsSUFBSSxDQUFDakksY0FBTCxZQUErQnRELFlBQVksQ0FBQ3lJLFVBQTlDLENBQUosRUFBK0Q7QUFDM0Q4QyxZQUFJLENBQUNqSSxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7QUFDSixLQUpEOztBQUtBLFNBQUttSixlQUFMLENBQXFCclEsT0FBckIsQ0FBNkIsVUFBVW1QLElBQVYsRUFBZ0JELFVBQWhCLEVBQTRCalEsR0FBNUIsRUFBaUM7QUFDMUQsVUFBSSxFQUFFa1EsSUFBSSxDQUFDakksY0FBTCxZQUErQnRELFlBQVksQ0FBQ3lJLFVBQTlDLENBQUosRUFBK0Q7QUFDM0Q4QyxZQUFJLENBQUNqSSxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7QUFDSixLQUpEOztBQUtBLFNBQUtvSixjQUFMLENBQW9CdFEsT0FBcEIsQ0FBNEIsVUFBVW1QLElBQVYsRUFBZ0JELFVBQWhCLEVBQTRCalEsR0FBNUIsRUFBaUM7QUFDekQsVUFBSSxFQUFFa1EsSUFBSSxDQUFDakksY0FBTCxZQUErQnRELFlBQVksQ0FBQ3lJLFVBQTlDLENBQUosRUFBK0Q7QUFDM0Q4QyxZQUFJLENBQUNqSSxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7QUFDSixLQUpEOztBQUtBLFNBQUtxSixVQUFMLENBQWdCdlEsT0FBaEIsQ0FBd0IsVUFBVW1QLElBQVYsRUFBZ0JELFVBQWhCLEVBQTRCalEsR0FBNUIsRUFBaUM7QUFDckQsVUFBSSxFQUFFa1EsSUFBSSxDQUFDakksY0FBTCxZQUErQnRELFlBQVksQ0FBQ3lJLFVBQTlDLENBQUosRUFBK0Q7QUFDM0Q4QyxZQUFJLENBQUNqSSxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7QUFDSixLQUpEOztBQUtBLFNBQUtzSixVQUFMLENBQWdCeFEsT0FBaEIsQ0FBd0IsVUFBVW1QLElBQVYsRUFBZ0JELFVBQWhCLEVBQTRCalEsR0FBNUIsRUFBaUM7QUFDckQsVUFBSSxFQUFFa1EsSUFBSSxDQUFDakksY0FBTCxZQUErQnRELFlBQVksQ0FBQ3lJLFVBQTlDLENBQUosRUFBK0Q7QUFDM0Q4QyxZQUFJLENBQUNqSSxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7QUFDSixLQUpEOztBQUtBLFFBQUksS0FBS3VNLFFBQVQsRUFBbUI7QUFDZixXQUFLM0UsR0FBTCxDQUFTOEIsVUFBVDtBQUNBLFdBQUs4QixhQUFMO0FBQ0EsV0FBS0QsWUFBTCxHQUFvQixLQUFwQjtBQUNILEtBSkQsTUFLSztBQUNELFdBQUtBLFlBQUwsR0FBb0IsSUFBcEI7QUFDSDtBQUNKLEdBbENEOztBQW1DQS9DLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CdXRCLGlDQUFwQixHQUF3RCxVQUFVQyxVQUFWLEVBQXNCO0FBQzFFN0Ysc0JBQWtCLENBQUNwQix1QkFBbkIsQ0FBMkNrSCxpQkFBM0MsQ0FBNkQsSUFBN0QsRUFBbUVELFVBQW5FO0FBQ0gsR0FGRDs7QUFHQWpFLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CMHRCLGFBQXBCLEdBQW9DLFVBQVU3YSxLQUFWLEVBQWlCO0FBQ2pELFFBQUksS0FBSzhWLEdBQVQsRUFBYztBQUNWLFdBQUtBLEdBQUwsQ0FBU2dGLDhDQUFULENBQXdEQyxXQUFXLENBQUNDLHlCQUFaLENBQXNDaGIsS0FBdEMsRUFBNkMsQ0FBN0MsQ0FBeEQsRUFBeUcsQ0FBekcsRUFBNEcsS0FBNUc7QUFDSDtBQUNKLEdBSkQ7O0FBS0EwVyxXQUFTLENBQUN2cEIsU0FBVixDQUFvQnVzQixhQUFwQixHQUFvQyxZQUFZO0FBQzVDLFFBQUksQ0FBQyxLQUFLdUIsd0JBQU4sSUFBa0MsQ0FBQyxLQUFLQyx5QkFBeEMsSUFBcUUsQ0FBQyxLQUFLQyxvQkFBM0UsSUFBbUcsQ0FBQyxLQUFLQyxvQkFBN0csRUFBbUk7QUFDL0hwckIsWUFBTSxDQUFDN0MsU0FBUCxDQUFpQnVzQixhQUFqQixDQUErQi9DLElBQS9CLENBQW9DLElBQXBDO0FBQ0g7QUFDSixHQUpEOztBQUtBRCxXQUFTLENBQUN2cEIsU0FBVixDQUFvQmt1QixPQUFwQixHQUE4QixVQUFVQyxnQkFBVixFQUE0QkMsaUJBQTVCLEVBQStDO0FBQ3pFLFNBQUtELGdCQUFMLEdBQXdCQSxnQkFBeEI7O0FBQ0EsUUFBSUUsT0FBTyxHQUFHLEtBQUtDLHVCQUFMLENBQTZCSCxnQkFBN0IsRUFBK0NDLGlCQUEvQyxDQUFkOztBQUNBdnJCLFVBQU0sQ0FBQzdDLFNBQVAsQ0FBaUJrdUIsT0FBakIsQ0FBeUIxRSxJQUF6QixDQUE4QixJQUE5QixFQUFvQzJFLGdCQUFwQyxFQUFzREMsaUJBQXREOztBQUNBLFFBQUlDLE9BQUosRUFBYTtBQUNULFdBQUsxRixHQUFMLENBQVM4QixVQUFUO0FBQ0g7QUFDSixHQVBEOztBQVFBbEIsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0J1dUIsUUFBcEIsR0FBK0IsVUFBVTljLElBQVYsRUFBZ0JILEdBQWhCLEVBQXFCQyxLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0M7QUFDL0QsUUFBSXFILEtBQUssR0FBRyxJQUFaOztBQUNBaFcsVUFBTSxDQUFDN0MsU0FBUCxDQUFpQnV1QixRQUFqQixDQUEwQi9FLElBQTFCLENBQStCLElBQS9CLEVBQXFDL1gsSUFBckMsRUFBMkNILEdBQTNDLEVBQWdEQyxLQUFoRCxFQUF1REMsTUFBdkQ7O0FBQ0EsU0FBSzJZLGNBQUwsQ0FBb0J0USxPQUFwQixDQUE0QixVQUFVMlUsU0FBVixFQUFxQkMsZUFBckIsRUFBc0M7QUFDOUQsVUFBSW5ELFNBQVMsR0FBR3pTLEtBQUssQ0FBQ2lHLDZCQUF0QjtBQUNBLFVBQUk0UCxVQUFVLEdBQUdwRCxTQUFTLEdBQUcsQ0FBWixHQUFnQkEsU0FBaEIsR0FBNEJ6UyxLQUFLLENBQUM4VCxtQkFBTixDQUEwQjZCLFNBQVMsQ0FBQ0csbUJBQXBDLENBQTdDOztBQUNBLFVBQUlELFVBQUosRUFBZ0I7QUFDWixZQUFJRSxLQUFLLEdBQUdyUixNQUFNLENBQUNnTCxNQUFQLENBQWNzRyxrQkFBZCxDQUFpQ2hXLEtBQUssQ0FBQ3NWLGdCQUF2QyxDQUFaO0FBQ0E1USxjQUFNLENBQUN1UixJQUFQLENBQVlDLFdBQVosQ0FBd0JsVyxLQUF4QixFQUErQjJWLFNBQS9CLEVBQTBDLENBQTFDLEVBQTZDLENBQTdDLEVBQWdESSxLQUFoRCxFQUF1REYsVUFBdkQ7QUFDSDtBQUNKLEtBUEQ7O0FBUUEsU0FBS3pFLElBQUwsQ0FBVXBRLE9BQVYsQ0FBa0IsVUFBVTJVLFNBQVYsRUFBcUJRLGFBQXJCLEVBQW9DO0FBQ2xELFVBQUkxRCxTQUFTLEdBQUd6UyxLQUFLLENBQUNrRyw4QkFBdEI7QUFDQSxVQUFJMlAsVUFBVSxHQUFHcEQsU0FBUyxHQUFHLENBQVosR0FBZ0JBLFNBQWhCLEdBQTRCelMsS0FBSyxDQUFDZ1Usb0JBQU4sQ0FBMkIvckIsUUFBUSxDQUFDLE1BQU0wdEIsU0FBUyxDQUFDRyxtQkFBVixHQUFnQyxDQUF0QyxLQUE0Q0gsU0FBUyxDQUFDUyx3QkFBVixHQUFxQyxDQUFyQyxJQUEwQ3BXLEtBQUssQ0FBQ3lILGFBQU4sS0FBd0IsQ0FBeEIsR0FBNEIsQ0FBdEUsQ0FBNUMsQ0FBRCxDQUFuQyxDQUE3Qzs7QUFDQSxVQUFJb08sVUFBSixFQUFnQjtBQUNaLFlBQUlFLEtBQUssR0FBR3JSLE1BQU0sQ0FBQ2dMLE1BQVAsQ0FBY3NHLGtCQUFkLENBQWlDaFcsS0FBSyxDQUFDc1YsZ0JBQXZDLENBQVo7QUFDQTVRLGNBQU0sQ0FBQ3VSLElBQVAsQ0FBWUMsV0FBWixDQUF3QmxXLEtBQXhCLEVBQStCMlYsU0FBL0IsRUFBMEMsQ0FBMUMsRUFBNkMsQ0FBN0MsRUFBZ0RJLEtBQWhELEVBQXVERixVQUF2RDtBQUNIO0FBQ0osS0FQRDs7QUFRQSxTQUFLdEUsVUFBTCxDQUFnQnZRLE9BQWhCLENBQXdCLFVBQVUyVSxTQUFWLEVBQXFCVSxtQkFBckIsRUFBMEM7QUFDOUQsVUFBSTVELFNBQVMsR0FBR3pTLEtBQUssQ0FBQ2dHLHlCQUF0QjtBQUNBLFVBQUk2UCxVQUFVLEdBQUdwRCxTQUFTLEdBQUcsQ0FBWixHQUFnQkEsU0FBaEIsR0FBNEJ6UyxLQUFLLENBQUM4VCxtQkFBTixDQUEwQjZCLFNBQVMsQ0FBQ0csbUJBQXBDLENBQTdDOztBQUNBLFVBQUlELFVBQUosRUFBZ0I7QUFDWixZQUFJRSxLQUFLLEdBQUdyUixNQUFNLENBQUNnTCxNQUFQLENBQWNzRyxrQkFBZCxDQUFpQ2hXLEtBQUssQ0FBQ3NWLGdCQUF2QyxDQUFaO0FBQ0E1USxjQUFNLENBQUN1UixJQUFQLENBQVlDLFdBQVosQ0FBd0JsVyxLQUF4QixFQUErQjJWLFNBQS9CLEVBQTBDLENBQTFDLEVBQTZDLENBQTdDLEVBQWdESSxLQUFoRCxFQUF1REYsVUFBdkQ7QUFDSDtBQUNKLEtBUEQ7O0FBUUEsU0FBS3JFLFVBQUwsQ0FBZ0J4USxPQUFoQixDQUF3QixVQUFVMlUsU0FBVixFQUFxQlcsbUJBQXJCLEVBQTBDO0FBQzlELFVBQUk3RCxTQUFTLEdBQUd6UyxLQUFLLENBQUNtRyx5QkFBdEI7QUFDQSxVQUFJMFAsVUFBVSxHQUFHcEQsU0FBUyxHQUFHLENBQVosR0FBZ0JBLFNBQWhCLEdBQTRCelMsS0FBSyxDQUFDOFQsbUJBQU4sQ0FBMEI2QixTQUFTLENBQUNHLG1CQUFwQyxDQUE3Qzs7QUFDQSxVQUFJRCxVQUFKLEVBQWdCO0FBQ1osWUFBSUUsS0FBSyxHQUFHclIsTUFBTSxDQUFDZ0wsTUFBUCxDQUFjc0csa0JBQWQsQ0FBaUNoVyxLQUFLLENBQUNzVixnQkFBdkMsQ0FBWjtBQUNBNVEsY0FBTSxDQUFDdVIsSUFBUCxDQUFZQyxXQUFaLENBQXdCbFcsS0FBeEIsRUFBK0IyVixTQUEvQixFQUEwQyxDQUExQyxFQUE2QyxDQUE3QyxFQUFnREksS0FBaEQsRUFBdURGLFVBQXZEO0FBQ0g7QUFDSixLQVBEO0FBUUgsR0FuQ0Q7O0FBb0NBbkYsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0JvdkIsU0FBcEIsR0FBZ0MsVUFBVWpCLGdCQUFWLEVBQTRCQyxpQkFBNUIsRUFBK0M7QUFDM0UsUUFBSXZWLEtBQUssR0FBRyxJQUFaOztBQUNBaFcsVUFBTSxDQUFDN0MsU0FBUCxDQUFpQm92QixTQUFqQixDQUEyQjVGLElBQTNCLENBQWdDLElBQWhDLEVBQXNDMkUsZ0JBQXRDLEVBQXdEQyxpQkFBeEQ7O0FBQ0EsU0FBS25FLElBQUwsQ0FBVXBRLE9BQVYsQ0FBa0IsVUFBVTJVLFNBQVYsRUFBcUJRLGFBQXJCLEVBQW9DO0FBQ2xEelIsWUFBTSxDQUFDdVIsSUFBUCxDQUFZTyxZQUFaLENBQXlCeFcsS0FBekIsRUFBZ0MyVixTQUFoQyxFQUEyQ0EsU0FBUyxDQUFDYyx3QkFBckQsRUFBK0VkLFNBQVMsQ0FBQ2UseUJBQXpGO0FBQ0gsS0FGRDs7QUFHQSxTQUFLcEYsY0FBTCxDQUFvQnRRLE9BQXBCLENBQTRCLFVBQVUyVSxTQUFWLEVBQXFCQyxlQUFyQixFQUFzQztBQUM5RGxSLFlBQU0sQ0FBQ3VSLElBQVAsQ0FBWU8sWUFBWixDQUF5QnhXLEtBQXpCLEVBQWdDMlYsU0FBaEMsRUFBMkNBLFNBQVMsQ0FBQ2Msd0JBQXJELEVBQStFZCxTQUFTLENBQUNlLHlCQUF6RjtBQUNILEtBRkQ7O0FBR0EsU0FBS3JGLGVBQUwsQ0FBcUJyUSxPQUFyQixDQUE2QixVQUFVMlUsU0FBVixFQUFxQlEsYUFBckIsRUFBb0M7QUFDN0R6UixZQUFNLENBQUN1UixJQUFQLENBQVlPLFlBQVosQ0FBeUJ4VyxLQUF6QixFQUFnQzJWLFNBQWhDLEVBQTJDQSxTQUFTLENBQUNjLHdCQUFyRCxFQUErRWQsU0FBUyxDQUFDZSx5QkFBekY7QUFDSCxLQUZEOztBQUdBLFNBQUtuRixVQUFMLENBQWdCdlEsT0FBaEIsQ0FBd0IsVUFBVTJVLFNBQVYsRUFBcUJVLG1CQUFyQixFQUEwQztBQUM5RDNSLFlBQU0sQ0FBQ3VSLElBQVAsQ0FBWU8sWUFBWixDQUF5QnhXLEtBQXpCLEVBQWdDMlYsU0FBaEMsRUFBMkNBLFNBQVMsQ0FBQ2Msd0JBQXJELEVBQStFZCxTQUFTLENBQUNlLHlCQUF6RjtBQUNILEtBRkQ7O0FBR0EsU0FBS2xGLFVBQUwsQ0FBZ0J4USxPQUFoQixDQUF3QixVQUFVMlUsU0FBVixFQUFxQlcsbUJBQXJCLEVBQTBDO0FBQzlENVIsWUFBTSxDQUFDdVIsSUFBUCxDQUFZTyxZQUFaLENBQXlCeFcsS0FBekIsRUFBZ0MyVixTQUFoQyxFQUEyQ0EsU0FBUyxDQUFDYyx3QkFBckQsRUFBK0VkLFNBQVMsQ0FBQ2UseUJBQXpGO0FBQ0gsS0FGRDtBQUdILEdBbEJEOztBQW1CQWhHLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9Cd3ZCLHFCQUFwQixHQUE0QyxVQUFVQyxRQUFWLEVBQW9CeEcsU0FBcEIsRUFBK0I7QUFDdkUsUUFBSXdHLFFBQUosRUFBYztBQUNWLFVBQUluRSxTQUFTLEdBQUcsS0FBS3hNLDZCQUFyQjtBQUNBLFVBQUlzUCxpQkFBaUIsR0FBRzlDLFNBQVMsSUFBSSxDQUFiLEdBQWlCL04sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjQyxlQUFkLENBQThCOEMsU0FBOUIsRUFBeUMvTixNQUFNLENBQUNnTCxNQUFQLENBQWNtSCxPQUF2RCxDQUFqQixHQUFtRnBILFFBQTNHO0FBQ0EsVUFBSXFILFlBQVksR0FBR3BTLE1BQU0sQ0FBQ3VSLElBQVAsQ0FBWU8sWUFBWixDQUF5QixJQUF6QixFQUErQkksUUFBL0IsRUFBeUMsS0FBS3RCLGdCQUE5QyxFQUFnRUMsaUJBQWhFLENBQW5CO0FBQ0EsVUFBSXdCLE1BQU0sR0FBR0QsWUFBWSxDQUFDRSxjQUExQjtBQUNBLFdBQUtqRCxtQkFBTCxDQUF5QjNELFNBQVMsQ0FBQ0MsT0FBbkMsRUFBNEMwRyxNQUE1QztBQUNBLGFBQU9BLE1BQVA7QUFDSDs7QUFDRCxXQUFPLEtBQUtqSCxHQUFMLENBQVNjLDRCQUFoQjtBQUNILEdBVkQ7O0FBV0FGLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9COHZCLGlCQUFwQixHQUF3QyxVQUFVTCxRQUFWLEVBQW9CeEcsU0FBcEIsRUFBK0I7QUFDbkUsUUFBSXdHLFFBQUosRUFBYztBQUNWLFVBQUluRSxTQUFTLEdBQUcsS0FBS3pNLHlCQUFyQjtBQUNBLFVBQUl1UCxpQkFBaUIsR0FBRzlDLFNBQVMsSUFBSSxDQUFiLEdBQWlCL04sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjQyxlQUFkLENBQThCOEMsU0FBOUIsRUFBeUMvTixNQUFNLENBQUNnTCxNQUFQLENBQWNtSCxPQUF2RCxDQUFqQixHQUFtRnBILFFBQTNHO0FBQ0EsVUFBSXFILFlBQVksR0FBR3BTLE1BQU0sQ0FBQ3VSLElBQVAsQ0FBWU8sWUFBWixDQUF5QixJQUF6QixFQUErQkksUUFBL0IsRUFBeUMsS0FBS3RCLGdCQUE5QyxFQUFnRUMsaUJBQWhFLENBQW5CO0FBQ0EsVUFBSXdCLE1BQU0sR0FBR0QsWUFBWSxDQUFDRSxjQUExQjtBQUNBLFdBQUs3QyxlQUFMLENBQXFCL0QsU0FBUyxDQUFDQyxPQUEvQixFQUF3QzBHLE1BQXhDO0FBQ0EsYUFBT0EsTUFBUDtBQUNIOztBQUNELFdBQU8sS0FBS2pILEdBQUwsQ0FBU2dCLHdCQUFoQjtBQUNILEdBVkQ7O0FBV0FKLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CK3ZCLHNCQUFwQixHQUE2QyxVQUFVTixRQUFWLEVBQW9CeEcsU0FBcEIsRUFBK0I7QUFDeEUsUUFBSXdHLFFBQUosRUFBYztBQUNWLFVBQUluRSxTQUFTLEdBQUcsS0FBS3ZNLDhCQUFyQjtBQUNBLFVBQUlxUCxpQkFBaUIsR0FBRzlDLFNBQVMsSUFBSSxDQUFiLEdBQWlCL04sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjQyxlQUFkLENBQThCOEMsU0FBOUIsRUFBeUMvTixNQUFNLENBQUNnTCxNQUFQLENBQWNtSCxPQUF2RCxDQUFqQixHQUFtRnBILFFBQTNHO0FBQ0EsVUFBSXFILFlBQVksR0FBR3BTLE1BQU0sQ0FBQ3VSLElBQVAsQ0FBWU8sWUFBWixDQUF5QixJQUF6QixFQUErQkksUUFBL0IsRUFBeUMsS0FBS3RCLGdCQUE5QyxFQUFnRUMsaUJBQWhFLENBQW5CO0FBQ0EsVUFBSXdCLE1BQU0sR0FBR0QsWUFBWSxDQUFDRSxjQUExQjtBQUNBLFdBQUsvQyxvQkFBTCxDQUEwQmhzQixRQUFRLENBQUMsTUFBTW1vQixTQUFTLENBQUNDLE9BQVYsR0FBb0IsQ0FBMUIsS0FBZ0NELFNBQVMsQ0FBQ0UsR0FBVixHQUFnQixDQUFoQixJQUFxQixLQUFLN0ksYUFBTCxLQUF1QixDQUF2QixHQUEyQixDQUFoRCxDQUFoQyxDQUFELENBQWxDLEVBQXlIc1AsTUFBekg7QUFDQSxhQUFPQSxNQUFQO0FBQ0g7O0FBQ0QsV0FBTyxLQUFLakgsR0FBTCxDQUFTZSw2QkFBaEI7QUFDSCxHQVZEOztBQVdBSCxXQUFTLENBQUN2cEIsU0FBVixDQUFvQmd3QixpQkFBcEIsR0FBd0MsVUFBVVAsUUFBVixFQUFvQnhHLFNBQXBCLEVBQStCO0FBQ25FLFFBQUl3RyxRQUFKLEVBQWM7QUFDVixVQUFJbkUsU0FBUyxHQUFHLEtBQUt0TSx5QkFBckI7QUFDQSxVQUFJb1AsaUJBQWlCLEdBQUc5QyxTQUFTLElBQUksQ0FBYixHQUFpQi9OLE1BQU0sQ0FBQ2dMLE1BQVAsQ0FBY0MsZUFBZCxDQUE4QjhDLFNBQTlCLEVBQXlDL04sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjbUgsT0FBdkQsQ0FBakIsR0FBbUZwSCxRQUEzRztBQUNBLFVBQUlxSCxZQUFZLEdBQUdwUyxNQUFNLENBQUN1UixJQUFQLENBQVlPLFlBQVosQ0FBeUIsSUFBekIsRUFBK0JJLFFBQS9CLEVBQXlDLEtBQUt0QixnQkFBOUMsRUFBZ0VDLGlCQUFoRSxDQUFuQjtBQUNBLFVBQUl3QixNQUFNLEdBQUdELFlBQVksQ0FBQ0UsY0FBMUI7QUFDQSxXQUFLM0MsZUFBTCxDQUFxQmpFLFNBQVMsQ0FBQ0MsT0FBL0IsRUFBd0MwRyxNQUF4QztBQUNBLGFBQU9BLE1BQVA7QUFDSDs7QUFDRCxXQUFPLEtBQUtqSCxHQUFMLENBQVNpQix3QkFBaEI7QUFDSCxHQVZEOztBQVdBTCxXQUFTLENBQUN2cEIsU0FBVixDQUFvQml3QixzQkFBcEIsR0FBNkMsVUFBVUMsSUFBVixFQUFnQmpILFNBQWhCLEVBQTJCO0FBQ3BFaUgsUUFBSSxDQUFDQyxjQUFMLEdBQXNCLENBQXRCO0FBQ0EsUUFBSXpCLFVBQUo7O0FBQ0EsUUFBSTtBQUNBLFdBQUtaLHdCQUFMLEdBQWdDLElBQWhDO0FBQ0EsVUFBSTlFLElBQUksR0FBR2tILElBQUksQ0FBQ2xILElBQWhCOztBQUNBLFVBQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1BBLFlBQUksR0FBRyxLQUFLdEgsc0JBQUwsQ0FBNEJ1SCxTQUFTLENBQUNDLE9BQXRDLEVBQStDekosVUFBL0MsRUFBUDtBQUNIOztBQUNELFVBQUl1RSxJQUFJLEdBQUc7QUFDUDBDLGlCQUFTLEVBQUVpQixrQkFBa0IsQ0FBQ2hKLGFBQW5CLENBQWlDd0Ysc0JBRHJDO0FBRVB2SixjQUFNLEVBQUUsSUFGRDtBQUdQL0gsYUFBSyxFQUFFb1csU0FBUyxDQUFDQyxPQUhWO0FBSVBGLFlBQUksRUFBRUEsSUFKQztBQUtQTCxXQUFHLEVBQUUsSUFMRTtBQU1QUyxlQUFPLEVBQUUxb0I7QUFORixPQUFYO0FBUUEsV0FBSytsQixNQUFMLENBQVl6QyxJQUFaO0FBQ0FnRixVQUFJLEdBQUdoRixJQUFJLENBQUNnRixJQUFMLElBQWEsS0FBS3RHLDRCQUFMLENBQWtDdUcsU0FBUyxDQUFDQyxPQUE1QyxDQUFwQjs7QUFDQSxVQUFJRixJQUFJLFlBQVlqQixzQkFBc0IsQ0FBQ3FJLGtCQUEzQyxFQUErRDtBQUMzRCxZQUFJQyxFQUFFLEdBQUcsSUFBSXJJLGNBQWMsQ0FBQ3NJLFdBQW5CLEVBQVQ7QUFDQUQsVUFBRSxDQUFDRSxRQUFILENBQVl2SCxJQUFaO0FBQ0FBLFlBQUksR0FBR3FILEVBQVA7QUFDSDs7QUFDRCxVQUFJLENBQUNILElBQUksQ0FBQ2xILElBQVYsRUFBZ0I7QUFDWmtILFlBQUksQ0FBQ3BILEtBQUwsR0FBYSxJQUFJK0IsT0FBSixDQUFZN0IsSUFBWixDQUFiO0FBQ0gsT0FGRCxNQUdLLElBQUlrSCxJQUFJLENBQUNsSCxJQUFMLEtBQWNBLElBQWxCLEVBQXdCO0FBQ3pCLGFBQUt3SCwwQkFBTCxDQUFnQ04sSUFBaEM7O0FBQ0FBLFlBQUksQ0FBQ2xILElBQUwsQ0FBVTVCLG1CQUFWLENBQThCcUosbUJBQTlCO0FBQ0FQLFlBQUksQ0FBQ3BILEtBQUwsR0FBYSxJQUFJK0IsT0FBSixDQUFZN0IsSUFBWixDQUFiO0FBQ0g7O0FBQ0QsV0FBS2xHLGtCQUFMLENBQXdCa0csSUFBeEIsRUFBOEJDLFNBQVMsQ0FBQ0MsT0FBeEM7O0FBQ0FGLFVBQUksQ0FBQzJGLG1CQUFMLEdBQTJCMUYsU0FBUyxDQUFDQyxPQUFyQzs7QUFDQSxXQUFLaUIsY0FBTCxDQUFvQm5QLEdBQXBCLENBQXdCa1YsSUFBeEIsRUFBOEJsSCxJQUE5Qjs7QUFDQSxVQUFJQSxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDMEgsTUFBbEIsRUFBMEI7QUFDdEIsYUFBS0MsUUFBTCxDQUFjM0gsSUFBZDs7QUFDQWtILFlBQUksQ0FBQ1UsV0FBTCxDQUFpQkMsVUFBakIsQ0FBNEI3SCxJQUFJLENBQUM1QixtQkFBakM7QUFDSDs7QUFDRHNILGdCQUFVLEdBQUcsS0FBS2MscUJBQUwsQ0FBMkJ4RyxJQUEzQixFQUFpQ0MsU0FBakMsQ0FBYjtBQUNILEtBckNELFNBc0NRO0FBQ0osV0FBSzZFLHdCQUFMLEdBQWdDLEtBQWhDO0FBQ0g7O0FBQ0QsV0FBT1ksVUFBUDtBQUNILEdBN0NEOztBQThDQW5GLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9COHdCLHVCQUFwQixHQUE4QyxVQUFVWixJQUFWLEVBQWdCakgsU0FBaEIsRUFBMkI7QUFDckUsUUFBSXlGLFVBQUo7O0FBQ0EsUUFBSTtBQUNBLFdBQUtYLHlCQUFMLEdBQWlDLElBQWpDO0FBQ0EsVUFBSS9FLElBQUksR0FBR2tILElBQUksQ0FBQ2xILElBQWhCOztBQUNBLFVBQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1BBLFlBQUksR0FBRyxLQUFLbkgsdUJBQUwsQ0FBNkJvSCxTQUFTLENBQUNDLE9BQXZDLEVBQWdERCxTQUFTLENBQUNFLEdBQTFELEVBQStEMUosVUFBL0QsRUFBUDtBQUNIOztBQUNELFVBQUl1RSxJQUFJLEdBQUc7QUFDUDBDLGlCQUFTLEVBQUVpQixrQkFBa0IsQ0FBQ2hKLGFBQW5CLENBQWlDeUYsdUJBRHJDO0FBRVB4SixjQUFNLEVBQUUsSUFGRDtBQUdQL0gsYUFBSyxFQUFFb1csU0FBUyxDQUFDQyxPQUhWO0FBSVBwSCxrQkFBVSxFQUFHbUgsU0FBUyxDQUFDRSxHQUFWLElBQWlCLEtBQUssS0FBSzdJLGFBQUwsS0FBdUIsQ0FBdkIsR0FBMkIsQ0FBaEMsQ0FBakIsQ0FKTjtBQUtQMEksWUFBSSxFQUFFQSxJQUxDO0FBTVBMLFdBQUcsRUFBRSxJQU5FO0FBT1BTLGVBQU8sRUFBRTFvQjtBQVBGLE9BQVg7QUFTQSxXQUFLK2xCLE1BQUwsQ0FBWXpDLElBQVo7QUFDQWdGLFVBQUksR0FBR2hGLElBQUksQ0FBQ2dGLElBQUwsSUFBYSxLQUFLckcsNkJBQUwsQ0FBbUNzRyxTQUFTLENBQUNDLE9BQTdDLEVBQXNERCxTQUFTLENBQUNFLEdBQWhFLENBQXBCOztBQUNBLFVBQUlILElBQUksWUFBWWpCLHNCQUFzQixDQUFDcUksa0JBQTNDLEVBQStEO0FBQzNELFlBQUlDLEVBQUUsR0FBRyxJQUFJckksY0FBYyxDQUFDc0ksV0FBbkIsRUFBVDtBQUNBRCxVQUFFLENBQUNFLFFBQUgsQ0FBWXZILElBQVo7QUFDQUEsWUFBSSxHQUFHcUgsRUFBUDtBQUNIOztBQUNELFVBQUksQ0FBQ0gsSUFBSSxDQUFDbEgsSUFBVixFQUFnQjtBQUNaa0gsWUFBSSxDQUFDcEgsS0FBTCxHQUFhLElBQUkrQixPQUFKLENBQVk3QixJQUFaLENBQWI7QUFDSCxPQUZELE1BR0ssSUFBSWtILElBQUksQ0FBQ2xILElBQUwsS0FBY0EsSUFBbEIsRUFBd0I7QUFDekIsYUFBSytILDJCQUFMLENBQWlDYixJQUFqQzs7QUFDQUEsWUFBSSxDQUFDbEgsSUFBTCxDQUFVNUIsbUJBQVYsQ0FBOEJxSixtQkFBOUI7QUFDQVAsWUFBSSxDQUFDcEgsS0FBTCxHQUFhLElBQUkrQixPQUFKLENBQVk3QixJQUFaLENBQWI7QUFDSDs7QUFDRCxXQUFLakcsbUJBQUwsQ0FBeUJpRyxJQUF6QixFQUErQkMsU0FBUyxDQUFDQyxPQUF6QyxFQUFrREQsU0FBUyxDQUFDRSxHQUE1RDs7QUFDQUgsVUFBSSxDQUFDaUcsd0JBQUwsR0FBZ0NoRyxTQUFTLENBQUNFLEdBQTFDO0FBQ0FILFVBQUksQ0FBQzJGLG1CQUFMLEdBQTJCMUYsU0FBUyxDQUFDQyxPQUFyQzs7QUFDQSxXQUFLZSxJQUFMLENBQVVqUCxHQUFWLENBQWNrVixJQUFkLEVBQW9CbEgsSUFBcEI7O0FBQ0EsVUFBSUEsSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQzBILE1BQWxCLEVBQTBCO0FBQ3RCLGFBQUtDLFFBQUwsQ0FBYzNILElBQWQ7O0FBQ0FrSCxZQUFJLENBQUNVLFdBQUwsQ0FBaUJDLFVBQWpCLENBQTRCN0gsSUFBSSxDQUFDNUIsbUJBQWpDO0FBQ0g7O0FBQ0RzSCxnQkFBVSxHQUFHLEtBQUtxQixzQkFBTCxDQUE0Qi9HLElBQTVCLEVBQWtDQyxTQUFsQyxDQUFiO0FBQ0gsS0F2Q0QsU0F3Q1E7QUFDSixXQUFLOEUseUJBQUwsR0FBaUMsS0FBakM7QUFDSDs7QUFDRCxXQUFPVyxVQUFQO0FBQ0gsR0E5Q0Q7O0FBK0NBbkYsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0JneEIsa0JBQXBCLEdBQXlDLFVBQVVkLElBQVYsRUFBZ0JqSCxTQUFoQixFQUEyQjtBQUNoRSxRQUFJeUYsVUFBSjs7QUFDQSxRQUFJO0FBQ0EsV0FBS1Qsb0JBQUwsR0FBNEIsSUFBNUI7QUFDQSxVQUFJakYsSUFBSSxHQUFHa0gsSUFBSSxDQUFDbEgsSUFBaEI7O0FBQ0EsVUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDUEEsWUFBSSxHQUFHLEtBQUs1SCxrQkFBTCxDQUF3QjZILFNBQVMsQ0FBQ0MsT0FBbEMsRUFBMkN6SixVQUEzQyxFQUFQO0FBQ0g7O0FBQ0QsVUFBSXVFLElBQUksR0FBRztBQUNQMEMsaUJBQVMsRUFBRWlCLGtCQUFrQixDQUFDaEosYUFBbkIsQ0FBaUN1RixrQkFEckM7QUFFUHRKLGNBQU0sRUFBRSxJQUZEO0FBR1AvSCxhQUFLLEVBQUVvVyxTQUFTLENBQUNDLE9BSFY7QUFJUEYsWUFBSSxFQUFFQSxJQUpDO0FBS1BMLFdBQUcsRUFBRSxJQUxFO0FBTVBTLGVBQU8sRUFBRTFvQjtBQU5GLE9BQVg7QUFRQSxXQUFLK2xCLE1BQUwsQ0FBWXpDLElBQVo7QUFDQWdGLFVBQUksR0FBR2hGLElBQUksQ0FBQ2dGLElBQUwsSUFBYSxLQUFLeEcsd0JBQUwsQ0FBOEJ5RyxTQUFTLENBQUNFLEdBQXhDLENBQXBCOztBQUNBLFVBQUlILElBQUksWUFBWWpCLHNCQUFzQixDQUFDcUksa0JBQTNDLEVBQStEO0FBQzNELFlBQUlDLEVBQUUsR0FBRyxJQUFJckksY0FBYyxDQUFDc0ksV0FBbkIsRUFBVDtBQUNBRCxVQUFFLENBQUNFLFFBQUgsQ0FBWXZILElBQVo7QUFDQUEsWUFBSSxHQUFHcUgsRUFBUDtBQUNIOztBQUNELFVBQUksQ0FBQ0gsSUFBSSxDQUFDbEgsSUFBVixFQUFnQjtBQUNaa0gsWUFBSSxDQUFDcEgsS0FBTCxHQUFhLElBQUkrQixPQUFKLENBQVk3QixJQUFaLENBQWI7QUFDSCxPQUZELE1BR0ssSUFBSWtILElBQUksQ0FBQ2xILElBQUwsS0FBY0EsSUFBbEIsRUFBd0I7QUFDekIsYUFBS2lJLHNCQUFMLENBQTRCZixJQUE1Qjs7QUFDQUEsWUFBSSxDQUFDbEgsSUFBTCxDQUFVNUIsbUJBQVYsQ0FBOEJxSixtQkFBOUI7QUFDQVAsWUFBSSxDQUFDcEgsS0FBTCxHQUFhLElBQUkrQixPQUFKLENBQVk3QixJQUFaLENBQWI7QUFDSDs7QUFDRCxXQUFLbEcsa0JBQUwsQ0FBd0JrRyxJQUF4QixFQUE4QkMsU0FBUyxDQUFDQyxPQUF4Qzs7QUFDQUYsVUFBSSxDQUFDaUcsd0JBQUwsR0FBZ0NoRyxTQUFTLENBQUNDLE9BQTFDOztBQUNBLFdBQUtlLElBQUwsQ0FBVWpQLEdBQVYsQ0FBY2tWLElBQWQsRUFBb0JsSCxJQUFwQjs7QUFDQSxVQUFJQSxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDMEgsTUFBbEIsRUFBMEI7QUFDdEIsYUFBS0MsUUFBTCxDQUFjM0gsSUFBZDs7QUFDQWtILFlBQUksQ0FBQ1UsV0FBTCxDQUFpQkMsVUFBakIsQ0FBNEI3SCxJQUFJLENBQUM1QixtQkFBakM7QUFDSDs7QUFDRHNILGdCQUFVLEdBQUcsS0FBS29CLGlCQUFMLENBQXVCOUcsSUFBdkIsRUFBNkJDLFNBQTdCLENBQWI7QUFDSCxLQXJDRCxTQXNDUTtBQUNKLFdBQUtnRixvQkFBTCxHQUE0QixLQUE1QjtBQUNIOztBQUNELFdBQU9TLFVBQVA7QUFDSCxHQTVDRDs7QUE2Q0FuRixXQUFTLENBQUN2cEIsU0FBVixDQUFvQmt4QixrQkFBcEIsR0FBeUMsVUFBVWhCLElBQVYsRUFBZ0JqSCxTQUFoQixFQUEyQjtBQUNoRSxRQUFJeUYsVUFBSjs7QUFDQSxRQUFJO0FBQ0EsV0FBS1Ysb0JBQUwsR0FBNEIsSUFBNUI7QUFDQSxVQUFJaEYsSUFBSSxHQUFHa0gsSUFBSSxDQUFDbEgsSUFBaEI7O0FBQ0EsVUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDUEEsWUFBSSxHQUFHLEtBQUszRyxrQkFBTCxDQUF3QjRHLFNBQVMsQ0FBQ0MsT0FBbEMsRUFBMkN6SixVQUEzQyxFQUFQO0FBQ0g7O0FBQ0QsVUFBSXVFLElBQUksR0FBRztBQUNQMEMsaUJBQVMsRUFBRWlCLGtCQUFrQixDQUFDaEosYUFBbkIsQ0FBaUNzRixrQkFEckM7QUFFUHJKLGNBQU0sRUFBRSxJQUZEO0FBR1AvSCxhQUFLLEVBQUVvVyxTQUFTLENBQUNDLE9BSFY7QUFJUEYsWUFBSSxFQUFFQSxJQUpDO0FBS1BMLFdBQUcsRUFBRSxJQUxFO0FBTVBTLGVBQU8sRUFBRTFvQjtBQU5GLE9BQVg7QUFRQSxXQUFLK2xCLE1BQUwsQ0FBWXpDLElBQVo7QUFDQWdGLFVBQUksR0FBR2hGLElBQUksQ0FBQ2dGLElBQUwsSUFBYSxLQUFLcEcsd0JBQUwsQ0FBOEJxRyxTQUFTLENBQUNDLE9BQXhDLENBQXBCOztBQUNBLFVBQUlGLElBQUksWUFBWWpCLHNCQUFzQixDQUFDcUksa0JBQTNDLEVBQStEO0FBQzNELFlBQUlDLEVBQUUsR0FBRyxJQUFJckksY0FBYyxDQUFDc0ksV0FBbkIsRUFBVDtBQUNBRCxVQUFFLENBQUNFLFFBQUgsQ0FBWXZILElBQVo7QUFDQUEsWUFBSSxHQUFHcUgsRUFBUDtBQUNIOztBQUNELFVBQUksQ0FBQ0gsSUFBSSxDQUFDbEgsSUFBVixFQUFnQjtBQUNaa0gsWUFBSSxDQUFDcEgsS0FBTCxHQUFhLElBQUkrQixPQUFKLENBQVk3QixJQUFaLENBQWI7QUFDSCxPQUZELE1BR0ssSUFBSWtILElBQUksQ0FBQ2xILElBQUwsS0FBY0EsSUFBbEIsRUFBd0I7QUFDekIsYUFBS21JLHNCQUFMLENBQTRCakIsSUFBNUI7O0FBQ0FBLFlBQUksQ0FBQ2xILElBQUwsQ0FBVTVCLG1CQUFWLENBQThCcUosbUJBQTlCO0FBQ0FQLFlBQUksQ0FBQ3BILEtBQUwsR0FBYSxJQUFJK0IsT0FBSixDQUFZN0IsSUFBWixDQUFiO0FBQ0g7O0FBQ0QsV0FBS2hHLGtCQUFMLENBQXdCZ0csSUFBeEIsRUFBOEJDLFNBQVMsQ0FBQ0MsT0FBeEM7O0FBQ0FGLFVBQUksQ0FBQ2lHLHdCQUFMLEdBQWdDaEcsU0FBUyxDQUFDQyxPQUExQzs7QUFDQSxXQUFLZSxJQUFMLENBQVVqUCxHQUFWLENBQWNrVixJQUFkLEVBQW9CbEgsSUFBcEI7O0FBQ0EsVUFBSUEsSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQzBILE1BQWxCLEVBQTBCO0FBQ3RCLGFBQUtDLFFBQUwsQ0FBYzNILElBQWQ7O0FBQ0FrSCxZQUFJLENBQUNVLFdBQUwsQ0FBaUJDLFVBQWpCLENBQTRCN0gsSUFBSSxDQUFDNUIsbUJBQWpDO0FBQ0g7O0FBQ0RzSCxnQkFBVSxHQUFHLEtBQUtzQixpQkFBTCxDQUF1QmhILElBQXZCLEVBQTZCQyxTQUE3QixDQUFiO0FBQ0gsS0FyQ0QsU0FzQ1E7QUFDSixXQUFLK0Usb0JBQUwsR0FBNEIsS0FBNUI7QUFDSDs7QUFDRCxXQUFPVSxVQUFQO0FBQ0gsR0E1Q0Q7O0FBNkNBbkYsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0J3d0IsMEJBQXBCLEdBQWlELFVBQVVZLE1BQVYsRUFBa0I7QUFDL0QsUUFBSXBJLElBQUksR0FBR29JLE1BQU0sQ0FBQ3BJLElBQWxCOztBQUNBLFFBQUksRUFBRUEsSUFBSSxDQUFDMEgsTUFBTCxZQUF1Qm5ILFNBQXpCLENBQUosRUFBeUM7QUFDckMsV0FBSzhILFdBQUwsQ0FBaUJySSxJQUFJLENBQUMwSCxNQUF0QjtBQUNIOztBQUNELFFBQUlZLFNBQVMsR0FBRyxLQUFLeEQsd0JBQXJCO0FBQ0EsU0FBS0Esd0JBQUwsR0FBZ0MsSUFBaEM7O0FBQ0E5RSxRQUFJLENBQUMwSCxNQUFMLENBQVlXLFdBQVosQ0FBd0JySSxJQUF4Qjs7QUFDQUEsUUFBSSxDQUFDMkYsbUJBQUwsR0FBMkJqdUIsU0FBM0I7QUFDQSxTQUFLb3RCLHdCQUFMLEdBQWdDd0QsU0FBaEM7O0FBQ0EsU0FBS25ILGNBQUwsQ0FBb0JvSCxNQUFwQixDQUEyQkgsTUFBM0I7QUFDSCxHQVhEOztBQVlBN0gsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0Ird0IsMkJBQXBCLEdBQWtELFVBQVViLElBQVYsRUFBZ0I7QUFDOUQsUUFBSWxILElBQUksR0FBR2tILElBQUksQ0FBQ2xILElBQWhCOztBQUNBLFFBQUksRUFBRUEsSUFBSSxDQUFDMEgsTUFBTCxZQUF1Qm5ILFNBQXpCLENBQUosRUFBeUM7QUFDckMsV0FBSzhILFdBQUwsQ0FBaUJySSxJQUFJLENBQUMwSCxNQUF0QjtBQUNIOztBQUNELFFBQUlZLFNBQVMsR0FBRyxLQUFLdkQseUJBQXJCO0FBQ0EsU0FBS0EseUJBQUwsR0FBaUMsSUFBakM7O0FBQ0EvRSxRQUFJLENBQUMwSCxNQUFMLENBQVlXLFdBQVosQ0FBd0JySSxJQUF4Qjs7QUFDQUEsUUFBSSxDQUFDaUcsd0JBQUwsR0FBZ0N2dUIsU0FBaEM7QUFDQXNvQixRQUFJLENBQUMyRixtQkFBTCxHQUEyQmp1QixTQUEzQjtBQUNBLFNBQUtxdEIseUJBQUwsR0FBaUN1RCxTQUFqQzs7QUFDQSxTQUFLckgsSUFBTCxDQUFVc0gsTUFBVixDQUFpQnJCLElBQWpCO0FBQ0gsR0FaRDs7QUFhQTNHLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CaXhCLHNCQUFwQixHQUE2QyxVQUFVZixJQUFWLEVBQWdCO0FBQ3pELFFBQUlsSCxJQUFJLEdBQUdrSCxJQUFJLENBQUNsSCxJQUFoQjs7QUFDQSxRQUFJLEVBQUVBLElBQUksQ0FBQzBILE1BQUwsWUFBdUJuSCxTQUF6QixDQUFKLEVBQXlDO0FBQ3JDLFdBQUs4SCxXQUFMLENBQWlCckksSUFBSSxDQUFDMEgsTUFBdEI7QUFDSDs7QUFDRCxRQUFJWSxTQUFTLEdBQUcsS0FBS3JELG9CQUFyQjtBQUNBLFNBQUtBLG9CQUFMLEdBQTRCLElBQTVCOztBQUNBakYsUUFBSSxDQUFDMEgsTUFBTCxDQUFZVyxXQUFaLENBQXdCckksSUFBeEI7O0FBQ0FBLFFBQUksQ0FBQ2lHLHdCQUFMLEdBQWdDdnVCLFNBQWhDO0FBQ0EsU0FBS3V0QixvQkFBTCxHQUE0QnFELFNBQTVCOztBQUNBLFNBQUtsSCxVQUFMLENBQWdCbUgsTUFBaEIsQ0FBdUJyQixJQUF2QjtBQUNILEdBWEQ7O0FBWUEzRyxXQUFTLENBQUN2cEIsU0FBVixDQUFvQm14QixzQkFBcEIsR0FBNkMsVUFBVWpCLElBQVYsRUFBZ0I7QUFDekQsUUFBSWxILElBQUksR0FBR2tILElBQUksQ0FBQ2xILElBQWhCOztBQUNBLFFBQUksRUFBRUEsSUFBSSxDQUFDMEgsTUFBTCxZQUF1Qm5ILFNBQXpCLENBQUosRUFBeUM7QUFDckMsV0FBSzhILFdBQUwsQ0FBaUJySSxJQUFJLENBQUMwSCxNQUF0QjtBQUNIOztBQUNELFFBQUlZLFNBQVMsR0FBRyxLQUFLdEQsb0JBQXJCO0FBQ0EsU0FBS0Esb0JBQUwsR0FBNEIsSUFBNUI7O0FBQ0FoRixRQUFJLENBQUMwSCxNQUFMLENBQVlXLFdBQVosQ0FBd0JySSxJQUF4Qjs7QUFDQUEsUUFBSSxDQUFDaUcsd0JBQUwsR0FBZ0N2dUIsU0FBaEM7QUFDQSxTQUFLc3RCLG9CQUFMLEdBQTRCc0QsU0FBNUI7O0FBQ0EsU0FBS2pILFVBQUwsQ0FBZ0JrSCxNQUFoQixDQUF1QnJCLElBQXZCO0FBQ0gsR0FYRDs7QUFZQS94QixRQUFNLENBQUNDLGNBQVAsQ0FBc0JtckIsU0FBUyxDQUFDdnBCLFNBQWhDLEVBQTJDLGdCQUEzQyxFQUE2RDtBQUN6REMsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPLEtBQUtncUIsSUFBTCxDQUFVMVcsSUFBakI7QUFDSCxLQUh3RDtBQUl6RHJULGNBQVUsRUFBRSxJQUo2QztBQUt6REMsZ0JBQVksRUFBRTtBQUwyQyxHQUE3RDs7QUFPQW9wQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQnd4QixhQUFwQixHQUFvQyxVQUFVQyxRQUFWLEVBQW9CO0FBQ3BELFNBQUt4SCxJQUFMLENBQVVwUSxPQUFWLENBQWtCLFVBQVVtUCxJQUFWLEVBQWdCeEosR0FBaEIsRUFBcUI7QUFDbkNpUyxjQUFRLENBQUN6SSxJQUFELENBQVI7QUFDSCxLQUZEO0FBR0gsR0FKRDs7QUFLQU8sV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0I2bUIsbUJBQXBCLEdBQTBDLFVBQVU2SyxVQUFWLEVBQXNCbEUsVUFBdEIsRUFBa0M7QUFDeEUsUUFBSTNVLEtBQUssR0FBRyxJQUFaOztBQUNBLFFBQUk4WSxhQUFhLEdBQUc3WCxNQUFNLENBQUMsS0FBSzZYLGFBQU4sQ0FBTixLQUErQixNQUFuRDtBQUNBLFFBQUksS0FBSzFGLGNBQVQsRUFDSSxJQUFJdUIsVUFBVSxDQUFDbHNCLFFBQVgsT0FBMEJzZSxLQUFLLENBQUNnUyxJQUFOLENBQVcsS0FBSzNGLGNBQUwsQ0FBb0I0RixJQUFwQixFQUFYLEVBQXVDdndCLFFBQXZDLEVBQTlCLEVBQ0k7O0FBQ1IsUUFBSXF3QixhQUFKLEVBQW1CO0FBQ2ZuRSxnQkFBVSxDQUFDM1QsT0FBWCxDQUFtQixVQUFVaEgsS0FBVixFQUFpQjtBQUNoQyxZQUFJLENBQUNnRyxLQUFLLENBQUNvVCxjQUFOLENBQXFCaHNCLEdBQXJCLENBQXlCNFMsS0FBekIsQ0FBTCxFQUFzQztBQUNsQ2dHLGVBQUssQ0FBQ29ULGNBQU4sQ0FBcUJqUixHQUFyQixDQUF5Qm5JLEtBQXpCLEVBQWdDLElBQWhDOztBQUNBZ0csZUFBSyxDQUFDcVQsU0FBTixDQUFnQjRGLFFBQWhCLENBQXlCamYsS0FBekI7QUFDSDtBQUNKLE9BTEQ7QUFNQSxXQUFLOFYsR0FBTCxDQUFTOEIsVUFBVDtBQUNILEtBUkQsTUFTSztBQUNELFVBQUkrQyxVQUFVLENBQUN6dUIsTUFBWCxHQUFvQixDQUF4QixFQUEyQjtBQUN2QixZQUFJb1QsT0FBTyxHQUFHcWIsVUFBVSxDQUFDenVCLE1BQVgsR0FBb0IsQ0FBbEM7QUFDQSxZQUFJeXJCLFFBQVEsR0FBRyxDQUFDclksT0FBRCxDQUFmOztBQUNBLGFBQUs4WixjQUFMLENBQW9COEYsS0FBcEI7O0FBQ0EsYUFBSzdGLFNBQUwsQ0FBZWtCLGdCQUFmOztBQUNBLFlBQUksQ0FBQyxLQUFLbkIsY0FBTCxDQUFvQmhzQixHQUFwQixDQUF3QmtTLE9BQXhCLENBQUwsRUFBdUM7QUFDbkMsZUFBSzhaLGNBQUwsQ0FBb0JqUixHQUFwQixDQUF3QjdJLE9BQXhCLEVBQWlDLElBQWpDOztBQUNBLGVBQUsrWixTQUFMLENBQWU0RixRQUFmLENBQXdCM2YsT0FBeEI7O0FBQ0EsZUFBS3dXLEdBQUwsQ0FBUzhCLFVBQVQ7QUFDSDtBQUNKO0FBQ0o7QUFDSixHQTVCRDs7QUE2QkFsQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQmd5QixTQUFwQixHQUFnQyxZQUFZO0FBQ3hDLFFBQUlqekIsTUFBTSxHQUFHLEtBQUtpZixLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXamYsTUFBeEIsR0FBaUMsQ0FBOUM7QUFDQSxRQUFJNHlCLGFBQWEsR0FBRzdYLE1BQU0sQ0FBQyxLQUFLNlgsYUFBTixDQUFOLEtBQStCLE1BQW5EOztBQUNBLFFBQUksQ0FBQ0EsYUFBTCxFQUFvQjtBQUNoQixXQUFLMUYsY0FBTCxDQUFvQjhGLEtBQXBCOztBQUNBLFdBQUs3RixTQUFMLENBQWVrQixnQkFBZjs7QUFDQSxXQUFLbkIsY0FBTCxDQUFvQmpSLEdBQXBCLENBQXdCamMsTUFBTSxHQUFHLENBQWpDLEVBQW9DLElBQXBDOztBQUNBLFdBQUttdEIsU0FBTCxDQUFlNEYsUUFBZixDQUF3Qi95QixNQUFNLEdBQUcsQ0FBakM7O0FBQ0EsV0FBSzRwQixHQUFMLENBQVM4QixVQUFUO0FBQ0E7QUFDSDs7QUFDRCxTQUFLLElBQUk5USxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNWEsTUFBcEIsRUFBNEI0YSxDQUFDLEVBQTdCLEVBQWlDO0FBQzdCLFdBQUtzUyxjQUFMLENBQW9CalIsR0FBcEIsQ0FBd0JyQixDQUF4QixFQUEyQixJQUEzQjs7QUFDQSxXQUFLdVMsU0FBTCxDQUFlNEYsUUFBZixDQUF3QixDQUF4QjtBQUNIOztBQUNELFNBQUtuSixHQUFMLENBQVM4QixVQUFUO0FBQ0gsR0FoQkQ7O0FBaUJBbEIsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0JpeUIsV0FBcEIsR0FBa0MsWUFBWTtBQUMxQyxTQUFLaEcsY0FBTCxDQUFvQjhGLEtBQXBCOztBQUNBLFNBQUs3RixTQUFMLENBQWVrQixnQkFBZjs7QUFDQSxTQUFLekUsR0FBTCxDQUFTOEIsVUFBVDtBQUNILEdBSkQ7O0FBS0FsQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQmt5QixZQUFwQixHQUFtQyxVQUFVcmYsS0FBVixFQUFpQjtBQUNoRCxRQUFJLEtBQUtvWixjQUFMLENBQW9CcGQsR0FBcEIsQ0FBd0JnRSxLQUF4QixDQUFKLEVBQW9DO0FBQ2hDLFdBQUtvWixjQUFMLENBQW9Cc0YsTUFBcEIsQ0FBMkIxZSxLQUEzQjs7QUFDQSxXQUFLcVosU0FBTCxDQUFlaUcsV0FBZixDQUEyQnRmLEtBQTNCOztBQUNBLFdBQUs4VixHQUFMLENBQVM4QixVQUFUO0FBQ0g7QUFDSixHQU5EOztBQU9BbEIsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0JveUIsVUFBcEIsR0FBaUMsVUFBVXZmLEtBQVYsRUFBaUI7QUFDOUMsUUFBSWdHLEtBQUssR0FBRyxJQUFaOztBQUNBLFFBQUl3WixhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVV4ZixLQUFWLEVBQWlCO0FBQ2pDLFVBQUlxVyxPQUFPLEdBQUdpRCxpQkFBaUIsQ0FBQ2pwQixLQUFsQixHQUEwQm92QixhQUExQixDQUF3Q3pmLEtBQXhDLENBQWQ7O0FBQ0FnRyxXQUFLLENBQUM4UCxHQUFOLENBQVU0Siw4QkFBVixDQUF5Q3JKLE9BQXpDLEVBQWtELEdBQWxEO0FBQ0gsS0FIRDs7QUFJQSxRQUFJc0osYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVM2YsS0FBVixFQUFpQjtBQUNqQyxVQUFJcVcsT0FBTyxHQUFHaUQsaUJBQWlCLENBQUNqcEIsS0FBbEIsR0FBMEJvdkIsYUFBMUIsQ0FBd0N6ZixLQUF4QyxDQUFkOztBQUNBZ0csV0FBSyxDQUFDOFAsR0FBTixDQUFVNEosOEJBQVYsQ0FBeUNySixPQUF6QyxFQUFrRCxDQUFsRDtBQUNILEtBSEQ7O0FBSUEsUUFBSXlJLGFBQWEsR0FBRzdYLE1BQU0sQ0FBQyxLQUFLNlgsYUFBTixDQUFOLEtBQStCLE1BQW5EOztBQUNBLFFBQUlBLGFBQUosRUFBbUI7QUFDZixVQUFJLENBQUMsS0FBSzFGLGNBQUwsQ0FBb0Joc0IsR0FBcEIsQ0FBd0I0UyxLQUF4QixDQUFMLEVBQXFDO0FBQ2pDLGFBQUs0ZixZQUFMLENBQWtCNWYsS0FBbEI7O0FBQ0EsYUFBS29aLGNBQUwsQ0FBb0JqUixHQUFwQixDQUF3Qm5JLEtBQXhCLEVBQStCLElBQS9COztBQUNBLGFBQUtxWixTQUFMLENBQWU0RixRQUFmLENBQXdCamYsS0FBeEI7QUFDSCxPQUpELE1BS0s7QUFDRCxhQUFLb1osY0FBTCxDQUFvQnNGLE1BQXBCLENBQTJCMWUsS0FBM0I7O0FBQ0EsYUFBS3FaLFNBQUwsQ0FBZWlHLFdBQWYsQ0FBMkJ0ZixLQUEzQjs7QUFDQSxhQUFLNmYsYUFBTCxDQUFtQjdmLEtBQW5CO0FBQ0g7O0FBQ0R3ZixtQkFBYSxDQUFDeGYsS0FBRCxDQUFiOztBQUNBLFdBQUswYSxpQ0FBTCxDQUF1QzNOLEtBQUssQ0FBQ2dTLElBQU4sQ0FBVyxLQUFLM0YsY0FBTCxDQUFvQjRGLElBQXBCLEVBQVgsQ0FBdkM7QUFDSCxLQWJELE1BY0s7QUFDRCxVQUFJLEtBQUs1RixjQUFMLENBQW9CcGQsR0FBcEIsQ0FBd0JnRSxLQUF4QixDQUFKLEVBQW9DO0FBQ2hDLGFBQUtvWixjQUFMLENBQW9Cc0YsTUFBcEIsQ0FBMkIxZSxLQUEzQjs7QUFDQSxhQUFLcVosU0FBTCxDQUFlaUcsV0FBZixDQUEyQnRmLEtBQTNCOztBQUNBLGFBQUs2ZixhQUFMLENBQW1CN2YsS0FBbkI7QUFDQXdmLHFCQUFhLENBQUN4ZixLQUFELENBQWI7QUFDSCxPQUxELE1BTUssSUFBSSxLQUFLb1osY0FBTCxDQUFvQjFZLElBQXBCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ25DLFlBQUlvZixHQUFHLEdBQUcsS0FBSzFHLGNBQUwsQ0FBb0I0RixJQUFwQixHQUEyQmUsSUFBM0IsR0FBa0N0MEIsS0FBNUM7O0FBQ0EsYUFBSzJ0QixjQUFMLENBQW9Cc0YsTUFBcEIsQ0FBMkJvQixHQUEzQjs7QUFDQSxhQUFLekcsU0FBTCxDQUFlaUcsV0FBZixDQUEyQlEsR0FBM0I7O0FBQ0FOLHFCQUFhLENBQUNNLEdBQUQsQ0FBYjtBQUNBLGFBQUtELGFBQUwsQ0FBbUJDLEdBQW5COztBQUNBLGFBQUsxRyxjQUFMLENBQW9CalIsR0FBcEIsQ0FBd0JuSSxLQUF4QixFQUErQixJQUEvQjs7QUFDQSxhQUFLcVosU0FBTCxDQUFlNEYsUUFBZixDQUF3QmpmLEtBQXhCOztBQUNBd2YscUJBQWEsQ0FBQ3hmLEtBQUQsQ0FBYjtBQUNBLGFBQUs0ZixZQUFMLENBQWtCNWYsS0FBbEI7QUFDSCxPQVZJLE1BV0E7QUFDRCxhQUFLb1osY0FBTCxDQUFvQmpSLEdBQXBCLENBQXdCbkksS0FBeEIsRUFBK0IsSUFBL0I7O0FBQ0EsYUFBS3FaLFNBQUwsQ0FBZTRGLFFBQWYsQ0FBd0JqZixLQUF4Qjs7QUFDQSxhQUFLNGYsWUFBTCxDQUFrQjVmLEtBQWxCO0FBQ0F3ZixxQkFBYSxDQUFDeGYsS0FBRCxDQUFiO0FBQ0g7O0FBQ0QsV0FBSzBhLGlDQUFMLENBQXVDM04sS0FBSyxDQUFDZ1MsSUFBTixDQUFXLEtBQUszRixjQUFMLENBQW9CNEYsSUFBcEIsRUFBWCxDQUF2QztBQUNIO0FBQ0osR0FuREQ7O0FBb0RBdEksV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0I2eUIsY0FBcEIsR0FBcUMsVUFBVWhnQixLQUFWLEVBQWlCO0FBQ2xELFFBQUksS0FBS29aLGNBQUwsQ0FBb0JwZCxHQUFwQixDQUF3QmdFLEtBQXhCLENBQUosRUFBb0M7QUFDaEMsYUFBTyxLQUFLb1osY0FBTCxDQUFvQmhzQixHQUFwQixDQUF3QjRTLEtBQXhCLENBQVA7QUFDSDs7QUFDRCxXQUFPLEtBQVA7QUFDSCxHQUxEOztBQU1BMFcsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0J5eUIsWUFBcEIsR0FBbUMsVUFBVTVmLEtBQVYsRUFBaUI7QUFDaEQsU0FBSzRULE1BQUwsQ0FBWTtBQUNSQyxlQUFTLEVBQUUsY0FESDtBQUVSOUwsWUFBTSxFQUFFNkMsWUFBWSxDQUFDcVYsVUFBYixDQUF3QjtBQUM1QngwQixhQUFLLEVBQUV1VTtBQURxQixPQUF4QjtBQUZBLEtBQVo7QUFNSCxHQVBEOztBQVFBMFcsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IweUIsYUFBcEIsR0FBb0MsVUFBVTdmLEtBQVYsRUFBaUI7QUFDakQsU0FBSzRULE1BQUwsQ0FBWTtBQUNSQyxlQUFTLEVBQUUsZUFESDtBQUVSOUwsWUFBTSxFQUFFNkMsWUFBWSxDQUFDcVYsVUFBYixDQUF3QjtBQUM1QngwQixhQUFLLEVBQUV1VTtBQURxQixPQUF4QjtBQUZBLEtBQVo7QUFNSCxHQVBEOztBQVFBMFcsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0JpakIsaUNBQXBCLEdBQXdELFVBQVVDLFFBQVYsRUFBb0JDLFFBQXBCLEVBQThCO0FBQ2xGLFFBQUk3a0IsS0FBSyxHQUFHaWYsTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0MsS0FBS2xVLHlCQUE3QyxDQUFaO0FBQ0EsUUFBSWtLLFVBQVUsR0FBRyxLQUFLSixHQUF0Qjs7QUFDQSxRQUFJcnFCLEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDWHlxQixnQkFBVSxDQUFDaUssbUJBQVgsR0FBaUN6SCw2QkFBakM7QUFDQXhDLGdCQUFVLENBQUNrSyw0QkFBWCxHQUEwQzVLLGNBQTFDO0FBQ0EsV0FBS3lELFNBQUwsR0FBaUJDLHVCQUF1QixDQUFDbkIsYUFBeEIsQ0FBc0MsSUFBSUMsT0FBSixDQUFZLElBQVosQ0FBdEMsQ0FBakI7QUFDSCxLQUpELE1BS0s7QUFDRDlCLGdCQUFVLENBQUNpSyxtQkFBWCxHQUFpQzEwQixLQUFqQztBQUNBeXFCLGdCQUFVLENBQUNrSyw0QkFBWCxHQUEwQzMwQixLQUExQztBQUNBLFdBQUt3dEIsU0FBTCxHQUFpQm9ILGdDQUFnQyxDQUFDdEksYUFBakMsQ0FBK0MsSUFBSUMsT0FBSixDQUFZLElBQVosQ0FBL0MsQ0FBakI7QUFDSDs7QUFDRCxRQUFJLEtBQUt5QyxRQUFULEVBQW1CO0FBQ2Z2RSxnQkFBVSxDQUFDMEQsUUFBWCxHQUFzQixLQUFLWCxTQUEzQjtBQUNIOztBQUNEanBCLFVBQU0sQ0FBQzdDLFNBQVAsQ0FBaUJxakIscUNBQWpCLENBQXVEbUcsSUFBdkQsQ0FBNEQsSUFBNUQsRUFBa0V0RyxRQUFsRSxFQUE0RUMsUUFBNUU7QUFDSCxHQWpCRDs7QUFrQkFvRyxXQUFTLENBQUN2cEIsU0FBVixDQUFvQnFqQixxQ0FBcEIsR0FBNEQsVUFBVUgsUUFBVixFQUFvQkMsUUFBcEIsRUFBOEI7QUFDdEYsUUFBSTdrQixLQUFLLEdBQUdpZixNQUFNLENBQUNnTCxNQUFQLENBQWN3Syx5QkFBZCxDQUF3QyxLQUFLalUsNkJBQTdDLENBQVo7QUFDQSxRQUFJaUssVUFBVSxHQUFHLEtBQUtKLEdBQXRCOztBQUNBLFFBQUlycUIsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNYeXFCLGdCQUFVLENBQUNpSyxtQkFBWCxHQUFpQ3pILDZCQUFqQztBQUNBeEMsZ0JBQVUsQ0FBQ2tLLDRCQUFYLEdBQTBDNUssY0FBMUM7QUFDQSxXQUFLeUQsU0FBTCxHQUFpQkMsdUJBQXVCLENBQUNuQixhQUF4QixDQUFzQyxJQUFJQyxPQUFKLENBQVksSUFBWixDQUF0QyxDQUFqQjtBQUNILEtBSkQsTUFLSztBQUNEOUIsZ0JBQVUsQ0FBQ2lLLG1CQUFYLEdBQWlDMTBCLEtBQWpDO0FBQ0F5cUIsZ0JBQVUsQ0FBQ2tLLDRCQUFYLEdBQTBDMzBCLEtBQTFDO0FBQ0EsV0FBS3d0QixTQUFMLEdBQWlCb0gsZ0NBQWdDLENBQUN0SSxhQUFqQyxDQUErQyxJQUFJQyxPQUFKLENBQVksSUFBWixDQUEvQyxDQUFqQjtBQUNIOztBQUNELFFBQUksS0FBS3lDLFFBQVQsRUFBbUI7QUFDZnZFLGdCQUFVLENBQUMwRCxRQUFYLEdBQXNCLEtBQUtYLFNBQTNCO0FBQ0g7O0FBQ0RqcEIsVUFBTSxDQUFDN0MsU0FBUCxDQUFpQnFqQixxQ0FBakIsQ0FBdURtRyxJQUF2RCxDQUE0RCxJQUE1RCxFQUFrRXRHLFFBQWxFLEVBQTRFQyxRQUE1RTtBQUNILEdBakJEOztBQWtCQW9HLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9Cc2pCLHNDQUFwQixHQUE2RCxVQUFVSixRQUFWLEVBQW9CQyxRQUFwQixFQUE4QjtBQUN2RixRQUFJN2tCLEtBQUssR0FBR2lmLE1BQU0sQ0FBQ2dMLE1BQVAsQ0FBY3dLLHlCQUFkLENBQXdDLEtBQUtoVSw4QkFBN0MsQ0FBWjtBQUNBLFFBQUlnSyxVQUFVLEdBQUcsS0FBS0osR0FBdEI7O0FBQ0EsUUFBSXJxQixLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ1h5cUIsZ0JBQVUsQ0FBQ3VDLFNBQVgsR0FBdUJDLDZCQUF2QjtBQUNBeEMsZ0JBQVUsQ0FBQ3NDLGtCQUFYLEdBQWdDaEQsY0FBaEM7QUFDQSxXQUFLeUQsU0FBTCxHQUFpQkMsdUJBQXVCLENBQUNuQixhQUF4QixDQUFzQyxJQUFJQyxPQUFKLENBQVksSUFBWixDQUF0QyxDQUFqQjtBQUNILEtBSkQsTUFLSztBQUNEOUIsZ0JBQVUsQ0FBQ3VDLFNBQVgsR0FBdUJodEIsS0FBdkI7QUFDQXlxQixnQkFBVSxDQUFDc0Msa0JBQVgsR0FBZ0Mvc0IsS0FBaEM7QUFDQSxXQUFLd3RCLFNBQUwsR0FBaUJvSCxnQ0FBZ0MsQ0FBQ3RJLGFBQWpDLENBQStDLElBQUlDLE9BQUosQ0FBWSxJQUFaLENBQS9DLENBQWpCO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLeUMsUUFBVCxFQUFtQjtBQUNmdkUsZ0JBQVUsQ0FBQzBELFFBQVgsR0FBc0IsS0FBS1gsU0FBM0I7QUFDSDs7QUFDRGpwQixVQUFNLENBQUM3QyxTQUFQLENBQWlCc2pCLHNDQUFqQixDQUF3RGtHLElBQXhELENBQTZELElBQTdELEVBQW1FdEcsUUFBbkUsRUFBNkVDLFFBQTdFO0FBQ0gsR0FqQkQ7O0FBa0JBb0csV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0J1akIsaUNBQXBCLEdBQXdELFVBQVVMLFFBQVYsRUFBb0JDLFFBQXBCLEVBQThCO0FBQ2xGLFFBQUk3a0IsS0FBSyxHQUFHaWYsTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0MsS0FBSy9ULHlCQUE3QyxDQUFaO0FBQ0EsUUFBSStKLFVBQVUsR0FBRyxLQUFLSixHQUF0Qjs7QUFDQSxRQUFJcnFCLEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDWHlxQixnQkFBVSxDQUFDaUssbUJBQVgsR0FBaUN6SCw2QkFBakM7QUFDQXhDLGdCQUFVLENBQUNrSyw0QkFBWCxHQUEwQzVLLGNBQTFDO0FBQ0EsV0FBS3lELFNBQUwsR0FBaUJDLHVCQUF1QixDQUFDbkIsYUFBeEIsQ0FBc0MsSUFBSUMsT0FBSixDQUFZLElBQVosQ0FBdEMsQ0FBakI7QUFDSCxLQUpELE1BS0s7QUFDRDlCLGdCQUFVLENBQUNpSyxtQkFBWCxHQUFpQzEwQixLQUFqQztBQUNBeXFCLGdCQUFVLENBQUNrSyw0QkFBWCxHQUEwQzMwQixLQUExQztBQUNBLFdBQUt3dEIsU0FBTCxHQUFpQm9ILGdDQUFnQyxDQUFDdEksYUFBakMsQ0FBK0MsSUFBSUMsT0FBSixDQUFZLElBQVosQ0FBL0MsQ0FBakI7QUFDSDs7QUFDRCxRQUFJLEtBQUt5QyxRQUFULEVBQW1CO0FBQ2Z2RSxnQkFBVSxDQUFDMEQsUUFBWCxHQUFzQixLQUFLWCxTQUEzQjtBQUNIOztBQUNEanBCLFVBQU0sQ0FBQzdDLFNBQVAsQ0FBaUJxakIscUNBQWpCLENBQXVEbUcsSUFBdkQsQ0FBNEQsSUFBNUQsRUFBa0V0RyxRQUFsRSxFQUE0RUMsUUFBNUU7QUFDSCxHQWpCRDs7QUFrQkFvRyxXQUFTLENBQUN2cEIsU0FBVixDQUFvQjJuQixrQkFBa0IsQ0FBQy9CLDJCQUFuQixDQUErQ3VOLFVBQW5FLElBQWlGLFlBQVk7QUFDekYsV0FBTyxJQUFQO0FBQ0gsR0FGRDs7QUFHQTVKLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CMm5CLGtCQUFrQixDQUFDL0IsMkJBQW5CLENBQStDd04sU0FBbkUsSUFBZ0YsVUFBVTkwQixLQUFWLEVBQWlCO0FBQzdGLFNBQUt5aEIsNEJBQUwsR0FBb0MsSUFBSUgsS0FBSixDQUFVLEtBQUtFLDBCQUFmLENBQXBDOztBQUNBLFFBQUl4aEIsS0FBSixFQUFXO0FBQ1AsV0FBSyxJQUFJcWIsQ0FBQyxHQUFHLENBQVIsRUFBVzhILFFBQVEsR0FBR25qQixLQUFLLENBQUNTLE1BQWpDLEVBQXlDNGEsQ0FBQyxHQUFHOEgsUUFBN0MsRUFBdUQ5SCxDQUFDLEVBQXhELEVBQTREO0FBQ3hELGFBQUtnUCxHQUFMLENBQVNvQyxtQ0FBVCxDQUE2Q0MsdUJBQXVCLENBQUNDLEtBQXhCLEVBQTdDLEVBQThFLGlCQUFpQjNzQixLQUFLLENBQUNxYixDQUFELENBQUwsQ0FBUzZGLEdBQXhHO0FBQ0g7O0FBQ0QsV0FBS08sNEJBQUwsR0FBb0MsS0FBS0EsNEJBQUwsQ0FBa0NoRCxNQUFsQyxDQUF5Q3plLEtBQXpDLENBQXBDO0FBQ0g7O0FBQ0QsU0FBSzhrQixPQUFMO0FBQ0gsR0FURDs7QUFVQW1HLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CMm5CLGtCQUFrQixDQUFDN0IsNEJBQW5CLENBQWdEcU4sVUFBcEUsSUFBa0YsWUFBWTtBQUMxRixXQUFPLElBQVA7QUFDSCxHQUZEOztBQUdBNUosV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUM3Qiw0QkFBbkIsQ0FBZ0RzTixTQUFwRSxJQUFpRixVQUFVOTBCLEtBQVYsRUFBaUI7QUFDOUYsU0FBSzRoQiw2QkFBTCxHQUFxQyxJQUFJTixLQUFKLENBQVUsS0FBS0ssMkJBQWYsQ0FBckM7O0FBQ0EsUUFBSTNoQixLQUFKLEVBQVc7QUFDUCxXQUFLLElBQUlxYixDQUFDLEdBQUcsQ0FBUixFQUFXaUksUUFBUSxHQUFHdGpCLEtBQUssQ0FBQ1MsTUFBakMsRUFBeUM0YSxDQUFDLEdBQUdpSSxRQUE3QyxFQUF1RGpJLENBQUMsRUFBeEQsRUFBNEQ7QUFDeEQsYUFBS2dQLEdBQUwsQ0FBU29DLG1DQUFULENBQTZDRyx3QkFBd0IsQ0FBQ0QsS0FBekIsRUFBN0MsRUFBK0Usa0JBQWtCM3NCLEtBQUssQ0FBQ3FiLENBQUQsQ0FBTCxDQUFTNkYsR0FBMUc7QUFDSDs7QUFDRCxXQUFLVSw2QkFBTCxHQUFxQyxLQUFLQSw2QkFBTCxDQUFtQ25ELE1BQW5DLENBQTBDemUsS0FBMUMsQ0FBckM7QUFDSDs7QUFDRCxTQUFLOGtCLE9BQUw7QUFDSCxHQVREOztBQVVBbUcsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUMzQix1QkFBbkIsQ0FBMkNtTixVQUEvRCxJQUE2RSxZQUFZO0FBQ3JGLFdBQU8sSUFBUDtBQUNILEdBRkQ7O0FBR0E1SixXQUFTLENBQUN2cEIsU0FBVixDQUFvQjJuQixrQkFBa0IsQ0FBQzNCLHVCQUFuQixDQUEyQ29OLFNBQS9ELElBQTRFLFVBQVU5MEIsS0FBVixFQUFpQjtBQUN6RixTQUFLK2hCLHdCQUFMLEdBQWdDLElBQUlULEtBQUosQ0FBVSxLQUFLUSxzQkFBZixDQUFoQzs7QUFDQSxRQUFJOWhCLEtBQUosRUFBVztBQUNQLFdBQUssSUFBSXFiLENBQUMsR0FBRyxDQUFSLEVBQVd5SSxRQUFRLEdBQUc5akIsS0FBSyxDQUFDUyxNQUFqQyxFQUF5QzRhLENBQUMsR0FBR3lJLFFBQTdDLEVBQXVEekksQ0FBQyxFQUF4RCxFQUE0RDtBQUN4RCxhQUFLZ1AsR0FBTCxDQUFTb0MsbUNBQVQsQ0FBNkNLLG1CQUFtQixDQUFDSCxLQUFwQixFQUE3QyxFQUEwRSxZQUFZM3NCLEtBQUssQ0FBQ3FiLENBQUQsQ0FBTCxDQUFTNkYsR0FBL0Y7QUFDSDs7QUFDRCxXQUFLYSx3QkFBTCxHQUFnQyxLQUFLQSx3QkFBTCxDQUE4QnRELE1BQTlCLENBQXFDemUsS0FBckMsQ0FBaEM7QUFDSDs7QUFDRCxTQUFLOGtCLE9BQUw7QUFDSCxHQVREOztBQVVBbUcsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUNsQyx1QkFBbkIsQ0FBMkMwTixVQUEvRCxJQUE2RSxZQUFZO0FBQ3JGLFdBQU8sSUFBUDtBQUNILEdBRkQ7O0FBR0E1SixXQUFTLENBQUN2cEIsU0FBVixDQUFvQjJuQixrQkFBa0IsQ0FBQ2xDLHVCQUFuQixDQUEyQzJOLFNBQS9ELElBQTRFLFVBQVU5MEIsS0FBVixFQUFpQjtBQUN6RixTQUFLcWhCLHdCQUFMLEdBQWdDLElBQUlDLEtBQUosQ0FBVSxLQUFLTCxzQkFBZixDQUFoQzs7QUFDQSxRQUFJamhCLEtBQUosRUFBVztBQUNQLFdBQUssSUFBSXFiLENBQUMsR0FBRyxDQUFSLEVBQVc0SSxRQUFRLEdBQUdqa0IsS0FBSyxDQUFDUyxNQUFqQyxFQUF5QzRhLENBQUMsR0FBRzRJLFFBQTdDLEVBQXVENUksQ0FBQyxFQUF4RCxFQUE0RDtBQUN4RCxhQUFLZ1AsR0FBTCxDQUFTb0MsbUNBQVQsQ0FBNkNJLG1CQUFtQixDQUFDRixLQUFwQixFQUE3QyxFQUEwRSxZQUFZM3NCLEtBQUssQ0FBQ3FiLENBQUQsQ0FBTCxDQUFTNkYsR0FBL0Y7QUFDSDs7QUFDRCxXQUFLRyx3QkFBTCxHQUFnQyxLQUFLQSx3QkFBTCxDQUE4QjVDLE1BQTlCLENBQXFDemUsS0FBckMsQ0FBaEM7QUFDSDs7QUFDRCxTQUFLOGtCLE9BQUw7QUFDSCxHQVREOztBQVVBbUcsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUNKLG1DQUFuQixDQUF1RDRMLFVBQTNFLElBQXlGLFlBQVk7QUFDakcsV0FBTzlLLGNBQVA7QUFDSCxHQUZEOztBQUdBa0IsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUNKLG1DQUFuQixDQUF1RDZMLFNBQTNFLElBQXdGLFVBQVU5MEIsS0FBVixFQUFpQjtBQUNyRyxRQUFJeXFCLFVBQVUsR0FBRyxLQUFLSixHQUF0QjtBQUNBLFFBQUkwSyxlQUFlLEdBQUc5VixNQUFNLENBQUMySixNQUFQLENBQWNHLGNBQWQsQ0FBNkIvb0IsS0FBN0IsRUFBb0MsQ0FBcEMsQ0FBdEI7QUFDQXlxQixjQUFVLENBQUNZLHdCQUFYLEdBQXNDMEosZUFBZSxHQUFHLENBQWxCLEdBQXNCaEwsY0FBdEIsR0FBdUNnTCxlQUE3RTtBQUNILEdBSkQ7O0FBS0E5SixXQUFTLENBQUN2cEIsU0FBVixDQUFvQjJuQixrQkFBa0IsQ0FBQ0gsdUNBQW5CLENBQTJEMkwsVUFBL0UsSUFBNkYsWUFBWTtBQUNyRyxXQUFPOUssY0FBUDtBQUNILEdBRkQ7O0FBR0FrQixXQUFTLENBQUN2cEIsU0FBVixDQUFvQjJuQixrQkFBa0IsQ0FBQ0gsdUNBQW5CLENBQTJENEwsU0FBL0UsSUFBNEYsVUFBVTkwQixLQUFWLEVBQWlCO0FBQ3pHLFFBQUl5cUIsVUFBVSxHQUFHLEtBQUtKLEdBQXRCO0FBQ0EsUUFBSTBLLGVBQWUsR0FBRzlWLE1BQU0sQ0FBQzJKLE1BQVAsQ0FBY0csY0FBZCxDQUE2Qi9vQixLQUE3QixFQUFvQyxDQUFwQyxDQUF0QjtBQUNBeXFCLGNBQVUsQ0FBQ1UsNEJBQVgsR0FBMEM0SixlQUFlLEdBQUcsQ0FBbEIsR0FBc0JoTCxjQUF0QixHQUF1Q2dMLGVBQWpGO0FBQ0gsR0FKRDs7QUFLQTlKLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CMm5CLGtCQUFrQixDQUFDRix3Q0FBbkIsQ0FBNEQwTCxVQUFoRixJQUE4RixZQUFZO0FBQ3RHLFdBQU85SyxjQUFQO0FBQ0gsR0FGRDs7QUFHQWtCLFdBQVMsQ0FBQ3ZwQixTQUFWLENBQW9CMm5CLGtCQUFrQixDQUFDRix3Q0FBbkIsQ0FBNEQyTCxTQUFoRixJQUE2RixVQUFVOTBCLEtBQVYsRUFBaUI7QUFDMUcsUUFBSXlxQixVQUFVLEdBQUcsS0FBS0osR0FBdEI7QUFDQSxRQUFJMEssZUFBZSxHQUFHOVYsTUFBTSxDQUFDMkosTUFBUCxDQUFjRyxjQUFkLENBQTZCL29CLEtBQTdCLEVBQW9DLENBQXBDLENBQXRCO0FBQ0F5cUIsY0FBVSxDQUFDVyw2QkFBWCxHQUEyQzJKLGVBQWUsR0FBRyxDQUFsQixHQUFzQmhMLGNBQXRCLEdBQXVDZ0wsZUFBbEY7QUFDSCxHQUpEOztBQUtBOUosV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUNELG1DQUFuQixDQUF1RHlMLFVBQTNFLElBQXlGLFlBQVk7QUFDakcsV0FBTzlLLGNBQVA7QUFDSCxHQUZEOztBQUdBa0IsV0FBUyxDQUFDdnBCLFNBQVYsQ0FBb0IybkIsa0JBQWtCLENBQUNELG1DQUFuQixDQUF1RDBMLFNBQTNFLElBQXdGLFVBQVU5MEIsS0FBVixFQUFpQjtBQUNyRyxRQUFJeXFCLFVBQVUsR0FBRyxLQUFLSixHQUF0QjtBQUNBLFFBQUkwSyxlQUFlLEdBQUc5VixNQUFNLENBQUMySixNQUFQLENBQWNHLGNBQWQsQ0FBNkIvb0IsS0FBN0IsRUFBb0MsQ0FBcEMsQ0FBdEI7QUFDQXlxQixjQUFVLENBQUNhLHdCQUFYLEdBQXNDeUosZUFBZSxHQUFHLENBQWxCLEdBQXNCaEwsY0FBdEIsR0FBdUNnTCxlQUE3RTtBQUNILEdBSkQ7O0FBS0EzTyxZQUFVLENBQUMsQ0FDUG9ELFdBQVcsQ0FBQ3dMLE9BREwsRUFFUEMsVUFBVSxDQUFDLGFBQUQsRUFBZ0JDLFFBQWhCLENBRkgsRUFHUEQsVUFBVSxDQUFDLG1CQUFELEVBQXNCLEVBQXRCLENBSEgsRUFJUEEsVUFBVSxDQUFDLG1CQUFELEVBQXNCLEtBQUssQ0FBM0IsQ0FKSCxDQUFELEVBS1BoSyxTQUFTLENBQUN2cEIsU0FMSCxFQUtjLFVBTGQsRUFLMEIsSUFMMUIsQ0FBVjs7QUFNQSxTQUFPdXBCLFNBQVA7QUFDSCxDQXh4QmdCLENBd3hCZjVCLGtCQUFrQixDQUFDaEosYUF4eEJKLENBQWpCOztBQXl4QkF0Z0IsT0FBTyxDQUFDa3JCLFNBQVIsR0FBb0JBLFNBQXBCOztBQUNBLElBQUl5Qix1QkFBdUIsR0FBSSxVQUFVbm9CLE1BQVYsRUFBa0I7QUFDN0NDLFdBQVMsQ0FBQ2tvQix1QkFBRCxFQUEwQm5vQixNQUExQixDQUFUOztBQUNBLFdBQVNtb0IsdUJBQVQsR0FBbUM7QUFDL0IsV0FBT25vQixNQUFNLEtBQUssSUFBWCxJQUFtQkEsTUFBTSxDQUFDRSxLQUFQLENBQWEsSUFBYixFQUFtQmpFLFNBQW5CLENBQW5CLElBQW9ELElBQTNEO0FBQ0g7O0FBQ0Rrc0IseUJBQXVCLENBQUN5SSx1QkFBeEIsR0FBa0QsWUFBWTtBQUMxRCxRQUFJdkQsSUFBSSxHQUFHL0UsbUJBQW1CLENBQUNRLEdBQXBCLEVBQVg7QUFDQXVFLFFBQUksQ0FBQ3dELGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxXQUFPeEQsSUFBUDtBQUNILEdBSkQ7O0FBS0FsRix5QkFBdUIsQ0FBQ2hyQixTQUF4QixDQUFrQzJ6Qiw0QkFBbEMsR0FBaUUsVUFBVTlQLEtBQVYsRUFBaUIrUCxlQUFqQixFQUFrQztBQUMvRixRQUFJMUQsSUFBSSxHQUFHcnRCLE1BQU0sQ0FBQzdDLFNBQVAsQ0FBaUIyekIsNEJBQWpCLENBQThDbkssSUFBOUMsQ0FBbUQsSUFBbkQsRUFBeUQzRixLQUF6RCxFQUFnRStQLGVBQWhFLENBQVg7O0FBQ0ExRCxRQUFJLENBQUN3RCxlQUFMLEdBQXVCLElBQXZCO0FBQ0EsV0FBT3hELElBQVA7QUFDSCxHQUpEOztBQUtBbEYseUJBQXVCLENBQUNockIsU0FBeEIsQ0FBa0M2ekIsbUJBQWxDLEdBQXdELFVBQVVDLFlBQVYsRUFBd0I7QUFDNUUsUUFBSXBELE1BQU0sR0FBSSxLQUFLMUgsSUFBTCxHQUFZLEtBQUtBLElBQUwsQ0FBVTBILE1BQXRCLEdBQStCLElBQTdDOztBQUNBLFFBQUlBLE1BQU0sSUFBSSxDQUFDb0QsWUFBZixFQUE2QjtBQUN6QnBELFlBQU0sQ0FBQ0ssMkJBQVAsQ0FBbUMsSUFBbkM7QUFDSDtBQUNKLEdBTEQ7O0FBTUE1eUIsUUFBTSxDQUFDQyxjQUFQLENBQXNCNHNCLHVCQUF1QixDQUFDaHJCLFNBQTlDLEVBQXlELE1BQXpELEVBQWlFO0FBQzdEQyxPQUFHLEVBQUUsZUFBWTtBQUNiLGFBQU8sS0FBSzZvQixLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXN29CLEdBQVgsRUFBYixHQUFnQyxJQUF2QztBQUNILEtBSDREO0FBSTdEQyxjQUFVLEVBQUUsSUFKaUQ7QUFLN0RDLGdCQUFZLEVBQUU7QUFMK0MsR0FBakU7QUFPQSxTQUFPNnFCLHVCQUFQO0FBQ0gsQ0E3QjhCLENBNkI3QitJLGVBN0I2QixDQUEvQjs7QUE4QkExMUIsT0FBTyxDQUFDMnNCLHVCQUFSLEdBQWtDQSx1QkFBbEM7O0FBQ0EsSUFBSUUsd0JBQXdCLEdBQUksVUFBVXJvQixNQUFWLEVBQWtCO0FBQzlDQyxXQUFTLENBQUNvb0Isd0JBQUQsRUFBMkJyb0IsTUFBM0IsQ0FBVDs7QUFDQSxXQUFTcW9CLHdCQUFULEdBQW9DO0FBQ2hDLFdBQU9yb0IsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsRUFBbUJqRSxTQUFuQixDQUFuQixJQUFvRCxJQUEzRDtBQUNIOztBQUNEb3NCLDBCQUF3QixDQUFDdUksdUJBQXpCLEdBQW1ELFlBQVk7QUFDM0QsUUFBSXZELElBQUksR0FBR2hGLHdCQUF3QixDQUFDUyxHQUF6QixFQUFYO0FBQ0F1RSxRQUFJLENBQUN3RCxlQUFMLEdBQXVCLElBQXZCO0FBQ0EsV0FBT3hELElBQVA7QUFDSCxHQUpEOztBQUtBaEYsMEJBQXdCLENBQUNsckIsU0FBekIsQ0FBbUMyekIsNEJBQW5DLEdBQWtFLFVBQVU5UCxLQUFWLEVBQWlCK1AsZUFBakIsRUFBa0M7QUFDaEcsUUFBSTFELElBQUksR0FBR3J0QixNQUFNLENBQUM3QyxTQUFQLENBQWlCMnpCLDRCQUFqQixDQUE4Q25LLElBQTlDLENBQW1ELElBQW5ELEVBQXlEM0YsS0FBekQsRUFBZ0UrUCxlQUFoRSxDQUFYOztBQUNBMUQsUUFBSSxDQUFDd0QsZUFBTCxHQUF1QixJQUF2QjtBQUNBLFdBQU94RCxJQUFQO0FBQ0gsR0FKRDs7QUFLQWhGLDBCQUF3QixDQUFDbHJCLFNBQXpCLENBQW1DNnpCLG1CQUFuQyxHQUF5RCxVQUFVQyxZQUFWLEVBQXdCO0FBQzdFLFFBQUlwRCxNQUFNLEdBQUksS0FBSzFILElBQUwsR0FBWSxLQUFLQSxJQUFMLENBQVUwSCxNQUF0QixHQUErQixJQUE3Qzs7QUFDQSxRQUFJQSxNQUFNLElBQUksQ0FBQ29ELFlBQWYsRUFBNkI7QUFDekJwRCxZQUFNLENBQUNLLDJCQUFQLENBQW1DLElBQW5DO0FBQ0g7QUFDSixHQUxEOztBQU1BNXlCLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQjhzQix3QkFBd0IsQ0FBQ2xyQixTQUEvQyxFQUEwRCxNQUExRCxFQUFrRTtBQUM5REMsT0FBRyxFQUFFLGVBQVk7QUFDYixhQUFPLEtBQUs2b0IsS0FBTCxHQUFhLEtBQUtBLEtBQUwsQ0FBVzdvQixHQUFYLEVBQWIsR0FBZ0MsSUFBdkM7QUFDSCxLQUg2RDtBQUk5REMsY0FBVSxFQUFFLElBSmtEO0FBSzlEQyxnQkFBWSxFQUFFO0FBTGdELEdBQWxFO0FBT0EsU0FBTytxQix3QkFBUDtBQUNILENBN0IrQixDQTZCOUI2SSxlQTdCOEIsQ0FBaEM7O0FBOEJBMTFCLE9BQU8sQ0FBQzZzQix3QkFBUixHQUFtQ0Esd0JBQW5DOztBQUNBLElBQUlDLG1CQUFtQixHQUFJLFVBQVV0b0IsTUFBVixFQUFrQjtBQUN6Q0MsV0FBUyxDQUFDcW9CLG1CQUFELEVBQXNCdG9CLE1BQXRCLENBQVQ7O0FBQ0EsV0FBU3NvQixtQkFBVCxHQUErQjtBQUMzQixXQUFPdG9CLE1BQU0sS0FBSyxJQUFYLElBQW1CQSxNQUFNLENBQUNFLEtBQVAsQ0FBYSxJQUFiLEVBQW1CakUsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRHFzQixxQkFBbUIsQ0FBQ3NJLHVCQUFwQixHQUE4QyxZQUFZO0FBQ3RELFFBQUl2RCxJQUFJLEdBQUcvRSxtQkFBbUIsQ0FBQ1EsR0FBcEIsRUFBWDtBQUNBdUUsUUFBSSxDQUFDd0QsZUFBTCxHQUF1QixJQUF2QjtBQUNBLFdBQU94RCxJQUFQO0FBQ0gsR0FKRDs7QUFLQS9FLHFCQUFtQixDQUFDbnJCLFNBQXBCLENBQThCMnpCLDRCQUE5QixHQUE2RCxVQUFVOVAsS0FBVixFQUFpQitQLGVBQWpCLEVBQWtDO0FBQzNGLFFBQUkxRCxJQUFJLEdBQUdydEIsTUFBTSxDQUFDN0MsU0FBUCxDQUFpQjJ6Qiw0QkFBakIsQ0FBOENuSyxJQUE5QyxDQUFtRCxJQUFuRCxFQUF5RDNGLEtBQXpELEVBQWdFK1AsZUFBaEUsQ0FBWDs7QUFDQTFELFFBQUksQ0FBQ3dELGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxXQUFPeEQsSUFBUDtBQUNILEdBSkQ7O0FBS0EvRSxxQkFBbUIsQ0FBQ25yQixTQUFwQixDQUE4QjZ6QixtQkFBOUIsR0FBb0QsVUFBVUMsWUFBVixFQUF3QjtBQUN4RSxRQUFJcEQsTUFBTSxHQUFJLEtBQUsxSCxJQUFMLEdBQVksS0FBS0EsSUFBTCxDQUFVMEgsTUFBdEIsR0FBK0IsSUFBN0M7O0FBQ0EsUUFBSUEsTUFBTSxJQUFJLENBQUNvRCxZQUFmLEVBQTZCO0FBQ3pCcEQsWUFBTSxDQUFDTyxzQkFBUCxDQUE4QixJQUE5QjtBQUNIO0FBQ0osR0FMRDs7QUFNQTl5QixRQUFNLENBQUNDLGNBQVAsQ0FBc0Irc0IsbUJBQW1CLENBQUNuckIsU0FBMUMsRUFBcUQsTUFBckQsRUFBNkQ7QUFDekRDLE9BQUcsRUFBRSxlQUFZO0FBQ2IsYUFBTyxLQUFLNm9CLEtBQUwsR0FBYSxLQUFLQSxLQUFMLENBQVc3b0IsR0FBWCxFQUFiLEdBQWdDLElBQXZDO0FBQ0gsS0FId0Q7QUFJekRDLGNBQVUsRUFBRSxJQUo2QztBQUt6REMsZ0JBQVksRUFBRTtBQUwyQyxHQUE3RDtBQU9BLFNBQU9nckIsbUJBQVA7QUFDSCxDQTdCMEIsQ0E2QnpCNEksZUE3QnlCLENBQTNCOztBQThCQTExQixPQUFPLENBQUM4c0IsbUJBQVIsR0FBOEJBLG1CQUE5Qjs7QUFDQSxJQUFJQyxtQkFBbUIsR0FBSSxVQUFVdm9CLE1BQVYsRUFBa0I7QUFDekNDLFdBQVMsQ0FBQ3NvQixtQkFBRCxFQUFzQnZvQixNQUF0QixDQUFUOztBQUNBLFdBQVN1b0IsbUJBQVQsR0FBK0I7QUFDM0IsV0FBT3ZvQixNQUFNLEtBQUssSUFBWCxJQUFtQkEsTUFBTSxDQUFDRSxLQUFQLENBQWEsSUFBYixFQUFtQmpFLFNBQW5CLENBQW5CLElBQW9ELElBQTNEO0FBQ0g7O0FBQ0Rzc0IscUJBQW1CLENBQUNxSSx1QkFBcEIsR0FBOEMsWUFBWTtBQUN0RCxRQUFJdkQsSUFBSSxHQUFHOUUsbUJBQW1CLENBQUNPLEdBQXBCLEVBQVg7QUFDQXVFLFFBQUksQ0FBQ3dELGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxXQUFPeEQsSUFBUDtBQUNILEdBSkQ7O0FBS0E5RSxxQkFBbUIsQ0FBQ3ByQixTQUFwQixDQUE4QjJ6Qiw0QkFBOUIsR0FBNkQsVUFBVTlQLEtBQVYsRUFBaUIrUCxlQUFqQixFQUFrQztBQUMzRixRQUFJMUQsSUFBSSxHQUFHcnRCLE1BQU0sQ0FBQzdDLFNBQVAsQ0FBaUIyekIsNEJBQWpCLENBQThDbkssSUFBOUMsQ0FBbUQsSUFBbkQsRUFBeUQzRixLQUF6RCxFQUFnRStQLGVBQWhFLENBQVg7O0FBQ0ExRCxRQUFJLENBQUN3RCxlQUFMLEdBQXVCLElBQXZCO0FBQ0EsV0FBT3hELElBQVA7QUFDSCxHQUpEOztBQUtBOUUscUJBQW1CLENBQUNwckIsU0FBcEIsQ0FBOEI2ekIsbUJBQTlCLEdBQW9ELFVBQVVDLFlBQVYsRUFBd0I7QUFDeEUsUUFBSXBELE1BQU0sR0FBSSxLQUFLMUgsSUFBTCxHQUFZLEtBQUtBLElBQUwsQ0FBVTBILE1BQXRCLEdBQStCLElBQTdDOztBQUNBLFFBQUlBLE1BQU0sSUFBSSxDQUFDb0QsWUFBZixFQUE2QjtBQUN6QnBELFlBQU0sQ0FBQ1Msc0JBQVAsQ0FBOEIsSUFBOUI7QUFDSDtBQUNKLEdBTEQ7O0FBTUFoekIsUUFBTSxDQUFDQyxjQUFQLENBQXNCZ3RCLG1CQUFtQixDQUFDcHJCLFNBQTFDLEVBQXFELE1BQXJELEVBQTZEO0FBQ3pEQyxPQUFHLEVBQUUsZUFBWTtBQUNiLGFBQU8sS0FBSzZvQixLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXN29CLEdBQVgsRUFBYixHQUFnQyxJQUF2QztBQUNILEtBSHdEO0FBSXpEQyxjQUFVLEVBQUUsSUFKNkM7QUFLekRDLGdCQUFZLEVBQUU7QUFMMkMsR0FBN0Q7QUFPQSxTQUFPaXJCLG1CQUFQO0FBQ0gsQ0E3QjBCLENBNkJ6QjJJLGVBN0J5QixDQUEzQjs7QUE4QkExMUIsT0FBTyxDQUFDK3NCLG1CQUFSLEdBQThCQSxtQkFBOUI7O0FBQ0EsSUFBSVMsbUJBQW1CLEdBQUksVUFBVWhwQixNQUFWLEVBQWtCO0FBQ3pDQyxXQUFTLENBQUMrb0IsbUJBQUQsRUFBc0JocEIsTUFBdEIsQ0FBVDs7QUFDQSxXQUFTZ3BCLG1CQUFULEdBQStCO0FBQzNCLFdBQU9ocEIsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsRUFBbUJqRSxTQUFuQixDQUFuQixJQUFvRCxJQUEzRDtBQUNIOztBQUNEK3NCLHFCQUFtQixDQUFDakIsYUFBcEIsR0FBb0MsVUFBVTlCLEtBQVYsRUFBaUI7QUFDakQsUUFBSTBELFVBQVUsR0FBR1gsbUJBQW1CLENBQUNGLEdBQXBCLEVBQWpCO0FBQ0FhLGNBQVUsQ0FBQ3dILE1BQVgsR0FBb0JsTCxLQUFwQjtBQUNBLFdBQU8wRCxVQUFQO0FBQ0gsR0FKRDs7QUFLQVgscUJBQW1CLENBQUM3ckIsU0FBcEIsQ0FBOEJpMEIsOEJBQTlCLEdBQStELFVBQVVDLFNBQVYsRUFBcUJoTCxPQUFyQixFQUE4QjtBQUN6RixRQUFJSixLQUFLLEdBQUcsS0FBS2tMLE1BQUwsQ0FBWS96QixHQUFaLEVBQVo7O0FBQ0EsUUFBSTZvQixLQUFLLENBQUNtRCxjQUFOLENBQXFCcGQsR0FBckIsQ0FBeUJxYSxPQUF6QixLQUFxQ0osS0FBSyxDQUFDbUQsY0FBTixDQUFxQmhzQixHQUFyQixDQUF5QmlwQixPQUF6QixDQUF6QyxFQUE0RTtBQUN4RSxVQUFJaUwsVUFBVSxHQUFHckwsS0FBSyxJQUFJQSxLQUFLLENBQUM5SyxLQUFmLEdBQXVCOEssS0FBSyxDQUFDdEgsY0FBTixDQUFxQjBILE9BQXJCLENBQXZCLEdBQXVELEVBQXhFO0FBQ0EsYUFBT2lMLFVBQVUsQ0FBQ3JMLEtBQUssQ0FBQzdKLFVBQVAsQ0FBVixHQUFnQ2tWLFVBQVUsQ0FBQ3JMLEtBQUssQ0FBQzdKLFVBQVAsQ0FBVixDQUE2QmxnQixNQUE3QixHQUFzQyxDQUF0QyxJQUEyQytwQixLQUFLLENBQUN4SSxhQUFOLEtBQXdCLENBQXhCLEdBQTRCLENBQXZFLEtBQTZFd0ksS0FBSyxDQUFDdEksYUFBTixLQUF3QixDQUF4QixHQUE0QixDQUF6RyxDQUFoQyxHQUErSSxDQUF0SjtBQUNILEtBSEQsTUFJSztBQUNELGFBQU8sQ0FBUDtBQUNIO0FBQ0osR0FURDs7QUFVQXFMLHFCQUFtQixDQUFDN3JCLFNBQXBCLENBQThCbzBCLDJCQUE5QixHQUE0RCxVQUFVRixTQUFWLEVBQXFCO0FBQzdFLFFBQUlwTCxLQUFLLEdBQUcsS0FBS2tMLE1BQUwsQ0FBWS96QixHQUFaLEVBQVo7O0FBQ0EsV0FBUTZvQixLQUFLLElBQUlBLEtBQUssQ0FBQzlLLEtBQWhCLEdBQXlCOEssS0FBSyxDQUFDOUssS0FBTixDQUFZamYsTUFBckMsR0FBOEMsQ0FBckQ7QUFDSCxHQUhEOztBQUlBOHNCLHFCQUFtQixDQUFDN3JCLFNBQXBCLENBQThCcTBCLDhCQUE5QixHQUErRCxVQUFVSCxTQUFWLEVBQXFCakwsU0FBckIsRUFBZ0M7QUFDM0YsUUFBSUgsS0FBSyxHQUFHLEtBQUtrTCxNQUFMLENBQVkvekIsR0FBWixFQUFaOztBQUNBLFFBQUlpd0IsSUFBSjtBQUNBLFFBQUlvRSxLQUFLLEdBQUcsS0FBS0wsOEJBQUwsQ0FBb0NDLFNBQXBDLEVBQStDakwsU0FBUyxDQUFDQyxPQUF6RCxDQUFaOztBQUNBLFFBQUlELFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUF0QixFQUF5QjtBQUNyQixVQUFJTCxLQUFKLEVBQVc7QUFDUCxZQUFJeUwsUUFBUSxHQUFHekwsS0FBSyxDQUFDcEgsc0JBQU4sQ0FBNkJ1SCxTQUFTLENBQUNDLE9BQXZDLENBQWY7O0FBQ0FnSCxZQUFJLEdBQUlnRSxTQUFTLENBQUNNLGlDQUFWLENBQTRDLGlCQUFpQkQsUUFBUSxDQUFDL1UsR0FBdEUsS0FBOEV3TCx1QkFBdUIsQ0FBQ3lJLHVCQUF4QixFQUF0Rjs7QUFDQTNLLGFBQUssQ0FBQ21ILHNCQUFOLENBQTZCQyxJQUE3QixFQUFtQ2pILFNBQW5DOztBQUNBLFlBQUl3RyxRQUFRLEdBQUdTLElBQUksQ0FBQ2xILElBQXBCOztBQUNBLFlBQUl5RyxRQUFRLElBQUlBLFFBQVEsQ0FBQ2dGLGdCQUF6QixFQUEyQztBQUN2QyxjQUFJN0YsS0FBSyxHQUFHclIsTUFBTSxDQUFDZ0wsTUFBUCxDQUFjc0csa0JBQWQsQ0FBaUMvRixLQUFLLENBQUNxRixnQkFBdkMsQ0FBWjtBQUNBLGNBQUk3QyxTQUFTLEdBQUd4QyxLQUFLLENBQUNoSyw2QkFBdEI7QUFDQSxjQUFJNFAsVUFBVSxHQUFHcEQsU0FBUyxHQUFHLENBQVosR0FBZ0JBLFNBQWhCLEdBQTRCeEMsS0FBSyxDQUFDNkQsbUJBQU4sQ0FBMEIxRCxTQUFTLENBQUNFLEdBQXBDLENBQTdDO0FBQ0E1TCxnQkFBTSxDQUFDdVIsSUFBUCxDQUFZQyxXQUFaLENBQXdCakcsS0FBeEIsRUFBK0IyRyxRQUEvQixFQUF5QyxDQUF6QyxFQUE0QyxDQUE1QyxFQUErQ2IsS0FBL0MsRUFBc0RGLFVBQVUsR0FBR0EsVUFBSCxHQUFnQixDQUFoRjtBQUNIO0FBQ0osT0FYRCxNQVlLO0FBQ0R3QixZQUFJLEdBQUdsRix1QkFBdUIsQ0FBQ3lJLHVCQUF4QixFQUFQO0FBQ0g7O0FBQ0QsYUFBT3ZELElBQVA7QUFDSDs7QUFDRCxRQUFJakgsU0FBUyxDQUFDRSxHQUFWLEtBQWtCLENBQWxCLElBQXVCTCxLQUFLLENBQUN4SSxhQUFOLEVBQTNCLEVBQWtEO0FBQzlDLFVBQUl3SSxLQUFKLEVBQVc7QUFDUCxZQUFJeUwsUUFBUSxHQUFHekwsS0FBSyxDQUFDMUgsa0JBQU4sQ0FBeUI2SCxTQUFTLENBQUNDLE9BQW5DLENBQWY7O0FBQ0FnSCxZQUFJLEdBQUlnRSxTQUFTLENBQUNNLGlDQUFWLENBQTRDLFlBQVlELFFBQVEsQ0FBQy9VLEdBQWpFLEtBQXlFMkwsbUJBQW1CLENBQUNzSSx1QkFBcEIsRUFBakY7O0FBQ0EzSyxhQUFLLENBQUNrSSxrQkFBTixDQUF5QmQsSUFBekIsRUFBK0JqSCxTQUEvQjs7QUFDQSxZQUFJd0csUUFBUSxHQUFHUyxJQUFJLENBQUNsSCxJQUFwQjs7QUFDQSxZQUFJeUcsUUFBUSxJQUFJQSxRQUFRLENBQUNnRixnQkFBekIsRUFBMkM7QUFDdkMsY0FBSTdGLEtBQUssR0FBR3JSLE1BQU0sQ0FBQ2dMLE1BQVAsQ0FBY3NHLGtCQUFkLENBQWlDL0YsS0FBSyxDQUFDcUYsZ0JBQXZDLENBQVo7QUFDQSxjQUFJN0MsU0FBUyxHQUFHeEMsS0FBSyxDQUFDaksseUJBQXRCO0FBQ0EsY0FBSTZQLFVBQVUsR0FBR3BELFNBQVMsR0FBRyxDQUFaLEdBQWdCQSxTQUFoQixHQUE0QnhDLEtBQUssQ0FBQ2lFLGVBQU4sQ0FBc0I5RCxTQUFTLENBQUNFLEdBQWhDLENBQTdDO0FBQ0E1TCxnQkFBTSxDQUFDdVIsSUFBUCxDQUFZQyxXQUFaLENBQXdCakcsS0FBeEIsRUFBK0IyRyxRQUEvQixFQUF5QyxDQUF6QyxFQUE0QyxDQUE1QyxFQUErQ2IsS0FBL0MsRUFBc0RGLFVBQVUsR0FBR0EsVUFBSCxHQUFnQixDQUFoRjtBQUNIO0FBQ0osT0FYRCxNQVlLO0FBQ0R3QixZQUFJLEdBQUcvRSxtQkFBbUIsQ0FBQ3NJLHVCQUFwQixFQUFQO0FBQ0g7O0FBQ0QsYUFBT3ZELElBQVA7QUFDSDs7QUFDRCxRQUFJakgsU0FBUyxDQUFDRSxHQUFWLEtBQWtCLENBQWxCLElBQXVCRixTQUFTLENBQUNFLEdBQVYsS0FBa0JtTCxLQUFLLEdBQUcsQ0FBakQsSUFBc0R4TCxLQUFLLENBQUN0SSxhQUFOLEVBQTFELEVBQWlGO0FBQzdFLFVBQUlzSSxLQUFKLEVBQVc7QUFDUCxZQUFJeUwsUUFBUSxHQUFHekwsS0FBSyxDQUFDekcsa0JBQU4sQ0FBeUI0RyxTQUFTLENBQUNDLE9BQW5DLENBQWY7O0FBQ0FnSCxZQUFJLEdBQUlnRSxTQUFTLENBQUNNLGlDQUFWLENBQTRDLFlBQVlELFFBQVEsQ0FBQy9VLEdBQWpFLEtBQXlFNEwsbUJBQW1CLENBQUNxSSx1QkFBcEIsRUFBakY7O0FBQ0EzSyxhQUFLLENBQUNvSSxrQkFBTixDQUF5QmhCLElBQXpCLEVBQStCakgsU0FBL0I7O0FBQ0EsWUFBSXdHLFFBQVEsR0FBR1MsSUFBSSxDQUFDbEgsSUFBcEI7O0FBQ0EsWUFBSXlHLFFBQVEsSUFBSUEsUUFBUSxDQUFDZ0YsZ0JBQXpCLEVBQTJDO0FBQ3ZDLGNBQUk3RixLQUFLLEdBQUdyUixNQUFNLENBQUNnTCxNQUFQLENBQWNzRyxrQkFBZCxDQUFpQy9GLEtBQUssQ0FBQ3FGLGdCQUF2QyxDQUFaO0FBQ0EsY0FBSTdDLFNBQVMsR0FBR3hDLEtBQUssQ0FBQzlKLHlCQUF0QjtBQUNBLGNBQUkwUCxVQUFVLEdBQUdwRCxTQUFTLEdBQUcsQ0FBWixHQUFnQkEsU0FBaEIsR0FBNEJ4QyxLQUFLLENBQUNtRSxlQUFOLENBQXNCaEUsU0FBUyxDQUFDRSxHQUFoQyxDQUE3QztBQUNBNUwsZ0JBQU0sQ0FBQ3VSLElBQVAsQ0FBWUMsV0FBWixDQUF3QmpHLEtBQXhCLEVBQStCMkcsUUFBL0IsRUFBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsRUFBK0NiLEtBQS9DLEVBQXNERixVQUFVLEdBQUdBLFVBQUgsR0FBZ0IsQ0FBaEY7QUFDSDtBQUNKLE9BWEQsTUFZSztBQUNEd0IsWUFBSSxHQUFHOUUsbUJBQW1CLENBQUNxSSx1QkFBcEIsRUFBUDtBQUNIOztBQUNELGFBQU92RCxJQUFQO0FBQ0g7O0FBQ0QsUUFBSXBILEtBQUosRUFBVztBQUNQLFVBQUl5TCxRQUFRLEdBQUd6TCxLQUFLLENBQUNqSCx1QkFBTixDQUE4Qm9ILFNBQVMsQ0FBQ0MsT0FBeEMsRUFBaURELFNBQVMsQ0FBQ0UsR0FBM0QsQ0FBZjs7QUFDQStHLFVBQUksR0FBSWdFLFNBQVMsQ0FBQ00saUNBQVYsQ0FBNEMsa0JBQWtCRCxRQUFRLENBQUMvVSxHQUF2RSxLQUErRTBMLHdCQUF3QixDQUFDdUksdUJBQXpCLEVBQXZGOztBQUNBM0ssV0FBSyxDQUFDZ0ksdUJBQU4sQ0FBOEJaLElBQTlCLEVBQW9DakgsU0FBcEM7O0FBQ0EsVUFBSXdHLFFBQVEsR0FBR1MsSUFBSSxDQUFDbEgsSUFBcEI7O0FBQ0EsVUFBSXlHLFFBQVEsSUFBSUEsUUFBUSxDQUFDZ0YsZ0JBQXpCLEVBQTJDO0FBQ3ZDLFlBQUk3RixLQUFLLEdBQUdyUixNQUFNLENBQUNnTCxNQUFQLENBQWNzRyxrQkFBZCxDQUFpQy9GLEtBQUssQ0FBQ3FGLGdCQUF2QyxDQUFaO0FBQ0EsWUFBSTdDLFNBQVMsR0FBR3hDLEtBQUssQ0FBQy9KLDhCQUF0QjtBQUNBLFlBQUkyUCxVQUFVLEdBQUdwRCxTQUFTLEdBQUcsQ0FBWixHQUFnQkEsU0FBaEIsR0FBNEJ4QyxLQUFLLENBQUMrRCxvQkFBTixDQUEyQi9yQixRQUFRLENBQUMsTUFBTW1vQixTQUFTLENBQUNDLE9BQVYsR0FBb0IsQ0FBMUIsS0FBZ0NELFNBQVMsQ0FBQ0UsR0FBVixHQUFnQixDQUFoQixJQUFxQkwsS0FBSyxDQUFDeEksYUFBTixLQUF3QixDQUF4QixHQUE0QixDQUFqRCxDQUFoQyxDQUFELENBQW5DLENBQTdDO0FBQ0EvQyxjQUFNLENBQUN1UixJQUFQLENBQVlDLFdBQVosQ0FBd0JqRyxLQUF4QixFQUErQjJHLFFBQS9CLEVBQXlDLENBQXpDLEVBQTRDLENBQTVDLEVBQStDYixLQUEvQyxFQUFzREYsVUFBVSxHQUFHQSxVQUFILEdBQWdCLENBQWhGO0FBQ0g7QUFDSixLQVhELE1BWUs7QUFDRHdCLFVBQUksR0FBR2hGLHdCQUF3QixDQUFDdUksdUJBQXpCLEVBQVA7QUFDSDs7QUFDRCxXQUFPdkQsSUFBUDtBQUNILEdBMUVEOztBQTJFQXJFLHFCQUFtQixDQUFDNkksYUFBcEIsR0FBb0MsQ0FBQ0MscUJBQUQsQ0FBcEM7QUFDQSxTQUFPOUksbUJBQVA7QUFDSCxDQXJHMEIsQ0FxR3pCK0ksUUFyR3lCLENBQTNCOztBQXNHQXYyQixPQUFPLENBQUN3dEIsbUJBQVIsR0FBOEJBLG1CQUE5Qjs7QUFDQSxJQUFJcUgsZ0NBQWdDLEdBQUksVUFBVXJ3QixNQUFWLEVBQWtCO0FBQ3REQyxXQUFTLENBQUNvd0IsZ0NBQUQsRUFBbUNyd0IsTUFBbkMsQ0FBVDs7QUFDQSxXQUFTcXdCLGdDQUFULEdBQTRDO0FBQ3hDLFdBQU9yd0IsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsRUFBbUJqRSxTQUFuQixDQUFuQixJQUFvRCxJQUEzRDtBQUNIOztBQUNEbzBCLGtDQUFnQyxDQUFDdEksYUFBakMsR0FBaUQsVUFBVTlCLEtBQVYsRUFBaUI7QUFDOUQsUUFBSTJELFFBQVEsR0FBR3lHLGdDQUFnQyxDQUFDdkgsR0FBakMsRUFBZjtBQUNBYyxZQUFRLENBQUN1SCxNQUFULEdBQWtCbEwsS0FBbEI7QUFDQSxXQUFPMkQsUUFBUDtBQUNILEdBSkQ7O0FBS0F5RyxrQ0FBZ0MsQ0FBQ2x6QixTQUFqQyxDQUEyQzYwQix5Q0FBM0MsR0FBdUYsVUFBVVgsU0FBVixFQUFxQmhFLElBQXJCLEVBQTJCakgsU0FBM0IsRUFBc0M7QUFDekgsUUFBSUgsS0FBSyxHQUFHLEtBQUtrTCxNQUFMLENBQVkvekIsR0FBWixFQUFaOztBQUNBLFFBQUk2b0IsS0FBSyxJQUFLRyxTQUFTLENBQUNFLEdBQVYsS0FBa0JMLEtBQUssQ0FBQzlLLEtBQU4sQ0FBWWpmLE1BQVosR0FBcUIsQ0FBckQsRUFBeUQ7QUFDckQrcEIsV0FBSyxDQUFDckMsTUFBTixDQUFhO0FBQUVDLGlCQUFTLEVBQUU2QyxTQUFTLENBQUNoRixrQkFBdkI7QUFBMkMzSixjQUFNLEVBQUVrTztBQUFuRCxPQUFiO0FBQ0g7QUFDSixHQUxEOztBQU1Bb0ssa0NBQWdDLENBQUNsekIsU0FBakMsQ0FBMkM4MEIsaUNBQTNDLEdBQStFLFVBQVVaLFNBQVYsRUFBcUJqTCxTQUFyQixFQUFnQztBQUMzRyxRQUFJSCxLQUFLLEdBQUcsS0FBS2tMLE1BQUwsQ0FBWS96QixHQUFaLEVBQVo7O0FBQ0EsUUFBSTBvQixHQUFHLEdBQUd1TCxTQUFTLENBQUNhLHFCQUFWLENBQWdDOUwsU0FBaEMsQ0FBVjtBQUNBLFFBQUlxTCxLQUFLLEdBQUdKLFNBQVMsQ0FBQ2MscUJBQVYsQ0FBZ0MvTCxTQUFTLENBQUNDLE9BQTFDLENBQVo7QUFDQSxRQUFJbEYsSUFBSSxHQUFHO0FBQ1AwQyxlQUFTLEVBQUUsRUFESjtBQUVQcEosVUFBSSxFQUFFLElBRkM7QUFHUDFDLFlBQU0sRUFBRWtPLEtBSEQ7QUFJUGhILGdCQUFVLEVBQUVwaEIsU0FKTDtBQUtQbVMsV0FBSyxFQUFFLElBTEE7QUFNUG1XLFVBQUksRUFBRSxJQU5DO0FBT1BMLFNBQUcsRUFBRUEsR0FQRTtBQVFQUyxhQUFPLEVBQUUxb0I7QUFSRixLQUFYOztBQVVBLFFBQUl1b0IsU0FBUyxDQUFDRSxHQUFWLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3JCOEwsZUFBUyxDQUFDbk0sS0FBRCxFQUFRRyxTQUFTLENBQUNDLE9BQWxCLEVBQTJCUCxHQUEzQixDQUFUO0FBQ0gsS0FGRCxNQUdLLElBQUlNLFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUFsQixJQUF1QkwsS0FBSyxDQUFDeEksYUFBTixFQUEzQixFQUFrRCxDQUN0RCxDQURJLE1BRUEsSUFBSTJJLFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUFsQixJQUF1QkYsU0FBUyxDQUFDRSxHQUFWLEtBQWtCbUwsS0FBSyxHQUFHLENBQWpELElBQXNEeEwsS0FBSyxDQUFDdEksYUFBTixFQUExRCxFQUFpRixDQUNyRixDQURJLE1BRUE7QUFDRCxVQUFJbEQsSUFBSSxHQUFHd0wsS0FBSyxDQUFDNUcsYUFBTixDQUFvQitHLFNBQVMsQ0FBQ0MsT0FBOUIsRUFBdUNELFNBQVMsQ0FBQ0UsR0FBakQsQ0FBWDs7QUFDQW5GLFVBQUksQ0FBQ25SLEtBQUwsR0FBYW9XLFNBQVMsQ0FBQ0MsT0FBdkI7QUFDQWxGLFVBQUksQ0FBQ2xDLFVBQUwsR0FBa0JtSCxTQUFTLENBQUNFLEdBQTVCO0FBQ0FuRixVQUFJLENBQUMwQyxTQUFMLEdBQWlCaUIsa0JBQWtCLENBQUNoSixhQUFuQixDQUFpQzJGLG1CQUFsRDtBQUNBTixVQUFJLENBQUMxRyxJQUFMLEdBQVlBLElBQVo7QUFDQXdMLFdBQUssQ0FBQ3JDLE1BQU4sQ0FBYXpDLElBQWI7QUFDSDs7QUFDRCxXQUFPaUYsU0FBUDtBQUNILEdBOUJEOztBQStCQWlLLGtDQUFnQyxDQUFDbHpCLFNBQWpDLENBQTJDazFCLGdDQUEzQyxHQUE4RSxVQUFVaEIsU0FBVixFQUFxQmpMLFNBQXJCLEVBQWdDO0FBQzFHaUwsYUFBUyxDQUFDaUIsOEJBQVYsQ0FBeUNsTSxTQUF6QyxFQUFvRCxJQUFwRDtBQUNBLFdBQU9BLFNBQVA7QUFDSCxHQUhEOztBQUlBaUssa0NBQWdDLENBQUNsekIsU0FBakMsQ0FBMkNvMUIsZ0NBQTNDLEdBQThFLFVBQVVsQixTQUFWLEVBQXFCakwsU0FBckIsRUFBZ0M7QUFDMUcsUUFBSUgsS0FBSyxHQUFHLEtBQUtrTCxNQUFMLENBQVkvekIsR0FBWixFQUFaOztBQUNBLFFBQUlxMEIsS0FBSyxHQUFHSixTQUFTLENBQUNjLHFCQUFWLENBQWdDL0wsU0FBUyxDQUFDQyxPQUExQyxDQUFaOztBQUNBLFFBQUlELFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUF0QixFQUF5QjtBQUNyQixVQUFJLENBQUNMLEtBQUwsRUFBWTtBQUNSLGVBQU9vTCxTQUFTLENBQUN6Syw0QkFBakI7QUFDSDs7QUFDRCxhQUFPbE0sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0NqSyxLQUFLLENBQUNoSyw2QkFBOUMsQ0FBUDtBQUNILEtBTEQsTUFNSyxJQUFJbUssU0FBUyxDQUFDRSxHQUFWLEtBQWtCLENBQWxCLElBQXVCTCxLQUFLLENBQUN4SSxhQUFOLEVBQTNCLEVBQWtEO0FBQ25ELFVBQUksQ0FBQ3dJLEtBQUwsRUFBWTtBQUNSLGVBQU9vTCxTQUFTLENBQUN2Syx3QkFBakI7QUFDSDs7QUFDRCxhQUFPcE0sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0NqSyxLQUFLLENBQUNqSyx5QkFBOUMsQ0FBUDtBQUNILEtBTEksTUFNQSxJQUFJb0ssU0FBUyxDQUFDRSxHQUFWLEtBQWtCLENBQWxCLElBQXVCRixTQUFTLENBQUNFLEdBQVYsS0FBa0JtTCxLQUFLLEdBQUcsQ0FBakQsSUFBc0R4TCxLQUFLLENBQUN0SSxhQUFOLEVBQTFELEVBQWlGO0FBQ2xGLFVBQUksQ0FBQ3NJLEtBQUwsRUFBWTtBQUNSLGVBQU9vTCxTQUFTLENBQUN0Syx3QkFBakI7QUFDSDs7QUFDRCxhQUFPck0sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0NqSyxLQUFLLENBQUM5Six5QkFBOUMsQ0FBUDtBQUNILEtBTEksTUFNQTtBQUNELFVBQUksQ0FBQzhKLEtBQUwsRUFBWTtBQUNSLGVBQU9vTCxTQUFTLENBQUN4Syw2QkFBakI7QUFDSDs7QUFDRCxhQUFPbk0sTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0NqSyxLQUFLLENBQUMvSiw4QkFBOUMsQ0FBUDtBQUNIO0FBQ0osR0EzQkQ7O0FBNEJBbVUsa0NBQWdDLENBQUNsekIsU0FBakMsQ0FBMkNxMUIsaUNBQTNDLEdBQStFLFVBQVVuQixTQUFWLEVBQXFCaEwsT0FBckIsRUFBOEI7QUFDekcsV0FBTyxDQUFQO0FBQ0gsR0FGRDs7QUFHQWdLLGtDQUFnQyxDQUFDbHpCLFNBQWpDLENBQTJDczFCLGlDQUEzQyxHQUErRSxVQUFVcEIsU0FBVixFQUFxQmhMLE9BQXJCLEVBQThCO0FBQ3pHLFdBQU8sQ0FBUDtBQUNILEdBRkQ7O0FBR0FnSyxrQ0FBZ0MsQ0FBQ3dCLGFBQWpDLEdBQWlELENBQUNhLG1CQUFELENBQWpEO0FBQ0EsU0FBT3JDLGdDQUFQO0FBQ0gsQ0F2RnVDLENBdUZ0QzBCLFFBdkZzQyxDQUF4Qzs7QUF3RkF2MkIsT0FBTyxDQUFDNjBCLGdDQUFSLEdBQTJDQSxnQ0FBM0M7O0FBQ0EsSUFBSW5ILHVCQUF1QixHQUFJLFVBQVVscEIsTUFBVixFQUFrQjtBQUM3Q0MsV0FBUyxDQUFDaXBCLHVCQUFELEVBQTBCbHBCLE1BQTFCLENBQVQ7O0FBQ0EsV0FBU2twQix1QkFBVCxHQUFtQztBQUMvQixXQUFPbHBCLE1BQU0sS0FBSyxJQUFYLElBQW1CQSxNQUFNLENBQUNFLEtBQVAsQ0FBYSxJQUFiLEVBQW1CakUsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRGl0Qix5QkFBdUIsQ0FBQ25CLGFBQXhCLEdBQXdDLFVBQVU5QixLQUFWLEVBQWlCO0FBQ3JELFFBQUkyRCxRQUFRLEdBQUdWLHVCQUF1QixDQUFDSixHQUF4QixFQUFmO0FBQ0FjLFlBQVEsQ0FBQ3VILE1BQVQsR0FBa0JsTCxLQUFsQjtBQUNBMkQsWUFBUSxDQUFDK0kscUJBQVQsR0FBaUMsSUFBSS9hLEdBQUosRUFBakM7QUFDQWdTLFlBQVEsQ0FBQ2dKLHNCQUFULEdBQWtDLElBQUloYixHQUFKLEVBQWxDO0FBQ0FnUyxZQUFRLENBQUNpSixpQkFBVCxHQUE2QixJQUFJamIsR0FBSixFQUE3QjtBQUNBZ1MsWUFBUSxDQUFDa0osaUJBQVQsR0FBNkIsSUFBSWxiLEdBQUosRUFBN0I7QUFDQSxXQUFPZ1MsUUFBUDtBQUNILEdBUkQ7O0FBU0FWLHlCQUF1QixDQUFDL3JCLFNBQXhCLENBQWtDbzFCLGdDQUFsQyxHQUFxRSxVQUFVbEIsU0FBVixFQUFxQmpMLFNBQXJCLEVBQWdDO0FBQ2pHLFFBQUlILEtBQUssR0FBRyxLQUFLa0wsTUFBTCxDQUFZL3pCLEdBQVosRUFBWjs7QUFDQSxRQUFJMnZCLE1BQUo7QUFDQSxRQUFJMEUsS0FBSyxHQUFHSixTQUFTLENBQUNjLHFCQUFWLENBQWdDL0wsU0FBUyxDQUFDQyxPQUExQyxDQUFaOztBQUNBLFFBQUlELFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUF0QixFQUF5QjtBQUNyQixVQUFJLENBQUNMLEtBQUwsRUFBWTtBQUNSLGVBQU9vTCxTQUFTLENBQUN6Syw0QkFBakI7QUFDSDs7QUFDRG1HLFlBQU0sR0FBRzlHLEtBQUssQ0FBQzZELG1CQUFOLENBQTBCMUQsU0FBUyxDQUFDQyxPQUFwQyxDQUFUOztBQUNBLFVBQUkwRyxNQUFNLEtBQUtsdkIsU0FBZixFQUEwQjtBQUN0QixZQUFJNnpCLFFBQVEsR0FBR3pMLEtBQUssQ0FBQ3BILHNCQUFOLENBQTZCdUgsU0FBUyxDQUFDQyxPQUF2QyxDQUFmOztBQUNBLFlBQUlnSCxJQUFJLEdBQUcsS0FBS3NGLHFCQUFMLENBQTJCdjFCLEdBQTNCLENBQStCczBCLFFBQVEsQ0FBQy9VLEdBQXhDLENBQVg7O0FBQ0EsWUFBSSxDQUFDMFEsSUFBTCxFQUFXO0FBQ1BBLGNBQUksR0FBR2dFLFNBQVMsQ0FBQ00saUNBQVYsQ0FBNEMsaUJBQWlCRCxRQUFRLENBQUMvVSxHQUF0RSxLQUE4RXdMLHVCQUF1QixDQUFDeUksdUJBQXhCLEVBQXJGOztBQUNBLGVBQUsrQixxQkFBTCxDQUEyQnhhLEdBQTNCLENBQStCdVosUUFBUSxDQUFDL1UsR0FBeEMsRUFBNkMwUSxJQUE3QztBQUNIOztBQUNETixjQUFNLEdBQUc5RyxLQUFLLENBQUNtSCxzQkFBTixDQUE2QkMsSUFBN0IsRUFBbUNqSCxTQUFuQyxDQUFUO0FBQ0g7O0FBQ0QsYUFBTzFMLE1BQU0sQ0FBQ2dMLE1BQVAsQ0FBY3dLLHlCQUFkLENBQXdDbkQsTUFBeEMsQ0FBUDtBQUNIOztBQUNELFFBQUkzRyxTQUFTLENBQUNFLEdBQVYsS0FBa0IsQ0FBbEIsSUFBdUJMLEtBQUssQ0FBQ3hJLGFBQU4sRUFBM0IsRUFBa0Q7QUFDOUMsVUFBSSxDQUFDd0ksS0FBTCxFQUFZO0FBQ1IsZUFBT29MLFNBQVMsQ0FBQ3ZLLHdCQUFqQjtBQUNIOztBQUNEaUcsWUFBTSxHQUFHOUcsS0FBSyxDQUFDaUUsZUFBTixDQUFzQjlELFNBQVMsQ0FBQ0MsT0FBaEMsQ0FBVDs7QUFDQSxVQUFJMEcsTUFBTSxLQUFLbHZCLFNBQWYsRUFBMEI7QUFDdEIsWUFBSTZ6QixRQUFRLEdBQUd6TCxLQUFLLENBQUMxSCxrQkFBTixDQUF5QjZILFNBQVMsQ0FBQ0MsT0FBbkMsQ0FBZjs7QUFDQSxZQUFJZ0gsSUFBSSxHQUFHLEtBQUt3RixpQkFBTCxDQUF1QnoxQixHQUF2QixDQUEyQnMwQixRQUFRLENBQUMvVSxHQUFwQyxDQUFYOztBQUNBLFlBQUksQ0FBQzBRLElBQUwsRUFBVztBQUNQQSxjQUFJLEdBQUdnRSxTQUFTLENBQUNNLGlDQUFWLENBQTRDLFlBQVlELFFBQVEsQ0FBQy9VLEdBQWpFLEtBQXlFMkwsbUJBQW1CLENBQUNzSSx1QkFBcEIsRUFBaEY7O0FBQ0EsZUFBS2lDLGlCQUFMLENBQXVCMWEsR0FBdkIsQ0FBMkJ1WixRQUFRLENBQUMvVSxHQUFwQyxFQUF5QzBRLElBQXpDO0FBQ0g7O0FBQ0ROLGNBQU0sR0FBRzlHLEtBQUssQ0FBQ2tJLGtCQUFOLENBQXlCZCxJQUF6QixFQUErQmpILFNBQS9CLENBQVQ7QUFDSDs7QUFDRCxhQUFPMUwsTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0NuRCxNQUF4QyxDQUFQO0FBQ0g7O0FBQ0QsUUFBSTNHLFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUFsQixJQUF1QkYsU0FBUyxDQUFDRSxHQUFWLEtBQWtCbUwsS0FBSyxHQUFHLENBQWpELElBQXNEeEwsS0FBSyxDQUFDdEksYUFBTixFQUExRCxFQUFpRjtBQUM3RSxVQUFJLENBQUNzSSxLQUFMLEVBQVk7QUFDUixlQUFPb0wsU0FBUyxDQUFDdEssd0JBQWpCO0FBQ0g7O0FBQ0QsVUFBSWdNLFFBQVEsR0FBRzlNLEtBQUssQ0FBQ21FLGVBQU4sQ0FBc0JoRSxTQUFTLENBQUNDLE9BQWhDLENBQWY7O0FBQ0EsVUFBSTBNLFFBQVEsS0FBS2wxQixTQUFqQixFQUE0QjtBQUN4QixZQUFJNnpCLFFBQVEsR0FBR3pMLEtBQUssQ0FBQ3pHLGtCQUFOLENBQXlCNEcsU0FBUyxDQUFDQyxPQUFuQyxDQUFmOztBQUNBLFlBQUlnSCxJQUFJLEdBQUcsS0FBS3lGLGlCQUFMLENBQXVCMTFCLEdBQXZCLENBQTJCczBCLFFBQVEsQ0FBQy9VLEdBQXBDLENBQVg7O0FBQ0EsWUFBSSxDQUFDMFEsSUFBTCxFQUFXO0FBQ1BBLGNBQUksR0FBR2dFLFNBQVMsQ0FBQ00saUNBQVYsQ0FBNEMsWUFBWUQsUUFBUSxDQUFDL1UsR0FBakUsS0FBeUU0TCxtQkFBbUIsQ0FBQ3FJLHVCQUFwQixFQUFoRjs7QUFDQSxlQUFLa0MsaUJBQUwsQ0FBdUIzYSxHQUF2QixDQUEyQnVaLFFBQVEsQ0FBQy9VLEdBQXBDLEVBQXlDMFEsSUFBekM7QUFDSDs7QUFDRDBGLGdCQUFRLEdBQUc5TSxLQUFLLENBQUNvSSxrQkFBTixDQUF5QmhCLElBQXpCLEVBQStCakgsU0FBL0IsQ0FBWDtBQUNIOztBQUNELGFBQU8xTCxNQUFNLENBQUNnTCxNQUFQLENBQWN3Syx5QkFBZCxDQUF3QzZDLFFBQXhDLENBQVA7QUFDSDs7QUFDRCxRQUFJLENBQUM5TSxLQUFMLEVBQVk7QUFDUixhQUFPb0wsU0FBUyxDQUFDeEssNkJBQWpCO0FBQ0g7O0FBQ0RrRyxVQUFNLEdBQUc5RyxLQUFLLENBQUMrRCxvQkFBTixDQUEyQi9yQixRQUFRLENBQUMsTUFBTW1vQixTQUFTLENBQUNDLE9BQVYsR0FBb0IsQ0FBMUIsS0FBZ0NELFNBQVMsQ0FBQ0UsR0FBVixHQUFnQixDQUFoQixJQUFxQkwsS0FBSyxDQUFDeEksYUFBTixLQUF3QixDQUF4QixHQUE0QixDQUFqRCxDQUFoQyxDQUFELENBQW5DLENBQVQ7O0FBQ0EsUUFBSXNQLE1BQU0sS0FBS2x2QixTQUFmLEVBQTBCO0FBQ3RCLFVBQUk2ekIsUUFBUSxHQUFHekwsS0FBSyxDQUFDakgsdUJBQU4sQ0FBOEJvSCxTQUFTLENBQUNDLE9BQXhDLEVBQWlERCxTQUFTLENBQUNFLEdBQTNELENBQWY7O0FBQ0EsVUFBSStHLElBQUksR0FBRyxLQUFLdUYsc0JBQUwsQ0FBNEJ4MUIsR0FBNUIsQ0FBZ0NzMEIsUUFBUSxDQUFDL1UsR0FBekMsQ0FBWDs7QUFDQSxVQUFJLENBQUMwUSxJQUFMLEVBQVc7QUFDUEEsWUFBSSxHQUFHZ0UsU0FBUyxDQUFDTSxpQ0FBVixDQUE0QyxrQkFBa0JELFFBQVEsQ0FBQy9VLEdBQXZFLEtBQStFMEwsd0JBQXdCLENBQUN1SSx1QkFBekIsRUFBdEY7O0FBQ0EsYUFBS2dDLHNCQUFMLENBQTRCemEsR0FBNUIsQ0FBZ0N1WixRQUFRLENBQUMvVSxHQUF6QyxFQUE4QzBRLElBQTlDO0FBQ0g7O0FBQ0ROLFlBQU0sR0FBRzlHLEtBQUssQ0FBQ2dJLHVCQUFOLENBQThCWixJQUE5QixFQUFvQ2pILFNBQXBDLENBQVQ7QUFDSDs7QUFDRCxXQUFPMUwsTUFBTSxDQUFDZ0wsTUFBUCxDQUFjd0sseUJBQWQsQ0FBd0NuRCxNQUF4QyxDQUFQO0FBQ0gsR0FsRUQ7O0FBbUVBN0QseUJBQXVCLENBQUMvckIsU0FBeEIsQ0FBa0M4MEIsaUNBQWxDLEdBQXNFLFVBQVVaLFNBQVYsRUFBcUJqTCxTQUFyQixFQUFnQztBQUNsRyxRQUFJSCxLQUFLLEdBQUcsS0FBS2tMLE1BQUwsQ0FBWS96QixHQUFaLEVBQVo7O0FBQ0EsUUFBSTBvQixHQUFHLEdBQUd1TCxTQUFTLENBQUNhLHFCQUFWLENBQWdDOUwsU0FBaEMsQ0FBVjtBQUNBLFFBQUlxTCxLQUFLLEdBQUdKLFNBQVMsQ0FBQ2MscUJBQVYsQ0FBZ0MvTCxTQUFTLENBQUNDLE9BQTFDLENBQVo7QUFDQSxRQUFJbEYsSUFBSSxHQUFHO0FBQ1AwQyxlQUFTLEVBQUUsRUFESjtBQUVQcEosVUFBSSxFQUFFLElBRkM7QUFHUDFDLFlBQU0sRUFBRWtPLEtBSEQ7QUFJUGhILGdCQUFVLEVBQUVwaEIsU0FKTDtBQUtQbVMsV0FBSyxFQUFFLElBTEE7QUFNUG1XLFVBQUksRUFBRSxJQU5DO0FBT1BMLFNBQUcsRUFBRUEsR0FQRTtBQVFQUyxhQUFPLEVBQUUxb0I7QUFSRixLQUFYOztBQVVBLFFBQUl1b0IsU0FBUyxDQUFDRSxHQUFWLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3JCOEwsZUFBUyxDQUFDbk0sS0FBRCxFQUFRRyxTQUFTLENBQUNDLE9BQWxCLEVBQTJCUCxHQUEzQixDQUFUO0FBQ0gsS0FGRCxNQUdLLElBQUlNLFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUFsQixJQUF1QkwsS0FBSyxDQUFDeEksYUFBTixFQUEzQixFQUFrRCxDQUN0RCxDQURJLE1BRUEsSUFBSTJJLFNBQVMsQ0FBQ0UsR0FBVixLQUFrQixDQUFsQixJQUF1QkYsU0FBUyxDQUFDRSxHQUFWLEtBQWtCbUwsS0FBSyxHQUFHLENBQWpELElBQXNEeEwsS0FBSyxDQUFDdEksYUFBTixFQUExRCxFQUFpRixDQUNyRixDQURJLE1BRUE7QUFDRCxVQUFJbEQsSUFBSSxHQUFHd0wsS0FBSyxDQUFDNUcsYUFBTixDQUFvQitHLFNBQVMsQ0FBQ0MsT0FBOUIsRUFBdUNELFNBQVMsQ0FBQ0UsR0FBakQsQ0FBWDs7QUFDQW5GLFVBQUksQ0FBQ25SLEtBQUwsR0FBYW9XLFNBQVMsQ0FBQ0MsT0FBdkI7QUFDQWxGLFVBQUksQ0FBQ2xDLFVBQUwsR0FBa0JtSCxTQUFTLENBQUNFLEdBQTVCO0FBQ0FuRixVQUFJLENBQUMwQyxTQUFMLEdBQWlCaUIsa0JBQWtCLENBQUNoSixhQUFuQixDQUFpQzJGLG1CQUFsRDtBQUNBTixVQUFJLENBQUMxRyxJQUFMLEdBQVlBLElBQVo7QUFDQXdMLFdBQUssQ0FBQ3JDLE1BQU4sQ0FBYXpDLElBQWI7QUFDSDs7QUFDRCxXQUFPaUYsU0FBUDtBQUNILEdBOUJEOztBQStCQThDLHlCQUF1QixDQUFDL3JCLFNBQXhCLENBQWtDazFCLGdDQUFsQyxHQUFxRSxVQUFVaEIsU0FBVixFQUFxQmpMLFNBQXJCLEVBQWdDO0FBQ2pHaUwsYUFBUyxDQUFDaUIsOEJBQVYsQ0FBeUNsTSxTQUF6QyxFQUFvRCxJQUFwRDtBQUNBLFdBQU9BLFNBQVA7QUFDSCxHQUhEOztBQUlBOEMseUJBQXVCLENBQUMvckIsU0FBeEIsQ0FBa0NxMUIsaUNBQWxDLEdBQXNFLFVBQVVuQixTQUFWLEVBQXFCaEwsT0FBckIsRUFBOEI7QUFDaEcsV0FBTyxDQUFQO0FBQ0gsR0FGRDs7QUFHQTZDLHlCQUF1QixDQUFDL3JCLFNBQXhCLENBQWtDczFCLGlDQUFsQyxHQUFzRSxVQUFVcEIsU0FBVixFQUFxQmhMLE9BQXJCLEVBQThCO0FBQ2hHLFdBQU8sQ0FBUDtBQUNILEdBRkQ7O0FBR0E2Qyx5QkFBdUIsQ0FBQzJJLGFBQXhCLEdBQXdDLENBQUNhLG1CQUFELENBQXhDO0FBQ0EsU0FBT3hKLHVCQUFQO0FBQ0gsQ0E1SDhCLENBNEg3QjZJLFFBNUg2QixDQUEvQjs7QUE2SEF2MkIsT0FBTyxDQUFDMHRCLHVCQUFSLEdBQWtDQSx1QkFBbEM7O0FBQ0EsU0FBU2tKLFNBQVQsQ0FBbUJuTSxLQUFuQixFQUEwQitNLE9BQTFCLEVBQW1DN00sSUFBbkMsRUFBeUM7QUFDckMsTUFBSTFMLElBQUksR0FBR3dMLEtBQUssQ0FBQ3RILGNBQU4sQ0FBcUJxVSxPQUFyQixDQUFYOztBQUNBLE1BQUlDLEtBQUssR0FBRztBQUNScFAsYUFBUyxFQUFFaUIsa0JBQWtCLENBQUNoSixhQUFuQixDQUFpQzBGLGtCQURwQztBQUVSL0csUUFBSSxFQUFFQSxJQUZFO0FBR1IxQyxVQUFNLEVBQUVrTyxLQUhBO0FBSVI1SCxlQUFXLEVBQUUyVSxPQUpMO0FBS1I3TSxRQUFJLEVBQUUsSUFMRTtBQU1STCxPQUFHLEVBQUVLLElBTkc7QUFPUkksV0FBTyxFQUFFMW9CO0FBUEQsR0FBWjtBQVNBb29CLE9BQUssQ0FBQ3JDLE1BQU4sQ0FBYXFQLEtBQWI7O0FBQ0EsTUFBSXpELGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBVXhmLEtBQVYsRUFBaUI7QUFDakMsUUFBSXFXLE9BQU8sR0FBR2lELGlCQUFpQixDQUFDanBCLEtBQWxCLEdBQTBCb3ZCLGFBQTFCLENBQXdDemYsS0FBeEMsQ0FBZDtBQUNBaVcsU0FBSyxDQUFDSCxHQUFOLENBQVU0Siw4QkFBVixDQUF5Q3JKLE9BQXpDLEVBQWtELEdBQWxEO0FBQ0gsR0FIRDs7QUFJQSxNQUFJc0osYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFVM2YsS0FBVixFQUFpQjtBQUNqQyxRQUFJcVcsT0FBTyxHQUFHaUQsaUJBQWlCLENBQUNqcEIsS0FBbEIsR0FBMEJvdkIsYUFBMUIsQ0FBd0N6ZixLQUF4QyxDQUFkO0FBQ0FpVyxTQUFLLENBQUNILEdBQU4sQ0FBVTRKLDhCQUFWLENBQXlDckosT0FBekMsRUFBa0QsQ0FBbEQ7QUFDSCxHQUhEOztBQUlBLE1BQUl5SSxhQUFhLEdBQUc3WCxNQUFNLENBQUNnUCxLQUFLLENBQUM2SSxhQUFQLENBQU4sS0FBZ0MsTUFBcEQ7O0FBQ0EsTUFBSUEsYUFBSixFQUFtQjtBQUNmLFFBQUksQ0FBQzdJLEtBQUssQ0FBQ21ELGNBQU4sQ0FBcUJoc0IsR0FBckIsQ0FBeUI0MUIsT0FBekIsQ0FBTCxFQUF3QztBQUNwQy9NLFdBQUssQ0FBQzJKLFlBQU4sQ0FBbUJvRCxPQUFuQjs7QUFDQS9NLFdBQUssQ0FBQ21ELGNBQU4sQ0FBcUJqUixHQUFyQixDQUF5QjZhLE9BQXpCLEVBQWtDLElBQWxDOztBQUNBL00sV0FBSyxDQUFDb0QsU0FBTixDQUFnQjRGLFFBQWhCLENBQXlCK0QsT0FBekI7QUFDSCxLQUpELE1BS0s7QUFDRC9NLFdBQUssQ0FBQ21ELGNBQU4sQ0FBcUJzRixNQUFyQixDQUE0QnNFLE9BQTVCOztBQUNBL00sV0FBSyxDQUFDb0QsU0FBTixDQUFnQmlHLFdBQWhCLENBQTRCMEQsT0FBNUI7O0FBQ0EvTSxXQUFLLENBQUM0SixhQUFOLENBQW9CbUQsT0FBcEI7QUFDSDs7QUFDRHhELGlCQUFhLENBQUN3RCxPQUFELENBQWI7O0FBQ0EvTSxTQUFLLENBQUN5RSxpQ0FBTixDQUF3QzNOLEtBQUssQ0FBQ2dTLElBQU4sQ0FBVzlJLEtBQUssQ0FBQ21ELGNBQU4sQ0FBcUI0RixJQUFyQixFQUFYLENBQXhDO0FBQ0gsR0FiRCxNQWNLO0FBQ0QsUUFBSS9JLEtBQUssQ0FBQ21ELGNBQU4sQ0FBcUJwZCxHQUFyQixDQUF5QmduQixPQUF6QixDQUFKLEVBQXVDO0FBQ25DL00sV0FBSyxDQUFDbUQsY0FBTixDQUFxQnNGLE1BQXJCLENBQTRCc0UsT0FBNUI7O0FBQ0EvTSxXQUFLLENBQUNvRCxTQUFOLENBQWdCaUcsV0FBaEIsQ0FBNEIwRCxPQUE1Qjs7QUFDQS9NLFdBQUssQ0FBQzRKLGFBQU4sQ0FBb0JtRCxPQUFwQjtBQUNBeEQsbUJBQWEsQ0FBQ3dELE9BQUQsQ0FBYjtBQUNILEtBTEQsTUFNSyxJQUFJL00sS0FBSyxDQUFDbUQsY0FBTixDQUFxQjFZLElBQXJCLEdBQTRCLENBQWhDLEVBQW1DO0FBQ3BDLFVBQUlvZixHQUFHLEdBQUc3SixLQUFLLENBQUNtRCxjQUFOLENBQXFCNEYsSUFBckIsR0FBNEJlLElBQTVCLEdBQW1DdDBCLEtBQTdDOztBQUNBd3FCLFdBQUssQ0FBQ21ELGNBQU4sQ0FBcUJzRixNQUFyQixDQUE0Qm9CLEdBQTVCOztBQUNBN0osV0FBSyxDQUFDb0QsU0FBTixDQUFnQmlHLFdBQWhCLENBQTRCUSxHQUE1Qjs7QUFDQU4sbUJBQWEsQ0FBQ00sR0FBRCxDQUFiO0FBQ0E3SixXQUFLLENBQUM0SixhQUFOLENBQW9CQyxHQUFwQjs7QUFDQTdKLFdBQUssQ0FBQ21ELGNBQU4sQ0FBcUJqUixHQUFyQixDQUF5QjZhLE9BQXpCLEVBQWtDLElBQWxDOztBQUNBL00sV0FBSyxDQUFDb0QsU0FBTixDQUFnQjRGLFFBQWhCLENBQXlCK0QsT0FBekI7O0FBQ0F4RCxtQkFBYSxDQUFDd0QsT0FBRCxDQUFiO0FBQ0EvTSxXQUFLLENBQUMySixZQUFOLENBQW1Cb0QsT0FBbkI7QUFDSCxLQVZJLE1BV0E7QUFDRC9NLFdBQUssQ0FBQ21ELGNBQU4sQ0FBcUJqUixHQUFyQixDQUF5QjZhLE9BQXpCLEVBQWtDLElBQWxDOztBQUNBL00sV0FBSyxDQUFDb0QsU0FBTixDQUFnQjRGLFFBQWhCLENBQXlCK0QsT0FBekI7O0FBQ0EvTSxXQUFLLENBQUMySixZQUFOLENBQW1Cb0QsT0FBbkI7QUFDQXhELG1CQUFhLENBQUN3RCxPQUFELENBQWI7QUFDSDs7QUFDRC9NLFNBQUssQ0FBQ3lFLGlDQUFOLENBQXdDM04sS0FBSyxDQUFDZ1MsSUFBTixDQUFXOUksS0FBSyxDQUFDbUQsY0FBTixDQUFxQjRGLElBQXJCLEVBQVgsQ0FBeEM7QUFDSDtBQUNKOztBQUNELElBQUlsSCxlQUFlLEdBQUksVUFBVTluQixNQUFWLEVBQWtCO0FBQ3JDQyxXQUFTLENBQUM2bkIsZUFBRCxFQUFrQjluQixNQUFsQixDQUFUOztBQUNBLFdBQVM4bkIsZUFBVCxHQUEyQjtBQUN2QixRQUFJOVIsS0FBSyxHQUFHaFcsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsRUFBbUJqRSxTQUFuQixDQUFuQixJQUFvRCxJQUFoRTs7QUFDQStaLFNBQUssQ0FBQzRRLDRCQUFOLEdBQXFDLENBQXJDO0FBQ0E1USxTQUFLLENBQUM2USw2QkFBTixHQUFzQyxDQUF0QztBQUNBN1EsU0FBSyxDQUFDOFEsd0JBQU4sR0FBaUMsQ0FBakM7QUFDQTlRLFNBQUssQ0FBQytRLHdCQUFOLEdBQWlDLENBQWpDO0FBQ0EsV0FBTy9RLEtBQVA7QUFDSDs7QUFDRDhSLGlCQUFlLENBQUNDLGFBQWhCLEdBQWdDLFVBQVU5QixLQUFWLEVBQWlCO0FBQzdDLFFBQUlpTixLQUFLLEdBQUdwTCxlQUFlLENBQUNnQixHQUFoQixFQUFaO0FBQ0FvSyxTQUFLLENBQUNqTixLQUFOLEdBQWNBLEtBQWQ7QUFDQSxXQUFPaU4sS0FBUDtBQUNILEdBSkQ7O0FBS0EsU0FBT3BMLGVBQVA7QUFDSCxDQWhCc0IsQ0FnQnJCcUwsV0FoQnFCLENBQXZCOztBQWlCQTMzQixPQUFPLENBQUNzc0IsZUFBUixHQUEwQkEsZUFBMUIsQzs7Ozs7Ozs7QUM5MENBOU8sTUFBTSxDQUFDeGQsT0FBUCxHQUFpQixTQUFTNDNCLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCO0FBQ3hDLFNBQU87QUFDTkMsU0FBSyxFQUFFO0FBQ05DLFVBQUksRUFBRSxpQkFEQTtBQUVOQyxXQUFLLEVBQUU7QUFGRCxLQUREO0FBS05DLFNBQUssRUFBRTtBQUNOdFksV0FBSyxFQUFFO0FBQ05uSyxZQUFJLEVBQUUrTCxLQURBO0FBRU4yVyxnQkFBUSxFQUFFO0FBRkosT0FERDtBQUtOLGdCQUFVO0FBQ1QxaUIsWUFBSSxFQUFFaUcsTUFERztBQUVUMGMsZUFBTyxFQUFFO0FBRkEsT0FMSjtBQVNOLGdCQUFVO0FBQ1QzaUIsWUFBSSxFQUFFaUcsTUFERztBQUVUMGMsZUFBTyxFQUFFO0FBRkEsT0FUSjtBQWFOQyxxQkFBZSxFQUFFO0FBQ2hCNWlCLFlBQUksRUFBRStMLEtBRFU7QUFFaEI0VyxlQUFPLEVBQUUsb0JBQVk7QUFDcEIsaUJBQU8sRUFBUDtBQUNBO0FBSmU7QUFiWCxLQUxEO0FBeUJOakMsWUFBUSxpWkF6QkY7QUF1Q05tQyxTQUFLLEVBQUU7QUFDTjFZLFdBQUssRUFBRTtBQUNOMlksZUFBTyxDQUFDQyxNQUFELEVBQVM7QUFDZixlQUFLQyxLQUFMLENBQVdaLFNBQVgsQ0FBcUJhLFlBQXJCLENBQWtDLE9BQWxDLEVBQTJDRixNQUEzQztBQUNBLGVBQUtDLEtBQUwsQ0FBV1osU0FBWCxDQUFxQmxOLFVBQXJCLENBQWdDM0YsT0FBaEM7QUFDQSxTQUpLOztBQUtOMlQsWUFBSSxFQUFFO0FBTEE7QUFERCxLQXZDRDtBQWdETkMsWUFBUSxFQUFFO0FBQ1RDLGVBQVMsR0FBRztBQUNYLGVBQU85NEIsTUFBTSxDQUFDKzRCLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUtDLFVBQXZCLEVBQW1DO0FBQ3pDQywrQkFBcUIsRUFBRSxLQUFLQztBQURhLFNBQW5DLENBQVA7QUFHQTs7QUFMUSxLQWhESjs7QUF1RE5DLFdBQU8sR0FBRztBQUNULFdBQUtDLGNBQUwsR0FBc0IsQ0FBQ3ZiLElBQUQsRUFBT25KLEtBQVAsS0FDckIwa0IsY0FBYyxDQUFDdmIsSUFBRCxFQUFPbkosS0FBUCxFQUFjLEtBQUsya0IsTUFBTCxDQUFhLFFBQWIsQ0FBZCxFQUF1QyxLQUFLQSxNQUFMLENBQWEsUUFBYixDQUF2QyxDQURmOztBQUdBLFdBQUtDLG1CQUFMLEdBQTJCLENBQUN6YixJQUFELEVBQU9rRixXQUFQLEVBQW9Cck8sS0FBcEIsS0FDMUI0a0IsbUJBQW1CLENBQUN6YixJQUFELEVBQU9rRixXQUFQLEVBQW9Cck8sS0FBcEIsRUFBMkIsS0FBSzJrQixNQUFMLENBQWEsUUFBYixDQUEzQixFQUFvRCxLQUFLQSxNQUFMLENBQWEsUUFBYixDQUFwRCxDQURwQjs7QUFHQSxXQUFLRSxVQUFMLEdBQWtCLENBQUMxYixJQUFELEVBQU9uSSxJQUFQLEtBQWdCNmpCLFVBQVUsQ0FBQyxLQUFLQyxVQUFOLEVBQWtCM2IsSUFBbEIsRUFBd0JuSSxJQUF4QixDQUE1Qzs7QUFFQSxXQUFLZ2pCLEtBQUwsQ0FBV1osU0FBWCxDQUFxQmEsWUFBckIsQ0FBa0MsT0FBbEMsRUFBMkMsS0FBSzlZLEtBQWhEO0FBRUEsVUFBTVMsZUFBZSxHQUFHLEtBQUtrWixVQUFMLENBQWdCQyxpQkFBaEIsR0FBb0NDLE1BQXBDLENBQTJDN2IsSUFBSSxJQUFJO0FBQzFFLFlBQUlBLElBQUksQ0FBQ3dELEdBQUwsS0FBYSxRQUFqQixFQUEyQjtBQUMxQixpQkFBT3hELElBQVA7QUFDQTs7QUFDRCxZQUFJQSxJQUFJLENBQUN3RCxHQUFMLENBQVNzWSxVQUFULENBQW9CLFNBQXBCLENBQUosRUFBb0M7QUFDbkMsaUJBQU85YixJQUFQO0FBQ0E7QUFDRCxPQVB1QixDQUF4Qjs7QUFTQSxVQUFJeUMsZUFBZSxDQUFDMWYsTUFBaEIsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDL0IsYUFBSzgzQixLQUFMLENBQVdaLFNBQVgsQ0FBcUJhLFlBQXJCLENBQWtDLGVBQWxDLEVBQW1ELE1BQU07QUFDeEQsaUJBQU8sS0FBUDtBQUNBLFNBRkQ7QUFHQTs7QUFDRCxVQUFNdFksb0JBQW9CLEdBQUcsS0FBS21aLFVBQUwsQ0FBZ0JDLGlCQUFoQixHQUFvQ0MsTUFBcEMsQ0FBMkM3YixJQUFJLElBQUk7QUFDL0UsWUFBSUEsSUFBSSxDQUFDd0QsR0FBTCxLQUFhLFNBQWpCLEVBQTRCO0FBQzNCLGlCQUFPeEQsSUFBUDtBQUNBOztBQUVELFlBQUlBLElBQUksQ0FBQ3dELEdBQUwsQ0FBU3NZLFVBQVQsQ0FBb0IsVUFBcEIsQ0FBSixFQUFxQztBQUNwQyxpQkFBTzliLElBQVA7QUFDQTtBQUNELE9BUjRCLENBQTdCO0FBVUEsVUFBTXVDLG1CQUFtQixHQUFHLEtBQUtvWixVQUFMLENBQWdCQyxpQkFBaEIsR0FBb0NDLE1BQXBDLENBQTJDN2IsSUFBSSxJQUFJO0FBQzlFLFlBQUlBLElBQUksQ0FBQ3dELEdBQUwsS0FBYSxPQUFqQixFQUEwQjtBQUN6QixpQkFBT3hELElBQVA7QUFDQTs7QUFDRCxZQUFJQSxJQUFJLENBQUN3RCxHQUFMLENBQVNzWSxVQUFULENBQW9CLFFBQXBCLENBQUosRUFBbUM7QUFDbEMsaUJBQU85YixJQUFQO0FBQ0E7QUFDRCxPQVAyQixDQUE1QjtBQVNBLFVBQU0wQyxlQUFlLEdBQUcsS0FBS2laLFVBQUwsQ0FBZ0JDLGlCQUFoQixHQUFvQ0MsTUFBcEMsQ0FBMkM3YixJQUFJLElBQUk7QUFDMUUsWUFBSUEsSUFBSSxDQUFDd0QsR0FBTCxLQUFhLFFBQWpCLEVBQTJCO0FBQzFCLGlCQUFPeEQsSUFBUDtBQUNBOztBQUVELFlBQUlBLElBQUksQ0FBQ3dELEdBQUwsQ0FBU3NZLFVBQVQsQ0FBb0IsU0FBcEIsQ0FBSixFQUFvQztBQUNuQyxpQkFBTzliLElBQVA7QUFDQTtBQUNELE9BUnVCLENBQXhCOztBQVVBLFVBQUkwQyxlQUFlLENBQUMzZixNQUFoQixHQUF5QixDQUE3QixFQUFnQztBQUMvQixhQUFLODNCLEtBQUwsQ0FBV1osU0FBWCxDQUFxQmEsWUFBckIsQ0FBa0MsZUFBbEMsRUFBbUQsTUFBTTtBQUN4RCxpQkFBTyxLQUFQO0FBQ0EsU0FGRDtBQUdBOztBQUdELFdBQUtELEtBQUwsQ0FBV1osU0FBWCxDQUFxQmEsWUFBckIsQ0FDQywwQkFERCxFQUVDclksZUFGRDtBQUtBLFdBQUtvWSxLQUFMLENBQVdaLFNBQVgsQ0FBcUJhLFlBQXJCLENBQ0MseUJBREQsRUFFQyxDQUFDOWEsSUFBRCxFQUFPbkosS0FBUCxLQUFpQjtBQUNoQixlQUFPLEtBQUs2a0IsVUFBTCxDQUFnQixLQUFLSCxjQUFMLENBQW9CdmIsSUFBcEIsRUFBMEJuSixLQUExQixDQUFoQixFQUFrRCxRQUFsRCxDQUFQO0FBQ0EsT0FKRjtBQU9BLFdBQUtna0IsS0FBTCxDQUFXWixTQUFYLENBQXFCYSxZQUFyQixDQUNDLDhCQURELEVBRUN2WSxtQkFGRDtBQU1BLFdBQUtzWSxLQUFMLENBQVdaLFNBQVgsQ0FBcUJhLFlBQXJCLENBQ0MsNkJBREQsRUFFQyxDQUFDOWEsSUFBRCxFQUFPbkosS0FBUCxLQUFpQjtBQUNoQixlQUFPLEtBQUs2a0IsVUFBTCxDQUFnQixLQUFLSCxjQUFMLENBQW9CdmIsSUFBcEIsRUFBMEJuSixLQUExQixDQUFoQixFQUFrRCxPQUFsRCxDQUFQO0FBQ0EsT0FKRjtBQU9BLFdBQUtna0IsS0FBTCxDQUFXWixTQUFYLENBQXFCYSxZQUFyQixDQUNDLCtCQURELEVBRUN0WSxvQkFGRDtBQUlBLFdBQUtxWSxLQUFMLENBQVdaLFNBQVgsQ0FBcUJhLFlBQXJCLENBQ0MsOEJBREQsRUFFQyxDQUFDOWEsSUFBRCxFQUFPa0YsV0FBUCxFQUFvQnJPLEtBQXBCLEtBQThCO0FBQzdCLGVBQU8sS0FBSzZrQixVQUFMLENBQWdCLEtBQUtELG1CQUFMLENBQXlCemIsSUFBekIsRUFBK0JrRixXQUEvQixFQUE0Q3JPLEtBQTVDLENBQWhCLEVBQW9FLFNBQXBFLENBQVA7QUFDQSxPQUpGO0FBT0EsV0FBS2drQixLQUFMLENBQVdaLFNBQVgsQ0FBcUJhLFlBQXJCLENBQ0MsMEJBREQsRUFFQ3BZLGVBRkQ7QUFJQSxXQUFLbVksS0FBTCxDQUFXWixTQUFYLENBQXFCYSxZQUFyQixDQUNDLHlCQURELEVBRUMsQ0FBQzlhLElBQUQsRUFBT25KLEtBQVAsS0FBaUI7QUFDaEIsZUFBTyxLQUFLNmtCLFVBQUwsQ0FBZ0IsS0FBS0gsY0FBTCxDQUFvQnZiLElBQXBCLEVBQTBCbkosS0FBMUIsQ0FBaEIsRUFBa0QsUUFBbEQsQ0FBUDtBQUNBLE9BSkY7QUFPQSxLQW5LSzs7QUFvS05rbEIsV0FBTyxFQUFFO0FBQ1JDLHFCQUFlLENBQUNoVSxJQUFELEVBQU87QUFDckIsWUFBTW5SLEtBQUssR0FBR21SLElBQUksQ0FBQ25SLEtBQW5CO0FBQ0EsWUFBTW1MLEtBQUssR0FBR2dHLElBQUksQ0FBQ3BKLE1BQUwsQ0FBWW9ELEtBQTFCO0FBQ0EsWUFBSWlhLFdBQVcsR0FDZCxPQUFPamEsS0FBSyxDQUFDbUUsT0FBYixLQUF5QixVQUF6QixHQUNHbkUsS0FBSyxDQUFDbUUsT0FBTixDQUFjdFAsS0FBZCxDQURILEdBRUdtTCxLQUFLLENBQUVuTCxLQUFGLENBSFQ7O0FBS0EsWUFBSXBQLElBQUksR0FBR3VnQixJQUFJLENBQUNwSixNQUFMLENBQVk4Rix1QkFBWixDQUFvQ3VYLFdBQXBDLEVBQWlEcGxCLEtBQWpELEVBQXdEbUwsS0FBeEQsQ0FBWDs7QUFFQSxZQUFJdmEsSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDdkJBLGNBQUksR0FBRyxRQUFQO0FBQ0E7O0FBRUQsWUFBTXkwQixPQUFPLEdBQUcsS0FBS1gsY0FBTCxDQUFvQlUsV0FBcEIsRUFBaUNwbEIsS0FBakMsQ0FBaEI7QUFDQSxZQUFNc2xCLFFBQVEsR0FBR25VLElBQUksQ0FBQ2dGLElBQUwsSUFBYWhGLElBQUksQ0FBQ2dGLElBQUwsQ0FBV2tOLEdBQUcsQ0FBQ2tDLFFBQWYsQ0FBOUI7QUFDQXBVLFlBQUksQ0FBQ2dGLElBQUwsR0FBWSxLQUFLMk8sVUFBTCxDQUFnQlUsYUFBaEIsQ0FBOEI1MEIsSUFBOUIsRUFBb0N5MEIsT0FBcEMsRUFBNkNDLFFBQTdDLENBQVo7QUFDQSxPQWxCTzs7QUFtQlJHLHFCQUFlLENBQUN0VSxJQUFELEVBQU87QUFDckIsWUFBTW5SLEtBQUssR0FBR21SLElBQUksQ0FBQ25SLEtBQW5CO0FBQ0EsWUFBTW1MLEtBQUssR0FBR2dHLElBQUksQ0FBQ3BKLE1BQUwsQ0FBWW9ELEtBQTFCO0FBQ0EsWUFBSWlhLFdBQVcsR0FDZCxPQUFPamEsS0FBSyxDQUFDbUUsT0FBYixLQUF5QixVQUF6QixHQUNHbkUsS0FBSyxDQUFDbUUsT0FBTixDQUFjdFAsS0FBZCxDQURILEdBRUdtTCxLQUFLLENBQUVuTCxLQUFGLENBSFQ7O0FBS0EsWUFBSXBQLElBQUksR0FBR3VnQixJQUFJLENBQUNwSixNQUFMLENBQVl1Ryx1QkFBWixDQUFvQzhXLFdBQXBDLEVBQWlEcGxCLEtBQWpELEVBQXdEbUwsS0FBeEQsQ0FBWDs7QUFFQSxZQUFJdmEsSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDdkJBLGNBQUksR0FBRyxRQUFQO0FBQ0E7O0FBR0QsWUFBTXkwQixPQUFPLEdBQUcsS0FBS1gsY0FBTCxDQUFvQlUsV0FBcEIsRUFBaUNwbEIsS0FBakMsQ0FBaEI7QUFDQSxZQUFNc2xCLFFBQVEsR0FBR25VLElBQUksQ0FBQ2dGLElBQUwsSUFBYWhGLElBQUksQ0FBQ2dGLElBQUwsQ0FBV2tOLEdBQUcsQ0FBQ2tDLFFBQWYsQ0FBOUI7QUFDQXBVLFlBQUksQ0FBQ2dGLElBQUwsR0FBWSxLQUFLMk8sVUFBTCxDQUFnQlUsYUFBaEIsQ0FBOEI1MEIsSUFBOUIsRUFBb0N5MEIsT0FBcEMsRUFBNkNDLFFBQTdDLENBQVo7QUFDQSxPQXJDTzs7QUFzQ1JJLHlCQUFtQixDQUFDdlUsSUFBRCxFQUFPO0FBQ3pCLFlBQU1uUixLQUFLLEdBQUdtUixJQUFJLENBQUNuUixLQUFuQjtBQUNBLFlBQU1tTCxLQUFLLEdBQUdnRyxJQUFJLENBQUNwSixNQUFMLENBQVlvRCxLQUExQjtBQUNBLFlBQUlpYSxXQUFXLEdBQ2QsT0FBT2phLEtBQUssQ0FBQ21FLE9BQWIsS0FBeUIsVUFBekIsR0FDR25FLEtBQUssQ0FBQ21FLE9BQU4sQ0FBY3RQLEtBQWQsQ0FESCxHQUVHbUwsS0FBSyxDQUFFbkwsS0FBRixDQUhUOztBQUtBLFlBQUlwUCxJQUFJLEdBQUd1Z0IsSUFBSSxDQUFDcEosTUFBTCxDQUFZb0csMkJBQVosQ0FBd0NpWCxXQUF4QyxFQUFxRHBsQixLQUFyRCxFQUE0RG1MLEtBQTVELENBQVg7O0FBRUEsWUFBSXZhLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3ZCQSxjQUFJLEdBQUcsT0FBUDtBQUNBOztBQUVELFlBQU15MEIsT0FBTyxHQUFHLEtBQUtYLGNBQUwsQ0FBb0JVLFdBQXBCLEVBQWlDcGxCLEtBQWpDLENBQWhCO0FBQ0EsWUFBTXNsQixRQUFRLEdBQUduVSxJQUFJLENBQUNnRixJQUFMLElBQWFoRixJQUFJLENBQUNnRixJQUFMLENBQVdrTixHQUFHLENBQUNrQyxRQUFmLENBQTlCO0FBRUFwVSxZQUFJLENBQUNnRixJQUFMLEdBQVksS0FBSzJPLFVBQUwsQ0FBZ0JVLGFBQWhCLENBQThCNTBCLElBQTlCLEVBQW9DeTBCLE9BQXBDLEVBQTZDQyxRQUE3QyxDQUFaO0FBQ0EsT0F4RE87O0FBeURSSywwQkFBb0IsQ0FBQ3hVLElBQUQsRUFBTztBQUMxQixZQUFNblIsS0FBSyxHQUFHbVIsSUFBSSxDQUFDblIsS0FBbkI7QUFDQSxZQUFNaVAsVUFBVSxHQUFHa0MsSUFBSSxDQUFDbEMsVUFBeEI7QUFDQSxZQUFNOUQsS0FBSyxHQUFHZ0csSUFBSSxDQUFDcEosTUFBTCxDQUFZb0QsS0FBMUI7QUFDQSxZQUFNaUIsVUFBVSxHQUFHLEtBQUs0WCxLQUFMLENBQVdaLFNBQVgsQ0FBcUJ3QyxZQUFyQixDQUFrQyxZQUFsQyxDQUFuQjtBQUNBLFlBQUlSLFdBQVcsR0FDZCxPQUFPamEsS0FBSyxDQUFDbUUsT0FBYixLQUF5QixVQUF6QixHQUNHbkUsS0FBSyxDQUFDbUUsT0FBTixDQUFjdFAsS0FBZCxFQUFzQm9NLFVBQXRCLEVBQW9DNkMsVUFBcEMsQ0FESCxHQUVHOUQsS0FBSyxDQUFFbkwsS0FBRixDQUFMLENBQWdCb00sVUFBaEIsRUFBOEI2QyxVQUE5QixDQUhKOztBQU1BLFlBQUlyZSxJQUFJLEdBQUd1Z0IsSUFBSSxDQUFDcEosTUFBTCxDQUFZcUcsNEJBQVosQ0FBeUNnWCxXQUF6QyxFQUFzRHBsQixLQUF0RCxFQUE2RG1MLEtBQTdELENBQVg7O0FBRUEsWUFBSXZhLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3ZCQSxjQUFJLEdBQUcsU0FBUDtBQUNBOztBQUVELFlBQU15MEIsT0FBTyxHQUFHLEtBQUtULG1CQUFMLENBQXlCUSxXQUF6QixFQUFzQ3BsQixLQUF0QyxFQUE2Q2lQLFVBQTdDLENBQWhCO0FBQ0EsWUFBTXFXLFFBQVEsR0FBR25VLElBQUksQ0FBQ2dGLElBQUwsSUFBYWhGLElBQUksQ0FBQ2dGLElBQUwsQ0FBV2tOLEdBQUcsQ0FBQ2tDLFFBQWYsQ0FBOUI7QUFDQXBVLFlBQUksQ0FBQ2dGLElBQUwsR0FBWSxLQUFLMk8sVUFBTCxDQUFnQlUsYUFBaEIsQ0FBOEI1MEIsSUFBOUIsRUFBb0N5MEIsT0FBcEMsRUFBNkNDLFFBQTdDLENBQVo7QUFDQSxPQTdFTzs7QUE4RVJkLDZCQUF1QixPQUFZO0FBQUEsWUFBWDtBQUFFLzRCO0FBQUYsU0FBVztBQUNsQyxhQUFLbzZCLEtBQUwsQ0FBVyx1QkFBWCxFQUFvQ3A2QixLQUFwQztBQUNBOztBQWhGTztBQXBLSCxHQUFQOztBQXdQQSxXQUFTaTVCLGNBQVQsQ0FBd0J2YixJQUF4QixFQUE4Qm5KLEtBQTlCLEVBQXFDOGxCLEtBQXJDLEVBQTRDQyxXQUE1QyxFQUF5RDtBQUN4RCxXQUFPO0FBQ04sT0FBRUQsS0FBRixHQUFXM2MsSUFETDtBQUVOLE9BQUU0YyxXQUFGLEdBQWlCL2xCLEtBRlg7QUFHTmdtQixXQUFLLEVBQUVobUIsS0FBSyxHQUFHLENBQVIsS0FBYyxDQUhmO0FBSU5pbUIsVUFBSSxFQUFFam1CLEtBQUssR0FBRyxDQUFSLEtBQWM7QUFKZCxLQUFQO0FBTUE7O0FBRUQsV0FBUzRrQixtQkFBVCxDQUE2QnpiLElBQTdCLEVBQW1Da0YsV0FBbkMsRUFBZ0RyTyxLQUFoRCxFQUF1RDhsQixLQUF2RCxFQUE4REMsV0FBOUQsRUFBMkU7QUFDMUUsV0FBTztBQUNOLE9BQUVELEtBQUYsR0FBVzNjLElBREw7QUFFTixPQUFFNGMsV0FBRixHQUFpQi9sQixLQUZYO0FBR05nbUIsV0FBSyxFQUFFaG1CLEtBQUssR0FBRyxDQUFSLEtBQWMsQ0FIZjtBQUlOaW1CLFVBQUksRUFBRWptQixLQUFLLEdBQUcsQ0FBUixLQUFjLENBSmQ7QUFLTmttQixrQkFBWSxFQUFFN1g7QUFMUixLQUFQO0FBT0E7O0FBRUQsV0FBU3dXLFVBQVQsQ0FBb0JzQixTQUFwQixFQUErQmhkLElBQS9CLEVBQXFDbkksSUFBckMsRUFBMkM7QUFDMUMsUUFBTW9sQixXQUFXLEdBQUdELFNBQVMsQ0FBQ0UsWUFBOUI7QUFDQSxRQUFJQyxRQUFRLEdBQUdGLFdBQVcsQ0FBQ0csT0FBWixFQUFmO0FBQ0EsUUFBSUMsSUFBSjs7QUFDQSxXQUFRQSxJQUFJLEdBQUdGLFFBQVEsQ0FBQ3ZHLElBQVQsR0FBZ0J0MEIsS0FBL0IsRUFBdUM7QUFDdEMsVUFBSW1GLElBQUksR0FBRzQxQixJQUFJLENBQUUsQ0FBRixDQUFmO0FBQ0EsVUFBSUMsV0FBVyxHQUFHRCxJQUFJLENBQUUsQ0FBRixDQUFKLENBQVVDLFdBQTVCOztBQUNBLFVBQUk7QUFDSCxZQUFJQSxXQUFXLENBQUN0ZCxJQUFELENBQVgsS0FBc0J2WSxJQUFJLEtBQUtvUSxJQUFULElBQWlCcFEsSUFBSSxDQUFDcTBCLFVBQUwsV0FBbUJqa0IsSUFBbkIsT0FBdkMsQ0FBSixFQUF5RTtBQUN4RSxpQkFBT3BRLElBQVA7QUFDQTtBQUNELE9BSkQsQ0FJRSxPQUFPODFCLEdBQVAsRUFBWSxDQUNiO0FBQ0Q7O0FBQ0QsV0FBTyxTQUFQO0FBQ0E7QUFDRCxDQTVSRCxDOzs7Ozs7O0FDQ0ExZCxNQUFNLENBQUN4ZCxPQUFQLEdBQWlCLFNBQVNtN0IsT0FBVCxDQUFpQnRELEdBQWpCLEVBQXNCO0FBQ3RDQSxLQUFHLENBQUN1RCxlQUFKLENBQW9CLGlCQUFwQixFQUF1QyxNQUFNajdCLG1CQUFPLENBQUMscURBQUQsQ0FBUCxDQUFlK3FCLFNBQTVEO0FBQ0EyTSxLQUFHLENBQUM3MEIsU0FBSixDQUFjLFdBQWQsRUFBMkI3QyxtQkFBTyxDQUFDLHlEQUFELENBQVAsQ0FBdUIwM0IsR0FBdkIsQ0FBM0I7QUFDQSxDQUhELEM7Ozs7Ozs7Ozs7Ozs7O0FDREE7O0FBQ0E7O0FBSUEsU0FBZ0IsU0FBaEIsR0FBeUI7QUFDckIsTUFBTSxnQkFBZ0IsR0FBRywyQkFBYSxVQUFiLEVBQXpCOztBQUNBLE1BQU0sVUFBVSxHQUFHLG1CQUFtQixDQUFDLEdBQUQsQ0FBbkIsRUFBbkI7O0FBQ0EsU0FBTyxHQUFHLENBQUMsVUFBRCxFQUFhLFFBQVEsSUFBRztBQUM5QixRQUFNLFlBQVksR0FBRyxtQkFBSyxJQUFMLENBQVUsZ0JBQWdCLENBQUMsSUFBM0IsRUFBaUMsUUFBakMsQ0FBckI7QUFDQSxXQUFPLG1CQUFLLE1BQUwsQ0FBWSxZQUFaLElBQTRCLGdCQUFnQixDQUFDLE9BQWpCLENBQXlCLFFBQXpCLENBQTVCLEdBQWlFLElBQXhFO0FBQ0gsR0FIUyxDQUFWO0FBSUg7O0FBUEQsOEI7Ozs7Ozs7Ozs7Ozs7O0FDTEE7O0FBQVMsMkM7Ozs7Ozs7QUNBVCxJQUFNd0QsU0FBUyxHQUFHLE1BQWxCO0FBQ0EsSUFBTUMsR0FBRyxHQUFHO0FBQ1J6ZSxNQUFJLEVBQUcwZSxPQUFELElBQWFDLE9BQU8sQ0FBQzNlLElBQVIsV0FBZ0J3ZSxTQUFoQixjQUE2QkUsT0FBN0IsRUFEWDtBQUVSRSxNQUFJLEVBQUdGLE9BQUQsSUFBYUMsT0FBTyxDQUFDQyxJQUFSLFdBQWdCSixTQUFoQixjQUE2QkUsT0FBN0IsRUFGWDtBQUdSRyxPQUFLLEVBQUdILE9BQUQsSUFBYUMsT0FBTyxDQUFDRSxLQUFSLFdBQWlCTCxTQUFqQixjQUE4QkUsT0FBOUI7QUFIWixDQUFaO0FBS0EsSUFBTXhXLE9BQU8sR0FBRyxrRUFBaEI7QUFDQSxJQUFNNFcsVUFBVSxHQUFHO0FBQ2ZDLGtCQUFnQixFQUFFLEtBREg7QUFFZkMsZ0JBQWMsRUFBRSxLQUZEO0FBR2ZDLGVBQWEsRUFBRSxLQUhBOztBQUlmQyxjQUFZLENBQUM5YyxJQUFELEVBQU87QUFDZixRQUFNK2MsS0FBSyxHQUFHLEdBQUd0ZCxNQUFILENBQVVPLElBQUksQ0FBQytjLEtBQWYsQ0FBZDtBQUNBLFFBQU1DLElBQUksR0FBR0QsS0FBSyxDQUFDQSxLQUFLLENBQUN0N0IsTUFBTixHQUFlLENBQWhCLENBQWxCOztBQUVBLFFBQUl1N0IsSUFBSSxLQUFLLENBQWIsRUFBZ0I7QUFDWkQsV0FBSyxDQUFDRSxHQUFOO0FBQ0g7O0FBRURaLE9BQUcsQ0FBQ0csSUFBSjtBQUNBTyxTQUFLLENBQUN4Z0IsT0FBTixDQUFjMmdCLEdBQUcsSUFBSWIsR0FBRyxDQUFDRyxJQUFKLDJCQUF1QlUsR0FBdkIsRUFBckI7QUFDSCxHQWRjOztBQWVmQyxZQUFVLENBQUNuZCxJQUFELEVBQU87QUFDYnFjLE9BQUcsQ0FBQ0csSUFBSjtBQUNBeGMsUUFBSSxDQUFDK2MsS0FBTCxDQUFXeGdCLE9BQVgsQ0FBbUIyZ0IsR0FBRyxJQUFJYixHQUFHLENBQUNHLElBQUosMkJBQXVCVSxHQUF2QixFQUExQjtBQUNILEdBbEJjOztBQW1CZkUsV0FBUyxDQUFDcGQsSUFBRCxFQUFPO0FBQ1pxYyxPQUFHLENBQUNHLElBQUosa0RBQzhDeGMsSUFBSSxDQUFDcWQsUUFEbkQsZUFDZ0VyZCxJQUFJLENBQUN6SixJQURyRTtBQUdBOGxCLE9BQUcsQ0FBQ0csSUFBSixDQUFTeGMsSUFBSSxDQUFDeWMsS0FBZDtBQUNIOztBQXhCYyxDQUFuQjtBQTJCQSxJQUFJYSxRQUFKO0FBQ0EsSUFBSUMsV0FBSjs7QUFFQSxTQUFTQyxRQUFULEdBQW9CO0FBQ2hCLFNBQU9GLFFBQVEsQ0FBQ2o1QixPQUFULENBQWlCbzVCLHVCQUFqQixLQUFzQyxDQUE3QztBQUNIOztBQUVELFNBQVNsdUIsTUFBVCxDQUFnQnNQLE9BQWhCLEVBQXlCNmUsY0FBekIsRUFBeUM7QUFDckMsTUFBTUMsVUFBVSxHQUFHOWUsT0FBTyxDQUFDMGIsTUFBUixDQUNkOEMsUUFBRCxJQUFjSyxjQUFjLElBQUlBLGNBQWMsQ0FBQ3I1QixPQUFmLENBQXVCZzVCLFFBQXZCLElBQW1DLENBRHBELENBQW5COztBQUlBLE1BQUlNLFVBQVUsQ0FBQ2w4QixNQUFYLEdBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCNDZCLE9BQUcsQ0FBQ0csSUFBSixDQUFTLDZDQUFUOztBQUVBLFNBQUssSUFBTWEsUUFBWCxJQUF1Qk0sVUFBdkIsRUFBbUM7QUFDL0J0QixTQUFHLENBQUNHLElBQUosNEJBQXdCYSxRQUF4QjtBQUNIO0FBQ0o7O0FBRUQsTUFBSSxDQUFDLENBQUNLLGNBQWMsSUFBSSxFQUFuQixFQUF1Qmo4QixNQUE1QixFQUFvQztBQUNoQzQ2QixPQUFHLENBQUN6ZSxJQUFKLENBQVMscUJBQVQ7QUFDSCxHQUZELE1BRU87QUFDSHllLE9BQUcsQ0FBQ3plLElBQUosQ0FBUyxxQ0FBVDs7QUFFQSxTQUFLLElBQU15ZixTQUFYLElBQXVCSyxjQUF2QixFQUF1QztBQUNuQ3JCLFNBQUcsQ0FBQ3plLElBQUosMkJBQXVCeWYsU0FBdkI7QUFDSDs7QUFFRCxRQUFNTyxTQUFTLEdBQUdGLGNBQWMsQ0FBQ0csS0FBZixDQUNiUixRQUFELElBQWMsT0FBT0EsUUFBUCxLQUFvQixRQURwQixDQUFsQjs7QUFHQSxRQUFJTyxTQUFKLEVBQWU7QUFDWHZCLFNBQUcsQ0FBQ3plLElBQUosQ0FDSSxnRUFESjtBQUdIO0FBQ0o7QUFDSjs7QUFFRCxTQUFTa2dCLEtBQVQsQ0FBZUMsT0FBZixFQUF3QjtBQUNwQixTQUFPeGYsTUFBTSxDQUFDeWYsR0FBUCxDQUNGRixLQURFLEdBRUZHLElBRkUsQ0FFSXBmLE9BQUQsSUFBYTtBQUNmLFFBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1Z3ZCxTQUFHLENBQUNHLElBQUosK0JBQzJCMVcsT0FEM0I7QUFHQSxhQUFPLElBQVA7QUFDSDs7QUFFRCxXQUFPdkgsTUFBTSxDQUFDeWYsR0FBUCxDQUNGdjRCLEtBREUsQ0FDSWkzQixVQURKLEVBRUZ1QixJQUZFLENBRUlQLGNBQUQsSUFBb0I7QUFDdEIsVUFBSVEsU0FBSjs7QUFDQSxVQUFJLENBQUNWLFFBQVEsRUFBYixFQUFpQjtBQUNiVSxpQkFBUyxHQUFHSixLQUFLLENBQUNDLE9BQUQsQ0FBakI7QUFDSDs7QUFFRHh1QixZQUFNLENBQUNzUCxPQUFELEVBQVU2ZSxjQUFWLENBQU47O0FBRUEsVUFBSUYsUUFBUSxFQUFaLEVBQWdCO0FBQ1o7QUFDQW5CLFdBQUcsQ0FBQ3plLElBQUoscURBQXNEMmYsV0FBdEQ7QUFDSDs7QUFFRCxhQUFPVyxTQUFTLElBQUksSUFBcEI7QUFDSCxLQWhCRSxFQWlCRkMsS0FqQkUsQ0FpQktsQyxHQUFELElBQVM7QUFDWixVQUFNbUMsTUFBTSxHQUFHN2YsTUFBTSxDQUFDeWYsR0FBUCxDQUFXSSxNQUFYLEVBQWY7O0FBQ0EsVUFBSSxDQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWtCLzVCLE9BQWxCLENBQTBCKzVCLE1BQTFCLEtBQXFDLENBQXpDLEVBQTRDO0FBQ3hDO0FBQ0EvQixXQUFHLENBQUNJLEtBQUosNkNBQStDYyxXQUEvQztBQUNBbEIsV0FBRyxDQUFDSSxLQUFKLENBQVVSLEdBQUcsQ0FBQ0ssT0FBSixJQUFlTCxHQUFHLENBQUNvQyxLQUE3QjtBQUNILE9BSkQsTUFJTztBQUNIaEMsV0FBRyxDQUFDSSxLQUFKLDBCQUE0QlIsR0FBRyxDQUFDSyxPQUFKLElBQWVMLEdBQUcsQ0FBQ29DLEtBQS9DO0FBQ0g7QUFDSixLQTFCRSxDQUFQO0FBMkJILEdBckNFLEVBc0NGRixLQXRDRSxDQXNDS2xDLEdBQUQsSUFBUztBQUNaLFFBQU1tQyxNQUFNLEdBQUc3ZixNQUFNLENBQUN5ZixHQUFQLENBQVdJLE1BQVgsRUFBZjs7QUFDQSxRQUFJLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IvNUIsT0FBbEIsQ0FBMEIrNUIsTUFBMUIsS0FBcUMsQ0FBekMsRUFBNEM7QUFDeEMvQixTQUFHLENBQUNJLEtBQUosb0NBQXNDM1csT0FBdEM7QUFDQXVXLFNBQUcsQ0FBQ0ksS0FBSixDQUFVUixHQUFHLENBQUNLLE9BQUosSUFBZUwsR0FBRyxDQUFDb0MsS0FBN0I7QUFDSCxLQUhELE1BR087QUFDSGhDLFNBQUcsQ0FBQ0ksS0FBSixnQ0FBa0NSLEdBQUcsQ0FBQ0ssT0FBSixJQUFlTCxHQUFHLENBQUNvQyxLQUFyRDtBQUNIO0FBQ0osR0E5Q0UsQ0FBUDtBQStDSDs7QUFFRCxJQUFJOWYsSUFBSixFQUFnQjtBQUNaOGQsS0FBRyxDQUFDemUsSUFBSixDQUFTLHFEQUFUO0FBQ0gsQ0FGRCxNQUVPLEVBRU47O0FBRUQsU0FBUzBnQixNQUFULENBQWdCQyxVQUFoQixFQUE0QlIsT0FBNUIsRUFBcUM7QUFDakNULFVBQVEsR0FBR2lCLFVBQVg7O0FBQ0EsTUFBSSxDQUFDZixRQUFRLEVBQWIsRUFBaUI7QUFDYixRQUFNWSxNQUFNLEdBQUc3ZixNQUFNLENBQUN5ZixHQUFQLENBQVdJLE1BQVgsRUFBZjs7QUFFQSxRQUFJQSxNQUFNLEtBQUssTUFBZixFQUF1QjtBQUNuQjtBQUNBL0IsU0FBRyxDQUFDemUsSUFBSiw0REFBNkQyZixXQUE3RDtBQUNBLGFBQU9PLEtBQUssQ0FBQ0MsT0FBRCxDQUFaO0FBQ0gsS0FKRCxNQUlPLElBQUksQ0FBQyxPQUFELEVBQVUsTUFBVixFQUFrQjE1QixPQUFsQixDQUEwQis1QixNQUExQixLQUFxQyxDQUF6QyxFQUE0QztBQUMvQy9CLFNBQUcsQ0FBQ0csSUFBSixrREFDOEM0QixNQUQ5QyxpQkFDMkR0WSxPQUQzRDtBQUdIO0FBQ0o7QUFDSjs7QUFBQTs7QUFFRCxTQUFTMFksV0FBVCxDQUFxQkMsSUFBckIsRUFBMkJDLGNBQTNCLEVBQTJDO0FBQ3ZDLE1BQU1DLElBQUksR0FBR0QsY0FBYyxXQUFJRCxJQUFKLHNCQUEzQjs7QUFDQSxNQUFJLENBQUNFLElBQUwsRUFBVztBQUNQLFdBQU9DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBUDtBQUNIOztBQUVELFNBQU9FLElBQUksQ0FBQ0csUUFBTCxHQUFnQmIsSUFBaEIsQ0FBcUJjLGdCQUFnQixJQUFJO0FBQzVDLFFBQUlBLGdCQUFKLEVBQXNCO0FBQ2xCLFVBQU1DLFFBQVEsR0FBR2xmLElBQUksQ0FBQ3NDLEtBQUwsQ0FBVzJjLGdCQUFYLENBQWpCO0FBQ0EsVUFBTUUsT0FBTyxHQUFHRCxRQUFRLENBQUM5NUIsQ0FBekI7QUFDQSxhQUFPczVCLFdBQVcsQ0FBQ1MsT0FBRCxFQUFVUCxjQUFWLENBQWxCO0FBQ0gsS0FKRCxNQUlPO0FBQ0gsYUFBT0UsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFQO0FBQ0g7QUFDSixHQVJNLEVBUUpOLEtBUkksQ0FRRTFCLEtBQUssSUFBSW1DLE9BQU8sQ0FBQ00sTUFBUixDQUFlekMsS0FBZixDQVJYLENBQVA7QUFTSDs7QUFFRGxlLE1BQU0sQ0FBQ3hkLE9BQVAsR0FBaUIsU0FBU28rQixVQUFULENBQW9CQyxXQUFwQixFQUFpQ1YsY0FBakMsRUFBaUQ7QUFDOURuQixhQUFXLEdBQUc2QixXQUFkO0FBQ0EsU0FBT1osV0FBVyxDQUFDWSxXQUFELEVBQWNWLGNBQWQsQ0FBWCxDQUF5Q1QsSUFBekMsQ0FBOENYLFFBQVEsSUFBSTtBQUM3RCxRQUFJQSxRQUFRLElBQUk4QixXQUFoQixFQUE2QjtBQUN6QixhQUFPZCxNQUFNLENBQUNoQixRQUFELEVBQVcsRUFBWCxDQUFiO0FBQ0g7QUFDSixHQUpNLENBQVA7QUFLSCxDQVBELEM7Ozs7Ozs7QUNwS0Esa0RBQU0rQixPQUFPLEdBQUduK0IsbUJBQU8sQ0FBQyxrRUFBRCxDQUF2Qjs7QUFFQXFkLE1BQU0sQ0FBQ3hkLE9BQVAsR0FBaUIsWUFBVztBQUN4QnMrQixTQUFPLENBQUMsWUFBVztBQUNmLFFBQU1DLGFBQWEsR0FBR3ArQixpRUFBdEI7O0FBQ0EycEIsVUFBTSxDQUFDMFUsc0JBQVAsQ0FBOEJELGFBQTlCO0FBQ0gsR0FITSxDQUFQO0FBSUgsQ0FMRCxDOzs7Ozs7OztBQ0ZBL2dCLE1BQU0sQ0FBQ3hkLE9BQVAsR0FBaUIsVUFBVXkrQixZQUFWLEVBQXdCO0FBQ3JDLE1BQU1DLFdBQVcsR0FBR3YrQixtQkFBTyxDQUFDLDhCQUFELENBQTNCOztBQUNBQSxxQkFBTyxDQUFDLHlDQUFELENBQVA7O0FBRUFzK0IsY0FBWTtBQUVaQyxhQUFXLENBQUNDLFVBQVo7QUFDSCxDQVBELEM7Ozs7Ozs7QUNBQSxJQUFJejhCLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztBQUNmLFNBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsR0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSWl6QixRQUFKLENBQWEsYUFBYixHQUFUO0FBQ0EsQ0FIRCxDQUdFLE9BQU95SixDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQzM4QixDQUFDLEdBQUcyOEIsTUFBSjtBQUNoQyxDLENBRUQ7QUFDQTtBQUNBOzs7QUFFQXJoQixNQUFNLENBQUN4ZCxPQUFQLEdBQWlCa0MsQ0FBakIsQzs7Ozs7Ozs7QUNsQkE7Ozs7OztBQU9hOztBQUdiNG5CLE1BQU0sQ0FBQ2dWLE9BQVAsR0FBaUJoVixNQUFNLENBQUNnVixPQUFQLElBQWtCLEVBQW5DO0FBQ0FoVixNQUFNLENBQUNnVixPQUFQLENBQWVDLEdBQWYsR0FBcUJqVixNQUFNLENBQUNnVixPQUFQLENBQWVDLEdBQWYsSUFBc0IsRUFBM0M7O0FBR0EsSUFBSUwsV0FBVyxHQUFHditCLG1CQUFPLENBQUMsOEJBQUQsQ0FBekI7O0FBQ0FBLG1CQUFPLENBQUMsMkJBQUQsQ0FBUDs7QUFFQSxJQUFJNitCLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVVDLEVBQVYsRUFBY3I3QixDQUFkLEVBQWlCO0FBQzVCLE1BQUlxN0IsRUFBRSxDQUFDeGtCLEdBQVAsRUFBWTtBQUFFLFdBQU93a0IsRUFBRSxDQUFDeGtCLEdBQUgsQ0FBTzdXLENBQVAsQ0FBUDtBQUFtQjs7QUFDakMsTUFBSXM3QixHQUFHLEdBQUcsRUFBVjs7QUFDQSxPQUFLLElBQUk1akIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzJqQixFQUFFLENBQUN2K0IsTUFBdkIsRUFBK0I0YSxDQUFDLEVBQWhDLEVBQW9DO0FBQ2hDLFFBQUlwSixDQUFDLEdBQUcrc0IsRUFBRSxDQUFDM2pCLENBQUQsQ0FBVjs7QUFDQSxRQUFJNmpCLE1BQU0sQ0FBQ2hVLElBQVAsQ0FBWThULEVBQVosRUFBZ0IzakIsQ0FBaEIsQ0FBSixFQUF3QjtBQUFFNGpCLFNBQUcsQ0FBQ25yQixJQUFKLENBQVNuUSxDQUFDLENBQUNzTyxDQUFELEVBQUlvSixDQUFKLEVBQU8yakIsRUFBUCxDQUFWO0FBQXdCO0FBQ3JEOztBQUNELFNBQU9DLEdBQVA7QUFDSCxDQVJEOztBQVVBLElBQUlDLE1BQU0sR0FBR3IvQixNQUFNLENBQUM2QixTQUFQLENBQWlCeTlCLGNBQTlCO0FBRUEsSUFBSTk3QixPQUFPLEdBQUcsR0FBR0EsT0FBakI7O0FBRUEsSUFBSSs3QixPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFTQyxHQUFULEVBQWMvaEIsR0FBZCxFQUFrQjtBQUM5QixNQUFJamEsT0FBSixFQUFhO0FBQUUsV0FBT2c4QixHQUFHLENBQUNoOEIsT0FBSixDQUFZaWEsR0FBWixDQUFQO0FBQTBCOztBQUN6QyxPQUFLLElBQUlqQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZ2tCLEdBQUcsQ0FBQzUrQixNQUF4QixFQUFnQyxFQUFFNGEsQ0FBbEMsRUFBcUM7QUFDbkMsUUFBSWdrQixHQUFHLENBQUNoa0IsQ0FBRCxDQUFILEtBQVdpQyxHQUFmLEVBQW9CO0FBQUUsYUFBT2pDLENBQVA7QUFBVztBQUNsQzs7QUFDRCxTQUFPLENBQUMsQ0FBUjtBQUNELENBTkQ7O0FBUUEsSUFBSWlrQixPQUFPLEdBQUdoZSxLQUFLLENBQUNpZSxPQUFOLElBQWlCLFVBQVVGLEdBQVYsRUFBZTtBQUM1QyxTQUFPeC9CLE1BQU0sQ0FBQzZCLFNBQVAsQ0FBaUJzQixRQUFqQixDQUEwQmtvQixJQUExQixDQUErQm1VLEdBQS9CLEtBQXVDLGdCQUE5QztBQUNELENBRkQ7O0FBSUEsSUFBSUcsUUFBUSxHQUFHMy9CLE1BQU0sQ0FBQzZCLFNBQVAsQ0FBaUJ5OUIsY0FBaEM7QUFDQSxJQUFJbjhCLFFBQVEsR0FBR25ELE1BQU0sQ0FBQzZCLFNBQVAsQ0FBaUJzQixRQUFoQzs7QUFFQSxJQUFJeThCLE9BQU8sR0FBRyxTQUFTbGtCLE9BQVQsQ0FBa0IrQixHQUFsQixFQUF1Qm9pQixFQUF2QixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDMUMsTUFBSTM4QixRQUFRLENBQUNrb0IsSUFBVCxDQUFjd1UsRUFBZCxNQUFzQixtQkFBMUIsRUFBK0M7QUFDM0MsVUFBTSxJQUFJempCLFNBQUosQ0FBYyw2QkFBZCxDQUFOO0FBQ0g7O0FBQ0QsTUFBSTlYLENBQUMsR0FBR21aLEdBQUcsQ0FBQzdjLE1BQVo7O0FBQ0EsTUFBSTBELENBQUMsS0FBSyxDQUFDQSxDQUFYLEVBQWM7QUFDVixTQUFLLElBQUlrWCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbFgsQ0FBcEIsRUFBdUJrWCxDQUFDLEVBQXhCLEVBQTRCO0FBQ3hCcWtCLFFBQUUsQ0FBQ3hVLElBQUgsQ0FBUXlVLEdBQVIsRUFBYXJpQixHQUFHLENBQUNqQyxDQUFELENBQWhCLEVBQXFCQSxDQUFyQixFQUF3QmlDLEdBQXhCO0FBQ0g7QUFDSixHQUpELE1BSU87QUFDSCxTQUFLLElBQUlzaUIsQ0FBVCxJQUFjdGlCLEdBQWQsRUFBbUI7QUFDZixVQUFJa2lCLFFBQVEsQ0FBQ3RVLElBQVQsQ0FBYzVOLEdBQWQsRUFBbUJzaUIsQ0FBbkIsQ0FBSixFQUEyQjtBQUN2QkYsVUFBRSxDQUFDeFUsSUFBSCxDQUFReVUsR0FBUixFQUFhcmlCLEdBQUcsQ0FBQ3NpQixDQUFELENBQWhCLEVBQXFCQSxDQUFyQixFQUF3QnRpQixHQUF4QjtBQUNIO0FBQ0o7QUFDSjtBQUNKLENBaEJEOztBQWtCQSxJQUFJdWlCLFFBQVEsR0FBR2hnQyxNQUFNLENBQUM2QixTQUFQLENBQWlCeTlCLGNBQWhDOztBQUVBLElBQUlXLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVVkLEVBQVYsRUFBY3I3QixDQUFkLEVBQWlCbzhCLEdBQWpCLEVBQXNCO0FBQ3BDLE1BQUlDLE1BQU0sR0FBR3gvQixTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBakM7O0FBQ0EsTUFBSXUvQixNQUFNLElBQUloQixFQUFFLENBQUNpQixNQUFqQixFQUF5QjtBQUFFLFdBQU9qQixFQUFFLENBQUNpQixNQUFILENBQVV0OEIsQ0FBVixFQUFhbzhCLEdBQWIsQ0FBUDtBQUEyQjs7QUFDdEQsTUFBSWYsRUFBRSxDQUFDaUIsTUFBUCxFQUFlO0FBQUUsV0FBT2pCLEVBQUUsQ0FBQ2lCLE1BQUgsQ0FBVXQ4QixDQUFWLENBQVA7QUFBc0I7O0FBRXZDLE9BQUssSUFBSTBYLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcyakIsRUFBRSxDQUFDditCLE1BQXZCLEVBQStCNGEsQ0FBQyxFQUFoQyxFQUFvQztBQUNoQyxRQUFJLENBQUN3a0IsUUFBUSxDQUFDM1UsSUFBVCxDQUFjOFQsRUFBZCxFQUFrQjNqQixDQUFsQixDQUFMLEVBQTJCO0FBQUU7QUFBVzs7QUFDeEMsUUFBSSxDQUFDMmtCLE1BQUwsRUFBYTtBQUNURCxTQUFHLEdBQUdmLEVBQUUsQ0FBQzNqQixDQUFELENBQVI7QUFDQTJrQixZQUFNLEdBQUcsSUFBVDtBQUNBO0FBQ0g7O0FBQ0RELE9BQUcsR0FBR3A4QixDQUFDLENBQUNvOEIsR0FBRCxFQUFNZixFQUFFLENBQUMzakIsQ0FBRCxDQUFSLEVBQWFBLENBQWIsQ0FBUDtBQUNIOztBQUNELFNBQU8wa0IsR0FBUDtBQUNILENBZkQ7O0FBaUJBLElBQUlHLFFBQVEsR0FBR3JnQyxNQUFNLENBQUM2QixTQUFQLENBQWlCeTlCLGNBQWhDO0FBQ0EsSUFBSWdCLFVBQVUsR0FBR3RnQyxNQUFNLENBQUM2QixTQUFQLENBQWlCc0IsUUFBbEM7O0FBRUEsSUFBSTRZLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVU4akIsRUFBVixFQUFjO0FBQzlCLFNBQVEsT0FBT0EsRUFBUCxLQUFjLFVBQWQsSUFBNEIsRUFBRUEsRUFBRSxZQUFZVSxNQUFoQixDQUE3QixJQUF5REQsVUFBVSxDQUFDalYsSUFBWCxDQUFnQndVLEVBQWhCLE1BQXdCLG1CQUF4RjtBQUNBLENBRkQ7O0FBSUEsSUFBSVcsU0FBUyxHQUFHLFNBQVM5a0IsT0FBVCxDQUFpQitCLEdBQWpCLEVBQXNCb2lCLEVBQXRCLEVBQTBCO0FBQ3pDLE1BQUksQ0FBQzlqQixVQUFVLENBQUM4akIsRUFBRCxDQUFmLEVBQXFCO0FBQ3BCLFVBQU0sSUFBSXpqQixTQUFKLENBQWMsNkJBQWQsQ0FBTjtBQUNBOztBQUNELE1BQUlaLENBQUo7QUFBQSxNQUFPdWtCLENBQVA7QUFBQSxNQUNDai9CLFFBQVEsR0FBRyxPQUFPMmMsR0FBUCxLQUFlLFFBRDNCO0FBQUEsTUFFQ25aLENBQUMsR0FBR21aLEdBQUcsQ0FBQzdjLE1BRlQ7QUFBQSxNQUdDbTVCLE9BQU8sR0FBR3A1QixTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBbkIsR0FBdUJELFNBQVMsQ0FBQyxDQUFELENBQWhDLEdBQXNDLElBSGpEOztBQUlBLE1BQUkyRCxDQUFDLEtBQUssQ0FBQ0EsQ0FBWCxFQUFjO0FBQ2IsU0FBS2tYLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR2xYLENBQWhCLEVBQW1Ca1gsQ0FBQyxFQUFwQixFQUF3QjtBQUN2QixVQUFJdWUsT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ3JCOEYsVUFBRSxDQUFDLytCLFFBQVEsR0FBRzJjLEdBQUcsQ0FBQ2piLE1BQUosQ0FBV2daLENBQVgsQ0FBSCxHQUFtQmlDLEdBQUcsQ0FBQ2pDLENBQUQsQ0FBL0IsRUFBb0NBLENBQXBDLEVBQXVDaUMsR0FBdkMsQ0FBRjtBQUNBLE9BRkQsTUFFTztBQUNOb2lCLFVBQUUsQ0FBQ3hVLElBQUgsQ0FBUTBPLE9BQVIsRUFBaUJqNUIsUUFBUSxHQUFHMmMsR0FBRyxDQUFDamIsTUFBSixDQUFXZ1osQ0FBWCxDQUFILEdBQW1CaUMsR0FBRyxDQUFDakMsQ0FBRCxDQUEvQyxFQUFvREEsQ0FBcEQsRUFBdURpQyxHQUF2RDtBQUNBO0FBQ0Q7QUFDRCxHQVJELE1BUU87QUFDTixTQUFLc2lCLENBQUwsSUFBVXRpQixHQUFWLEVBQWU7QUFDZCxVQUFJNGlCLFFBQVEsQ0FBQ2hWLElBQVQsQ0FBYzVOLEdBQWQsRUFBbUJzaUIsQ0FBbkIsQ0FBSixFQUEyQjtBQUMxQixZQUFJaEcsT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ3JCOEYsWUFBRSxDQUFDcGlCLEdBQUcsQ0FBQ3NpQixDQUFELENBQUosRUFBU0EsQ0FBVCxFQUFZdGlCLEdBQVosQ0FBRjtBQUNBLFNBRkQsTUFFTztBQUNOb2lCLFlBQUUsQ0FBQ3hVLElBQUgsQ0FBUTBPLE9BQVIsRUFBaUJ0YyxHQUFHLENBQUNzaUIsQ0FBRCxDQUFwQixFQUF5QkEsQ0FBekIsRUFBNEJ0aUIsR0FBNUI7QUFDQTtBQUNEO0FBQ0Q7QUFDRDtBQUNELENBM0JEOztBQTZCQSxJQUFJZ2pCLFVBQVUsR0FBR3pnQyxNQUFNLENBQUM2QixTQUFQLENBQWlCc0IsUUFBbEM7O0FBRUEsSUFBSXU5QixXQUFXLEdBQUcsU0FBU0EsV0FBVCxDQUFxQnZnQyxLQUFyQixFQUE0QjtBQUM3QyxNQUFJd2dDLEdBQUcsR0FBR0YsVUFBVSxDQUFDcFYsSUFBWCxDQUFnQmxyQixLQUFoQixDQUFWO0FBQ0EsTUFBSXVnQyxXQUFXLEdBQUdDLEdBQUcsS0FBSyxvQkFBMUI7O0FBQ0EsTUFBSSxDQUFDRCxXQUFMLEVBQWtCO0FBQ2pCQSxlQUFXLEdBQUdDLEdBQUcsS0FBSyxnQkFBUixJQUNWeGdDLEtBQUssS0FBSyxJQURBLElBRVYsT0FBT0EsS0FBUCxLQUFpQixRQUZQLElBR1YsT0FBT0EsS0FBSyxDQUFDUyxNQUFiLEtBQXdCLFFBSGQsSUFJVlQsS0FBSyxDQUFDUyxNQUFOLElBQWdCLENBSk4sSUFLVjYvQixVQUFVLENBQUNwVixJQUFYLENBQWdCbHJCLEtBQUssQ0FBQ3lnQyxNQUF0QixNQUFrQyxtQkFMdEM7QUFNQTs7QUFDRCxTQUFPRixXQUFQO0FBQ0EsQ0FaRCxDLENBY0E7OztBQUNBLElBQUlod0IsR0FBRyxHQUFHMVEsTUFBTSxDQUFDNkIsU0FBUCxDQUFpQnk5QixjQUEzQjtBQUFBLElBQ0N1QixVQUFVLEdBQUc3Z0MsTUFBTSxDQUFDNkIsU0FBUCxDQUFpQnNCLFFBRC9CO0FBQUEsSUFFQzI5QixjQUFjLEdBQUcsQ0FBRTtBQUFDLGNBQVk7QUFBYixDQUFELENBQXFCQyxvQkFBckIsQ0FBMEMsVUFBMUMsQ0FGbkI7QUFBQSxJQUdDQyxlQUFlLEdBQUksWUFBWSxDQUFFLENBQWYsQ0FBaUJELG9CQUFqQixDQUFzQyxXQUF0QyxDQUhuQjtBQUFBLElBSUNFLFNBQVMsR0FBRyxDQUNYLFVBRFcsRUFFWCxnQkFGVyxFQUdYLFNBSFcsRUFJWCxnQkFKVyxFQUtYLGVBTFcsRUFNWCxzQkFOVyxFQU9YLGFBUFcsQ0FKYjs7QUFjQSxJQUFJQyxRQUFRLEdBQUcsU0FBU3hOLElBQVQsQ0FBY2pYLE1BQWQsRUFBc0I7QUFDcEMsTUFBSVQsUUFBUSxHQUFHUyxNQUFNLEtBQUssSUFBWCxJQUFtQixPQUFPQSxNQUFQLEtBQWtCLFFBQXBEO0FBQUEsTUFDQ1YsVUFBVSxHQUFHOGtCLFVBQVUsQ0FBQ3hWLElBQVgsQ0FBZ0I1TyxNQUFoQixNQUE0QixtQkFEMUM7QUFBQSxNQUVDMGtCLGFBQWEsR0FBR1QsV0FBVyxDQUFDamtCLE1BQUQsQ0FGNUI7QUFBQSxNQUdDMmtCLE9BQU8sR0FBRyxFQUhYOztBQUtBLE1BQUksQ0FBQ3BsQixRQUFELElBQWEsQ0FBQ0QsVUFBZCxJQUE0QixDQUFDb2xCLGFBQWpDLEVBQWdEO0FBQy9DLFVBQU0sSUFBSS9rQixTQUFKLENBQWMsb0NBQWQsQ0FBTjtBQUNBOztBQUVELE1BQUkra0IsYUFBSixFQUFtQjtBQUNsQlgsYUFBUyxDQUFDL2pCLE1BQUQsRUFBUyxVQUFVdGMsS0FBVixFQUFpQnVVLEtBQWpCLEVBQXdCO0FBQ3pDMHNCLGFBQU8sQ0FBQ250QixJQUFSLENBQWFTLEtBQWI7QUFDQSxLQUZRLENBQVQ7QUFHQSxHQUpELE1BSU87QUFDTixRQUFJcFAsSUFBSjtBQUFBLFFBQ0MrN0IsU0FBUyxHQUFHTCxlQUFlLElBQUlqbEIsVUFEaEM7O0FBR0EsU0FBS3pXLElBQUwsSUFBYW1YLE1BQWIsRUFBcUI7QUFDcEIsVUFBSSxFQUFFNGtCLFNBQVMsSUFBSS83QixJQUFJLEtBQUssV0FBeEIsS0FBd0NvTCxHQUFHLENBQUMyYSxJQUFKLENBQVM1TyxNQUFULEVBQWlCblgsSUFBakIsQ0FBNUMsRUFBb0U7QUFDbkU4N0IsZUFBTyxDQUFDbnRCLElBQVIsQ0FBYTNPLElBQWI7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsTUFBSXc3QixjQUFKLEVBQW9CO0FBQ25CLFFBQUlRLElBQUksR0FBRzdrQixNQUFNLENBQUNFLFdBQWxCO0FBQUEsUUFDQzRrQixlQUFlLEdBQUdELElBQUksSUFBSUEsSUFBSSxDQUFDei9CLFNBQUwsS0FBbUI0YSxNQUQ5QztBQUdBK2pCLGFBQVMsQ0FBQ1MsU0FBRCxFQUFZLFVBQVVPLFFBQVYsRUFBb0I7QUFDeEMsVUFBSSxFQUFFRCxlQUFlLElBQUlDLFFBQVEsS0FBSyxhQUFsQyxLQUFvRDl3QixHQUFHLENBQUMyYSxJQUFKLENBQVM1TyxNQUFULEVBQWlCK2tCLFFBQWpCLENBQXhELEVBQW9GO0FBQ25GSixlQUFPLENBQUNudEIsSUFBUixDQUFhdXRCLFFBQWI7QUFDQTtBQUNELEtBSlEsQ0FBVDtBQUtBOztBQUNELFNBQU9KLE9BQVA7QUFDQSxDQXBDRDs7QUFzQ0FGLFFBQVEsQ0FBQ08sSUFBVCxHQUFnQixTQUFTQyxjQUFULEdBQTBCO0FBQ3pDLE1BQUksQ0FBQzFoQyxNQUFNLENBQUMwekIsSUFBWixFQUFrQjtBQUNqQjF6QixVQUFNLENBQUMwekIsSUFBUCxHQUFjd04sUUFBZDtBQUNBOztBQUNELFNBQU9saEMsTUFBTSxDQUFDMHpCLElBQVAsSUFBZXdOLFFBQXRCO0FBQ0EsQ0FMRDs7QUFPQSxJQUFJUyxVQUFVLEdBQUdULFFBQWpCO0FBRUEsSUFBSVUsY0FBYyxHQUFHLE9BQU9DLFVBQVAsS0FBc0IsV0FBdEIsR0FBb0NBLFVBQXBDLEdBQWlELE9BQU85QyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQSxNQUFoQyxHQUF5QyxPQUFPL1UsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUMsT0FBTzhYLElBQVAsS0FBZ0IsV0FBaEIsR0FBOEJBLElBQTlCLEdBQXFDLEVBQTdMOztBQUVBLFNBQVNDLG9CQUFULENBQThCbEMsRUFBOUIsRUFBa0NuaUIsTUFBbEMsRUFBMEM7QUFDekMsU0FBT0EsTUFBTSxHQUFHO0FBQUV4ZCxXQUFPLEVBQUU7QUFBWCxHQUFULEVBQTBCMi9CLEVBQUUsQ0FBQ25pQixNQUFELEVBQVNBLE1BQU0sQ0FBQ3hkLE9BQWhCLENBQTVCLEVBQXNEd2QsTUFBTSxDQUFDeGQsT0FBcEU7QUFDQTs7QUFFRCxJQUFJOGhDLEtBQUssR0FBR0Qsb0JBQW9CLENBQUMsVUFBVXJrQixNQUFWLEVBQWtCeGQsT0FBbEIsRUFBMkI7QUFDM0QsYUFBVStoQyxJQUFWLEVBQWdCO0FBQ2Y7QUFDQTtBQUNBLFFBQUlDLFFBQVEsR0FBRyxVQUFtQzMvQixLQUFsRCxDQUhlLENBS2Y7QUFDQTtBQUNBOztBQUNBLFFBQUk0L0IsVUFBVSxHQUFHLE9BQU9QLGNBQVAsSUFBeUIsUUFBekIsSUFBcUNBLGNBQXREOztBQUNBLFFBQUlPLFVBQVUsS0FBS0EsVUFBVSxDQUFDLFFBQUQsQ0FBVixLQUF5QkEsVUFBekIsSUFBdUNBLFVBQVUsQ0FBQyxRQUFELENBQVYsS0FBeUJBLFVBQXJFLENBQWQsRUFBZ0c7QUFDOUZGLFVBQUksR0FBR0UsVUFBUDtBQUNELEtBWGMsQ0FhZjtBQUNBOzs7QUFDQSxhQUFTQyxZQUFULENBQXNCckksT0FBdEIsRUFBK0I3NUIsT0FBL0IsRUFBd0M7QUFDdEM2NUIsYUFBTyxLQUFLQSxPQUFPLEdBQUdrSSxJQUFJLENBQUMsUUFBRCxDQUFKLEVBQWYsQ0FBUDtBQUNBL2hDLGFBQU8sS0FBS0EsT0FBTyxHQUFHK2hDLElBQUksQ0FBQyxRQUFELENBQUosRUFBZixDQUFQLENBRnNDLENBSXRDOztBQUNBLFVBQUlybUIsTUFBTSxHQUFHbWUsT0FBTyxDQUFDLFFBQUQsQ0FBUCxJQUFxQmtJLElBQUksQ0FBQyxRQUFELENBQXRDO0FBQUEsVUFDSXRtQixNQUFNLEdBQUdvZSxPQUFPLENBQUMsUUFBRCxDQUFQLElBQXFCa0ksSUFBSSxDQUFDLFFBQUQsQ0FEdEM7QUFBQSxVQUVJamlDLE1BQU0sR0FBRys1QixPQUFPLENBQUMsUUFBRCxDQUFQLElBQXFCa0ksSUFBSSxDQUFDLFFBQUQsQ0FGdEM7QUFBQSxVQUdJSSxJQUFJLEdBQUd0SSxPQUFPLENBQUMsTUFBRCxDQUFQLElBQW1Ca0ksSUFBSSxDQUFDLE1BQUQsQ0FIbEM7QUFBQSxVQUlJSyxXQUFXLEdBQUd2SSxPQUFPLENBQUMsYUFBRCxDQUFQLElBQTBCa0ksSUFBSSxDQUFDLGFBQUQsQ0FKaEQ7QUFBQSxVQUtJN2xCLFNBQVMsR0FBRzJkLE9BQU8sQ0FBQyxXQUFELENBQVAsSUFBd0JrSSxJQUFJLENBQUMsV0FBRCxDQUw1QztBQUFBLFVBTUloK0IsSUFBSSxHQUFHODFCLE9BQU8sQ0FBQyxNQUFELENBQVAsSUFBbUJrSSxJQUFJLENBQUMsTUFBRCxDQU5sQztBQUFBLFVBT0lNLFVBQVUsR0FBR3hJLE9BQU8sQ0FBQyxNQUFELENBQVAsSUFBbUJrSSxJQUFJLENBQUMsTUFBRCxDQVB4QyxDQUxzQyxDQWN0Qzs7QUFDQSxVQUFJLE9BQU9NLFVBQVAsSUFBcUIsUUFBckIsSUFBaUNBLFVBQXJDLEVBQWlEO0FBQy9DcmlDLGVBQU8sQ0FBQ2dmLFNBQVIsR0FBb0JxakIsVUFBVSxDQUFDcmpCLFNBQS9CO0FBQ0FoZixlQUFPLENBQUNxaEIsS0FBUixHQUFnQmdoQixVQUFVLENBQUNoaEIsS0FBM0I7QUFDRCxPQWxCcUMsQ0FvQnRDOzs7QUFDQSxVQUFJaWhCLFdBQVcsR0FBR3hpQyxNQUFNLENBQUM2QixTQUF6QjtBQUFBLFVBQ0kyYSxRQUFRLEdBQUdnbUIsV0FBVyxDQUFDci9CLFFBRDNCO0FBQUEsVUFFSXMvQixXQUZKO0FBQUEsVUFFZ0IvbUIsUUFGaEI7QUFBQSxVQUV5QmduQixLQUZ6QixDQXJCc0MsQ0F5QnRDOzs7QUFDQSxVQUFJQyxVQUFVLEdBQUcsSUFBSU4sSUFBSixDQUFTLENBQUMsZ0JBQVYsQ0FBakI7O0FBQ0EsVUFBSTtBQUNGO0FBQ0E7QUFDQU0sa0JBQVUsR0FBR0EsVUFBVSxDQUFDQyxjQUFYLE1BQStCLENBQUMsTUFBaEMsSUFBMENELFVBQVUsQ0FBQ0UsV0FBWCxPQUE2QixDQUF2RSxJQUE0RUYsVUFBVSxDQUFDRyxVQUFYLE9BQTRCLENBQXhHLElBQ1g7QUFDQTtBQUNBO0FBQ0FILGtCQUFVLENBQUNJLFdBQVgsTUFBNEIsRUFKakIsSUFJdUJKLFVBQVUsQ0FBQ0ssYUFBWCxNQUE4QixFQUpyRCxJQUkyREwsVUFBVSxDQUFDTSxhQUFYLE1BQThCLENBSnpGLElBSThGTixVQUFVLENBQUNPLGtCQUFYLE1BQW1DLEdBSjlJO0FBS0QsT0FSRCxDQVFFLE9BQU9DLFNBQVAsRUFBa0IsQ0FBRSxDQW5DZ0IsQ0FxQ3RDO0FBQ0E7OztBQUNBLGVBQVN6eUIsR0FBVCxDQUFhcEwsSUFBYixFQUFtQjtBQUNqQixZQUFJb0wsR0FBRyxDQUFDcEwsSUFBRCxDQUFILEtBQWNvOUIsS0FBbEIsRUFBeUI7QUFDdkI7QUFDQSxpQkFBT2h5QixHQUFHLENBQUNwTCxJQUFELENBQVY7QUFDRDs7QUFDRCxZQUFJODlCLFdBQUo7O0FBQ0EsWUFBSTk5QixJQUFJLElBQUksdUJBQVosRUFBcUM7QUFDbkM7QUFDQTtBQUNBODlCLHFCQUFXLEdBQUcsSUFBSSxDQUFKLEtBQVUsR0FBeEI7QUFDRCxTQUpELE1BSU8sSUFBSTk5QixJQUFJLElBQUksTUFBWixFQUFvQjtBQUN6QjtBQUNBO0FBQ0E4OUIscUJBQVcsR0FBRzF5QixHQUFHLENBQUMsZ0JBQUQsQ0FBSCxJQUF5QkEsR0FBRyxDQUFDLFlBQUQsQ0FBMUM7QUFDRCxTQUpNLE1BSUE7QUFDTCxjQUFJdlEsS0FBSjtBQUFBLGNBQVdrakMsVUFBVSxHQUFHLG9EQUF4QixDQURLLENBRUw7O0FBQ0EsY0FBSS85QixJQUFJLElBQUksZ0JBQVosRUFBOEI7QUFDNUIsZ0JBQUk0WixTQUFTLEdBQUdoZixPQUFPLENBQUNnZixTQUF4QjtBQUFBLGdCQUFtQ29rQixrQkFBa0IsR0FBRyxPQUFPcGtCLFNBQVAsSUFBb0IsVUFBcEIsSUFBa0N5akIsVUFBMUY7O0FBQ0EsZ0JBQUlXLGtCQUFKLEVBQXdCO0FBQ3RCO0FBQ0EsZUFBQ25qQyxLQUFLLEdBQUcsaUJBQVk7QUFDbkIsdUJBQU8sQ0FBUDtBQUNELGVBRkQsRUFFR29qQyxNQUZILEdBRVlwakMsS0FGWjs7QUFHQSxrQkFBSTtBQUNGbWpDLGtDQUFrQixHQUNoQjtBQUNBO0FBQ0Fwa0IseUJBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUIsR0FBakIsSUFDQTtBQUNBO0FBQ0FBLHlCQUFTLENBQUMsSUFBSXRELE1BQUosRUFBRCxDQUFULEtBQTRCLEdBSDVCLElBSUFzRCxTQUFTLENBQUMsSUFBSXZELE1BQUosRUFBRCxDQUFULElBQTJCLElBSjNCLElBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXVELHlCQUFTLENBQUMxQyxRQUFELENBQVQsS0FBd0JrbUIsS0FUeEIsSUFVQTtBQUNBO0FBQ0F4akIseUJBQVMsQ0FBQ3dqQixLQUFELENBQVQsS0FBcUJBLEtBWnJCLElBYUE7QUFDQTtBQUNBeGpCLHlCQUFTLE9BQU93akIsS0FmaEIsSUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBeGpCLHlCQUFTLENBQUMvZSxLQUFELENBQVQsS0FBcUIsR0FyQnJCLElBc0JBK2UsU0FBUyxDQUFDLENBQUMvZSxLQUFELENBQUQsQ0FBVCxJQUFzQixLQXRCdEIsSUF1QkE7QUFDQTtBQUNBK2UseUJBQVMsQ0FBQyxDQUFDd2pCLEtBQUQsQ0FBRCxDQUFULElBQXNCLFFBekJ0QixJQTBCQTtBQUNBeGpCLHlCQUFTLENBQUMsSUFBRCxDQUFULElBQW1CLE1BM0JuQixJQTRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSx5QkFBUyxDQUFDLENBQUN3akIsS0FBRCxFQUFRbG1CLFFBQVIsRUFBa0IsSUFBbEIsQ0FBRCxDQUFULElBQXNDLGtCQWhDdEMsSUFpQ0E7QUFDQTtBQUNBMEMseUJBQVMsQ0FBQztBQUFFLHVCQUFLLENBQUMvZSxLQUFELEVBQVEsSUFBUixFQUFjLEtBQWQsRUFBcUIsSUFBckIsRUFBMkIsZ0JBQTNCO0FBQVAsaUJBQUQsQ0FBVCxJQUFvRWtqQyxVQW5DcEUsSUFvQ0E7QUFDQW5rQix5QkFBUyxDQUFDLElBQUQsRUFBTy9lLEtBQVAsQ0FBVCxLQUEyQixHQXJDM0IsSUFzQ0ErZSxTQUFTLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELEVBQVMsSUFBVCxFQUFlLENBQWYsQ0FBVCxJQUE4QixlQXRDOUIsSUF1Q0E7QUFDQTtBQUNBQSx5QkFBUyxDQUFDLElBQUltakIsSUFBSixDQUFTLENBQUMsT0FBVixDQUFELENBQVQsSUFBaUMsK0JBekNqQyxJQTBDQTtBQUNBbmpCLHlCQUFTLENBQUMsSUFBSW1qQixJQUFKLENBQVMsT0FBVCxDQUFELENBQVQsSUFBZ0MsK0JBM0NoQyxJQTRDQTtBQUNBO0FBQ0FuakIseUJBQVMsQ0FBQyxJQUFJbWpCLElBQUosQ0FBUyxDQUFDLFdBQVYsQ0FBRCxDQUFULElBQXFDLCtCQTlDckMsSUErQ0E7QUFDQTtBQUNBbmpCLHlCQUFTLENBQUMsSUFBSW1qQixJQUFKLENBQVMsQ0FBQyxDQUFWLENBQUQsQ0FBVCxJQUEyQiw0QkFwRDdCO0FBcURELGVBdERELENBc0RFLE9BQU9jLFNBQVAsRUFBa0I7QUFDbEJHLGtDQUFrQixHQUFHLEtBQXJCO0FBQ0Q7QUFDRjs7QUFDREYsdUJBQVcsR0FBR0Usa0JBQWQ7QUFDRCxXQXJFSSxDQXNFTDs7O0FBQ0EsY0FBSWgrQixJQUFJLElBQUksWUFBWixFQUEwQjtBQUN4QixnQkFBSWljLEtBQUssR0FBR3JoQixPQUFPLENBQUNxaEIsS0FBcEI7O0FBQ0EsZ0JBQUksT0FBT0EsS0FBUCxJQUFnQixVQUFwQixFQUFnQztBQUM5QixrQkFBSTtBQUNGO0FBQ0E7QUFDQTtBQUNBLG9CQUFJQSxLQUFLLENBQUMsR0FBRCxDQUFMLEtBQWUsQ0FBZixJQUFvQixDQUFDQSxLQUFLLENBQUMsS0FBRCxDQUE5QixFQUF1QztBQUNyQztBQUNBcGhCLHVCQUFLLEdBQUdvaEIsS0FBSyxDQUFDOGhCLFVBQUQsQ0FBYjtBQUNBLHNCQUFJRyxjQUFjLEdBQUdyakMsS0FBSyxDQUFDLEdBQUQsQ0FBTCxDQUFXUyxNQUFYLElBQXFCLENBQXJCLElBQTBCVCxLQUFLLENBQUMsR0FBRCxDQUFMLENBQVcsQ0FBWCxNQUFrQixDQUFqRTs7QUFDQSxzQkFBSXFqQyxjQUFKLEVBQW9CO0FBQ2xCLHdCQUFJO0FBQ0Y7QUFDQUEsb0NBQWMsR0FBRyxDQUFDamlCLEtBQUssQ0FBQyxNQUFELENBQXZCO0FBQ0QscUJBSEQsQ0FHRSxPQUFPNGhCLFNBQVAsRUFBa0IsQ0FBRTs7QUFDdEIsd0JBQUlLLGNBQUosRUFBb0I7QUFDbEIsMEJBQUk7QUFDRjtBQUNBO0FBQ0E7QUFDQUEsc0NBQWMsR0FBR2ppQixLQUFLLENBQUMsSUFBRCxDQUFMLEtBQWdCLENBQWpDO0FBQ0QsdUJBTEQsQ0FLRSxPQUFPNGhCLFNBQVAsRUFBa0IsQ0FBRTtBQUN2Qjs7QUFDRCx3QkFBSUssY0FBSixFQUFvQjtBQUNsQiwwQkFBSTtBQUNGO0FBQ0E7QUFDQTtBQUNBQSxzQ0FBYyxHQUFHamlCLEtBQUssQ0FBQyxJQUFELENBQUwsS0FBZ0IsQ0FBakM7QUFDRCx1QkFMRCxDQUtFLE9BQU80aEIsU0FBUCxFQUFrQixDQUFFO0FBQ3ZCO0FBQ0Y7QUFDRjtBQUNGLGVBL0JELENBK0JFLE9BQU9BLFNBQVAsRUFBa0I7QUFDbEJLLDhCQUFjLEdBQUcsS0FBakI7QUFDRDtBQUNGOztBQUNESix1QkFBVyxHQUFHSSxjQUFkO0FBQ0Q7QUFDRjs7QUFDRCxlQUFPOXlCLEdBQUcsQ0FBQ3BMLElBQUQsQ0FBSCxHQUFZLENBQUMsQ0FBQzg5QixXQUFyQjtBQUNEOztBQUVELFVBQUksQ0FBQzF5QixHQUFHLENBQUMsTUFBRCxDQUFSLEVBQWtCO0FBQ2hCO0FBQ0EsWUFBSSt5QixhQUFhLEdBQUcsbUJBQXBCO0FBQUEsWUFDSUMsU0FBUyxHQUFHLGVBRGhCO0FBQUEsWUFFSUMsV0FBVyxHQUFHLGlCQUZsQjtBQUFBLFlBR0lDLFdBQVcsR0FBRyxpQkFIbEI7QUFBQSxZQUlJQyxVQUFVLEdBQUcsZ0JBSmpCO0FBQUEsWUFLSUMsWUFBWSxHQUFHLGtCQUxuQixDQUZnQixDQVNoQjs7QUFDQSxZQUFJQyxjQUFjLEdBQUdyekIsR0FBRyxDQUFDLHVCQUFELENBQXhCLENBVmdCLENBWWhCOztBQUNBLFlBQUksQ0FBQ2l5QixVQUFMLEVBQWlCO0FBQ2YsY0FBSXFCLEtBQUssR0FBRy8vQixJQUFJLENBQUMrL0IsS0FBakIsQ0FEZSxDQUVmO0FBQ0E7O0FBQ0EsY0FBSUMsTUFBTSxHQUFHLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksRUFBWixFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5QyxHQUF6QyxFQUE4QyxHQUE5QyxFQUFtRCxHQUFuRCxDQUFiLENBSmUsQ0FLZjtBQUNBOztBQUNBLGNBQUlDLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVVDLElBQVYsRUFBZ0JDLEtBQWhCLEVBQXVCO0FBQ2xDLG1CQUFPSCxNQUFNLENBQUNHLEtBQUQsQ0FBTixHQUFnQixPQUFPRCxJQUFJLEdBQUcsSUFBZCxDQUFoQixHQUFzQ0gsS0FBSyxDQUFDLENBQUNHLElBQUksR0FBRyxJQUFQLElBQWVDLEtBQUssR0FBRyxFQUFFQSxLQUFLLEdBQUcsQ0FBVixDQUF2QixDQUFELElBQXlDLENBQTFDLENBQTNDLEdBQTBGSixLQUFLLENBQUMsQ0FBQ0csSUFBSSxHQUFHLElBQVAsR0FBY0MsS0FBZixJQUF3QixHQUF6QixDQUEvRixHQUErSEosS0FBSyxDQUFDLENBQUNHLElBQUksR0FBRyxJQUFQLEdBQWNDLEtBQWYsSUFBd0IsR0FBekIsQ0FBM0k7QUFDRCxXQUZEO0FBR0QsU0F2QmUsQ0F5QmhCO0FBQ0E7OztBQUNBLFlBQUksRUFBRTNCLFdBQVUsR0FBR0QsV0FBVyxDQUFDbEQsY0FBM0IsQ0FBSixFQUFnRDtBQUM5Q21ELHFCQUFVLEdBQUcsb0JBQVV6c0IsUUFBVixFQUFvQjtBQUMvQixnQkFBSXF1QixPQUFPLEdBQUcsRUFBZDtBQUFBLGdCQUFrQjFuQixXQUFsQjs7QUFDQSxnQkFBSSxDQUFDMG5CLE9BQU8sQ0FBQzltQixTQUFSLEdBQW9CLElBQXBCLEVBQTBCOG1CLE9BQU8sQ0FBQzltQixTQUFSLEdBQW9CO0FBQ2pEO0FBQ0E7QUFDQSwwQkFBWTtBQUhxQyxhQUE5QyxFQUlGOG1CLE9BSkMsRUFJUWxoQyxRQUpSLElBSW9CcVosUUFKeEIsRUFJa0M7QUFDaEM7QUFDQTtBQUNBaW1CLHlCQUFVLEdBQUcsb0JBQVV6c0IsUUFBVixFQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxvQkFBSXN1QixRQUFRLEdBQUcsS0FBSy9tQixTQUFwQjtBQUFBLG9CQUErQjdPLE1BQU0sR0FBR3NILFFBQVEsS0FBSyxLQUFLdUgsU0FBTCxHQUFpQixJQUFqQixFQUF1QixJQUE1QixDQUFoRCxDQUorQixDQUsvQjs7QUFDQSxxQkFBS0EsU0FBTCxHQUFpQittQixRQUFqQjtBQUNBLHVCQUFPNTFCLE1BQVA7QUFDRCxlQVJEO0FBU0QsYUFoQkQsTUFnQk87QUFDTDtBQUNBaU8seUJBQVcsR0FBRzBuQixPQUFPLENBQUMxbkIsV0FBdEIsQ0FGSyxDQUdMO0FBQ0E7O0FBQ0E4bEIseUJBQVUsR0FBRyxvQkFBVXpzQixRQUFWLEVBQW9CO0FBQy9CLG9CQUFJdWMsTUFBTSxHQUFHLENBQUMsS0FBSzVWLFdBQUwsSUFBb0JBLFdBQXJCLEVBQWtDOWEsU0FBL0M7QUFDQSx1QkFBT21VLFFBQVEsSUFBSSxJQUFaLElBQW9CLEVBQUVBLFFBQVEsSUFBSXVjLE1BQVosSUFBc0IsS0FBS3ZjLFFBQUwsTUFBbUJ1YyxNQUFNLENBQUN2YyxRQUFELENBQWpELENBQTNCO0FBQ0QsZUFIRDtBQUlEOztBQUNEcXVCLG1CQUFPLEdBQUcsSUFBVjtBQUNBLG1CQUFPNUIsV0FBVSxDQUFDcFgsSUFBWCxDQUFnQixJQUFoQixFQUFzQnJWLFFBQXRCLENBQVA7QUFDRCxXQTlCRDtBQStCRCxTQTNEZSxDQTZEaEI7OztBQUNBLFlBQUl1dUIsY0FBYyxHQUFHO0FBQ25CLHFCQUFXLENBRFE7QUFFbkIsb0JBQVUsQ0FGUztBQUduQixvQkFBVSxDQUhTO0FBSW5CLHVCQUFhO0FBSk0sU0FBckIsQ0E5RGdCLENBcUVoQjtBQUNBOztBQUNBLFlBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVUvbkIsTUFBVixFQUFrQnpHLFFBQWxCLEVBQTRCO0FBQzNDLGNBQUlOLElBQUksR0FBRyxPQUFPK0csTUFBTSxDQUFDekcsUUFBRCxDQUF4QjtBQUNBLGlCQUFPTixJQUFJLElBQUksUUFBUixHQUFtQixDQUFDLENBQUMrRyxNQUFNLENBQUN6RyxRQUFELENBQTNCLEdBQXdDLENBQUN1dUIsY0FBYyxDQUFDN3VCLElBQUQsQ0FBOUQ7QUFDRCxTQUhELENBdkVnQixDQTRFaEI7QUFDQTs7O0FBQ0FnRyxnQkFBTyxHQUFHLGlCQUFVZSxNQUFWLEVBQWtCNlcsUUFBbEIsRUFBNEI7QUFDcEMsY0FBSWxlLElBQUksR0FBRyxDQUFYO0FBQUEsY0FBY3F2QixVQUFkO0FBQUEsY0FBMEJKLE9BQTFCO0FBQUEsY0FBbUNydUIsUUFBbkMsQ0FEb0MsQ0FHcEM7QUFDQTtBQUNBOztBQUNBLFdBQUN5dUIsVUFBVSxHQUFHLHNCQUFZO0FBQ3hCLGlCQUFLQyxPQUFMLEdBQWUsQ0FBZjtBQUNELFdBRkQsRUFFRzdpQyxTQUZILENBRWE2aUMsT0FGYixHQUV1QixDQUZ2QixDQU5vQyxDQVVwQzs7QUFDQUwsaUJBQU8sR0FBRyxJQUFJSSxVQUFKLEVBQVY7O0FBQ0EsZUFBS3p1QixRQUFMLElBQWlCcXVCLE9BQWpCLEVBQTBCO0FBQ3hCO0FBQ0EsZ0JBQUk1QixXQUFVLENBQUNwWCxJQUFYLENBQWdCZ1osT0FBaEIsRUFBeUJydUIsUUFBekIsQ0FBSixFQUF3QztBQUN0Q1osa0JBQUk7QUFDTDtBQUNGOztBQUNEcXZCLG9CQUFVLEdBQUdKLE9BQU8sR0FBRyxJQUF2QixDQWxCb0MsQ0FvQnBDOztBQUNBLGNBQUksQ0FBQ2p2QixJQUFMLEVBQVc7QUFDVDtBQUNBaXZCLG1CQUFPLEdBQUcsQ0FBQyxTQUFELEVBQVksVUFBWixFQUF3QixnQkFBeEIsRUFBMEMsc0JBQTFDLEVBQWtFLGVBQWxFLEVBQW1GLGdCQUFuRixFQUFxRyxhQUFyRyxDQUFWLENBRlMsQ0FHVDtBQUNBOztBQUNBM29CLG9CQUFPLEdBQUcsaUJBQVVlLE1BQVYsRUFBa0I2VyxRQUFsQixFQUE0QjtBQUNwQyxrQkFBSXZYLFVBQVUsR0FBR1MsUUFBUSxDQUFDNk8sSUFBVCxDQUFjNU8sTUFBZCxLQUF5QmduQixhQUExQztBQUFBLGtCQUF5RHp0QixRQUF6RDtBQUFBLGtCQUFtRXBWLE1BQW5FO0FBQ0Esa0JBQUkrakMsV0FBVyxHQUFHLENBQUM1b0IsVUFBRCxJQUFlLE9BQU9VLE1BQU0sQ0FBQ0UsV0FBZCxJQUE2QixVQUE1QyxJQUEwRDZuQixVQUFVLENBQUMvbkIsTUFBRCxFQUFTLGdCQUFULENBQXBFLEdBQWlHQSxNQUFNLENBQUM2aUIsY0FBeEcsR0FBeUhtRCxXQUEzSTs7QUFDQSxtQkFBS3pzQixRQUFMLElBQWlCeUcsTUFBakIsRUFBeUI7QUFDdkI7QUFDQTtBQUNBLG9CQUFJLEVBQUVWLFVBQVUsSUFBSS9GLFFBQVEsSUFBSSxXQUE1QixLQUE0QzJ1QixXQUFXLENBQUN0WixJQUFaLENBQWlCNU8sTUFBakIsRUFBeUJ6RyxRQUF6QixDQUFoRCxFQUFvRjtBQUNsRnNkLDBCQUFRLENBQUN0ZCxRQUFELENBQVI7QUFDRDtBQUNGLGVBVG1DLENBVXBDOzs7QUFDQSxtQkFBS3BWLE1BQU0sR0FBR3lqQyxPQUFPLENBQUN6akMsTUFBdEIsRUFBOEJvVixRQUFRLEdBQUdxdUIsT0FBTyxDQUFDLEVBQUV6akMsTUFBSCxDQUFoRCxFQUE0RCtqQyxXQUFXLENBQUN0WixJQUFaLENBQWlCNU8sTUFBakIsRUFBeUJ6RyxRQUF6QixLQUFzQ3NkLFFBQVEsQ0FBQ3RkLFFBQUQsQ0FBMUcsRUFBcUgsQ0FBRztBQUN6SCxhQVpEO0FBYUQsV0FsQkQsTUFrQk8sSUFBSVosSUFBSSxJQUFJLENBQVosRUFBZTtBQUNwQjtBQUNBc0csb0JBQU8sR0FBRyxpQkFBVWUsTUFBVixFQUFrQjZXLFFBQWxCLEVBQTRCO0FBQ3BDO0FBQ0Esa0JBQUkrUSxPQUFPLEdBQUcsRUFBZDtBQUFBLGtCQUFrQnRvQixVQUFVLEdBQUdTLFFBQVEsQ0FBQzZPLElBQVQsQ0FBYzVPLE1BQWQsS0FBeUJnbkIsYUFBeEQ7QUFBQSxrQkFBdUV6dEIsUUFBdkU7O0FBQ0EsbUJBQUtBLFFBQUwsSUFBaUJ5RyxNQUFqQixFQUF5QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxvQkFBSSxFQUFFVixVQUFVLElBQUkvRixRQUFRLElBQUksV0FBNUIsS0FBNEMsQ0FBQ3lzQixXQUFVLENBQUNwWCxJQUFYLENBQWdCZ1osT0FBaEIsRUFBeUJydUIsUUFBekIsQ0FBN0MsS0FBb0ZxdUIsT0FBTyxDQUFDcnVCLFFBQUQsQ0FBUCxHQUFvQixDQUF4RyxLQUE4R3lzQixXQUFVLENBQUNwWCxJQUFYLENBQWdCNU8sTUFBaEIsRUFBd0J6RyxRQUF4QixDQUFsSCxFQUFxSjtBQUNuSnNkLDBCQUFRLENBQUN0ZCxRQUFELENBQVI7QUFDRDtBQUNGO0FBQ0YsYUFYRDtBQVlELFdBZE0sTUFjQTtBQUNMO0FBQ0EwRixvQkFBTyxHQUFHLGlCQUFVZSxNQUFWLEVBQWtCNlcsUUFBbEIsRUFBNEI7QUFDcEMsa0JBQUl2WCxVQUFVLEdBQUdTLFFBQVEsQ0FBQzZPLElBQVQsQ0FBYzVPLE1BQWQsS0FBeUJnbkIsYUFBMUM7QUFBQSxrQkFBeUR6dEIsUUFBekQ7QUFBQSxrQkFBbUU0dUIsYUFBbkU7O0FBQ0EsbUJBQUs1dUIsUUFBTCxJQUFpQnlHLE1BQWpCLEVBQXlCO0FBQ3ZCLG9CQUFJLEVBQUVWLFVBQVUsSUFBSS9GLFFBQVEsSUFBSSxXQUE1QixLQUE0Q3lzQixXQUFVLENBQUNwWCxJQUFYLENBQWdCNU8sTUFBaEIsRUFBd0J6RyxRQUF4QixDQUE1QyxJQUFpRixFQUFFNHVCLGFBQWEsR0FBRzV1QixRQUFRLEtBQUssYUFBL0IsQ0FBckYsRUFBb0k7QUFDbElzZCwwQkFBUSxDQUFDdGQsUUFBRCxDQUFSO0FBQ0Q7QUFDRixlQU5tQyxDQU9wQztBQUNBOzs7QUFDQSxrQkFBSTR1QixhQUFhLElBQUluQyxXQUFVLENBQUNwWCxJQUFYLENBQWdCNU8sTUFBaEIsRUFBeUJ6RyxRQUFRLEdBQUcsYUFBcEMsQ0FBckIsRUFBMEU7QUFDeEVzZCx3QkFBUSxDQUFDdGQsUUFBRCxDQUFSO0FBQ0Q7QUFDRixhQVpEO0FBYUQ7O0FBQ0QsaUJBQU8wRixRQUFPLENBQUNlLE1BQUQsRUFBUzZXLFFBQVQsQ0FBZDtBQUNELFNBdEVELENBOUVnQixDQXNKaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxZQUFJLENBQUM1aUIsR0FBRyxDQUFDLGdCQUFELENBQVIsRUFBNEI7QUFDMUI7QUFDQSxjQUFJbTBCLE9BQU8sR0FBRztBQUNaLGdCQUFJLE1BRFE7QUFFWixnQkFBSSxLQUZRO0FBR1osZUFBRyxLQUhTO0FBSVosZ0JBQUksS0FKUTtBQUtaLGdCQUFJLEtBTFE7QUFNWixnQkFBSSxLQU5RO0FBT1osZUFBRztBQVBTLFdBQWQsQ0FGMEIsQ0FZMUI7QUFDQTs7QUFDQSxjQUFJQyxhQUFhLEdBQUcsUUFBcEI7O0FBQ0EsY0FBSUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVdFUsS0FBVixFQUFpQnR3QixLQUFqQixFQUF3QjtBQUMzQztBQUNBO0FBQ0EsbUJBQU8sQ0FBQzJrQyxhQUFhLElBQUkza0MsS0FBSyxJQUFJLENBQWIsQ0FBZCxFQUErQjZrQyxLQUEvQixDQUFxQyxDQUFDdlUsS0FBdEMsQ0FBUDtBQUNELFdBSkQsQ0FmMEIsQ0FxQjFCO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxjQUFJd1UsYUFBYSxHQUFHLE9BQXBCOztBQUNBLGNBQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVUva0MsS0FBVixFQUFpQjtBQUMzQixnQkFBSXVPLE1BQU0sR0FBRyxHQUFiO0FBQUEsZ0JBQWtCZ0csS0FBSyxHQUFHLENBQTFCO0FBQUEsZ0JBQTZCOVQsTUFBTSxHQUFHVCxLQUFLLENBQUNTLE1BQTVDO0FBQUEsZ0JBQW9EdWtDLFlBQVksR0FBRyxDQUFDcEIsY0FBRCxJQUFtQm5qQyxNQUFNLEdBQUcsRUFBL0Y7QUFDQSxnQkFBSXdrQyxPQUFPLEdBQUdELFlBQVksS0FBS3BCLGNBQWMsR0FBRzVqQyxLQUFLLENBQUMwRCxLQUFOLENBQVksRUFBWixDQUFILEdBQXFCMUQsS0FBeEMsQ0FBMUI7O0FBQ0EsbUJBQU91VSxLQUFLLEdBQUc5VCxNQUFmLEVBQXVCOFQsS0FBSyxFQUE1QixFQUFnQztBQUM5QixrQkFBSTJ3QixRQUFRLEdBQUdsbEMsS0FBSyxDQUFDbWxDLFVBQU4sQ0FBaUI1d0IsS0FBakIsQ0FBZixDQUQ4QixDQUU5QjtBQUNBOztBQUNBLHNCQUFRMndCLFFBQVI7QUFDRSxxQkFBSyxDQUFMO0FBQVEscUJBQUssQ0FBTDtBQUFRLHFCQUFLLEVBQUw7QUFBUyxxQkFBSyxFQUFMO0FBQVMscUJBQUssRUFBTDtBQUFTLHFCQUFLLEVBQUw7QUFBUyxxQkFBSyxFQUFMO0FBQ2xEMzJCLHdCQUFNLElBQUltMkIsT0FBTyxDQUFDUSxRQUFELENBQWpCO0FBQ0E7O0FBQ0Y7QUFDRSxzQkFBSUEsUUFBUSxHQUFHLEVBQWYsRUFBbUI7QUFDakIzMkIsMEJBQU0sSUFBSXUyQixhQUFhLEdBQUdGLGNBQWMsQ0FBQyxDQUFELEVBQUlNLFFBQVEsQ0FBQ2xpQyxRQUFULENBQWtCLEVBQWxCLENBQUosQ0FBeEM7QUFDQTtBQUNEOztBQUNEdUwsd0JBQU0sSUFBSXkyQixZQUFZLEdBQUdDLE9BQU8sQ0FBQzF3QixLQUFELENBQVYsR0FBb0J2VSxLQUFLLENBQUNxQyxNQUFOLENBQWFrUyxLQUFiLENBQTFDO0FBVEo7QUFXRDs7QUFDRCxtQkFBT2hHLE1BQU0sR0FBRyxHQUFoQjtBQUNELFdBcEJELENBMUIwQixDQWdEMUI7QUFDQTs7O0FBQ0EsY0FBSTYyQixTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVdnZCLFFBQVYsRUFBb0J5RyxNQUFwQixFQUE0QjZXLFFBQTVCLEVBQXNDa1MsVUFBdEMsRUFBa0RDLFVBQWxELEVBQThEQyxXQUE5RCxFQUEyRWxJLEtBQTNFLEVBQWtGO0FBQ2hHLGdCQUFJcjlCLEtBQUosRUFBV3dsQyxTQUFYLEVBQXNCeEIsSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1Dd0IsSUFBbkMsRUFBeUNDLElBQXpDLEVBQStDQyxLQUEvQyxFQUFzREMsT0FBdEQsRUFBK0RDLE9BQS9ELEVBQXdFQyxZQUF4RSxFQUFzRjlvQixPQUF0RixFQUErRitvQixPQUEvRixFQUF3R3h4QixLQUF4RyxFQUErRzlULE1BQS9HLEVBQXVIdWxDLE1BQXZILEVBQStIejNCLE1BQS9IOztBQUNBLGdCQUFJO0FBQ0Y7QUFDQXZPLG1CQUFLLEdBQUdzYyxNQUFNLENBQUN6RyxRQUFELENBQWQ7QUFDRCxhQUhELENBR0UsT0FBT210QixTQUFQLEVBQWtCLENBQUU7O0FBQ3RCLGdCQUFJLE9BQU9oakMsS0FBUCxJQUFnQixRQUFoQixJQUE0QkEsS0FBaEMsRUFBdUM7QUFDckN3bEMsdUJBQVMsR0FBR25wQixRQUFRLENBQUM2TyxJQUFULENBQWNsckIsS0FBZCxDQUFaOztBQUNBLGtCQUFJd2xDLFNBQVMsSUFBSWpDLFNBQWIsSUFBMEIsQ0FBQ2pCLFdBQVUsQ0FBQ3BYLElBQVgsQ0FBZ0JsckIsS0FBaEIsRUFBdUIsUUFBdkIsQ0FBL0IsRUFBaUU7QUFDL0Qsb0JBQUlBLEtBQUssR0FBRyxDQUFDLENBQUQsR0FBSyxDQUFiLElBQWtCQSxLQUFLLEdBQUcsSUFBSSxDQUFsQyxFQUFxQztBQUNuQztBQUNBO0FBQ0E7QUFDQSxzQkFBSStqQyxNQUFKLEVBQVk7QUFDVjtBQUNBO0FBQ0E7QUFDQTBCLHdCQUFJLEdBQUc1QixLQUFLLENBQUM3akMsS0FBSyxHQUFHLEtBQVQsQ0FBWjs7QUFDQSx5QkFBS2drQyxJQUFJLEdBQUdILEtBQUssQ0FBQzRCLElBQUksR0FBRyxRQUFSLENBQUwsR0FBeUIsSUFBekIsR0FBZ0MsQ0FBNUMsRUFBK0MxQixNQUFNLENBQUNDLElBQUksR0FBRyxDQUFSLEVBQVcsQ0FBWCxDQUFOLElBQXVCeUIsSUFBdEUsRUFBNEV6QixJQUFJLEVBQWhGLEVBQW1GLENBQUc7O0FBQ3RGLHlCQUFLQyxLQUFLLEdBQUdKLEtBQUssQ0FBQyxDQUFDNEIsSUFBSSxHQUFHMUIsTUFBTSxDQUFDQyxJQUFELEVBQU8sQ0FBUCxDQUFkLElBQTJCLEtBQTVCLENBQWxCLEVBQXNERCxNQUFNLENBQUNDLElBQUQsRUFBT0MsS0FBSyxHQUFHLENBQWYsQ0FBTixJQUEyQndCLElBQWpGLEVBQXVGeEIsS0FBSyxFQUE1RixFQUErRixDQUFHOztBQUNsR3dCLHdCQUFJLEdBQUcsSUFBSUEsSUFBSixHQUFXMUIsTUFBTSxDQUFDQyxJQUFELEVBQU9DLEtBQVAsQ0FBeEIsQ0FQVSxDQVFWO0FBQ0E7QUFDQTtBQUNBOztBQUNBeUIsd0JBQUksR0FBRyxDQUFDMWxDLEtBQUssR0FBRyxLQUFSLEdBQWdCLEtBQWpCLElBQTBCLEtBQWpDLENBWlUsQ0FhVjtBQUNBOztBQUNBMmxDLHlCQUFLLEdBQUc5QixLQUFLLENBQUM2QixJQUFJLEdBQUcsSUFBUixDQUFMLEdBQXFCLEVBQTdCO0FBQ0FFLDJCQUFPLEdBQUcvQixLQUFLLENBQUM2QixJQUFJLEdBQUcsR0FBUixDQUFMLEdBQW9CLEVBQTlCO0FBQ0FHLDJCQUFPLEdBQUdoQyxLQUFLLENBQUM2QixJQUFJLEdBQUcsR0FBUixDQUFMLEdBQW9CLEVBQTlCO0FBQ0FJLGdDQUFZLEdBQUdKLElBQUksR0FBRyxHQUF0QjtBQUNELG1CQW5CRCxNQW1CTztBQUNMMUIsd0JBQUksR0FBR2hrQyxLQUFLLENBQUN5aUMsY0FBTixFQUFQO0FBQ0F3Qix5QkFBSyxHQUFHamtDLEtBQUssQ0FBQzBpQyxXQUFOLEVBQVI7QUFDQStDLHdCQUFJLEdBQUd6bEMsS0FBSyxDQUFDMmlDLFVBQU4sRUFBUDtBQUNBZ0QseUJBQUssR0FBRzNsQyxLQUFLLENBQUM0aUMsV0FBTixFQUFSO0FBQ0FnRCwyQkFBTyxHQUFHNWxDLEtBQUssQ0FBQzZpQyxhQUFOLEVBQVY7QUFDQWdELDJCQUFPLEdBQUc3bEMsS0FBSyxDQUFDOGlDLGFBQU4sRUFBVjtBQUNBZ0QsZ0NBQVksR0FBRzlsQyxLQUFLLENBQUMraUMsa0JBQU4sRUFBZjtBQUNELG1CQS9Ca0MsQ0FnQ25DOzs7QUFDQS9pQyx1QkFBSyxHQUFHLENBQUNna0MsSUFBSSxJQUFJLENBQVIsSUFBYUEsSUFBSSxJQUFJLEdBQXJCLEdBQTJCLENBQUNBLElBQUksR0FBRyxDQUFQLEdBQVcsR0FBWCxHQUFpQixHQUFsQixJQUF5QlksY0FBYyxDQUFDLENBQUQsRUFBSVosSUFBSSxHQUFHLENBQVAsR0FBVyxDQUFDQSxJQUFaLEdBQW1CQSxJQUF2QixDQUFsRSxHQUFpR1ksY0FBYyxDQUFDLENBQUQsRUFBSVosSUFBSixDQUFoSCxJQUNOLEdBRE0sR0FDQVksY0FBYyxDQUFDLENBQUQsRUFBSVgsS0FBSyxHQUFHLENBQVosQ0FEZCxHQUMrQixHQUQvQixHQUNxQ1csY0FBYyxDQUFDLENBQUQsRUFBSWEsSUFBSixDQURuRCxHQUVOO0FBQ0E7QUFDQSxxQkFKTSxHQUlBYixjQUFjLENBQUMsQ0FBRCxFQUFJZSxLQUFKLENBSmQsR0FJMkIsR0FKM0IsR0FJaUNmLGNBQWMsQ0FBQyxDQUFELEVBQUlnQixPQUFKLENBSi9DLEdBSThELEdBSjlELEdBSW9FaEIsY0FBYyxDQUFDLENBQUQsRUFBSWlCLE9BQUosQ0FKbEYsR0FLTjtBQUNBLHFCQU5NLEdBTUFqQixjQUFjLENBQUMsQ0FBRCxFQUFJa0IsWUFBSixDQU5kLEdBTWtDLEdBTjFDO0FBT0QsaUJBeENELE1Bd0NPO0FBQ0w5bEMsdUJBQUssR0FBRyxJQUFSO0FBQ0Q7QUFDRixlQTVDRCxNQTRDTyxJQUFJLE9BQU9BLEtBQUssQ0FBQ29qQyxNQUFiLElBQXVCLFVBQXZCLEtBQXVDb0MsU0FBUyxJQUFJaEMsV0FBYixJQUE0QmdDLFNBQVMsSUFBSS9CLFdBQXpDLElBQXdEK0IsU0FBUyxJQUFJOUIsVUFBdEUsSUFBcUZwQixXQUFVLENBQUNwWCxJQUFYLENBQWdCbHJCLEtBQWhCLEVBQXVCLFFBQXZCLENBQTNILENBQUosRUFBa0s7QUFDdks7QUFDQTtBQUNBO0FBQ0E7QUFDQUEscUJBQUssR0FBR0EsS0FBSyxDQUFDb2pDLE1BQU4sQ0FBYXZ0QixRQUFiLENBQVI7QUFDRDtBQUNGOztBQUNELGdCQUFJc2QsUUFBSixFQUFjO0FBQ1o7QUFDQTtBQUNBbnpCLG1CQUFLLEdBQUdtekIsUUFBUSxDQUFDakksSUFBVCxDQUFjNU8sTUFBZCxFQUFzQnpHLFFBQXRCLEVBQWdDN1YsS0FBaEMsQ0FBUjtBQUNEOztBQUNELGdCQUFJQSxLQUFLLEtBQUssSUFBZCxFQUFvQjtBQUNsQixxQkFBTyxNQUFQO0FBQ0Q7O0FBQ0R3bEMscUJBQVMsR0FBR25wQixRQUFRLENBQUM2TyxJQUFULENBQWNsckIsS0FBZCxDQUFaOztBQUNBLGdCQUFJd2xDLFNBQVMsSUFBSTdCLFlBQWpCLEVBQStCO0FBQzdCO0FBQ0EscUJBQU8sS0FBSzNqQyxLQUFaO0FBQ0QsYUFIRCxNQUdPLElBQUl3bEMsU0FBUyxJQUFJaEMsV0FBakIsRUFBOEI7QUFDbkM7QUFDQTtBQUNBLHFCQUFPeGpDLEtBQUssR0FBRyxDQUFDLENBQUQsR0FBSyxDQUFiLElBQWtCQSxLQUFLLEdBQUcsSUFBSSxDQUE5QixHQUFrQyxLQUFLQSxLQUF2QyxHQUErQyxNQUF0RDtBQUNELGFBSk0sTUFJQSxJQUFJd2xDLFNBQVMsSUFBSS9CLFdBQWpCLEVBQThCO0FBQ25DO0FBQ0EscUJBQU9zQixLQUFLLENBQUMsS0FBSy9rQyxLQUFOLENBQVo7QUFDRCxhQS9FK0YsQ0FnRmhHOzs7QUFDQSxnQkFBSSxPQUFPQSxLQUFQLElBQWdCLFFBQXBCLEVBQThCO0FBQzVCO0FBQ0E7QUFDQSxtQkFBS1MsTUFBTSxHQUFHNDhCLEtBQUssQ0FBQzU4QixNQUFwQixFQUE0QkEsTUFBTSxFQUFsQyxHQUF1QztBQUNyQyxvQkFBSTQ4QixLQUFLLENBQUM1OEIsTUFBRCxDQUFMLEtBQWtCVCxLQUF0QixFQUE2QjtBQUMzQjtBQUNBLHdCQUFNaWMsU0FBUyxFQUFmO0FBQ0Q7QUFDRixlQVIyQixDQVM1Qjs7O0FBQ0FvaEIsbUJBQUssQ0FBQ3ZwQixJQUFOLENBQVc5VCxLQUFYO0FBQ0FnZCxxQkFBTyxHQUFHLEVBQVYsQ0FYNEIsQ0FZNUI7O0FBQ0FncEIsb0JBQU0sR0FBR1QsV0FBVDtBQUNBQSx5QkFBVyxJQUFJRCxVQUFmOztBQUNBLGtCQUFJRSxTQUFTLElBQUk5QixVQUFqQixFQUE2QjtBQUMzQjtBQUNBLHFCQUFLbnZCLEtBQUssR0FBRyxDQUFSLEVBQVc5VCxNQUFNLEdBQUdULEtBQUssQ0FBQ1MsTUFBL0IsRUFBdUM4VCxLQUFLLEdBQUc5VCxNQUEvQyxFQUF1RDhULEtBQUssRUFBNUQsRUFBZ0U7QUFDOUR3eEIseUJBQU8sR0FBR1gsU0FBUyxDQUFDN3dCLEtBQUQsRUFBUXZVLEtBQVIsRUFBZW16QixRQUFmLEVBQXlCa1MsVUFBekIsRUFBcUNDLFVBQXJDLEVBQWlEQyxXQUFqRCxFQUE4RGxJLEtBQTlELENBQW5CO0FBQ0FyZ0IseUJBQU8sQ0FBQ2xKLElBQVIsQ0FBYWl5QixPQUFPLEtBQUt4RCxLQUFaLEdBQW9CLE1BQXBCLEdBQTZCd0QsT0FBMUM7QUFDRDs7QUFDRHgzQixzQkFBTSxHQUFHeU8sT0FBTyxDQUFDdmMsTUFBUixHQUFrQjZrQyxVQUFVLEdBQUcsUUFBUUMsV0FBUixHQUFzQnZvQixPQUFPLENBQUNsQyxJQUFSLENBQWEsUUFBUXlxQixXQUFyQixDQUF0QixHQUEwRCxJQUExRCxHQUFpRVMsTUFBakUsR0FBMEUsR0FBN0UsR0FBb0YsTUFBTWhwQixPQUFPLENBQUNsQyxJQUFSLENBQWEsR0FBYixDQUFOLEdBQTBCLEdBQTFJLEdBQWtKLElBQTNKO0FBQ0QsZUFQRCxNQU9PO0FBQ0w7QUFDQTtBQUNBO0FBQ0FTLHdCQUFPLENBQUM4cEIsVUFBVSxJQUFJcmxDLEtBQWYsRUFBc0IsVUFBVTZWLFFBQVYsRUFBb0I7QUFDL0Msc0JBQUlrd0IsT0FBTyxHQUFHWCxTQUFTLENBQUN2dkIsUUFBRCxFQUFXN1YsS0FBWCxFQUFrQm16QixRQUFsQixFQUE0QmtTLFVBQTVCLEVBQXdDQyxVQUF4QyxFQUFvREMsV0FBcEQsRUFBaUVsSSxLQUFqRSxDQUF2Qjs7QUFDQSxzQkFBSTBJLE9BQU8sS0FBS3hELEtBQWhCLEVBQXVCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBdmxCLDJCQUFPLENBQUNsSixJQUFSLENBQWFpeEIsS0FBSyxDQUFDbHZCLFFBQUQsQ0FBTCxHQUFrQixHQUFsQixJQUF5Qnl2QixVQUFVLEdBQUcsR0FBSCxHQUFTLEVBQTVDLElBQWtEUyxPQUEvRDtBQUNEO0FBQ0YsaUJBWE0sQ0FBUDs7QUFZQXgzQixzQkFBTSxHQUFHeU8sT0FBTyxDQUFDdmMsTUFBUixHQUFrQjZrQyxVQUFVLEdBQUcsUUFBUUMsV0FBUixHQUFzQnZvQixPQUFPLENBQUNsQyxJQUFSLENBQWEsUUFBUXlxQixXQUFyQixDQUF0QixHQUEwRCxJQUExRCxHQUFpRVMsTUFBakUsR0FBMEUsR0FBN0UsR0FBb0YsTUFBTWhwQixPQUFPLENBQUNsQyxJQUFSLENBQWEsR0FBYixDQUFOLEdBQTBCLEdBQTFJLEdBQWtKLElBQTNKO0FBQ0QsZUF2QzJCLENBd0M1Qjs7O0FBQ0F1aUIsbUJBQUssQ0FBQ3BCLEdBQU47QUFDQSxxQkFBTzF0QixNQUFQO0FBQ0Q7QUFDRixXQTdIRCxDQWxEMEIsQ0FpTDFCOzs7QUFDQXhPLGlCQUFPLENBQUNnZixTQUFSLEdBQW9CLFVBQVVSLE1BQVYsRUFBa0JnYixNQUFsQixFQUEwQmpKLEtBQTFCLEVBQWlDO0FBQ25ELGdCQUFJZ1YsVUFBSixFQUFnQm5TLFFBQWhCLEVBQTBCa1MsVUFBMUIsRUFBc0NHLFNBQXRDOztBQUNBLGdCQUFJLE9BQU9qTSxNQUFQLElBQWlCLFVBQWpCLElBQStCLE9BQU9BLE1BQVAsSUFBaUIsUUFBakIsSUFBNkJBLE1BQWhFLEVBQXdFO0FBQ3RFLGtCQUFJLENBQUNpTSxTQUFTLEdBQUducEIsUUFBUSxDQUFDNk8sSUFBVCxDQUFjcU8sTUFBZCxDQUFiLEtBQXVDK0osYUFBM0MsRUFBMEQ7QUFDeERuUSx3QkFBUSxHQUFHb0csTUFBWDtBQUNELGVBRkQsTUFFTyxJQUFJaU0sU0FBUyxJQUFJOUIsVUFBakIsRUFBNkI7QUFDbEM7QUFDQTJCLDBCQUFVLEdBQUcsRUFBYjs7QUFDQSxxQkFBSyxJQUFJOXdCLEtBQUssR0FBRyxDQUFaLEVBQWU5VCxNQUFNLEdBQUc4NEIsTUFBTSxDQUFDOTRCLE1BQS9CLEVBQXVDVCxLQUE1QyxFQUFtRHVVLEtBQUssR0FBRzlULE1BQTNELEVBQW1FVCxLQUFLLEdBQUd1NUIsTUFBTSxDQUFDaGxCLEtBQUssRUFBTixDQUFkLEVBQXlCLENBQUVpeEIsU0FBUyxHQUFHbnBCLFFBQVEsQ0FBQzZPLElBQVQsQ0FBY2xyQixLQUFkLENBQWIsRUFBb0N3bEMsU0FBUyxJQUFJL0IsV0FBYixJQUE0QitCLFNBQVMsSUFBSWhDLFdBQTlFLE1BQStGNkIsVUFBVSxDQUFDcmxDLEtBQUQsQ0FBVixHQUFvQixDQUFuSCxDQUE1RixFQUFrTixDQUFHO0FBQ3ROO0FBQ0Y7O0FBQ0QsZ0JBQUlzd0IsS0FBSixFQUFXO0FBQ1Qsa0JBQUksQ0FBQ2tWLFNBQVMsR0FBR25wQixRQUFRLENBQUM2TyxJQUFULENBQWNvRixLQUFkLENBQWIsS0FBc0NrVCxXQUExQyxFQUF1RDtBQUNyRDtBQUNBO0FBQ0Esb0JBQUksQ0FBQ2xULEtBQUssSUFBSUEsS0FBSyxHQUFHLENBQWxCLElBQXVCLENBQTNCLEVBQThCO0FBQzVCLHVCQUFLZ1YsVUFBVSxHQUFHLEVBQWIsRUFBaUJoVixLQUFLLEdBQUcsRUFBUixLQUFlQSxLQUFLLEdBQUcsRUFBdkIsQ0FBdEIsRUFBa0RnVixVQUFVLENBQUM3a0MsTUFBWCxHQUFvQjZ2QixLQUF0RSxFQUE2RWdWLFVBQVUsSUFBSSxHQUEzRixFQUErRixDQUFHO0FBQ25HO0FBQ0YsZUFORCxNQU1PLElBQUlFLFNBQVMsSUFBSS9CLFdBQWpCLEVBQThCO0FBQ25DNkIsMEJBQVUsR0FBR2hWLEtBQUssQ0FBQzd2QixNQUFOLElBQWdCLEVBQWhCLEdBQXFCNnZCLEtBQXJCLEdBQTZCQSxLQUFLLENBQUN1VSxLQUFOLENBQVksQ0FBWixFQUFlLEVBQWYsQ0FBMUM7QUFDRDtBQUNGLGFBckJrRCxDQXNCbkQ7QUFDQTtBQUNBOzs7QUFDQSxtQkFBT08sU0FBUyxDQUFDLEVBQUQsR0FBTXBsQyxLQUFLLEdBQUcsRUFBUixFQUFZQSxLQUFLLENBQUMsRUFBRCxDQUFMLEdBQVl1ZSxNQUF4QixFQUFnQ3ZlLEtBQXRDLEdBQThDbXpCLFFBQTlDLEVBQXdEa1MsVUFBeEQsRUFBb0VDLFVBQXBFLEVBQWdGLEVBQWhGLEVBQW9GLEVBQXBGLENBQWhCO0FBQ0QsV0ExQkQ7QUEyQkQsU0F6V2UsQ0EyV2hCOzs7QUFDQSxZQUFJLENBQUMvMEIsR0FBRyxDQUFDLFlBQUQsQ0FBUixFQUF3QjtBQUN0QixjQUFJMDFCLFlBQVksR0FBR3pxQixNQUFNLENBQUN5cUIsWUFBMUIsQ0FEc0IsQ0FHdEI7QUFDQTs7QUFDQSxjQUFJQyxTQUFTLEdBQUc7QUFDZCxnQkFBSSxJQURVO0FBRWQsZ0JBQUksR0FGVTtBQUdkLGdCQUFJLEdBSFU7QUFJZCxnQkFBSSxJQUpVO0FBS2QsaUJBQUssSUFMUztBQU1kLGlCQUFLLElBTlM7QUFPZCxpQkFBSyxJQVBTO0FBUWQsaUJBQUs7QUFSUyxXQUFoQixDQUxzQixDQWdCdEI7O0FBQ0EsY0FBSUMsS0FBSixFQUFXQyxNQUFYLENBakJzQixDQW1CdEI7O0FBQ0EsY0FBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBWTtBQUN0QkYsaUJBQUssR0FBR0MsTUFBTSxHQUFHLElBQWpCO0FBQ0Esa0JBQU1qRSxXQUFXLEVBQWpCO0FBQ0QsV0FIRCxDQXBCc0IsQ0F5QnRCO0FBQ0E7QUFDQTs7O0FBQ0EsY0FBSW1FLEdBQUcsR0FBRyxTQUFOQSxHQUFNLEdBQVk7QUFDcEIsZ0JBQUkvbkIsTUFBTSxHQUFHNm5CLE1BQWI7QUFBQSxnQkFBcUIzbEMsTUFBTSxHQUFHOGQsTUFBTSxDQUFDOWQsTUFBckM7QUFBQSxnQkFBNkNULEtBQTdDO0FBQUEsZ0JBQW9EdW1DLEtBQXBEO0FBQUEsZ0JBQTJEeHhCLFFBQTNEO0FBQUEsZ0JBQXFFeXhCLFFBQXJFO0FBQUEsZ0JBQStFdEIsUUFBL0U7O0FBQ0EsbUJBQU9pQixLQUFLLEdBQUcxbEMsTUFBZixFQUF1QjtBQUNyQnlrQyxzQkFBUSxHQUFHM21CLE1BQU0sQ0FBQzRtQixVQUFQLENBQWtCZ0IsS0FBbEIsQ0FBWDs7QUFDQSxzQkFBUWpCLFFBQVI7QUFDRSxxQkFBSyxDQUFMO0FBQVEscUJBQUssRUFBTDtBQUFTLHFCQUFLLEVBQUw7QUFBUyxxQkFBSyxFQUFMO0FBQ3hCO0FBQ0E7QUFDQWlCLHVCQUFLO0FBQ0w7O0FBQ0YscUJBQUssR0FBTDtBQUFVLHFCQUFLLEdBQUw7QUFBVSxxQkFBSyxFQUFMO0FBQVMscUJBQUssRUFBTDtBQUFTLHFCQUFLLEVBQUw7QUFBUyxxQkFBSyxFQUFMO0FBQzdDO0FBQ0E7QUFDQW5tQyx1QkFBSyxHQUFHNGpDLGNBQWMsR0FBR3JsQixNQUFNLENBQUNsYyxNQUFQLENBQWM4akMsS0FBZCxDQUFILEdBQTBCNW5CLE1BQU0sQ0FBQzRuQixLQUFELENBQXREO0FBQ0FBLHVCQUFLO0FBQ0wseUJBQU9ubUMsS0FBUDs7QUFDRixxQkFBSyxFQUFMO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBS0EsS0FBSyxHQUFHLEdBQVIsRUFBYW1tQyxLQUFLLEVBQXZCLEVBQTJCQSxLQUFLLEdBQUcxbEMsTUFBbkMsR0FBNEM7QUFDMUN5a0MsNEJBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQmdCLEtBQWxCLENBQVg7O0FBQ0Esd0JBQUlqQixRQUFRLEdBQUcsRUFBZixFQUFtQjtBQUNqQjtBQUNBO0FBQ0FtQiwyQkFBSztBQUNOLHFCQUpELE1BSU8sSUFBSW5CLFFBQVEsSUFBSSxFQUFoQixFQUFvQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQUEsOEJBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQixFQUFFZ0IsS0FBcEIsQ0FBWDs7QUFDQSw4QkFBUWpCLFFBQVI7QUFDRSw2QkFBSyxFQUFMO0FBQVMsNkJBQUssRUFBTDtBQUFTLDZCQUFLLEVBQUw7QUFBUyw2QkFBSyxFQUFMO0FBQVMsNkJBQUssR0FBTDtBQUFVLDZCQUFLLEdBQUw7QUFBVSw2QkFBSyxHQUFMO0FBQVUsNkJBQUssR0FBTDtBQUNoRTtBQUNBbGxDLCtCQUFLLElBQUlrbUMsU0FBUyxDQUFDaEIsUUFBRCxDQUFsQjtBQUNBaUIsK0JBQUs7QUFDTDs7QUFDRiw2QkFBSyxHQUFMO0FBQ0U7QUFDQTtBQUNBO0FBQ0FJLCtCQUFLLEdBQUcsRUFBRUosS0FBVjs7QUFDQSwrQkFBS3B4QixRQUFRLEdBQUdveEIsS0FBSyxHQUFHLENBQXhCLEVBQTJCQSxLQUFLLEdBQUdweEIsUUFBbkMsRUFBNkNveEIsS0FBSyxFQUFsRCxFQUFzRDtBQUNwRGpCLG9DQUFRLEdBQUczbUIsTUFBTSxDQUFDNG1CLFVBQVAsQ0FBa0JnQixLQUFsQixDQUFYLENBRG9ELENBRXBEO0FBQ0E7O0FBQ0EsZ0NBQUksRUFBRWpCLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksRUFBOUIsSUFBb0NBLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksR0FBbEUsSUFBeUVBLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksRUFBekcsQ0FBSixFQUFrSDtBQUNoSDtBQUNBbUIsbUNBQUs7QUFDTjtBQUNGLDJCQWJILENBY0U7OztBQUNBcm1DLCtCQUFLLElBQUlpbUMsWUFBWSxDQUFDLE9BQU8xbkIsTUFBTSxDQUFDc21CLEtBQVAsQ0FBYTBCLEtBQWIsRUFBb0JKLEtBQXBCLENBQVIsQ0FBckI7QUFDQTs7QUFDRjtBQUNFO0FBQ0FFLCtCQUFLO0FBekJUO0FBMkJELHFCQWhDTSxNQWdDQTtBQUNMLDBCQUFJbkIsUUFBUSxJQUFJLEVBQWhCLEVBQW9CO0FBQ2xCO0FBQ0E7QUFDQTtBQUNEOztBQUNEQSw4QkFBUSxHQUFHM21CLE1BQU0sQ0FBQzRtQixVQUFQLENBQWtCZ0IsS0FBbEIsQ0FBWDtBQUNBSSwyQkFBSyxHQUFHSixLQUFSLENBUEssQ0FRTDs7QUFDQSw2QkFBT2pCLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksRUFBOUIsSUFBb0NBLFFBQVEsSUFBSSxFQUF2RCxFQUEyRDtBQUN6REEsZ0NBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQixFQUFFZ0IsS0FBcEIsQ0FBWDtBQUNELHVCQVhJLENBWUw7OztBQUNBbm1DLDJCQUFLLElBQUl1ZSxNQUFNLENBQUNzbUIsS0FBUCxDQUFhMEIsS0FBYixFQUFvQkosS0FBcEIsQ0FBVDtBQUNEO0FBQ0Y7O0FBQ0Qsc0JBQUk1bkIsTUFBTSxDQUFDNG1CLFVBQVAsQ0FBa0JnQixLQUFsQixLQUE0QixFQUFoQyxFQUFvQztBQUNsQztBQUNBQSx5QkFBSztBQUNMLDJCQUFPbm1DLEtBQVA7QUFDRCxtQkEvREgsQ0FnRUU7OztBQUNBcW1DLHVCQUFLOztBQUNQO0FBQ0U7QUFDQUUsdUJBQUssR0FBR0osS0FBUixDQUZGLENBR0U7O0FBQ0Esc0JBQUlqQixRQUFRLElBQUksRUFBaEIsRUFBb0I7QUFDbEJzQiw0QkFBUSxHQUFHLElBQVg7QUFDQXRCLDRCQUFRLEdBQUczbUIsTUFBTSxDQUFDNG1CLFVBQVAsQ0FBa0IsRUFBRWdCLEtBQXBCLENBQVg7QUFDRCxtQkFQSCxDQVFFOzs7QUFDQSxzQkFBSWpCLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksRUFBbEMsRUFBc0M7QUFDcEM7QUFDQSx3QkFBSUEsUUFBUSxJQUFJLEVBQVosS0FBb0JBLFFBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQmdCLEtBQUssR0FBRyxDQUExQixDQUFaLEVBQTJDakIsUUFBUSxJQUFJLEVBQVosSUFBa0JBLFFBQVEsSUFBSSxFQUE1RixDQUFKLEVBQXFHO0FBQ25HO0FBQ0FtQiwyQkFBSztBQUNOOztBQUNERyw0QkFBUSxHQUFHLEtBQVgsQ0FOb0MsQ0FPcEM7O0FBQ0EsMkJBQU9MLEtBQUssR0FBRzFsQyxNQUFSLEtBQW9CeWtDLFFBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQmdCLEtBQWxCLENBQVosRUFBdUNqQixRQUFRLElBQUksRUFBWixJQUFrQkEsUUFBUSxJQUFJLEVBQXhGLENBQVAsRUFBb0dpQixLQUFLLEVBQXpHLEVBQTRHLENBQUcsQ0FSM0UsQ0FTcEM7QUFDQTs7O0FBQ0Esd0JBQUk1bkIsTUFBTSxDQUFDNG1CLFVBQVAsQ0FBa0JnQixLQUFsQixLQUE0QixFQUFoQyxFQUFvQztBQUNsQ3B4Qiw4QkFBUSxHQUFHLEVBQUVveEIsS0FBYixDQURrQyxDQUVsQzs7QUFDQSw2QkFBT3B4QixRQUFRLEdBQUd0VSxNQUFYLEtBQXVCeWtDLFFBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQnB3QixRQUFsQixDQUFaLEVBQTBDbXdCLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksRUFBOUYsQ0FBUCxFQUEwR253QixRQUFRLEVBQWxILEVBQXFILENBQUc7O0FBQ3hILDBCQUFJQSxRQUFRLElBQUlveEIsS0FBaEIsRUFBdUI7QUFDckI7QUFDQUUsNkJBQUs7QUFDTjs7QUFDREYsMkJBQUssR0FBR3B4QixRQUFSO0FBQ0QscUJBcEJtQyxDQXFCcEM7QUFDQTs7O0FBQ0Ftd0IsNEJBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQmdCLEtBQWxCLENBQVg7O0FBQ0Esd0JBQUlqQixRQUFRLElBQUksR0FBWixJQUFtQkEsUUFBUSxJQUFJLEVBQW5DLEVBQXVDO0FBQ3JDQSw4QkFBUSxHQUFHM21CLE1BQU0sQ0FBQzRtQixVQUFQLENBQWtCLEVBQUVnQixLQUFwQixDQUFYLENBRHFDLENBRXJDO0FBQ0E7O0FBQ0EsMEJBQUlqQixRQUFRLElBQUksRUFBWixJQUFrQkEsUUFBUSxJQUFJLEVBQWxDLEVBQXNDO0FBQ3BDaUIsNkJBQUs7QUFDTix1QkFOb0MsQ0FPckM7OztBQUNBLDJCQUFLcHhCLFFBQVEsR0FBR294QixLQUFoQixFQUF1QnB4QixRQUFRLEdBQUd0VSxNQUFYLEtBQXVCeWtDLFFBQVEsR0FBRzNtQixNQUFNLENBQUM0bUIsVUFBUCxDQUFrQnB3QixRQUFsQixDQUFaLEVBQTBDbXdCLFFBQVEsSUFBSSxFQUFaLElBQWtCQSxRQUFRLElBQUksRUFBOUYsQ0FBdkIsRUFBMEhud0IsUUFBUSxFQUFsSSxFQUFxSSxDQUFHOztBQUN4SSwwQkFBSUEsUUFBUSxJQUFJb3hCLEtBQWhCLEVBQXVCO0FBQ3JCO0FBQ0FFLDZCQUFLO0FBQ047O0FBQ0RGLDJCQUFLLEdBQUdweEIsUUFBUjtBQUNELHFCQXRDbUMsQ0F1Q3BDOzs7QUFDQSwyQkFBTyxDQUFDd0osTUFBTSxDQUFDc21CLEtBQVAsQ0FBYTBCLEtBQWIsRUFBb0JKLEtBQXBCLENBQVI7QUFDRCxtQkFsREgsQ0FtREU7OztBQUNBLHNCQUFJSyxRQUFKLEVBQWM7QUFDWkgseUJBQUs7QUFDTixtQkF0REgsQ0F1REU7OztBQUNBLHNCQUFJOW5CLE1BQU0sQ0FBQ3NtQixLQUFQLENBQWFzQixLQUFiLEVBQW9CQSxLQUFLLEdBQUcsQ0FBNUIsS0FBa0MsTUFBdEMsRUFBOEM7QUFDNUNBLHlCQUFLLElBQUksQ0FBVDtBQUNBLDJCQUFPLElBQVA7QUFDRCxtQkFIRCxNQUdPLElBQUk1bkIsTUFBTSxDQUFDc21CLEtBQVAsQ0FBYXNCLEtBQWIsRUFBb0JBLEtBQUssR0FBRyxDQUE1QixLQUFrQyxPQUF0QyxFQUErQztBQUNwREEseUJBQUssSUFBSSxDQUFUO0FBQ0EsMkJBQU8sS0FBUDtBQUNELG1CQUhNLE1BR0EsSUFBSTVuQixNQUFNLENBQUNzbUIsS0FBUCxDQUFhc0IsS0FBYixFQUFvQkEsS0FBSyxHQUFHLENBQTVCLEtBQWtDLE1BQXRDLEVBQThDO0FBQ25EQSx5QkFBSyxJQUFJLENBQVQ7QUFDQSwyQkFBTyxJQUFQO0FBQ0QsbUJBakVILENBa0VFOzs7QUFDQUUsdUJBQUs7QUFqSlQ7QUFtSkQsYUF2Sm1CLENBd0pwQjtBQUNBOzs7QUFDQSxtQkFBTyxHQUFQO0FBQ0QsV0EzSkQsQ0E1QnNCLENBeUx0Qjs7O0FBQ0EsY0FBSTFrQyxHQUFHLEdBQUcsU0FBTkEsR0FBTSxDQUFVM0IsS0FBVixFQUFpQjtBQUN6QixnQkFBSWdkLE9BQUosRUFBYXlwQixVQUFiOztBQUNBLGdCQUFJem1DLEtBQUssSUFBSSxHQUFiLEVBQWtCO0FBQ2hCO0FBQ0FxbUMsbUJBQUs7QUFDTjs7QUFDRCxnQkFBSSxPQUFPcm1DLEtBQVAsSUFBZ0IsUUFBcEIsRUFBOEI7QUFDNUIsa0JBQUksQ0FBQzRqQyxjQUFjLEdBQUc1akMsS0FBSyxDQUFDcUMsTUFBTixDQUFhLENBQWIsQ0FBSCxHQUFxQnJDLEtBQUssQ0FBQyxDQUFELENBQXpDLEtBQWlELEdBQXJELEVBQTBEO0FBQ3hEO0FBQ0EsdUJBQU9BLEtBQUssQ0FBQzZrQyxLQUFOLENBQVksQ0FBWixDQUFQO0FBQ0QsZUFKMkIsQ0FLNUI7OztBQUNBLGtCQUFJN2tDLEtBQUssSUFBSSxHQUFiLEVBQWtCO0FBQ2hCO0FBQ0FnZCx1QkFBTyxHQUFHLEVBQVY7O0FBQ0Esd0JBQVF5cEIsVUFBVSxLQUFLQSxVQUFVLEdBQUcsSUFBbEIsQ0FBbEIsRUFBMkM7QUFDekN6bUMsdUJBQUssR0FBR3NtQyxHQUFHLEVBQVgsQ0FEeUMsQ0FFekM7O0FBQ0Esc0JBQUl0bUMsS0FBSyxJQUFJLEdBQWIsRUFBa0I7QUFDaEI7QUFDRCxtQkFMd0MsQ0FNekM7QUFDQTtBQUNBOzs7QUFDQSxzQkFBSXltQyxVQUFKLEVBQWdCO0FBQ2Qsd0JBQUl6bUMsS0FBSyxJQUFJLEdBQWIsRUFBa0I7QUFDaEJBLDJCQUFLLEdBQUdzbUMsR0FBRyxFQUFYOztBQUNBLDBCQUFJdG1DLEtBQUssSUFBSSxHQUFiLEVBQWtCO0FBQ2hCO0FBQ0FxbUMsNkJBQUs7QUFDTjtBQUNGLHFCQU5ELE1BTU87QUFDTDtBQUNBQSwyQkFBSztBQUNOO0FBQ0YsbUJBcEJ3QyxDQXFCekM7OztBQUNBLHNCQUFJcm1DLEtBQUssSUFBSSxHQUFiLEVBQWtCO0FBQ2hCcW1DLHlCQUFLO0FBQ047O0FBQ0RycEIseUJBQU8sQ0FBQ2xKLElBQVIsQ0FBYW5TLEdBQUcsQ0FBQzNCLEtBQUQsQ0FBaEI7QUFDRDs7QUFDRCx1QkFBT2dkLE9BQVA7QUFDRCxlQS9CRCxNQStCTyxJQUFJaGQsS0FBSyxJQUFJLEdBQWIsRUFBa0I7QUFDdkI7QUFDQWdkLHVCQUFPLEdBQUcsRUFBVjs7QUFDQSx3QkFBUXlwQixVQUFVLEtBQUtBLFVBQVUsR0FBRyxJQUFsQixDQUFsQixFQUEyQztBQUN6Q3ptQyx1QkFBSyxHQUFHc21DLEdBQUcsRUFBWCxDQUR5QyxDQUV6Qzs7QUFDQSxzQkFBSXRtQyxLQUFLLElBQUksR0FBYixFQUFrQjtBQUNoQjtBQUNELG1CQUx3QyxDQU16QztBQUNBOzs7QUFDQSxzQkFBSXltQyxVQUFKLEVBQWdCO0FBQ2Qsd0JBQUl6bUMsS0FBSyxJQUFJLEdBQWIsRUFBa0I7QUFDaEJBLDJCQUFLLEdBQUdzbUMsR0FBRyxFQUFYOztBQUNBLDBCQUFJdG1DLEtBQUssSUFBSSxHQUFiLEVBQWtCO0FBQ2hCO0FBQ0FxbUMsNkJBQUs7QUFDTjtBQUNGLHFCQU5ELE1BTU87QUFDTDtBQUNBQSwyQkFBSztBQUNOO0FBQ0YsbUJBbkJ3QyxDQW9CekM7QUFDQTtBQUNBOzs7QUFDQSxzQkFBSXJtQyxLQUFLLElBQUksR0FBVCxJQUFnQixPQUFPQSxLQUFQLElBQWdCLFFBQWhDLElBQTRDLENBQUM0akMsY0FBYyxHQUFHNWpDLEtBQUssQ0FBQ3FDLE1BQU4sQ0FBYSxDQUFiLENBQUgsR0FBcUJyQyxLQUFLLENBQUMsQ0FBRCxDQUF6QyxLQUFpRCxHQUE3RixJQUFvR3NtQyxHQUFHLE1BQU0sR0FBakgsRUFBc0g7QUFDcEhELHlCQUFLO0FBQ047O0FBQ0RycEIseUJBQU8sQ0FBQ2hkLEtBQUssQ0FBQzZrQyxLQUFOLENBQVksQ0FBWixDQUFELENBQVAsR0FBMEJsakMsR0FBRyxDQUFDMmtDLEdBQUcsRUFBSixDQUE3QjtBQUNEOztBQUNELHVCQUFPdHBCLE9BQVA7QUFDRCxlQXJFMkIsQ0FzRTVCOzs7QUFDQXFwQixtQkFBSztBQUNOOztBQUNELG1CQUFPcm1DLEtBQVA7QUFDRCxXQWhGRCxDQTFMc0IsQ0E0UXRCOzs7QUFDQSxjQUFJczlCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVUvZSxNQUFWLEVBQWtCMUksUUFBbEIsRUFBNEJzZCxRQUE1QixFQUFzQztBQUNqRCxnQkFBSTRTLE9BQU8sR0FBR1csSUFBSSxDQUFDbm9CLE1BQUQsRUFBUzFJLFFBQVQsRUFBbUJzZCxRQUFuQixDQUFsQjs7QUFDQSxnQkFBSTRTLE9BQU8sS0FBS3hELEtBQWhCLEVBQXVCO0FBQ3JCLHFCQUFPaGtCLE1BQU0sQ0FBQzFJLFFBQUQsQ0FBYjtBQUNELGFBRkQsTUFFTztBQUNMMEksb0JBQU0sQ0FBQzFJLFFBQUQsQ0FBTixHQUFtQmt3QixPQUFuQjtBQUNEO0FBQ0YsV0FQRCxDQTdRc0IsQ0FzUnRCO0FBQ0E7QUFDQTs7O0FBQ0EsY0FBSVcsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBVW5vQixNQUFWLEVBQWtCMUksUUFBbEIsRUFBNEJzZCxRQUE1QixFQUFzQztBQUMvQyxnQkFBSW56QixLQUFLLEdBQUd1ZSxNQUFNLENBQUMxSSxRQUFELENBQWxCO0FBQUEsZ0JBQThCcFYsTUFBOUI7O0FBQ0EsZ0JBQUksT0FBT1QsS0FBUCxJQUFnQixRQUFoQixJQUE0QkEsS0FBaEMsRUFBdUM7QUFDckM7QUFDQTtBQUNBO0FBQ0Esa0JBQUlxYyxRQUFRLENBQUM2TyxJQUFULENBQWNsckIsS0FBZCxLQUF3QjBqQyxVQUE1QixFQUF3QztBQUN0QyxxQkFBS2pqQyxNQUFNLEdBQUdULEtBQUssQ0FBQ1MsTUFBcEIsRUFBNEJBLE1BQU0sRUFBbEMsR0FBdUM7QUFDckM2OEIsd0JBQU0sQ0FBQ3Q5QixLQUFELEVBQVFTLE1BQVIsRUFBZ0IweUIsUUFBaEIsQ0FBTjtBQUNEO0FBQ0YsZUFKRCxNQUlPO0FBQ0w1WCx3QkFBTyxDQUFDdmIsS0FBRCxFQUFRLFVBQVU2VixRQUFWLEVBQW9CO0FBQ2pDeW5CLHdCQUFNLENBQUN0OUIsS0FBRCxFQUFRNlYsUUFBUixFQUFrQnNkLFFBQWxCLENBQU47QUFDRCxpQkFGTSxDQUFQO0FBR0Q7QUFDRjs7QUFDRCxtQkFBT0EsUUFBUSxDQUFDakksSUFBVCxDQUFjM00sTUFBZCxFQUFzQjFJLFFBQXRCLEVBQWdDN1YsS0FBaEMsQ0FBUDtBQUNELFdBakJELENBelJzQixDQTRTdEI7OztBQUNBRCxpQkFBTyxDQUFDcWhCLEtBQVIsR0FBZ0IsVUFBVTdDLE1BQVYsRUFBa0I0VSxRQUFsQixFQUE0QjtBQUMxQyxnQkFBSTVrQixNQUFKLEVBQVl2TyxLQUFaO0FBQ0FtbUMsaUJBQUssR0FBRyxDQUFSO0FBQ0FDLGtCQUFNLEdBQUcsS0FBSzduQixNQUFkO0FBQ0FoUSxrQkFBTSxHQUFHNU0sR0FBRyxDQUFDMmtDLEdBQUcsRUFBSixDQUFaLENBSjBDLENBSzFDOztBQUNBLGdCQUFJQSxHQUFHLE1BQU0sR0FBYixFQUFrQjtBQUNoQkQsbUJBQUs7QUFDTixhQVJ5QyxDQVMxQzs7O0FBQ0FGLGlCQUFLLEdBQUdDLE1BQU0sR0FBRyxJQUFqQjtBQUNBLG1CQUFPalQsUUFBUSxJQUFJOVcsUUFBUSxDQUFDNk8sSUFBVCxDQUFjaUksUUFBZCxLQUEyQm1RLGFBQXZDLEdBQXVEb0QsSUFBSSxFQUFFMW1DLEtBQUssR0FBRyxFQUFSLEVBQVlBLEtBQUssQ0FBQyxFQUFELENBQUwsR0FBWXVPLE1BQXhCLEVBQWdDdk8sS0FBbEMsR0FBMEMsRUFBMUMsRUFBOENtekIsUUFBOUMsQ0FBM0QsR0FBcUg1a0IsTUFBNUg7QUFDRCxXQVpEO0FBYUQ7QUFDRjs7QUFFRHhPLGFBQU8sQ0FBQyxjQUFELENBQVAsR0FBMEJraUMsWUFBMUI7QUFDQSxhQUFPbGlDLE9BQVA7QUFDRDs7QUFFRCxRQUFJQSxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDNG1DLFFBQXBCLElBQWdDLENBQUM1RSxRQUFyQyxFQUErQztBQUM3QztBQUNBRSxrQkFBWSxDQUFDSCxJQUFELEVBQU8vaEMsT0FBUCxDQUFaO0FBQ0QsS0FIRCxNQUdPO0FBQ0w7QUFDQSxVQUFJcWlDLFVBQVUsR0FBR04sSUFBSSxDQUFDaGpCLElBQXRCO0FBQ0EsVUFBSThuQixLQUFLLEdBQUczRSxZQUFZLENBQUNILElBQUQsRUFBUUEsSUFBSSxDQUFDLE9BQUQsQ0FBSixHQUFnQjtBQUM5QztBQUNBO0FBQ0Esc0JBQWMsc0JBQVk7QUFDeEJBLGNBQUksQ0FBQ2hqQixJQUFMLEdBQVlzakIsVUFBWjtBQUNBLGlCQUFPd0UsS0FBUDtBQUNEO0FBTjZDLE9BQXhCLENBQXhCO0FBU0E5RSxVQUFJLENBQUNoakIsSUFBTCxHQUFZO0FBQ1YsaUJBQVM4bkIsS0FBSyxDQUFDeGxCLEtBREw7QUFFVixxQkFBYXdsQixLQUFLLENBQUM3bkI7QUFGVCxPQUFaO0FBSUQ7QUFDRixHQXgzQkEsRUF3M0JDMGlCLGNBeDNCRCxDQUFEO0FBeTNCQyxDQTEzQitCLENBQWhDO0FBNDNCQTs7OztBQVlBOzs7Ozs7OztBQVFBLFNBQVNvRixZQUFULENBQXNCQyxHQUF0QixFQUEwQjtBQUN4QixNQUFJam5DLE1BQU0sQ0FBQzB6QixJQUFYLEVBQWlCO0FBQUUsV0FBTzF6QixNQUFNLENBQUMwekIsSUFBUCxDQUFZdVQsR0FBWixDQUFQO0FBQTBCOztBQUM3QyxTQUFPdEYsVUFBVSxDQUFDc0YsR0FBRCxDQUFqQjtBQUNEO0FBRUQ7Ozs7O0FBSUEsSUFBSUMsV0FBVyxHQUFHQyxPQUFsQjtBQUVBOzs7Ozs7Ozs7QUFRQTs7QUFFQSxTQUFTQSxPQUFULENBQWlCMXBCLEdBQWpCLEVBQXNCMnBCLElBQXRCLEVBQTRCO0FBQzFCO0FBQ0EsTUFBSXRILEdBQUcsR0FBRztBQUNSdUgsUUFBSSxFQUFFLEVBREU7QUFFUkMsV0FBTyxFQUFFQztBQUZELEdBQVYsQ0FGMEIsQ0FNMUI7O0FBQ0EsTUFBSTVtQyxTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFBRWsvQixPQUFHLENBQUMwSCxLQUFKLEdBQVk3bUMsU0FBUyxDQUFDLENBQUQsQ0FBckI7QUFBMkI7O0FBQ3hELE1BQUlBLFNBQVMsQ0FBQ0MsTUFBVixJQUFvQixDQUF4QixFQUEyQjtBQUFFay9CLE9BQUcsQ0FBQzl2QixNQUFKLEdBQWFyUCxTQUFTLENBQUMsQ0FBRCxDQUF0QjtBQUE0Qjs7QUFDekQsTUFBSWtiLFNBQVMsQ0FBQ3VyQixJQUFELENBQWIsRUFBcUI7QUFDbkI7QUFDQXRILE9BQUcsQ0FBQzJILFVBQUosR0FBaUJMLElBQWpCO0FBQ0QsR0FIRCxNQUdPLElBQUlBLElBQUosRUFBVTtBQUNmO0FBQ0FNLFdBQU8sQ0FBQzVILEdBQUQsRUFBTXNILElBQU4sQ0FBUDtBQUNELEdBZnlCLENBZ0IxQjs7O0FBQ0EsTUFBSW5yQixXQUFXLENBQUM2akIsR0FBRyxDQUFDMkgsVUFBTCxDQUFmLEVBQWlDO0FBQUUzSCxPQUFHLENBQUMySCxVQUFKLEdBQWlCLEtBQWpCO0FBQXlCOztBQUM1RCxNQUFJeHJCLFdBQVcsQ0FBQzZqQixHQUFHLENBQUMwSCxLQUFMLENBQWYsRUFBNEI7QUFBRTFILE9BQUcsQ0FBQzBILEtBQUosR0FBWSxDQUFaO0FBQWdCOztBQUM5QyxNQUFJdnJCLFdBQVcsQ0FBQzZqQixHQUFHLENBQUM5dkIsTUFBTCxDQUFmLEVBQTZCO0FBQUU4dkIsT0FBRyxDQUFDOXZCLE1BQUosR0FBYSxLQUFiO0FBQXFCOztBQUNwRCxNQUFJaU0sV0FBVyxDQUFDNmpCLEdBQUcsQ0FBQzZILGFBQUwsQ0FBZixFQUFvQztBQUFFN0gsT0FBRyxDQUFDNkgsYUFBSixHQUFvQixJQUFwQjtBQUEyQjs7QUFDakUsTUFBSTdILEdBQUcsQ0FBQzl2QixNQUFSLEVBQWdCO0FBQUU4dkIsT0FBRyxDQUFDd0gsT0FBSixHQUFjTSxnQkFBZDtBQUFpQzs7QUFDbkQsU0FBT0MsV0FBVyxDQUFDL0gsR0FBRCxFQUFNcmlCLEdBQU4sRUFBV3FpQixHQUFHLENBQUMwSCxLQUFmLENBQWxCO0FBQ0QsQyxDQUVEOzs7QUFDQUwsT0FBTyxDQUFDbjNCLE1BQVIsR0FBaUI7QUFDZixVQUFTLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FETTtBQUVmLFlBQVcsQ0FBQyxDQUFELEVBQUksRUFBSixDQUZJO0FBR2YsZUFBYyxDQUFDLENBQUQsRUFBSSxFQUFKLENBSEM7QUFJZixhQUFZLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FKRztBQUtmLFdBQVUsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUxLO0FBTWYsVUFBUyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBTk07QUFPZixXQUFVLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FQSztBQVFmLFVBQVMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQVJNO0FBU2YsVUFBUyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBVE07QUFVZixXQUFVLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FWSztBQVdmLGFBQVksQ0FBQyxFQUFELEVBQUssRUFBTCxDQVhHO0FBWWYsU0FBUSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBWk87QUFhZixZQUFXLENBQUMsRUFBRCxFQUFLLEVBQUw7QUFiSSxDQUFqQixDLENBZ0JBOztBQUNBbTNCLE9BQU8sQ0FBQ1csTUFBUixHQUFpQjtBQUNmLGFBQVcsTUFESTtBQUVmLFlBQVUsUUFGSztBQUdmLGFBQVcsUUFISTtBQUlmLGVBQWEsTUFKRTtBQUtmLFVBQVEsTUFMTztBQU1mLFlBQVUsT0FOSztBQU9mLFVBQVEsU0FQTztBQVFmO0FBQ0EsWUFBVTtBQVRLLENBQWpCOztBQVlBLFNBQVNQLGNBQVQsQ0FBd0I1RyxHQUF4QixFQUE2Qm9ILFNBQTdCLEVBQXdDO0FBQ3RDLFNBQU9wSCxHQUFQO0FBQ0Q7O0FBRUQsU0FBUzlrQixTQUFULENBQW1CaGIsR0FBbkIsRUFBd0I7QUFDdEIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsU0FBdEI7QUFDRDs7QUFFRCxTQUFTb2IsV0FBVCxDQUFxQnBiLEdBQXJCLEVBQTBCO0FBQ3hCLFNBQU9BLEdBQUcsS0FBSyxLQUFLLENBQXBCO0FBQ0Q7O0FBRUQsU0FBUyttQyxnQkFBVCxDQUEwQmpILEdBQTFCLEVBQStCb0gsU0FBL0IsRUFBMEM7QUFDeEMsTUFBSXJpQixLQUFLLEdBQUd5aEIsT0FBTyxDQUFDVyxNQUFSLENBQWVDLFNBQWYsQ0FBWjs7QUFFQSxNQUFJcmlCLEtBQUosRUFBVztBQUNULFdBQU8sWUFBWXloQixPQUFPLENBQUNuM0IsTUFBUixDQUFlMFYsS0FBZixFQUFzQixDQUF0QixDQUFaLEdBQXVDLEdBQXZDLEdBQTZDaWIsR0FBN0MsR0FDQSxTQURBLEdBQ1l3RyxPQUFPLENBQUNuM0IsTUFBUixDQUFlMFYsS0FBZixFQUFzQixDQUF0QixDQURaLEdBQ3VDLEdBRDlDO0FBRUQsR0FIRCxNQUdPO0FBQ0wsV0FBT2liLEdBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNxSCxZQUFULENBQXNCbm5DLEdBQXRCLEVBQTJCO0FBQ3pCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFVBQXRCO0FBQ0Q7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQkQsR0FBbEIsRUFBdUI7QUFDckIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsUUFBdEI7QUFDRDs7QUFFRCxTQUFTZSxRQUFULENBQWtCZixHQUFsQixFQUF1QjtBQUNyQixTQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUF0QjtBQUNEOztBQUVELFNBQVNvbkMsTUFBVCxDQUFnQnBuQyxHQUFoQixFQUFxQjtBQUNuQixTQUFPQSxHQUFHLEtBQUssSUFBZjtBQUNEOztBQUVELFNBQVNxbkMsUUFBVCxDQUFrQnpxQixHQUFsQixFQUF1QndhLElBQXZCLEVBQTZCO0FBQzNCLFNBQU9qNEIsTUFBTSxDQUFDNkIsU0FBUCxDQUFpQnk5QixjQUFqQixDQUFnQ2pVLElBQWhDLENBQXFDNU4sR0FBckMsRUFBMEN3YSxJQUExQyxDQUFQO0FBQ0Q7O0FBRUQsU0FBU2tRLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCO0FBQ3BCLFNBQU9wc0IsUUFBUSxDQUFDb3NCLEVBQUQsQ0FBUixJQUFnQkMsY0FBYyxDQUFDRCxFQUFELENBQWQsS0FBdUIsaUJBQTlDO0FBQ0Q7O0FBRUQsU0FBU3BzQixRQUFULENBQWtCbmIsR0FBbEIsRUFBdUI7QUFDckIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQkEsR0FBRyxLQUFLLElBQTFDO0FBQ0Q7O0FBRUQsU0FBU3luQyxPQUFULENBQWlCeEosQ0FBakIsRUFBb0I7QUFDbEIsU0FBTzlpQixRQUFRLENBQUM4aUIsQ0FBRCxDQUFSLEtBQ0Z1SixjQUFjLENBQUN2SixDQUFELENBQWQsS0FBc0IsZ0JBQXRCLElBQTBDQSxDQUFDLFlBQVluOUIsS0FEckQsQ0FBUDtBQUVEOztBQUVELFNBQVM0bUMsTUFBVCxDQUFnQkMsQ0FBaEIsRUFBbUI7QUFDakIsU0FBT3hzQixRQUFRLENBQUN3c0IsQ0FBRCxDQUFSLElBQWVILGNBQWMsQ0FBQ0csQ0FBRCxDQUFkLEtBQXNCLGVBQTVDO0FBQ0Q7O0FBRUQsU0FBU0gsY0FBVCxDQUF3QkksQ0FBeEIsRUFBMkI7QUFDekIsU0FBT3pvQyxNQUFNLENBQUM2QixTQUFQLENBQWlCc0IsUUFBakIsQ0FBMEJrb0IsSUFBMUIsQ0FBK0JvZCxDQUEvQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDMUIsTUFBSS9LLElBQUksR0FBRyxFQUFYO0FBRUFnQyxTQUFPLENBQUMrSSxLQUFELEVBQVEsVUFBUzFCLEdBQVQsRUFBYzJCLEdBQWQsRUFBbUI7QUFDaENoTCxRQUFJLENBQUNxSixHQUFELENBQUosR0FBWSxJQUFaO0FBQ0QsR0FGTSxDQUFQO0FBSUEsU0FBT3JKLElBQVA7QUFDRDs7QUFFRCxTQUFTaUwsV0FBVCxDQUFxQi9JLEdBQXJCLEVBQTBCMy9CLEtBQTFCLEVBQWlDMm9DLFlBQWpDLEVBQStDQyxXQUEvQyxFQUE0RHJWLElBQTVELEVBQWtFO0FBQ2hFLE1BQUlzVixNQUFNLEdBQUcsRUFBYjs7QUFDQSxPQUFLLElBQUl4dEIsQ0FBQyxHQUFHLENBQVIsRUFBV2xYLENBQUMsR0FBR25FLEtBQUssQ0FBQ1MsTUFBMUIsRUFBa0M0YSxDQUFDLEdBQUdsWCxDQUF0QyxFQUF5QyxFQUFFa1gsQ0FBM0MsRUFBOEM7QUFDNUMsUUFBSTBzQixRQUFRLENBQUMvbkMsS0FBRCxFQUFRd2IsTUFBTSxDQUFDSCxDQUFELENBQWQsQ0FBWixFQUFnQztBQUM5Qnd0QixZQUFNLENBQUMvMEIsSUFBUCxDQUFZZzFCLGNBQWMsQ0FBQ25KLEdBQUQsRUFBTTMvQixLQUFOLEVBQWEyb0MsWUFBYixFQUEyQkMsV0FBM0IsRUFDdEJwdEIsTUFBTSxDQUFDSCxDQUFELENBRGdCLEVBQ1gsSUFEVyxDQUExQjtBQUVELEtBSEQsTUFHTztBQUNMd3RCLFlBQU0sQ0FBQy8wQixJQUFQLENBQVksRUFBWjtBQUNEO0FBQ0Y7O0FBQ0QyckIsU0FBTyxDQUFDbE0sSUFBRCxFQUFPLFVBQVNyUyxHQUFULEVBQWM7QUFDMUIsUUFBSSxDQUFDQSxHQUFHLENBQUM2bkIsS0FBSixDQUFVLE9BQVYsQ0FBTCxFQUF5QjtBQUN2QkYsWUFBTSxDQUFDLzBCLElBQVAsQ0FBWWcxQixjQUFjLENBQUNuSixHQUFELEVBQU0zL0IsS0FBTixFQUFhMm9DLFlBQWIsRUFBMkJDLFdBQTNCLEVBQ3RCMW5CLEdBRHNCLEVBQ2pCLElBRGlCLENBQTFCO0FBRUQ7QUFDRixHQUxNLENBQVA7QUFNQSxTQUFPMm5CLE1BQVA7QUFDRDs7QUFFRCxTQUFTRyxXQUFULENBQXFCaHBDLEtBQXJCLEVBQTRCO0FBQzFCLFNBQU8sTUFBTXdCLEtBQUssQ0FBQ0UsU0FBTixDQUFnQnNCLFFBQWhCLENBQXlCa29CLElBQXpCLENBQThCbHJCLEtBQTlCLENBQU4sR0FBNkMsR0FBcEQ7QUFDRDs7QUFFRCxTQUFTMG5DLFdBQVQsQ0FBcUIvSCxHQUFyQixFQUEwQjMvQixLQUExQixFQUFpQzJvQyxZQUFqQyxFQUErQztBQUM3QztBQUNBO0FBQ0EsTUFBSWhKLEdBQUcsQ0FBQzZILGFBQUosSUFDQXhuQyxLQURBLElBRUE2bkMsWUFBWSxDQUFDN25DLEtBQUssQ0FBQ2duQyxPQUFQLENBRlosSUFHQTtBQUNBaG5DLE9BQUssQ0FBQ2duQyxPQUFOLEtBQWtCQSxPQUpsQixJQUtBO0FBQ0EsSUFBRWhuQyxLQUFLLENBQUN3YyxXQUFOLElBQXFCeGMsS0FBSyxDQUFDd2MsV0FBTixDQUFrQjlhLFNBQWxCLEtBQWdDMUIsS0FBdkQsQ0FOSixFQU1tRTtBQUNqRSxRQUFJaXBDLEdBQUcsR0FBR2pwQyxLQUFLLENBQUNnbkMsT0FBTixDQUFjMkIsWUFBZCxFQUE0QmhKLEdBQTVCLENBQVY7O0FBQ0EsUUFBSSxDQUFDaC9CLFFBQVEsQ0FBQ3NvQyxHQUFELENBQWIsRUFBb0I7QUFDbEJBLFNBQUcsR0FBR3ZCLFdBQVcsQ0FBQy9ILEdBQUQsRUFBTXNKLEdBQU4sRUFBV04sWUFBWCxDQUFqQjtBQUNEOztBQUNELFdBQU9NLEdBQVA7QUFDRCxHQWY0QyxDQWlCN0M7OztBQUNBLE1BQUlDLFNBQVMsR0FBR0MsZUFBZSxDQUFDeEosR0FBRCxFQUFNMy9CLEtBQU4sQ0FBL0I7O0FBQ0EsTUFBSWtwQyxTQUFKLEVBQWU7QUFDYixXQUFPQSxTQUFQO0FBQ0QsR0FyQjRDLENBdUI3Qzs7O0FBQ0EsTUFBSTNWLElBQUksR0FBR3NULFlBQVksQ0FBQzdtQyxLQUFELENBQXZCO0FBQ0EsTUFBSTRvQyxXQUFXLEdBQUdMLFdBQVcsQ0FBQ2hWLElBQUQsQ0FBN0I7O0FBRUEsTUFBSW9NLEdBQUcsQ0FBQzJILFVBQUosSUFBa0J6bkMsTUFBTSxDQUFDdXBDLG1CQUE3QixFQUFrRDtBQUNoRDdWLFFBQUksR0FBRzF6QixNQUFNLENBQUN1cEMsbUJBQVAsQ0FBMkJwcEMsS0FBM0IsQ0FBUDtBQUNELEdBN0I0QyxDQStCN0M7QUFDQTs7O0FBQ0EsTUFBSW1vQyxPQUFPLENBQUNub0MsS0FBRCxDQUFQLEtBQ0lvL0IsT0FBTyxDQUFDN0wsSUFBRCxFQUFPLFNBQVAsQ0FBUCxJQUE0QixDQUE1QixJQUFpQzZMLE9BQU8sQ0FBQzdMLElBQUQsRUFBTyxhQUFQLENBQVAsSUFBZ0MsQ0FEckUsQ0FBSixFQUM2RTtBQUMzRSxXQUFPeVYsV0FBVyxDQUFDaHBDLEtBQUQsQ0FBbEI7QUFDRCxHQXBDNEMsQ0FzQzdDOzs7QUFDQSxNQUFJdXpCLElBQUksQ0FBQzl5QixNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLFFBQUlvbkMsWUFBWSxDQUFDN25DLEtBQUQsQ0FBaEIsRUFBeUI7QUFDdkIsVUFBSW1GLElBQUksR0FBR25GLEtBQUssQ0FBQ21GLElBQU4sR0FBYSxPQUFPbkYsS0FBSyxDQUFDbUYsSUFBMUIsR0FBaUMsRUFBNUM7QUFDQSxhQUFPdzZCLEdBQUcsQ0FBQ3dILE9BQUosQ0FBWSxjQUFjaGlDLElBQWQsR0FBcUIsR0FBakMsRUFBc0MsU0FBdEMsQ0FBUDtBQUNEOztBQUNELFFBQUk2aUMsUUFBUSxDQUFDaG9DLEtBQUQsQ0FBWixFQUFxQjtBQUNuQixhQUFPMi9CLEdBQUcsQ0FBQ3dILE9BQUosQ0FBWS9HLE1BQU0sQ0FBQzErQixTQUFQLENBQWlCc0IsUUFBakIsQ0FBMEJrb0IsSUFBMUIsQ0FBK0JsckIsS0FBL0IsQ0FBWixFQUFtRCxRQUFuRCxDQUFQO0FBQ0Q7O0FBQ0QsUUFBSW9vQyxNQUFNLENBQUNwb0MsS0FBRCxDQUFWLEVBQW1CO0FBQ2pCLGFBQU8yL0IsR0FBRyxDQUFDd0gsT0FBSixDQUFZakYsSUFBSSxDQUFDeGdDLFNBQUwsQ0FBZXNCLFFBQWYsQ0FBd0Jrb0IsSUFBeEIsQ0FBNkJsckIsS0FBN0IsQ0FBWixFQUFpRCxNQUFqRCxDQUFQO0FBQ0Q7O0FBQ0QsUUFBSW1vQyxPQUFPLENBQUNub0MsS0FBRCxDQUFYLEVBQW9CO0FBQ2xCLGFBQU9ncEMsV0FBVyxDQUFDaHBDLEtBQUQsQ0FBbEI7QUFDRDtBQUNGOztBQUVELE1BQUlxcEMsSUFBSSxHQUFHLEVBQVg7QUFBQSxNQUFlYixLQUFLLEdBQUcsS0FBdkI7QUFBQSxNQUE4QmMsTUFBTSxHQUFHLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBdkMsQ0F2RDZDLENBeUQ3Qzs7QUFDQSxNQUFJaEssT0FBTyxDQUFDdC9CLEtBQUQsQ0FBWCxFQUFvQjtBQUNsQndvQyxTQUFLLEdBQUcsSUFBUjtBQUNBYyxVQUFNLEdBQUcsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFUO0FBQ0QsR0E3RDRDLENBK0Q3Qzs7O0FBQ0EsTUFBSXpCLFlBQVksQ0FBQzduQyxLQUFELENBQWhCLEVBQXlCO0FBQ3ZCLFFBQUl1cEMsQ0FBQyxHQUFHdnBDLEtBQUssQ0FBQ21GLElBQU4sR0FBYSxPQUFPbkYsS0FBSyxDQUFDbUYsSUFBMUIsR0FBaUMsRUFBekM7QUFDQWtrQyxRQUFJLEdBQUcsZUFBZUUsQ0FBZixHQUFtQixHQUExQjtBQUNELEdBbkU0QyxDQXFFN0M7OztBQUNBLE1BQUl2QixRQUFRLENBQUNob0MsS0FBRCxDQUFaLEVBQXFCO0FBQ25CcXBDLFFBQUksR0FBRyxNQUFNakosTUFBTSxDQUFDMStCLFNBQVAsQ0FBaUJzQixRQUFqQixDQUEwQmtvQixJQUExQixDQUErQmxyQixLQUEvQixDQUFiO0FBQ0QsR0F4RTRDLENBMEU3Qzs7O0FBQ0EsTUFBSW9vQyxNQUFNLENBQUNwb0MsS0FBRCxDQUFWLEVBQW1CO0FBQ2pCcXBDLFFBQUksR0FBRyxNQUFNbkgsSUFBSSxDQUFDeGdDLFNBQUwsQ0FBZThuQyxXQUFmLENBQTJCdGUsSUFBM0IsQ0FBZ0NsckIsS0FBaEMsQ0FBYjtBQUNELEdBN0U0QyxDQStFN0M7OztBQUNBLE1BQUltb0MsT0FBTyxDQUFDbm9DLEtBQUQsQ0FBWCxFQUFvQjtBQUNsQnFwQyxRQUFJLEdBQUcsTUFBTUwsV0FBVyxDQUFDaHBDLEtBQUQsQ0FBeEI7QUFDRDs7QUFFRCxNQUFJdXpCLElBQUksQ0FBQzl5QixNQUFMLEtBQWdCLENBQWhCLEtBQXNCLENBQUMrbkMsS0FBRCxJQUFVeG9DLEtBQUssQ0FBQ1MsTUFBTixJQUFnQixDQUFoRCxDQUFKLEVBQXdEO0FBQ3RELFdBQU82b0MsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZRCxJQUFaLEdBQW1CQyxNQUFNLENBQUMsQ0FBRCxDQUFoQztBQUNEOztBQUVELE1BQUlYLFlBQVksR0FBRyxDQUFuQixFQUFzQjtBQUNwQixRQUFJWCxRQUFRLENBQUNob0MsS0FBRCxDQUFaLEVBQXFCO0FBQ25CLGFBQU8yL0IsR0FBRyxDQUFDd0gsT0FBSixDQUFZL0csTUFBTSxDQUFDMStCLFNBQVAsQ0FBaUJzQixRQUFqQixDQUEwQmtvQixJQUExQixDQUErQmxyQixLQUEvQixDQUFaLEVBQW1ELFFBQW5ELENBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPMi9CLEdBQUcsQ0FBQ3dILE9BQUosQ0FBWSxVQUFaLEVBQXdCLFNBQXhCLENBQVA7QUFDRDtBQUNGOztBQUVEeEgsS0FBRyxDQUFDdUgsSUFBSixDQUFTcHpCLElBQVQsQ0FBYzlULEtBQWQ7QUFFQSxNQUFJNm9DLE1BQUo7O0FBQ0EsTUFBSUwsS0FBSixFQUFXO0FBQ1RLLFVBQU0sR0FBR0gsV0FBVyxDQUFDL0ksR0FBRCxFQUFNMy9CLEtBQU4sRUFBYTJvQyxZQUFiLEVBQTJCQyxXQUEzQixFQUF3Q3JWLElBQXhDLENBQXBCO0FBQ0QsR0FGRCxNQUVPO0FBQ0xzVixVQUFNLEdBQUc5SixRQUFRLENBQUN4TCxJQUFELEVBQU8sVUFBU3JTLEdBQVQsRUFBYztBQUNwQyxhQUFPNG5CLGNBQWMsQ0FBQ25KLEdBQUQsRUFBTTMvQixLQUFOLEVBQWEyb0MsWUFBYixFQUEyQkMsV0FBM0IsRUFBd0MxbkIsR0FBeEMsRUFBNkNzbkIsS0FBN0MsQ0FBckI7QUFDRCxLQUZnQixDQUFqQjtBQUdEOztBQUVEN0ksS0FBRyxDQUFDdUgsSUFBSixDQUFTakwsR0FBVDtBQUVBLFNBQU93TixvQkFBb0IsQ0FBQ1osTUFBRCxFQUFTUSxJQUFULEVBQWVDLE1BQWYsQ0FBM0I7QUFDRDs7QUFFRCxTQUFTUixjQUFULENBQXdCbkosR0FBeEIsRUFBNkIzL0IsS0FBN0IsRUFBb0Myb0MsWUFBcEMsRUFBa0RDLFdBQWxELEVBQStEMW5CLEdBQS9ELEVBQW9Fc25CLEtBQXBFLEVBQTJFO0FBQ3pFLE1BQUlyakMsSUFBSixFQUFVcTdCLEdBQVYsRUFBZWtKLElBQWY7QUFDQUEsTUFBSSxHQUFHO0FBQUUxcEMsU0FBSyxFQUFFQSxLQUFLLENBQUNraEIsR0FBRDtBQUFkLEdBQVA7O0FBQ0EsTUFBSXJoQixNQUFNLENBQUM4cEMsd0JBQVgsRUFBcUM7QUFDbkNELFFBQUksR0FBRzdwQyxNQUFNLENBQUM4cEMsd0JBQVAsQ0FBZ0MzcEMsS0FBaEMsRUFBdUNraEIsR0FBdkMsS0FBK0N3b0IsSUFBdEQ7QUFDRDs7QUFDRCxNQUFJQSxJQUFJLENBQUMvbkMsR0FBVCxFQUFjO0FBQ1osUUFBSStuQyxJQUFJLENBQUNodEIsR0FBVCxFQUFjO0FBQ1o4akIsU0FBRyxHQUFHYixHQUFHLENBQUN3SCxPQUFKLENBQVksaUJBQVosRUFBK0IsU0FBL0IsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMM0csU0FBRyxHQUFHYixHQUFHLENBQUN3SCxPQUFKLENBQVksVUFBWixFQUF3QixTQUF4QixDQUFOO0FBQ0Q7QUFDRixHQU5ELE1BTU87QUFDTCxRQUFJdUMsSUFBSSxDQUFDaHRCLEdBQVQsRUFBYztBQUNaOGpCLFNBQUcsR0FBR2IsR0FBRyxDQUFDd0gsT0FBSixDQUFZLFVBQVosRUFBd0IsU0FBeEIsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSSxDQUFDWSxRQUFRLENBQUNhLFdBQUQsRUFBYzFuQixHQUFkLENBQWIsRUFBaUM7QUFDL0IvYixRQUFJLEdBQUcsTUFBTStiLEdBQU4sR0FBWSxHQUFuQjtBQUNEOztBQUNELE1BQUksQ0FBQ3NmLEdBQUwsRUFBVTtBQUNSLFFBQUlwQixPQUFPLENBQUNPLEdBQUcsQ0FBQ3VILElBQUwsRUFBV3dDLElBQUksQ0FBQzFwQyxLQUFoQixDQUFQLEdBQWdDLENBQXBDLEVBQXVDO0FBQ3JDLFVBQUk4bkMsTUFBTSxDQUFDYSxZQUFELENBQVYsRUFBMEI7QUFDeEJuSSxXQUFHLEdBQUdrSCxXQUFXLENBQUMvSCxHQUFELEVBQU0rSixJQUFJLENBQUMxcEMsS0FBWCxFQUFrQixJQUFsQixDQUFqQjtBQUNELE9BRkQsTUFFTztBQUNMd2dDLFdBQUcsR0FBR2tILFdBQVcsQ0FBQy9ILEdBQUQsRUFBTStKLElBQUksQ0FBQzFwQyxLQUFYLEVBQWtCMm9DLFlBQVksR0FBRyxDQUFqQyxDQUFqQjtBQUNEOztBQUNELFVBQUluSSxHQUFHLENBQUNuOUIsT0FBSixDQUFZLElBQVosSUFBb0IsQ0FBQyxDQUF6QixFQUE0QjtBQUMxQixZQUFJbWxDLEtBQUosRUFBVztBQUNUaEksYUFBRyxHQUFHekIsUUFBUSxDQUFDeUIsR0FBRyxDQUFDOThCLEtBQUosQ0FBVSxJQUFWLENBQUQsRUFBa0IsVUFBU2ttQyxJQUFULEVBQWU7QUFDN0MsbUJBQU8sT0FBT0EsSUFBZDtBQUNELFdBRmEsQ0FBUixDQUVIOXVCLElBRkcsQ0FFRSxJQUZGLEVBRVF4WSxNQUZSLENBRWUsQ0FGZixDQUFOO0FBR0QsU0FKRCxNQUlPO0FBQ0xrK0IsYUFBRyxHQUFHLE9BQU96QixRQUFRLENBQUN5QixHQUFHLENBQUM5OEIsS0FBSixDQUFVLElBQVYsQ0FBRCxFQUFrQixVQUFTa21DLElBQVQsRUFBZTtBQUNwRCxtQkFBTyxRQUFRQSxJQUFmO0FBQ0QsV0FGb0IsQ0FBUixDQUVWOXVCLElBRlUsQ0FFTCxJQUZLLENBQWI7QUFHRDtBQUNGO0FBQ0YsS0FqQkQsTUFpQk87QUFDTDBsQixTQUFHLEdBQUdiLEdBQUcsQ0FBQ3dILE9BQUosQ0FBWSxZQUFaLEVBQTBCLFNBQTFCLENBQU47QUFDRDtBQUNGOztBQUNELE1BQUlyckIsV0FBVyxDQUFDM1csSUFBRCxDQUFmLEVBQXVCO0FBQ3JCLFFBQUlxakMsS0FBSyxJQUFJdG5CLEdBQUcsQ0FBQzZuQixLQUFKLENBQVUsT0FBVixDQUFiLEVBQWlDO0FBQy9CLGFBQU92SSxHQUFQO0FBQ0Q7O0FBQ0RyN0IsUUFBSSxHQUFHMDhCLEtBQUssQ0FBQzlpQixTQUFOLENBQWdCLEtBQUttQyxHQUFyQixDQUFQOztBQUNBLFFBQUkvYixJQUFJLENBQUM0akMsS0FBTCxDQUFXLDhCQUFYLENBQUosRUFBZ0Q7QUFDOUM1akMsVUFBSSxHQUFHQSxJQUFJLENBQUM3QyxNQUFMLENBQVksQ0FBWixFQUFlNkMsSUFBSSxDQUFDMUUsTUFBTCxHQUFjLENBQTdCLENBQVA7QUFDQTBFLFVBQUksR0FBR3c2QixHQUFHLENBQUN3SCxPQUFKLENBQVloaUMsSUFBWixFQUFrQixNQUFsQixDQUFQO0FBQ0QsS0FIRCxNQUdPO0FBQ0xBLFVBQUksR0FBR0EsSUFBSSxDQUFDM0IsT0FBTCxDQUFhLElBQWIsRUFBbUIsS0FBbkIsRUFDS0EsT0FETCxDQUNhLE1BRGIsRUFDcUIsR0FEckIsRUFFS0EsT0FGTCxDQUVhLFVBRmIsRUFFeUIsR0FGekIsQ0FBUDtBQUdBMkIsVUFBSSxHQUFHdzZCLEdBQUcsQ0FBQ3dILE9BQUosQ0FBWWhpQyxJQUFaLEVBQWtCLFFBQWxCLENBQVA7QUFDRDtBQUNGOztBQUVELFNBQU9BLElBQUksR0FBRyxJQUFQLEdBQWNxN0IsR0FBckI7QUFDRDs7QUFFRCxTQUFTMkksZUFBVCxDQUF5QnhKLEdBQXpCLEVBQThCMy9CLEtBQTlCLEVBQXFDO0FBQ25DLE1BQUk4YixXQUFXLENBQUM5YixLQUFELENBQWYsRUFDRTtBQUFFLFdBQU8yL0IsR0FBRyxDQUFDd0gsT0FBSixDQUFZLFdBQVosRUFBeUIsV0FBekIsQ0FBUDtBQUErQzs7QUFDbkQsTUFBSXhtQyxRQUFRLENBQUNYLEtBQUQsQ0FBWixFQUFxQjtBQUNuQixRQUFJNnBDLE1BQU0sR0FBRyxPQUFPaEksS0FBSyxDQUFDOWlCLFNBQU4sQ0FBZ0IvZSxLQUFoQixFQUF1QndELE9BQXZCLENBQStCLFFBQS9CLEVBQXlDLEVBQXpDLEVBQ3NCQSxPQUR0QixDQUM4QixJQUQ5QixFQUNvQyxLQURwQyxFQUVzQkEsT0FGdEIsQ0FFOEIsTUFGOUIsRUFFc0MsR0FGdEMsQ0FBUCxHQUVvRCxJQUZqRTtBQUdBLFdBQU9tOEIsR0FBRyxDQUFDd0gsT0FBSixDQUFZMEMsTUFBWixFQUFvQixRQUFwQixDQUFQO0FBQ0Q7O0FBQ0QsTUFBSXBvQyxRQUFRLENBQUN6QixLQUFELENBQVosRUFDRTtBQUFFLFdBQU8yL0IsR0FBRyxDQUFDd0gsT0FBSixDQUFZLEtBQUtubkMsS0FBakIsRUFBd0IsUUFBeEIsQ0FBUDtBQUEyQzs7QUFDL0MsTUFBSTBiLFNBQVMsQ0FBQzFiLEtBQUQsQ0FBYixFQUNFO0FBQUUsV0FBTzIvQixHQUFHLENBQUN3SCxPQUFKLENBQVksS0FBS25uQyxLQUFqQixFQUF3QixTQUF4QixDQUFQO0FBQTRDLEdBWmIsQ0FhbkM7OztBQUNBLE1BQUk4bkMsTUFBTSxDQUFDOW5DLEtBQUQsQ0FBVixFQUNFO0FBQUUsV0FBTzIvQixHQUFHLENBQUN3SCxPQUFKLENBQVksTUFBWixFQUFvQixNQUFwQixDQUFQO0FBQXFDO0FBQzFDOztBQUVELFNBQVNzQyxvQkFBVCxDQUE4QlosTUFBOUIsRUFBc0NRLElBQXRDLEVBQTRDQyxNQUE1QyxFQUFvRDtBQUNsRCxNQUFJN29DLE1BQU0sR0FBR3EvQixXQUFXLENBQUMrSSxNQUFELEVBQVMsVUFBU2lCLElBQVQsRUFBZUMsR0FBZixFQUFvQjtBQUNuRCxRQUFJQSxHQUFHLENBQUMxbUMsT0FBSixDQUFZLElBQVosS0FBcUIsQ0FBekIsRUFBNEI7QUFDNUIsV0FBT3ltQyxJQUFJLEdBQUdDLEdBQUcsQ0FBQ3ZtQyxPQUFKLENBQVksaUJBQVosRUFBK0IsRUFBL0IsRUFBbUMvQyxNQUExQyxHQUFtRCxDQUExRDtBQUNELEdBSHVCLEVBR3JCLENBSHFCLENBQXhCOztBQUtBLE1BQUlBLE1BQU0sR0FBRyxFQUFiLEVBQWlCO0FBQ2YsV0FBTzZvQyxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQ0NELElBQUksS0FBSyxFQUFULEdBQWMsRUFBZCxHQUFtQkEsSUFBSSxHQUFHLEtBRDNCLElBRUEsR0FGQSxHQUdBUixNQUFNLENBQUMvdEIsSUFBUCxDQUFZLE9BQVosQ0FIQSxHQUlBLEdBSkEsR0FLQXd1QixNQUFNLENBQUMsQ0FBRCxDQUxiO0FBTUQ7O0FBRUQsU0FBT0EsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZRCxJQUFaLEdBQW1CLEdBQW5CLEdBQXlCUixNQUFNLENBQUMvdEIsSUFBUCxDQUFZLElBQVosQ0FBekIsR0FBNkMsR0FBN0MsR0FBbUR3dUIsTUFBTSxDQUFDLENBQUQsQ0FBaEU7QUFDRDs7QUFFRCxTQUFTL0IsT0FBVCxDQUFpQnlDLE1BQWpCLEVBQXlCQyxHQUF6QixFQUE4QjtBQUM1QjtBQUNBLE1BQUksQ0FBQ0EsR0FBRCxJQUFRLENBQUNwdUIsUUFBUSxDQUFDb3VCLEdBQUQsQ0FBckIsRUFBNEI7QUFBRSxXQUFPRCxNQUFQO0FBQWdCOztBQUU5QyxNQUFJelcsSUFBSSxHQUFHc1QsWUFBWSxDQUFDb0QsR0FBRCxDQUF2QjtBQUNBLE1BQUk1dUIsQ0FBQyxHQUFHa1ksSUFBSSxDQUFDOXlCLE1BQWI7O0FBQ0EsU0FBTzRhLENBQUMsRUFBUixFQUFZO0FBQ1YydUIsVUFBTSxDQUFDelcsSUFBSSxDQUFDbFksQ0FBRCxDQUFMLENBQU4sR0FBa0I0dUIsR0FBRyxDQUFDMVcsSUFBSSxDQUFDbFksQ0FBRCxDQUFMLENBQXJCO0FBQ0Q7O0FBQ0QsU0FBTzJ1QixNQUFQO0FBQ0Q7QUFFRDs7O0FBRUEsSUFBSUUsV0FBVyxHQUFHcnFDLE1BQU0sQ0FBQ3VTLE1BQVAsQ0FBYyxFQUFkLENBQWxCLEMsQ0FFQTtBQUNBOztBQUNBLFNBQVMrM0IsT0FBVCxDQUFrQnhqQixDQUFsQixFQUFxQjtBQUNuQixTQUFPQSxDQUFDLEtBQUt2a0IsU0FBTixJQUFtQnVrQixDQUFDLEtBQUssSUFBaEM7QUFDRDs7QUFFRCxTQUFTeWpCLEtBQVQsQ0FBZ0J6akIsQ0FBaEIsRUFBbUI7QUFDakIsU0FBT0EsQ0FBQyxLQUFLdmtCLFNBQU4sSUFBbUJ1a0IsQ0FBQyxLQUFLLElBQWhDO0FBQ0Q7O0FBRUQsU0FBUzBqQixNQUFULENBQWlCMWpCLENBQWpCLEVBQW9CO0FBQ2xCLFNBQU9BLENBQUMsS0FBSyxJQUFiO0FBQ0Q7O0FBRUQsU0FBUzJqQixPQUFULENBQWtCM2pCLENBQWxCLEVBQXFCO0FBQ25CLFNBQU9BLENBQUMsS0FBSyxLQUFiO0FBQ0Q7QUFFRDs7Ozs7QUFHQSxTQUFTNGpCLFdBQVQsQ0FBc0J2cUMsS0FBdEIsRUFBNkI7QUFDM0IsU0FDRSxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLElBQ0EsT0FBT0EsS0FBUCxLQUFpQixRQURqQixJQUVBO0FBQ0EsU0FBT0EsS0FBUCxLQUFpQixRQUhqQixJQUlBLE9BQU9BLEtBQVAsS0FBaUIsU0FMbkI7QUFPRDtBQUVEOzs7Ozs7O0FBS0EsU0FBU3dxQyxVQUFULENBQXFCbHRCLEdBQXJCLEVBQTBCO0FBQ3hCLFNBQU9BLEdBQUcsS0FBSyxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxRQUF0QztBQUNEO0FBRUQ7Ozs7O0FBR0EsSUFBSW10QixTQUFTLEdBQUc1cUMsTUFBTSxDQUFDNkIsU0FBUCxDQUFpQnNCLFFBQWpDOztBQUVBLFNBQVMwbkMsU0FBVCxDQUFvQjFxQyxLQUFwQixFQUEyQjtBQUN6QixTQUFPeXFDLFNBQVMsQ0FBQ3ZmLElBQVYsQ0FBZWxyQixLQUFmLEVBQXNCNmtDLEtBQXRCLENBQTRCLENBQTVCLEVBQStCLENBQUMsQ0FBaEMsQ0FBUDtBQUNEO0FBRUQ7Ozs7OztBQUlBLFNBQVM4RixhQUFULENBQXdCcnRCLEdBQXhCLEVBQTZCO0FBQzNCLFNBQU9tdEIsU0FBUyxDQUFDdmYsSUFBVixDQUFlNU4sR0FBZixNQUF3QixpQkFBL0I7QUFDRDs7QUFFRCxTQUFTc3RCLFVBQVQsQ0FBcUJqa0IsQ0FBckIsRUFBd0I7QUFDdEIsU0FBTzhqQixTQUFTLENBQUN2ZixJQUFWLENBQWV2RSxDQUFmLE1BQXNCLGlCQUE3QjtBQUNEO0FBRUQ7Ozs7O0FBR0EsU0FBU2trQixpQkFBVCxDQUE0Qi9ELEdBQTVCLEVBQWlDO0FBQy9CLE1BQUl5QyxDQUFDLEdBQUd2bEMsVUFBVSxDQUFDd1gsTUFBTSxDQUFDc3JCLEdBQUQsQ0FBUCxDQUFsQjtBQUNBLFNBQU95QyxDQUFDLElBQUksQ0FBTCxJQUFVemxDLElBQUksQ0FBQysvQixLQUFMLENBQVcwRixDQUFYLE1BQWtCQSxDQUE1QixJQUFpQ3VCLFFBQVEsQ0FBQ2hFLEdBQUQsQ0FBaEQ7QUFDRDs7QUFFRCxTQUFTaUUsU0FBVCxDQUFvQmpFLEdBQXBCLEVBQXlCO0FBQ3ZCLFNBQ0VzRCxLQUFLLENBQUN0RCxHQUFELENBQUwsSUFDQSxPQUFPQSxHQUFHLENBQUM3SixJQUFYLEtBQW9CLFVBRHBCLElBRUEsT0FBTzZKLEdBQUcsQ0FBQzNKLEtBQVgsS0FBcUIsVUFIdkI7QUFLRDtBQUVEOzs7OztBQUdBLFNBQVM2TixVQUFULENBQXFCbEUsR0FBckIsRUFBMEI7QUFDeEIsU0FBT0EsR0FBRyxJQUFJLElBQVAsR0FDSCxFQURHLEdBRUh4bEIsS0FBSyxDQUFDaWUsT0FBTixDQUFjdUgsR0FBZCxLQUF1QjZELGFBQWEsQ0FBQzdELEdBQUQsQ0FBYixJQUFzQkEsR0FBRyxDQUFDOWpDLFFBQUosS0FBaUJ5bkMsU0FBOUQsR0FDRTNyQixJQUFJLENBQUNDLFNBQUwsQ0FBZStuQixHQUFmLEVBQW9CLElBQXBCLEVBQTBCLENBQTFCLENBREYsR0FFRXRyQixNQUFNLENBQUNzckIsR0FBRCxDQUpaO0FBS0Q7QUFFRDs7Ozs7O0FBSUEsU0FBU21FLFFBQVQsQ0FBbUJuRSxHQUFuQixFQUF3QjtBQUN0QixNQUFJeUMsQ0FBQyxHQUFHdmxDLFVBQVUsQ0FBQzhpQyxHQUFELENBQWxCO0FBQ0EsU0FBT29FLEtBQUssQ0FBQzNCLENBQUQsQ0FBTCxHQUFXekMsR0FBWCxHQUFpQnlDLENBQXhCO0FBQ0Q7QUFFRDs7Ozs7O0FBSUEsU0FBUzRCLE9BQVQsQ0FDRTNLLEdBREYsRUFFRTRLLGdCQUZGLEVBR0U7QUFDQSxNQUFJNXdCLEdBQUcsR0FBRzNhLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWMsSUFBZCxDQUFWO0FBQ0EsTUFBSTV0QixJQUFJLEdBQUcraUIsR0FBRyxDQUFDOThCLEtBQUosQ0FBVSxHQUFWLENBQVg7O0FBQ0EsT0FBSyxJQUFJMlgsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR29DLElBQUksQ0FBQ2hkLE1BQXpCLEVBQWlDNGEsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQ2IsT0FBRyxDQUFDaUQsSUFBSSxDQUFDcEMsQ0FBRCxDQUFMLENBQUgsR0FBZSxJQUFmO0FBQ0Q7O0FBQ0QsU0FBTyt2QixnQkFBZ0IsR0FDbkIsVUFBVXRFLEdBQVYsRUFBZTtBQUFFLFdBQU90c0IsR0FBRyxDQUFDc3NCLEdBQUcsQ0FBQzFqQyxXQUFKLEVBQUQsQ0FBVjtBQUFnQyxHQUQ5QixHQUVuQixVQUFVMGpDLEdBQVYsRUFBZTtBQUFFLFdBQU90c0IsR0FBRyxDQUFDc3NCLEdBQUQsQ0FBVjtBQUFrQixHQUZ2QztBQUdEO0FBRUQ7Ozs7O0FBR0EsSUFBSXdFLFlBQVksR0FBR0gsT0FBTyxDQUFDLGdCQUFELEVBQW1CLElBQW5CLENBQTFCO0FBRUE7Ozs7QUFHQSxJQUFJSSxtQkFBbUIsR0FBR0osT0FBTyxDQUFDLDRCQUFELENBQWpDO0FBRUE7Ozs7QUFHQSxTQUFTSyxNQUFULENBQWlCbk0sR0FBakIsRUFBc0IzaEIsSUFBdEIsRUFBNEI7QUFDMUIsTUFBSTJoQixHQUFHLENBQUM1K0IsTUFBUixFQUFnQjtBQUNkLFFBQUk4VCxLQUFLLEdBQUc4cUIsR0FBRyxDQUFDaDhCLE9BQUosQ0FBWXFhLElBQVosQ0FBWjs7QUFDQSxRQUFJbkosS0FBSyxHQUFHLENBQUMsQ0FBYixFQUFnQjtBQUNkLGFBQU84cUIsR0FBRyxDQUFDb00sTUFBSixDQUFXbDNCLEtBQVgsRUFBa0IsQ0FBbEIsQ0FBUDtBQUNEO0FBQ0Y7QUFDRjtBQUVEOzs7OztBQUdBLElBQUk0cUIsY0FBYyxHQUFHdC9CLE1BQU0sQ0FBQzZCLFNBQVAsQ0FBaUJ5OUIsY0FBdEM7O0FBQ0EsU0FBU3VNLFFBQVQsQ0FBbUJwdUIsR0FBbkIsRUFBd0I0RCxHQUF4QixFQUE2QjtBQUMzQixTQUFPaWUsY0FBYyxDQUFDalUsSUFBZixDQUFvQjVOLEdBQXBCLEVBQXlCNEQsR0FBekIsQ0FBUDtBQUNEO0FBRUQ7Ozs7O0FBR0EsU0FBU3lxQixNQUFULENBQWlCak0sRUFBakIsRUFBcUI7QUFDbkIsTUFBSWtNLEtBQUssR0FBRy9yQyxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FBWjtBQUNBLFNBQVEsU0FBU1EsUUFBVCxDQUFtQnJMLEdBQW5CLEVBQXdCO0FBQzlCLFFBQUlzTCxHQUFHLEdBQUdGLEtBQUssQ0FBQ3BMLEdBQUQsQ0FBZjtBQUNBLFdBQU9zTCxHQUFHLEtBQUtGLEtBQUssQ0FBQ3BMLEdBQUQsQ0FBTCxHQUFhZCxFQUFFLENBQUNjLEdBQUQsQ0FBcEIsQ0FBVjtBQUNELEdBSEQ7QUFJRDtBQUVEOzs7OztBQUdBLElBQUl1TCxVQUFVLEdBQUcsUUFBakI7QUFDQSxJQUFJQyxRQUFRLEdBQUdMLE1BQU0sQ0FBQyxVQUFVbkwsR0FBVixFQUFlO0FBQ25DLFNBQU9BLEdBQUcsQ0FBQ2g5QixPQUFKLENBQVl1b0MsVUFBWixFQUF3QixVQUFVdDZCLENBQVYsRUFBYXc2QixDQUFiLEVBQWdCO0FBQUUsV0FBT0EsQ0FBQyxHQUFHQSxDQUFDLENBQUM5cEMsV0FBRixFQUFILEdBQXFCLEVBQTdCO0FBQWtDLEdBQTVFLENBQVA7QUFDRCxDQUZvQixDQUFyQjtBQUlBOzs7O0FBR0EsSUFBSStwQyxVQUFVLEdBQUdQLE1BQU0sQ0FBQyxVQUFVbkwsR0FBVixFQUFlO0FBQ3JDLFNBQU9BLEdBQUcsQ0FBQ24rQixNQUFKLENBQVcsQ0FBWCxFQUFjRixXQUFkLEtBQThCcStCLEdBQUcsQ0FBQ3FFLEtBQUosQ0FBVSxDQUFWLENBQXJDO0FBQ0QsQ0FGc0IsQ0FBdkI7QUFJQTs7OztBQUdBLElBQUlzSCxXQUFXLEdBQUcsWUFBbEI7QUFDQSxJQUFJQyxTQUFTLEdBQUdULE1BQU0sQ0FBQyxVQUFVbkwsR0FBVixFQUFlO0FBQ3BDLFNBQU9BLEdBQUcsQ0FBQ2g5QixPQUFKLENBQVkyb0MsV0FBWixFQUF5QixLQUF6QixFQUFnQy9vQyxXQUFoQyxFQUFQO0FBQ0QsQ0FGcUIsQ0FBdEI7QUFJQTs7Ozs7Ozs7QUFRQTs7QUFDQSxTQUFTaXBDLFlBQVQsQ0FBdUIzTSxFQUF2QixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDOUIsV0FBUzJNLE9BQVQsQ0FBa0J4cUMsQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSXFDLENBQUMsR0FBRzNELFNBQVMsQ0FBQ0MsTUFBbEI7QUFDQSxXQUFPMEQsQ0FBQyxHQUNKQSxDQUFDLEdBQUcsQ0FBSixHQUNFdTdCLEVBQUUsQ0FBQ2o3QixLQUFILENBQVNrN0IsR0FBVCxFQUFjbi9CLFNBQWQsQ0FERixHQUVFay9CLEVBQUUsQ0FBQ3hVLElBQUgsQ0FBUXlVLEdBQVIsRUFBYTc5QixDQUFiLENBSEUsR0FJSjQ5QixFQUFFLENBQUN4VSxJQUFILENBQVF5VSxHQUFSLENBSko7QUFLRDs7QUFFRDJNLFNBQU8sQ0FBQ0MsT0FBUixHQUFrQjdNLEVBQUUsQ0FBQ2ovQixNQUFyQjtBQUNBLFNBQU82ckMsT0FBUDtBQUNEOztBQUVELFNBQVNFLFVBQVQsQ0FBcUI5TSxFQUFyQixFQUF5QkMsR0FBekIsRUFBOEI7QUFDNUIsU0FBT0QsRUFBRSxDQUFDcmQsSUFBSCxDQUFRc2QsR0FBUixDQUFQO0FBQ0Q7O0FBRUQsSUFBSXRkLElBQUksR0FBRzZTLFFBQVEsQ0FBQ3h6QixTQUFULENBQW1CMmdCLElBQW5CLEdBQ1BtcUIsVUFETyxHQUVQSCxZQUZKO0FBSUE7Ozs7QUFHQSxTQUFTSSxPQUFULENBQWtCaHZCLElBQWxCLEVBQXdCcFAsS0FBeEIsRUFBK0I7QUFDN0JBLE9BQUssR0FBR0EsS0FBSyxJQUFJLENBQWpCO0FBQ0EsTUFBSWdOLENBQUMsR0FBR29DLElBQUksQ0FBQ2hkLE1BQUwsR0FBYzROLEtBQXRCO0FBQ0EsTUFBSTQ2QixHQUFHLEdBQUcsSUFBSTNuQixLQUFKLENBQVVqRyxDQUFWLENBQVY7O0FBQ0EsU0FBT0EsQ0FBQyxFQUFSLEVBQVk7QUFDVjR0QixPQUFHLENBQUM1dEIsQ0FBRCxDQUFILEdBQVNvQyxJQUFJLENBQUNwQyxDQUFDLEdBQUdoTixLQUFMLENBQWI7QUFDRDs7QUFDRCxTQUFPNDZCLEdBQVA7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVN5RCxNQUFULENBQWlCQyxFQUFqQixFQUFxQkMsS0FBckIsRUFBNEI7QUFDMUIsT0FBSyxJQUFJMXJCLEdBQVQsSUFBZ0IwckIsS0FBaEIsRUFBdUI7QUFDckJELE1BQUUsQ0FBQ3pyQixHQUFELENBQUYsR0FBVTByQixLQUFLLENBQUMxckIsR0FBRCxDQUFmO0FBQ0Q7O0FBQ0QsU0FBT3lyQixFQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHQSxTQUFTRSxRQUFULENBQW1CeE4sR0FBbkIsRUFBd0I7QUFDdEIsTUFBSUosR0FBRyxHQUFHLEVBQVY7O0FBQ0EsT0FBSyxJQUFJNWpCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdna0IsR0FBRyxDQUFDNStCLE1BQXhCLEVBQWdDNGEsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxRQUFJZ2tCLEdBQUcsQ0FBQ2hrQixDQUFELENBQVAsRUFBWTtBQUNWcXhCLFlBQU0sQ0FBQ3pOLEdBQUQsRUFBTUksR0FBRyxDQUFDaGtCLENBQUQsQ0FBVCxDQUFOO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPNGpCLEdBQVA7QUFDRDtBQUVEOztBQUVBOzs7Ozs7O0FBS0EsU0FBUzZOLElBQVQsQ0FBZWhyQyxDQUFmLEVBQWtCSSxDQUFsQixFQUFxQitwQyxDQUFyQixFQUF3QixDQUFFO0FBRTFCOzs7OztBQUdBLElBQUljLEVBQUUsR0FBRyxTQUFMQSxFQUFLLENBQVVqckMsQ0FBVixFQUFhSSxDQUFiLEVBQWdCK3BDLENBQWhCLEVBQW1CO0FBQUUsU0FBTyxLQUFQO0FBQWUsQ0FBN0M7QUFFQTs7QUFFQTs7Ozs7QUFHQSxJQUFJZSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVdjdCLENBQVYsRUFBYTtBQUFFLFNBQU9BLENBQVA7QUFBVyxDQUF6QztBQUVBOzs7OztBQUdBLFNBQVN3N0IsYUFBVCxDQUF3QnB2QixPQUF4QixFQUFpQztBQUMvQixTQUFPQSxPQUFPLENBQUNvaUIsTUFBUixDQUFlLFVBQVUxTSxJQUFWLEVBQWdCaGtCLENBQWhCLEVBQW1CO0FBQ3ZDLFdBQU9na0IsSUFBSSxDQUFDOVUsTUFBTCxDQUFZbFAsQ0FBQyxDQUFDMjlCLFVBQUYsSUFBZ0IsRUFBNUIsQ0FBUDtBQUNELEdBRk0sRUFFSixFQUZJLEVBRUFweUIsSUFGQSxDQUVLLEdBRkwsQ0FBUDtBQUdEO0FBRUQ7Ozs7OztBQUlBLFNBQVNxeUIsVUFBVCxDQUFxQnJyQyxDQUFyQixFQUF3QkksQ0FBeEIsRUFBMkI7QUFDekIsTUFBSUosQ0FBQyxLQUFLSSxDQUFWLEVBQWE7QUFBRSxXQUFPLElBQVA7QUFBYTs7QUFDNUIsTUFBSWtyQyxTQUFTLEdBQUc1QyxVQUFVLENBQUMxb0MsQ0FBRCxDQUExQjtBQUNBLE1BQUl1ckMsU0FBUyxHQUFHN0MsVUFBVSxDQUFDdG9DLENBQUQsQ0FBMUI7O0FBQ0EsTUFBSWtyQyxTQUFTLElBQUlDLFNBQWpCLEVBQTRCO0FBQzFCLFFBQUk7QUFDRixVQUFJQyxRQUFRLEdBQUdoc0IsS0FBSyxDQUFDaWUsT0FBTixDQUFjejlCLENBQWQsQ0FBZjtBQUNBLFVBQUl5ckMsUUFBUSxHQUFHanNCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3I5QixDQUFkLENBQWY7O0FBQ0EsVUFBSW9yQyxRQUFRLElBQUlDLFFBQWhCLEVBQTBCO0FBQ3hCLGVBQU96ckMsQ0FBQyxDQUFDckIsTUFBRixLQUFheUIsQ0FBQyxDQUFDekIsTUFBZixJQUF5QnFCLENBQUMsQ0FBQys2QixLQUFGLENBQVEsVUFBVThCLENBQVYsRUFBYXRqQixDQUFiLEVBQWdCO0FBQ3RELGlCQUFPOHhCLFVBQVUsQ0FBQ3hPLENBQUQsRUFBSXo4QixDQUFDLENBQUNtWixDQUFELENBQUwsQ0FBakI7QUFDRCxTQUYrQixDQUFoQztBQUdELE9BSkQsTUFJTyxJQUFJdlosQ0FBQyxZQUFZb2dDLElBQWIsSUFBcUJoZ0MsQ0FBQyxZQUFZZ2dDLElBQXRDLEVBQTRDO0FBQ2pELGVBQU9wZ0MsQ0FBQyxDQUFDMHJDLE9BQUYsT0FBZ0J0ckMsQ0FBQyxDQUFDc3JDLE9BQUYsRUFBdkI7QUFDRCxPQUZNLE1BRUEsSUFBSSxDQUFDRixRQUFELElBQWEsQ0FBQ0MsUUFBbEIsRUFBNEI7QUFDakMsWUFBSUUsS0FBSyxHQUFHNXRDLE1BQU0sQ0FBQzB6QixJQUFQLENBQVl6eEIsQ0FBWixDQUFaO0FBQ0EsWUFBSTRyQyxLQUFLLEdBQUc3dEMsTUFBTSxDQUFDMHpCLElBQVAsQ0FBWXJ4QixDQUFaLENBQVo7QUFDQSxlQUFPdXJDLEtBQUssQ0FBQ2h0QyxNQUFOLEtBQWlCaXRDLEtBQUssQ0FBQ2p0QyxNQUF2QixJQUFpQ2d0QyxLQUFLLENBQUM1USxLQUFOLENBQVksVUFBVTNiLEdBQVYsRUFBZTtBQUNqRSxpQkFBT2lzQixVQUFVLENBQUNyckMsQ0FBQyxDQUFDb2YsR0FBRCxDQUFGLEVBQVNoZixDQUFDLENBQUNnZixHQUFELENBQVYsQ0FBakI7QUFDRCxTQUZ1QyxDQUF4QztBQUdELE9BTk0sTUFNQTtBQUNMO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7QUFDRixLQW5CRCxDQW1CRSxPQUFPeWQsQ0FBUCxFQUFVO0FBQ1Y7QUFDQSxhQUFPLEtBQVA7QUFDRDtBQUNGLEdBeEJELE1Bd0JPLElBQUksQ0FBQ3lPLFNBQUQsSUFBYyxDQUFDQyxTQUFuQixFQUE4QjtBQUNuQyxXQUFPN3hCLE1BQU0sQ0FBQzFaLENBQUQsQ0FBTixLQUFjMFosTUFBTSxDQUFDdFosQ0FBRCxDQUEzQjtBQUNELEdBRk0sTUFFQTtBQUNMLFdBQU8sS0FBUDtBQUNEO0FBQ0Y7QUFFRDs7Ozs7OztBQUtBLFNBQVN5ckMsWUFBVCxDQUF1QnRPLEdBQXZCLEVBQTRCeUgsR0FBNUIsRUFBaUM7QUFDL0IsT0FBSyxJQUFJenJCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdna0IsR0FBRyxDQUFDNStCLE1BQXhCLEVBQWdDNGEsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxRQUFJOHhCLFVBQVUsQ0FBQzlOLEdBQUcsQ0FBQ2hrQixDQUFELENBQUosRUFBU3lyQixHQUFULENBQWQsRUFBNkI7QUFBRSxhQUFPenJCLENBQVA7QUFBVTtBQUMxQzs7QUFDRCxTQUFPLENBQUMsQ0FBUjtBQUNEO0FBRUQ7Ozs7O0FBR0EsU0FBU3V5QixJQUFULENBQWVsTyxFQUFmLEVBQW1CO0FBQ2pCLE1BQUltTyxNQUFNLEdBQUcsS0FBYjtBQUNBLFNBQU8sWUFBWTtBQUNqQixRQUFJLENBQUNBLE1BQUwsRUFBYTtBQUNYQSxZQUFNLEdBQUcsSUFBVDtBQUNBbk8sUUFBRSxDQUFDajdCLEtBQUgsQ0FBUyxJQUFULEVBQWVqRSxTQUFmO0FBQ0Q7QUFDRixHQUxEO0FBTUQ7QUFFRDs7QUFFQTs7Ozs7OztBQUtBLElBQUlzdEMsYUFBYSxHQUFHLDZKQUFwQjtBQUVBOzs7O0FBR0EsU0FBU0MsVUFBVCxDQUFxQnZOLEdBQXJCLEVBQTBCO0FBQ3hCLE1BQUl5TCxDQUFDLEdBQUcsQ0FBQ3pMLEdBQUcsR0FBRyxFQUFQLEVBQVcyRSxVQUFYLENBQXNCLENBQXRCLENBQVI7QUFDQSxTQUFPOEcsQ0FBQyxLQUFLLElBQU4sSUFBY0EsQ0FBQyxLQUFLLElBQTNCO0FBQ0Q7QUFFRDs7Ozs7QUFHQSxTQUFTK0IsR0FBVCxDQUFjMXdCLEdBQWQsRUFBbUI0RCxHQUFuQixFQUF3QjRsQixHQUF4QixFQUE2QmxsQyxVQUE3QixFQUF5QztBQUN2Qy9CLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQndkLEdBQXRCLEVBQTJCNEQsR0FBM0IsRUFBZ0M7QUFDOUJsaEIsU0FBSyxFQUFFOG1DLEdBRHVCO0FBRTlCbGxDLGNBQVUsRUFBRSxDQUFDLENBQUNBLFVBRmdCO0FBRzlCcXNDLFlBQVEsRUFBRSxJQUhvQjtBQUk5QnBzQyxnQkFBWSxFQUFFO0FBSmdCLEdBQWhDO0FBTUQ7QUFFRDs7Ozs7QUFHQSxJQUFJcXNDLE1BQU0sR0FBRyxJQUFJOU4sTUFBSixDQUFZLE9BQVEwTixhQUFhLENBQUN2dkIsTUFBdEIsR0FBZ0MsU0FBNUMsQ0FBYjs7QUFDQSxTQUFTNHZCLFNBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQ3hCLE1BQUlGLE1BQU0sQ0FBQzVzQyxJQUFQLENBQVk4c0MsSUFBWixDQUFKLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBQ0QsTUFBSUMsUUFBUSxHQUFHRCxJQUFJLENBQUMxcUMsS0FBTCxDQUFXLEdBQVgsQ0FBZjtBQUNBLFNBQU8sVUFBVTRaLEdBQVYsRUFBZTtBQUNwQixTQUFLLElBQUlqQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZ3pCLFFBQVEsQ0FBQzV0QyxNQUE3QixFQUFxQzRhLENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsVUFBSSxDQUFDaUMsR0FBTCxFQUFVO0FBQUU7QUFBUTs7QUFDcEJBLFNBQUcsR0FBR0EsR0FBRyxDQUFDK3dCLFFBQVEsQ0FBQ2h6QixDQUFELENBQVQsQ0FBVDtBQUNEOztBQUNELFdBQU9pQyxHQUFQO0FBQ0QsR0FORDtBQU9EO0FBRUQ7QUFFQTs7O0FBQ0EsSUFBSWd4QixRQUFRLEdBQUcsZUFBZSxFQUE5QixDLENBRUE7O0FBQ0EsSUFBSUMsU0FBUyxHQUFHLE9BQU8zUCxNQUFQLEtBQWtCLFdBQWxDO0FBQ0EsSUFBSTRQLE1BQU0sR0FBRyxPQUFPQyxhQUFQLEtBQXlCLFdBQXpCLElBQXdDLENBQUMsQ0FBQ0EsYUFBYSxDQUFDQyxRQUFyRTtBQUNBLElBQUlDLFlBQVksR0FBR0gsTUFBTSxJQUFJQyxhQUFhLENBQUNDLFFBQWQsQ0FBdUJ0ckMsV0FBdkIsRUFBN0I7QUFDQSxJQUFJd3JDLEVBQUUsR0FBR0wsU0FBUyxJQUFJM1AsTUFBTSxDQUFDaVEsU0FBUCxDQUFpQkMsU0FBakIsQ0FBMkIxckMsV0FBM0IsRUFBdEI7QUFDQSxJQUFJMnJDLElBQUksR0FBR0gsRUFBRSxJQUFJLGVBQWV0dEMsSUFBZixDQUFvQnN0QyxFQUFwQixDQUFqQjtBQUNBLElBQUlJLEtBQUssR0FBR0osRUFBRSxJQUFJQSxFQUFFLENBQUN2ckMsT0FBSCxDQUFXLFVBQVgsSUFBeUIsQ0FBM0M7QUFDQSxJQUFJNHJDLE1BQU0sR0FBR0wsRUFBRSxJQUFJQSxFQUFFLENBQUN2ckMsT0FBSCxDQUFXLE9BQVgsSUFBc0IsQ0FBekM7QUFDQSxJQUFJNnJDLFNBQVMsR0FBSU4sRUFBRSxJQUFJQSxFQUFFLENBQUN2ckMsT0FBSCxDQUFXLFNBQVgsSUFBd0IsQ0FBL0IsSUFBc0NzckMsWUFBWSxLQUFLLFNBQXZFO0FBQ0EsSUFBSWhyQixLQUFLLEdBQUlpckIsRUFBRSxJQUFJLHVCQUF1QnR0QyxJQUF2QixDQUE0QnN0QyxFQUE1QixDQUFQLElBQTRDRCxZQUFZLEtBQUssS0FBekU7QUFDQSxJQUFJUSxRQUFRLEdBQUdQLEVBQUUsSUFBSSxjQUFjdHRDLElBQWQsQ0FBbUJzdEMsRUFBbkIsQ0FBTixJQUFnQyxDQUFDSyxNQUFoRDtBQUNBLElBQUlHLFdBQVcsR0FBR1IsRUFBRSxJQUFJLFlBQVl0dEMsSUFBWixDQUFpQnN0QyxFQUFqQixDQUF4QjtBQUNBLElBQUlTLElBQUksR0FBR1QsRUFBRSxJQUFJQSxFQUFFLENBQUM3RixLQUFILENBQVMsZ0JBQVQsQ0FBakIsQyxDQUVBOztBQUNBLElBQUl1RyxXQUFXLEdBQUksRUFBRCxDQUFLbFgsS0FBdkI7O0FBQ0EsSUFBSW1XLFNBQUosRUFBZTtBQUNiLE1BQUk7QUFDRixRQUFJdEgsSUFBSSxHQUFHLEVBQVg7QUFDQXBuQyxVQUFNLENBQUNDLGNBQVAsQ0FBc0JtbkMsSUFBdEIsRUFBNEIsU0FBNUIsRUFBd0M7QUFDdEN0bEMsU0FBRyxFQUFFLFNBQVNBLEdBQVQsR0FBZ0IsQ0FDcEI7QUFGcUMsS0FBeEMsRUFGRSxDQUtHOztBQUNMaTlCLFVBQU0sQ0FBQzJRLGdCQUFQLENBQXdCLGNBQXhCLEVBQXdDLElBQXhDLEVBQThDdEksSUFBOUM7QUFDRCxHQVBELENBT0UsT0FBT3RJLENBQVAsRUFBVSxDQUFFO0FBQ2YsQyxDQUVEO0FBQ0E7OztBQUNBLElBQUk2USxTQUFTLEdBQUcsS0FBaEI7O0FBQ0EsSUFBSUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixHQUFZO0FBQ2xDLE1BQUlELFNBQVMsS0FBS3B0QyxTQUFsQixFQUE2QjtBQUMzQjtBQUNBLFFBQUksQ0FBQ21zQyxTQUFELElBQWMsQ0FBQ0MsTUFBZixJQUF5QixPQUFPM2tCLE1BQVAsS0FBa0IsV0FBL0MsRUFBNEQ7QUFDMUQ7QUFDQTtBQUNBMmxCLGVBQVMsR0FBRzNsQixNQUFNLENBQUMsU0FBRCxDQUFOLElBQXFCQSxNQUFNLENBQUMsU0FBRCxDQUFOLENBQWtCaVYsR0FBbEIsQ0FBc0I0USxPQUF0QixLQUFrQyxRQUFuRTtBQUNELEtBSkQsTUFJTztBQUNMRixlQUFTLEdBQUcsS0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0EsU0FBUDtBQUNELENBWkQsQyxDQWNBOzs7QUFDQSxJQUFJRyxRQUFRLEdBQUdwQixTQUFTLElBQUkzUCxNQUFNLENBQUNnUiw0QkFBbkM7QUFFQTs7QUFDQSxTQUFTQyxRQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUN2QixTQUFPLE9BQU9BLElBQVAsS0FBZ0IsVUFBaEIsSUFBOEIsY0FBY3h1QyxJQUFkLENBQW1Cd3VDLElBQUksQ0FBQzlzQyxRQUFMLEVBQW5CLENBQXJDO0FBQ0Q7O0FBRUQsSUFBSStzQyxTQUFTLEdBQ1gsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0gsUUFBUSxDQUFDRyxNQUFELENBQXpDLElBQ0EsT0FBT0MsT0FBUCxLQUFtQixXQURuQixJQUNrQ0osUUFBUSxDQUFDSSxPQUFPLENBQUNDLE9BQVQsQ0FGNUM7O0FBSUEsSUFBSUMsSUFBSjtBQUNBO0FBQXlCOzs7QUFDekIsSUFBSSxPQUFPOS9CLEdBQVAsS0FBZSxXQUFmLElBQThCdy9CLFFBQVEsQ0FBQ3gvQixHQUFELENBQTFDLEVBQWlEO0FBQy9DO0FBQ0E4L0IsTUFBSSxHQUFHOS9CLEdBQVA7QUFDRCxDQUhELE1BR087QUFDTDtBQUNBOC9CLE1BQUksR0FBRyxhQUFjLFlBQVk7QUFDL0IsYUFBUzkvQixHQUFULEdBQWdCO0FBQ2QsV0FBS3FNLEdBQUwsR0FBVzdjLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWMsSUFBZCxDQUFYO0FBQ0Q7O0FBQ0RoN0IsT0FBRyxDQUFDM08sU0FBSixDQUFjNk8sR0FBZCxHQUFvQixTQUFTQSxHQUFULENBQWMyUSxHQUFkLEVBQW1CO0FBQ3JDLGFBQU8sS0FBS3hFLEdBQUwsQ0FBU3dFLEdBQVQsTUFBa0IsSUFBekI7QUFDRCxLQUZEOztBQUdBN1EsT0FBRyxDQUFDM08sU0FBSixDQUFjdW9DLEdBQWQsR0FBb0IsU0FBU0EsR0FBVCxDQUFjL29CLEdBQWQsRUFBbUI7QUFDckMsV0FBS3hFLEdBQUwsQ0FBU3dFLEdBQVQsSUFBZ0IsSUFBaEI7QUFDRCxLQUZEOztBQUdBN1EsT0FBRyxDQUFDM08sU0FBSixDQUFjK3hCLEtBQWQsR0FBc0IsU0FBU0EsS0FBVCxHQUFrQjtBQUN0QyxXQUFLL1csR0FBTCxHQUFXN2MsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYyxJQUFkLENBQVg7QUFDRCxLQUZEOztBQUlBLFdBQU9oN0IsR0FBUDtBQUNELEdBZm9CLEVBQXJCO0FBZ0JEOztBQUVELElBQUkrL0IsUUFBUSxHQUFHLHNCQUFmO0FBRUEsSUFBSUMsV0FBVyxHQUFHLENBQ2hCLFdBRGdCLEVBRWhCLFdBRmdCLEVBR2hCLFFBSGdCLENBQWxCO0FBTUEsSUFBSUMsZUFBZSxHQUFHLENBQ3BCLGNBRG9CLEVBRXBCLFNBRm9CLEVBR3BCLGFBSG9CLEVBSXBCLFNBSm9CLEVBS3BCLGNBTG9CLEVBTXBCLFNBTm9CLEVBT3BCLGVBUG9CLEVBUXBCLFdBUm9CLEVBU3BCLFdBVG9CLEVBVXBCLGFBVm9CLEVBV3BCLGVBWG9CLEVBWXBCLGdCQVpvQixDQUF0QjtBQWVBOztBQUlBLElBQUlDLE1BQU0sR0FBSTtBQUNaOzs7QUFHQTtBQUNBQyx1QkFBcUIsRUFBRTN3QyxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FMWDs7QUFPWjs7O0FBR0FvRixRQUFNLEVBQUUsS0FWSTs7QUFZWjs7O0FBR0FDLGVBQWEsRUFBRTdSLGFBQUEsS0FBeUIsWUFmNUI7O0FBaUJaOzs7QUFHQThRLFVBQVEsRUFBRTlRLGFBQUEsS0FBeUIsWUFwQnZCOztBQXNCWjs7O0FBR0E4UixhQUFXLEVBQUUsS0F6QkQ7O0FBMkJaOzs7QUFHQUMsY0FBWSxFQUFFLElBOUJGOztBQWdDWjs7O0FBR0FDLGFBQVcsRUFBRSxJQW5DRDs7QUFxQ1o7OztBQUdBQyxpQkFBZSxFQUFFLEVBeENMOztBQTBDWjs7O0FBR0E7QUFDQUMsVUFBUSxFQUFFbHhDLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWMsSUFBZCxDQTlDRTs7QUFnRFo7Ozs7QUFJQTJGLGVBQWEsRUFBRWpFLEVBcERIOztBQXNEWjs7OztBQUlBa0UsZ0JBQWMsRUFBRWxFLEVBMURKOztBQTREWjs7OztBQUlBbUUsa0JBQWdCLEVBQUVuRSxFQWhFTjs7QUFrRVo7OztBQUdBb0UsaUJBQWUsRUFBRXJFLElBckVMOztBQXVFWjs7O0FBR0FzRSxzQkFBb0IsRUFBRXBFLFFBMUVWOztBQTRFWjs7OztBQUlBcUUsYUFBVyxFQUFFdEUsRUFoRkQ7O0FBa0ZaOzs7O0FBSUF1RSxPQUFLLEVBQUUsSUF0Rks7O0FBd0ZaOzs7QUFHQUMsaUJBQWUsRUFBRWpCO0FBM0ZMLENBQWQ7QUE4RkE7O0FBRUEsSUFBSTlVLElBQUksR0FBR3NSLElBQVg7QUFDQSxJQUFJMEUsR0FBRyxHQUFHMUUsSUFBVjtBQUNBLElBQUkyRSxzQkFBc0IsR0FBSTNFLElBQTlCLEMsQ0FBcUM7O0FBQ3JDLElBQUk0RSxtQkFBbUIsR0FBSTVFLElBQTNCOztBQUVBLElBQUlqTyxJQUFKLEVBQTJDO0FBQ3pDLE1BQUk4UyxVQUFVLEdBQUcsT0FBT3BXLE9BQVAsS0FBbUIsV0FBcEM7QUFDQSxNQUFJcVcsVUFBVSxHQUFHLGlCQUFqQjs7QUFDQSxNQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVclIsR0FBVixFQUFlO0FBQUUsV0FBT0EsR0FBRyxDQUN2Q2g5QixPQURvQyxDQUM1Qm91QyxVQUQ0QixFQUNoQixVQUFVM0YsQ0FBVixFQUFhO0FBQUUsYUFBT0EsQ0FBQyxDQUFDOXBDLFdBQUYsRUFBUDtBQUF5QixLQUR4QixFQUVwQ3FCLE9BRm9DLENBRTVCLE9BRjRCLEVBRW5CLEVBRm1CLENBQVA7QUFFTixHQUYxQjs7QUFJQWc0QixNQUFJLEdBQUcsY0FBVXNXLEdBQVYsRUFBZUMsRUFBZixFQUFtQjtBQUN4QixRQUFJQyxLQUFLLEdBQUdELEVBQUUsR0FBR04sc0JBQXNCLENBQUNNLEVBQUQsQ0FBekIsR0FBZ0MsRUFBOUM7O0FBRUEsUUFBSXhCLE1BQU0sQ0FBQ00sV0FBWCxFQUF3QjtBQUN0Qk4sWUFBTSxDQUFDTSxXQUFQLENBQW1CM2xCLElBQW5CLENBQXdCLElBQXhCLEVBQThCNG1CLEdBQTlCLEVBQW1DQyxFQUFuQyxFQUF1Q0MsS0FBdkM7QUFDRCxLQUZELE1BRU8sSUFBSUwsVUFBVSxJQUFLLENBQUNwQixNQUFNLENBQUNFLE1BQTNCLEVBQW9DO0FBQ3pDbFYsYUFBTyxDQUFDRSxLQUFSLENBQWUsaUJBQWlCcVcsR0FBakIsR0FBdUJFLEtBQXRDO0FBQ0Q7QUFDRixHQVJEOztBQVVBUixLQUFHLEdBQUcsYUFBVU0sR0FBVixFQUFlQyxFQUFmLEVBQW1CO0FBQ3ZCLFFBQUlKLFVBQVUsSUFBSyxDQUFDcEIsTUFBTSxDQUFDRSxNQUEzQixFQUFvQztBQUNsQ2xWLGFBQU8sQ0FBQ0MsSUFBUixDQUFhLGdCQUFnQnNXLEdBQWhCLElBQ1hDLEVBQUUsR0FBR04sc0JBQXNCLENBQUNNLEVBQUQsQ0FBekIsR0FBZ0MsRUFEdkIsQ0FBYjtBQUdEO0FBQ0YsR0FORDs7QUFRQUwscUJBQW1CLEdBQUcsNkJBQVVLLEVBQVYsRUFBY0UsV0FBZCxFQUEyQjtBQUMvQyxRQUFJRixFQUFFLENBQUNHLEtBQUgsS0FBYUgsRUFBakIsRUFBcUI7QUFDbkIsYUFBTyxRQUFQO0FBQ0Q7O0FBQ0QsUUFBSWhWLE9BQU8sR0FBRyxPQUFPZ1YsRUFBUCxLQUFjLFVBQWQsSUFBNEJBLEVBQUUsQ0FBQ0ksR0FBSCxJQUFVLElBQXRDLEdBQ1ZKLEVBQUUsQ0FBQ2hWLE9BRE8sR0FFVmdWLEVBQUUsQ0FBQ0ssTUFBSCxHQUNFTCxFQUFFLENBQUNNLFFBQUgsSUFBZU4sRUFBRSxDQUFDdjFCLFdBQUgsQ0FBZXVnQixPQURoQyxHQUVFZ1YsRUFKTjtBQUtBLFFBQUk1c0MsSUFBSSxHQUFHNDNCLE9BQU8sQ0FBQzUzQixJQUFSLElBQWdCNDNCLE9BQU8sQ0FBQ3VWLGFBQW5DO0FBQ0EsUUFBSTNVLElBQUksR0FBR1osT0FBTyxDQUFDd1YsTUFBbkI7O0FBQ0EsUUFBSSxDQUFDcHRDLElBQUQsSUFBU3c0QixJQUFiLEVBQW1CO0FBQ2pCLFVBQUlvTCxLQUFLLEdBQUdwTCxJQUFJLENBQUNvTCxLQUFMLENBQVcsaUJBQVgsQ0FBWjtBQUNBNWpDLFVBQUksR0FBRzRqQyxLQUFLLElBQUlBLEtBQUssQ0FBQyxDQUFELENBQXJCO0FBQ0Q7O0FBRUQsV0FDRSxDQUFDNWpDLElBQUksR0FBSSxNQUFPMHNDLFFBQVEsQ0FBQzFzQyxJQUFELENBQWYsR0FBeUIsR0FBN0IsR0FBb0MsYUFBekMsS0FDQ3c0QixJQUFJLElBQUlzVSxXQUFXLEtBQUssS0FBeEIsR0FBaUMsU0FBU3RVLElBQTFDLEdBQWtELEVBRG5ELENBREY7QUFJRCxHQXBCRDs7QUFzQkEsTUFBSTdvQixNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVMHJCLEdBQVYsRUFBZStJLENBQWYsRUFBa0I7QUFDN0IsUUFBSXRLLEdBQUcsR0FBRyxFQUFWOztBQUNBLFdBQU9zSyxDQUFQLEVBQVU7QUFDUixVQUFJQSxDQUFDLEdBQUcsQ0FBSixLQUFVLENBQWQsRUFBaUI7QUFBRXRLLFdBQUcsSUFBSXVCLEdBQVA7QUFBYTs7QUFDaEMsVUFBSStJLENBQUMsR0FBRyxDQUFSLEVBQVc7QUFBRS9JLFdBQUcsSUFBSUEsR0FBUDtBQUFhOztBQUMxQitJLE9BQUMsS0FBSyxDQUFOO0FBQ0Q7O0FBQ0QsV0FBT3RLLEdBQVA7QUFDRCxHQVJEOztBQVVBd1Msd0JBQXNCLEdBQUcsZ0NBQVVNLEVBQVYsRUFBYztBQUNyQyxRQUFJQSxFQUFFLENBQUNLLE1BQUgsSUFBYUwsRUFBRSxDQUFDUyxPQUFwQixFQUE2QjtBQUMzQixVQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUNBLFVBQUlDLHdCQUF3QixHQUFHLENBQS9COztBQUNBLGFBQU9YLEVBQVAsRUFBVztBQUNULFlBQUlVLElBQUksQ0FBQ2h5QyxNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsY0FBSXU3QixJQUFJLEdBQUd5VyxJQUFJLENBQUNBLElBQUksQ0FBQ2h5QyxNQUFMLEdBQWMsQ0FBZixDQUFmOztBQUNBLGNBQUl1N0IsSUFBSSxDQUFDeGYsV0FBTCxLQUFxQnUxQixFQUFFLENBQUN2MUIsV0FBNUIsRUFBeUM7QUFDdkNrMkIsb0NBQXdCO0FBQ3hCWCxjQUFFLEdBQUdBLEVBQUUsQ0FBQ1MsT0FBUjtBQUNBO0FBQ0QsV0FKRCxNQUlPLElBQUlFLHdCQUF3QixHQUFHLENBQS9CLEVBQWtDO0FBQ3ZDRCxnQkFBSSxDQUFDQSxJQUFJLENBQUNoeUMsTUFBTCxHQUFjLENBQWYsQ0FBSixHQUF3QixDQUFDdTdCLElBQUQsRUFBTzBXLHdCQUFQLENBQXhCO0FBQ0FBLG9DQUF3QixHQUFHLENBQTNCO0FBQ0Q7QUFDRjs7QUFDREQsWUFBSSxDQUFDMytCLElBQUwsQ0FBVWkrQixFQUFWO0FBQ0FBLFVBQUUsR0FBR0EsRUFBRSxDQUFDUyxPQUFSO0FBQ0Q7O0FBQ0QsYUFBTyxxQkFBcUJDLElBQUksQ0FDN0JqNEIsR0FEeUIsQ0FDckIsVUFBVXUzQixFQUFWLEVBQWMxMkIsQ0FBZCxFQUFpQjtBQUFFLGVBQVEsTUFBTUEsQ0FBQyxLQUFLLENBQU4sR0FBVSxPQUFWLEdBQW9CdkcsTUFBTSxDQUFDLEdBQUQsRUFBTSxJQUFJdUcsQ0FBQyxHQUFHLENBQWQsQ0FBaEMsS0FBcURpRyxLQUFLLENBQUNpZSxPQUFOLENBQWN3UyxFQUFkLElBQzdFTCxtQkFBbUIsQ0FBQ0ssRUFBRSxDQUFDLENBQUQsQ0FBSCxDQUFwQixHQUErQixPQUEvQixHQUEwQ0EsRUFBRSxDQUFDLENBQUQsQ0FBNUMsR0FBbUQsbUJBRDJCLEdBRS9FTCxtQkFBbUIsQ0FBQ0ssRUFBRCxDQUZPLENBQVI7QUFFVSxPQUhSLEVBSXpCajNCLElBSnlCLENBSXBCLElBSm9CLENBQTVCO0FBS0QsS0F2QkQsTUF1Qk87QUFDTCxhQUFRLG1CQUFvQjQyQixtQkFBbUIsQ0FBQ0ssRUFBRCxDQUF2QyxHQUErQyxHQUF2RDtBQUNEO0FBQ0YsR0EzQkQ7QUE0QkQ7QUFFRDs7O0FBRUEsSUFBSVksR0FBRyxHQUFHLENBQVY7QUFFQTs7Ozs7QUFJQSxJQUFJQyxHQUFHLEdBQUcsU0FBU0EsR0FBVCxHQUFnQjtBQUN4QixPQUFLNTBCLEVBQUwsR0FBVTIwQixHQUFHLEVBQWI7QUFDQSxPQUFLRSxJQUFMLEdBQVksRUFBWjtBQUNELENBSEQ7O0FBS0FELEdBQUcsQ0FBQ2x4QyxTQUFKLENBQWNveEMsTUFBZCxHQUF1QixTQUFTQSxNQUFULENBQWlCQyxHQUFqQixFQUFzQjtBQUMzQyxPQUFLRixJQUFMLENBQVUvK0IsSUFBVixDQUFlaS9CLEdBQWY7QUFDRCxDQUZEOztBQUlBSCxHQUFHLENBQUNseEMsU0FBSixDQUFjc3hDLFNBQWQsR0FBMEIsU0FBU0EsU0FBVCxDQUFvQkQsR0FBcEIsRUFBeUI7QUFDakR2SCxRQUFNLENBQUMsS0FBS3FILElBQU4sRUFBWUUsR0FBWixDQUFOO0FBQ0QsQ0FGRDs7QUFJQUgsR0FBRyxDQUFDbHhDLFNBQUosQ0FBY3V4QyxNQUFkLEdBQXVCLFNBQVNBLE1BQVQsR0FBbUI7QUFDeEMsTUFBSUwsR0FBRyxDQUFDMXJCLE1BQVIsRUFBZ0I7QUFDZDByQixPQUFHLENBQUMxckIsTUFBSixDQUFXZ3NCLE1BQVgsQ0FBa0IsSUFBbEI7QUFDRDtBQUNGLENBSkQ7O0FBTUFOLEdBQUcsQ0FBQ2x4QyxTQUFKLENBQWN5bUIsTUFBZCxHQUF1QixTQUFTQSxNQUFULEdBQW1CO0FBQ3hDO0FBQ0EsTUFBSTBxQixJQUFJLEdBQUcsS0FBS0EsSUFBTCxDQUFVaE8sS0FBVixFQUFYOztBQUNBLE1BQUloRyxLQUFBLElBQXlDLENBQUMwUixNQUFNLENBQUNlLEtBQXJELEVBQTREO0FBQzFEO0FBQ0E7QUFDQTtBQUNBdUIsUUFBSSxDQUFDTSxJQUFMLENBQVUsVUFBVXJ4QyxDQUFWLEVBQWFJLENBQWIsRUFBZ0I7QUFBRSxhQUFPSixDQUFDLENBQUNrYyxFQUFGLEdBQU85YixDQUFDLENBQUM4YixFQUFoQjtBQUFxQixLQUFqRDtBQUNEOztBQUNELE9BQUssSUFBSTNDLENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUcwdUMsSUFBSSxDQUFDcHlDLE1BQXpCLEVBQWlDNGEsQ0FBQyxHQUFHbFgsQ0FBckMsRUFBd0NrWCxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDdzNCLFFBQUksQ0FBQ3gzQixDQUFELENBQUosQ0FBUWlpQixNQUFSO0FBQ0Q7QUFDRixDQVpELEMsQ0FjQTtBQUNBO0FBQ0E7OztBQUNBc1YsR0FBRyxDQUFDMXJCLE1BQUosR0FBYSxJQUFiO0FBQ0EsSUFBSWtzQixXQUFXLEdBQUcsRUFBbEI7O0FBRUEsU0FBU0MsVUFBVCxDQUFxQm5zQixNQUFyQixFQUE2QjtBQUMzQmtzQixhQUFXLENBQUN0L0IsSUFBWixDQUFpQm9ULE1BQWpCO0FBQ0EwckIsS0FBRyxDQUFDMXJCLE1BQUosR0FBYUEsTUFBYjtBQUNEOztBQUVELFNBQVNvc0IsU0FBVCxHQUFzQjtBQUNwQkYsYUFBVyxDQUFDblgsR0FBWjtBQUNBMlcsS0FBRyxDQUFDMXJCLE1BQUosR0FBYWtzQixXQUFXLENBQUNBLFdBQVcsQ0FBQzN5QyxNQUFaLEdBQXFCLENBQXRCLENBQXhCO0FBQ0Q7QUFFRDs7O0FBRUEsSUFBSTh5QyxLQUFLLEdBQUcsU0FBU0EsS0FBVCxDQUNWQyxHQURVLEVBRVZ4MEIsSUFGVSxFQUdWeTBCLFFBSFUsRUFJVnJsQyxJQUpVLEVBS1ZzbEMsR0FMVSxFQU1WOVosT0FOVSxFQU9WK1osZ0JBUFUsRUFRVkMsWUFSVSxFQVNWO0FBQ0EsT0FBS0osR0FBTCxHQUFXQSxHQUFYO0FBQ0EsT0FBS3gwQixJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLeTBCLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsT0FBS3JsQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLc2xDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLE9BQUtHLEVBQUwsR0FBVXp4QyxTQUFWO0FBQ0EsT0FBS3czQixPQUFMLEdBQWVBLE9BQWY7QUFDQSxPQUFLa2EsU0FBTCxHQUFpQjF4QyxTQUFqQjtBQUNBLE9BQUsyeEMsU0FBTCxHQUFpQjN4QyxTQUFqQjtBQUNBLE9BQUs0eEMsU0FBTCxHQUFpQjV4QyxTQUFqQjtBQUNBLE9BQUs4ZSxHQUFMLEdBQVdsQyxJQUFJLElBQUlBLElBQUksQ0FBQ2tDLEdBQXhCO0FBQ0EsT0FBS3l5QixnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0EsT0FBS00saUJBQUwsR0FBeUI3eEMsU0FBekI7QUFDQSxPQUFLZ3dCLE1BQUwsR0FBY2h3QixTQUFkO0FBQ0EsT0FBSzh4QyxHQUFMLEdBQVcsS0FBWDtBQUNBLE9BQUtDLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQSxPQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQixLQUFqQjtBQUNBLE9BQUtDLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQSxPQUFLQyxNQUFMLEdBQWMsS0FBZDtBQUNBLE9BQUtYLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsT0FBS1ksU0FBTCxHQUFpQnB5QyxTQUFqQjtBQUNBLE9BQUtxeUMsa0JBQUwsR0FBMEIsS0FBMUI7QUFDRCxDQWpDRDs7QUFtQ0EsSUFBSUMsa0JBQWtCLEdBQUc7QUFBRUMsT0FBSyxFQUFFO0FBQUU5eUMsZ0JBQVksRUFBRTtBQUFoQjtBQUFULENBQXpCLEMsQ0FFQTs7QUFDQTs7QUFDQTZ5QyxrQkFBa0IsQ0FBQ0MsS0FBbkIsQ0FBeUJoekMsR0FBekIsR0FBK0IsWUFBWTtBQUN6QyxTQUFPLEtBQUtzeUMsaUJBQVo7QUFDRCxDQUZEOztBQUlBcDBDLE1BQU0sQ0FBQyswQyxnQkFBUCxDQUF5QnJCLEtBQUssQ0FBQzd4QyxTQUEvQixFQUEwQ2d6QyxrQkFBMUM7O0FBRUEsSUFBSUcsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFVem1DLElBQVYsRUFBZ0I7QUFDckMsTUFBS0EsSUFBSSxLQUFLLEtBQUssQ0FBbkIsRUFBdUJBLElBQUksR0FBRyxFQUFQO0FBRXZCLE1BQUkwbUMsSUFBSSxHQUFHLElBQUl2QixLQUFKLEVBQVg7QUFDQXVCLE1BQUksQ0FBQzFtQyxJQUFMLEdBQVlBLElBQVo7QUFDQTBtQyxNQUFJLENBQUNULFNBQUwsR0FBaUIsSUFBakI7QUFDQSxTQUFPUyxJQUFQO0FBQ0QsQ0FQRDs7QUFTQSxTQUFTQyxlQUFULENBQTBCak8sR0FBMUIsRUFBK0I7QUFDN0IsU0FBTyxJQUFJeU0sS0FBSixDQUFVbnhDLFNBQVYsRUFBcUJBLFNBQXJCLEVBQWdDQSxTQUFoQyxFQUEyQ29aLE1BQU0sQ0FBQ3NyQixHQUFELENBQWpELENBQVA7QUFDRCxDLENBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNrTyxVQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUMxQixNQUFJQyxNQUFNLEdBQUcsSUFBSTNCLEtBQUosQ0FDWDBCLEtBQUssQ0FBQ3pCLEdBREssRUFFWHlCLEtBQUssQ0FBQ2oyQixJQUZLLEVBR1g7QUFDQTtBQUNBO0FBQ0FpMkIsT0FBSyxDQUFDeEIsUUFBTixJQUFrQndCLEtBQUssQ0FBQ3hCLFFBQU4sQ0FBZTVPLEtBQWYsRUFOUCxFQU9Yb1EsS0FBSyxDQUFDN21DLElBUEssRUFRWDZtQyxLQUFLLENBQUN2QixHQVJLLEVBU1h1QixLQUFLLENBQUNyYixPQVRLLEVBVVhxYixLQUFLLENBQUN0QixnQkFWSyxFQVdYc0IsS0FBSyxDQUFDckIsWUFYSyxDQUFiO0FBYUFzQixRQUFNLENBQUNyQixFQUFQLEdBQVlvQixLQUFLLENBQUNwQixFQUFsQjtBQUNBcUIsUUFBTSxDQUFDZixRQUFQLEdBQWtCYyxLQUFLLENBQUNkLFFBQXhCO0FBQ0FlLFFBQU0sQ0FBQ2gwQixHQUFQLEdBQWErekIsS0FBSyxDQUFDL3pCLEdBQW5CO0FBQ0FnMEIsUUFBTSxDQUFDYixTQUFQLEdBQW1CWSxLQUFLLENBQUNaLFNBQXpCO0FBQ0FhLFFBQU0sQ0FBQ3BCLFNBQVAsR0FBbUJtQixLQUFLLENBQUNuQixTQUF6QjtBQUNBb0IsUUFBTSxDQUFDbkIsU0FBUCxHQUFtQmtCLEtBQUssQ0FBQ2xCLFNBQXpCO0FBQ0FtQixRQUFNLENBQUNsQixTQUFQLEdBQW1CaUIsS0FBSyxDQUFDakIsU0FBekI7QUFDQWtCLFFBQU0sQ0FBQ1YsU0FBUCxHQUFtQlMsS0FBSyxDQUFDVCxTQUF6QjtBQUNBVSxRQUFNLENBQUNaLFFBQVAsR0FBa0IsSUFBbEI7QUFDQSxTQUFPWSxNQUFQO0FBQ0Q7QUFFRDs7Ozs7O0FBS0EsSUFBSUMsVUFBVSxHQUFHN3pCLEtBQUssQ0FBQzVmLFNBQXZCO0FBQ0EsSUFBSTB6QyxZQUFZLEdBQUd2MUMsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYzhKLFVBQWQsQ0FBbkI7QUFFQSxJQUFJRSxjQUFjLEdBQUcsQ0FDbkIsTUFEbUIsRUFFbkIsS0FGbUIsRUFHbkIsT0FIbUIsRUFJbkIsU0FKbUIsRUFLbkIsUUFMbUIsRUFNbkIsTUFObUIsRUFPbkIsU0FQbUIsQ0FBckI7QUFVQTs7OztBQUdBQSxjQUFjLENBQUM5NUIsT0FBZixDQUF1QixVQUFVKzVCLE1BQVYsRUFBa0I7QUFDdkM7QUFDQSxNQUFJblIsUUFBUSxHQUFHZ1IsVUFBVSxDQUFDRyxNQUFELENBQXpCO0FBQ0F0SCxLQUFHLENBQUNvSCxZQUFELEVBQWVFLE1BQWYsRUFBdUIsU0FBU0MsT0FBVCxHQUFvQjtBQUM1QyxRQUFJN3ZCLElBQUksR0FBRyxFQUFYO0FBQUEsUUFBZTh2QixHQUFHLEdBQUdoMUMsU0FBUyxDQUFDQyxNQUEvQjs7QUFDQSxXQUFRKzBDLEdBQUcsRUFBWDtBQUFnQjl2QixVQUFJLENBQUU4dkIsR0FBRixDQUFKLEdBQWNoMUMsU0FBUyxDQUFFZzFDLEdBQUYsQ0FBdkI7QUFBaEI7O0FBRUEsUUFBSWpuQyxNQUFNLEdBQUc0MUIsUUFBUSxDQUFDMS9CLEtBQVQsQ0FBZSxJQUFmLEVBQXFCaWhCLElBQXJCLENBQWI7QUFDQSxRQUFJK3ZCLEVBQUUsR0FBRyxLQUFLQyxNQUFkO0FBQ0EsUUFBSUMsUUFBSjs7QUFDQSxZQUFRTCxNQUFSO0FBQ0UsV0FBSyxNQUFMO0FBQ0EsV0FBSyxTQUFMO0FBQ0VLLGdCQUFRLEdBQUdqd0IsSUFBWDtBQUNBOztBQUNGLFdBQUssUUFBTDtBQUNFaXdCLGdCQUFRLEdBQUdqd0IsSUFBSSxDQUFDbWYsS0FBTCxDQUFXLENBQVgsQ0FBWDtBQUNBO0FBUEo7O0FBU0EsUUFBSThRLFFBQUosRUFBYztBQUFFRixRQUFFLENBQUNHLFlBQUgsQ0FBZ0JELFFBQWhCO0FBQTRCLEtBaEJBLENBaUI1Qzs7O0FBQ0FGLE1BQUUsQ0FBQ0ksR0FBSCxDQUFPMXRCLE1BQVA7QUFDQSxXQUFPNVosTUFBUDtBQUNELEdBcEJFLENBQUg7QUFxQkQsQ0F4QkQ7QUEwQkE7O0FBRUEsSUFBSXVuQyxTQUFTLEdBQUdqMkMsTUFBTSxDQUFDdXBDLG1CQUFQLENBQTJCZ00sWUFBM0IsQ0FBaEI7QUFFQTs7Ozs7QUFJQSxJQUFJVyxhQUFhLEdBQUcsSUFBcEI7O0FBRUEsU0FBU0MsZUFBVCxDQUEwQmgyQyxLQUExQixFQUFpQztBQUMvQisxQyxlQUFhLEdBQUcvMUMsS0FBaEI7QUFDRDtBQUVEOzs7Ozs7OztBQU1BLElBQUlpMkMsUUFBUSxHQUFHLFNBQVNBLFFBQVQsQ0FBbUJqMkMsS0FBbkIsRUFBMEI7QUFDdkMsT0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsT0FBSzYxQyxHQUFMLEdBQVcsSUFBSWpELEdBQUosRUFBWDtBQUNBLE9BQUtzRCxPQUFMLEdBQWUsQ0FBZjtBQUNBbEksS0FBRyxDQUFDaHVDLEtBQUQsRUFBUSxRQUFSLEVBQWtCLElBQWxCLENBQUg7O0FBQ0EsTUFBSXNoQixLQUFLLENBQUNpZSxPQUFOLENBQWN2L0IsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCLFFBQUlzdUMsUUFBSixFQUFjO0FBQ1o2SCxrQkFBWSxDQUFDbjJDLEtBQUQsRUFBUW8xQyxZQUFSLENBQVo7QUFDRCxLQUZELE1BRU87QUFDTGdCLGlCQUFXLENBQUNwMkMsS0FBRCxFQUFRbzFDLFlBQVIsRUFBc0JVLFNBQXRCLENBQVg7QUFDRDs7QUFDRCxTQUFLRixZQUFMLENBQWtCNTFDLEtBQWxCO0FBQ0QsR0FQRCxNQU9PO0FBQ0wsU0FBSzBtQyxJQUFMLENBQVUxbUMsS0FBVjtBQUNEO0FBQ0YsQ0FmRDtBQWlCQTs7Ozs7OztBQUtBaTJDLFFBQVEsQ0FBQ3YwQyxTQUFULENBQW1CZ2xDLElBQW5CLEdBQTBCLFNBQVNBLElBQVQsQ0FBZXBwQixHQUFmLEVBQW9CO0FBQzVDLE1BQUlpVyxJQUFJLEdBQUcxekIsTUFBTSxDQUFDMHpCLElBQVAsQ0FBWWpXLEdBQVosQ0FBWDs7QUFDQSxPQUFLLElBQUlqQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa1ksSUFBSSxDQUFDOXlCLE1BQXpCLEVBQWlDNGEsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQ2c3QixrQkFBYyxDQUFDLzRCLEdBQUQsRUFBTWlXLElBQUksQ0FBQ2xZLENBQUQsQ0FBVixDQUFkO0FBQ0Q7QUFDRixDQUxEO0FBT0E7Ozs7O0FBR0E0NkIsUUFBUSxDQUFDdjBDLFNBQVQsQ0FBbUJrMEMsWUFBbkIsR0FBa0MsU0FBU0EsWUFBVCxDQUF1QmwyQixLQUF2QixFQUE4QjtBQUM5RCxPQUFLLElBQUlyRSxDQUFDLEdBQUcsQ0FBUixFQUFXbFgsQ0FBQyxHQUFHdWIsS0FBSyxDQUFDamYsTUFBMUIsRUFBa0M0YSxDQUFDLEdBQUdsWCxDQUF0QyxFQUF5Q2tYLENBQUMsRUFBMUMsRUFBOEM7QUFDNUNpN0IsV0FBTyxDQUFDNTJCLEtBQUssQ0FBQ3JFLENBQUQsQ0FBTixDQUFQO0FBQ0Q7QUFDRixDQUpELEMsQ0FNQTs7QUFFQTs7Ozs7O0FBSUEsU0FBUzg2QixZQUFULENBQXVCanZCLE1BQXZCLEVBQStCcXZCLEdBQS9CLEVBQW9DO0FBQ2xDO0FBQ0FydkIsUUFBTSxDQUFDOUosU0FBUCxHQUFtQm01QixHQUFuQjtBQUNBO0FBQ0Q7QUFFRDs7Ozs7QUFJQTs7O0FBQ0EsU0FBU0gsV0FBVCxDQUFzQmx2QixNQUF0QixFQUE4QnF2QixHQUE5QixFQUFtQ2hqQixJQUFuQyxFQUF5QztBQUN2QyxPQUFLLElBQUlsWSxDQUFDLEdBQUcsQ0FBUixFQUFXbFgsQ0FBQyxHQUFHb3ZCLElBQUksQ0FBQzl5QixNQUF6QixFQUFpQzRhLENBQUMsR0FBR2xYLENBQXJDLEVBQXdDa1gsQ0FBQyxFQUF6QyxFQUE2QztBQUMzQyxRQUFJNkYsR0FBRyxHQUFHcVMsSUFBSSxDQUFDbFksQ0FBRCxDQUFkO0FBQ0EyeUIsT0FBRyxDQUFDOW1CLE1BQUQsRUFBU2hHLEdBQVQsRUFBY3ExQixHQUFHLENBQUNyMUIsR0FBRCxDQUFqQixDQUFIO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7O0FBS0EsU0FBU28xQixPQUFULENBQWtCdDJDLEtBQWxCLEVBQXlCdzJDLFVBQXpCLEVBQXFDO0FBQ25DLE1BQUksQ0FBQ2hNLFVBQVUsQ0FBQ3hxQyxLQUFELENBQVgsSUFBc0JBLEtBQUssWUFBWXV6QyxLQUEzQyxFQUFrRDtBQUNoRDtBQUNEOztBQUNELE1BQUlrQyxFQUFKOztBQUNBLE1BQUkvSixRQUFRLENBQUMxckMsS0FBRCxFQUFRLFFBQVIsQ0FBUixJQUE2QkEsS0FBSyxDQUFDMDFDLE1BQU4sWUFBd0JPLFFBQXpELEVBQW1FO0FBQ2pFUixNQUFFLEdBQUd6MUMsS0FBSyxDQUFDMDFDLE1BQVg7QUFDRCxHQUZELE1BRU8sSUFDTEssYUFBYSxJQUNiLENBQUN0RyxpQkFBaUIsRUFEbEIsS0FFQ251QixLQUFLLENBQUNpZSxPQUFOLENBQWN2L0IsS0FBZCxLQUF3QjJxQyxhQUFhLENBQUMzcUMsS0FBRCxDQUZ0QyxLQUdBSCxNQUFNLENBQUM0MkMsWUFBUCxDQUFvQnoyQyxLQUFwQixDQUhBLElBSUEsQ0FBQ0EsS0FBSyxDQUFDb3lDLE1BTEYsRUFNTDtBQUNBcUQsTUFBRSxHQUFHLElBQUlRLFFBQUosQ0FBYWoyQyxLQUFiLENBQUw7QUFDRDs7QUFDRCxNQUFJdzJDLFVBQVUsSUFBSWYsRUFBbEIsRUFBc0I7QUFDcEJBLE1BQUUsQ0FBQ1MsT0FBSDtBQUNEOztBQUNELFNBQU9ULEVBQVA7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVNZLGNBQVQsQ0FDRS80QixHQURGLEVBRUU0RCxHQUZGLEVBR0U0bEIsR0FIRixFQUlFNFAsWUFKRixFQUtFQyxPQUxGLEVBTUU7QUFDQSxNQUFJZCxHQUFHLEdBQUcsSUFBSWpELEdBQUosRUFBVjtBQUVBLE1BQUkvOEIsUUFBUSxHQUFHaFcsTUFBTSxDQUFDOHBDLHdCQUFQLENBQWdDcnNCLEdBQWhDLEVBQXFDNEQsR0FBckMsQ0FBZjs7QUFDQSxNQUFJckwsUUFBUSxJQUFJQSxRQUFRLENBQUNoVSxZQUFULEtBQTBCLEtBQTFDLEVBQWlEO0FBQy9DO0FBQ0QsR0FORCxDQVFBOzs7QUFDQSxNQUFJKzBDLE1BQU0sR0FBRy9nQyxRQUFRLElBQUlBLFFBQVEsQ0FBQ2xVLEdBQWxDO0FBQ0EsTUFBSWsxQyxNQUFNLEdBQUdoaEMsUUFBUSxJQUFJQSxRQUFRLENBQUM2RyxHQUFsQzs7QUFDQSxNQUFJLENBQUMsQ0FBQ2s2QixNQUFELElBQVdDLE1BQVosS0FBdUJyMkMsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQWhELEVBQW1EO0FBQ2pEcW1DLE9BQUcsR0FBR3hwQixHQUFHLENBQUM0RCxHQUFELENBQVQ7QUFDRDs7QUFFRCxNQUFJNDFCLE9BQU8sR0FBRyxDQUFDSCxPQUFELElBQVlMLE9BQU8sQ0FBQ3hQLEdBQUQsQ0FBakM7QUFDQWpuQyxRQUFNLENBQUNDLGNBQVAsQ0FBc0J3ZCxHQUF0QixFQUEyQjRELEdBQTNCLEVBQWdDO0FBQzlCdGYsY0FBVSxFQUFFLElBRGtCO0FBRTlCQyxnQkFBWSxFQUFFLElBRmdCO0FBRzlCRixPQUFHLEVBQUUsU0FBU28xQyxjQUFULEdBQTJCO0FBQzlCLFVBQUkvMkMsS0FBSyxHQUFHNDJDLE1BQU0sR0FBR0EsTUFBTSxDQUFDMXJCLElBQVAsQ0FBWTVOLEdBQVosQ0FBSCxHQUFzQndwQixHQUF4Qzs7QUFDQSxVQUFJOEwsR0FBRyxDQUFDMXJCLE1BQVIsRUFBZ0I7QUFDZDJ1QixXQUFHLENBQUM1QyxNQUFKOztBQUNBLFlBQUk2RCxPQUFKLEVBQWE7QUFDWEEsaUJBQU8sQ0FBQ2pCLEdBQVIsQ0FBWTVDLE1BQVo7O0FBQ0EsY0FBSTN4QixLQUFLLENBQUNpZSxPQUFOLENBQWN2L0IsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCZzNDLHVCQUFXLENBQUNoM0MsS0FBRCxDQUFYO0FBQ0Q7QUFDRjtBQUNGOztBQUNELGFBQU9BLEtBQVA7QUFDRCxLQWY2QjtBQWdCOUIwYyxPQUFHLEVBQUUsU0FBU3U2QixjQUFULENBQXlCM2UsTUFBekIsRUFBaUM7QUFDcEMsVUFBSXQ0QixLQUFLLEdBQUc0MkMsTUFBTSxHQUFHQSxNQUFNLENBQUMxckIsSUFBUCxDQUFZNU4sR0FBWixDQUFILEdBQXNCd3BCLEdBQXhDO0FBQ0E7O0FBQ0EsVUFBSXhPLE1BQU0sS0FBS3Q0QixLQUFYLElBQXFCczRCLE1BQU0sS0FBS0EsTUFBWCxJQUFxQnQ0QixLQUFLLEtBQUtBLEtBQXhELEVBQWdFO0FBQzlEO0FBQ0Q7QUFDRDs7O0FBQ0EsVUFBSTYrQixLQUFBLElBQXlDNlgsWUFBN0MsRUFBMkQ7QUFDekRBLG9CQUFZO0FBQ2IsT0FUbUMsQ0FVcEM7OztBQUNBLFVBQUlFLE1BQU0sSUFBSSxDQUFDQyxNQUFmLEVBQXVCO0FBQUU7QUFBUTs7QUFDakMsVUFBSUEsTUFBSixFQUFZO0FBQ1ZBLGNBQU0sQ0FBQzNyQixJQUFQLENBQVk1TixHQUFaLEVBQWlCZ2IsTUFBakI7QUFDRCxPQUZELE1BRU87QUFDTHdPLFdBQUcsR0FBR3hPLE1BQU47QUFDRDs7QUFDRHdlLGFBQU8sR0FBRyxDQUFDSCxPQUFELElBQVlMLE9BQU8sQ0FBQ2hlLE1BQUQsQ0FBN0I7QUFDQXVkLFNBQUcsQ0FBQzF0QixNQUFKO0FBQ0Q7QUFuQzZCLEdBQWhDO0FBcUNEO0FBRUQ7Ozs7Ozs7QUFLQSxTQUFTekwsR0FBVCxDQUFjd0ssTUFBZCxFQUFzQmhHLEdBQXRCLEVBQTJCNGxCLEdBQTNCLEVBQWdDO0FBQzlCLE1BQUlqSSxLQUFBLEtBQ0RzTCxPQUFPLENBQUNqakIsTUFBRCxDQUFQLElBQW1CcWpCLFdBQVcsQ0FBQ3JqQixNQUFELENBRDdCLENBQUosRUFFRTtBQUNBc1UsUUFBSSxDQUFFLDBFQUE0RXRVLE1BQTlFLENBQUo7QUFDRDs7QUFDRCxNQUFJNUYsS0FBSyxDQUFDaWUsT0FBTixDQUFjclksTUFBZCxLQUF5QjJqQixpQkFBaUIsQ0FBQzNwQixHQUFELENBQTlDLEVBQXFEO0FBQ25EZ0csVUFBTSxDQUFDem1CLE1BQVAsR0FBZ0JxRCxJQUFJLENBQUNvekMsR0FBTCxDQUFTaHdCLE1BQU0sQ0FBQ3ptQixNQUFoQixFQUF3QnlnQixHQUF4QixDQUFoQjtBQUNBZ0csVUFBTSxDQUFDdWtCLE1BQVAsQ0FBY3ZxQixHQUFkLEVBQW1CLENBQW5CLEVBQXNCNGxCLEdBQXRCO0FBQ0EsV0FBT0EsR0FBUDtBQUNEOztBQUNELE1BQUk1bEIsR0FBRyxJQUFJZ0csTUFBUCxJQUFpQixFQUFFaEcsR0FBRyxJQUFJcmhCLE1BQU0sQ0FBQzZCLFNBQWhCLENBQXJCLEVBQWlEO0FBQy9Dd2xCLFVBQU0sQ0FBQ2hHLEdBQUQsQ0FBTixHQUFjNGxCLEdBQWQ7QUFDQSxXQUFPQSxHQUFQO0FBQ0Q7O0FBQ0QsTUFBSTJPLEVBQUUsR0FBSXZ1QixNQUFELENBQVN3dUIsTUFBbEI7O0FBQ0EsTUFBSXh1QixNQUFNLENBQUNrckIsTUFBUCxJQUFrQnFELEVBQUUsSUFBSUEsRUFBRSxDQUFDUyxPQUEvQixFQUF5QztBQUN2Q3JYLFNBQUEsSUFBeUNyRCxJQUFJLENBQzNDLDBFQUNBLHFEQUYyQyxDQUE3QztBQUlBLFdBQU9zTCxHQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDMk8sRUFBTCxFQUFTO0FBQ1B2dUIsVUFBTSxDQUFDaEcsR0FBRCxDQUFOLEdBQWM0bEIsR0FBZDtBQUNBLFdBQU9BLEdBQVA7QUFDRDs7QUFDRHVQLGdCQUFjLENBQUNaLEVBQUUsQ0FBQ3oxQyxLQUFKLEVBQVdraEIsR0FBWCxFQUFnQjRsQixHQUFoQixDQUFkO0FBQ0EyTyxJQUFFLENBQUNJLEdBQUgsQ0FBTzF0QixNQUFQO0FBQ0EsU0FBTzJlLEdBQVA7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVNxUSxHQUFULENBQWNqd0IsTUFBZCxFQUFzQmhHLEdBQXRCLEVBQTJCO0FBQ3pCLE1BQUkyZCxLQUFBLEtBQ0RzTCxPQUFPLENBQUNqakIsTUFBRCxDQUFQLElBQW1CcWpCLFdBQVcsQ0FBQ3JqQixNQUFELENBRDdCLENBQUosRUFFRTtBQUNBc1UsUUFBSSxDQUFFLDZFQUErRXRVLE1BQWpGLENBQUo7QUFDRDs7QUFDRCxNQUFJNUYsS0FBSyxDQUFDaWUsT0FBTixDQUFjclksTUFBZCxLQUF5QjJqQixpQkFBaUIsQ0FBQzNwQixHQUFELENBQTlDLEVBQXFEO0FBQ25EZ0csVUFBTSxDQUFDdWtCLE1BQVAsQ0FBY3ZxQixHQUFkLEVBQW1CLENBQW5CO0FBQ0E7QUFDRDs7QUFDRCxNQUFJdTBCLEVBQUUsR0FBSXZ1QixNQUFELENBQVN3dUIsTUFBbEI7O0FBQ0EsTUFBSXh1QixNQUFNLENBQUNrckIsTUFBUCxJQUFrQnFELEVBQUUsSUFBSUEsRUFBRSxDQUFDUyxPQUEvQixFQUF5QztBQUN2Q3JYLFNBQUEsSUFBeUNyRCxJQUFJLENBQzNDLG1FQUNBLHdCQUYyQyxDQUE3QztBQUlBO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDa1EsUUFBUSxDQUFDeGtCLE1BQUQsRUFBU2hHLEdBQVQsQ0FBYixFQUE0QjtBQUMxQjtBQUNEOztBQUNELFNBQU9nRyxNQUFNLENBQUNoRyxHQUFELENBQWI7O0FBQ0EsTUFBSSxDQUFDdTBCLEVBQUwsRUFBUztBQUNQO0FBQ0Q7O0FBQ0RBLElBQUUsQ0FBQ0ksR0FBSCxDQUFPMXRCLE1BQVA7QUFDRDtBQUVEOzs7Ozs7QUFJQSxTQUFTNnVCLFdBQVQsQ0FBc0JoM0MsS0FBdEIsRUFBNkI7QUFDM0IsT0FBSyxJQUFJMitCLENBQUMsR0FBSSxLQUFLLENBQWQsRUFBa0J0akIsQ0FBQyxHQUFHLENBQXRCLEVBQXlCbFgsQ0FBQyxHQUFHbkUsS0FBSyxDQUFDUyxNQUF4QyxFQUFnRDRhLENBQUMsR0FBR2xYLENBQXBELEVBQXVEa1gsQ0FBQyxFQUF4RCxFQUE0RDtBQUMxRHNqQixLQUFDLEdBQUczK0IsS0FBSyxDQUFDcWIsQ0FBRCxDQUFUO0FBQ0FzakIsS0FBQyxJQUFJQSxDQUFDLENBQUMrVyxNQUFQLElBQWlCL1csQ0FBQyxDQUFDK1csTUFBRixDQUFTRyxHQUFULENBQWE1QyxNQUFiLEVBQWpCOztBQUNBLFFBQUkzeEIsS0FBSyxDQUFDaWUsT0FBTixDQUFjWixDQUFkLENBQUosRUFBc0I7QUFDcEJxWSxpQkFBVyxDQUFDclksQ0FBRCxDQUFYO0FBQ0Q7QUFDRjtBQUNGO0FBRUQ7O0FBRUE7Ozs7Ozs7QUFLQSxJQUFJeVksTUFBTSxHQUFHN0csTUFBTSxDQUFDQyxxQkFBcEI7QUFFQTs7OztBQUdBLElBQUkzUixJQUFKLEVBQTJDO0FBQ3pDdVksUUFBTSxDQUFDQyxFQUFQLEdBQVlELE1BQU0sQ0FBQ0UsU0FBUCxHQUFtQixVQUFVbGxCLE1BQVYsRUFBa0J1aUIsS0FBbEIsRUFBeUI1QyxFQUF6QixFQUE2Qjd3QixHQUE3QixFQUFrQztBQUMvRCxRQUFJLENBQUM2d0IsRUFBTCxFQUFTO0FBQ1B2VyxVQUFJLENBQ0YsY0FBY3RhLEdBQWQsR0FBb0Isc0NBQXBCLEdBQ0Esa0NBRkUsQ0FBSjtBQUlEOztBQUNELFdBQU9xMkIsWUFBWSxDQUFDbmxCLE1BQUQsRUFBU3VpQixLQUFULENBQW5CO0FBQ0QsR0FSRDtBQVNEO0FBRUQ7Ozs7O0FBR0EsU0FBUzZDLFNBQVQsQ0FBb0I3SyxFQUFwQixFQUF3QnJaLElBQXhCLEVBQThCO0FBQzVCLE1BQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQUUsV0FBT3FaLEVBQVA7QUFBVzs7QUFDeEIsTUFBSXpyQixHQUFKLEVBQVN1MkIsS0FBVCxFQUFnQkMsT0FBaEI7QUFFQSxNQUFJbmtCLElBQUksR0FBR3djLFNBQVMsR0FDaEJFLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQjVjLElBQWhCLENBRGdCLEdBRWhCenpCLE1BQU0sQ0FBQzB6QixJQUFQLENBQVlELElBQVosQ0FGSjs7QUFJQSxPQUFLLElBQUlqWSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa1ksSUFBSSxDQUFDOXlCLE1BQXpCLEVBQWlDNGEsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQzZGLE9BQUcsR0FBR3FTLElBQUksQ0FBQ2xZLENBQUQsQ0FBVixDQURvQyxDQUVwQzs7QUFDQSxRQUFJNkYsR0FBRyxLQUFLLFFBQVosRUFBc0I7QUFBRTtBQUFVOztBQUNsQ3UyQixTQUFLLEdBQUc5SyxFQUFFLENBQUN6ckIsR0FBRCxDQUFWO0FBQ0F3MkIsV0FBTyxHQUFHcGtCLElBQUksQ0FBQ3BTLEdBQUQsQ0FBZDs7QUFDQSxRQUFJLENBQUN3cUIsUUFBUSxDQUFDaUIsRUFBRCxFQUFLenJCLEdBQUwsQ0FBYixFQUF3QjtBQUN0QnhFLFNBQUcsQ0FBQ2l3QixFQUFELEVBQUt6ckIsR0FBTCxFQUFVdzJCLE9BQVYsQ0FBSDtBQUNELEtBRkQsTUFFTyxJQUNMRCxLQUFLLEtBQUtDLE9BQVYsSUFDQS9NLGFBQWEsQ0FBQzhNLEtBQUQsQ0FEYixJQUVBOU0sYUFBYSxDQUFDK00sT0FBRCxDQUhSLEVBSUw7QUFDQUYsZUFBUyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsQ0FBVDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTy9LLEVBQVA7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVNnTCxhQUFULENBQ0VDLFNBREYsRUFFRUMsUUFGRixFQUdFOUYsRUFIRixFQUlFO0FBQ0EsTUFBSSxDQUFDQSxFQUFMLEVBQVM7QUFDUDtBQUNBLFFBQUksQ0FBQzhGLFFBQUwsRUFBZTtBQUNiLGFBQU9ELFNBQVA7QUFDRDs7QUFDRCxRQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDZCxhQUFPQyxRQUFQO0FBQ0QsS0FQTSxDQVFQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFdBQU8sU0FBU0MsWUFBVCxHQUF5QjtBQUM5QixhQUFPTixTQUFTLENBQ2QsT0FBT0ssUUFBUCxLQUFvQixVQUFwQixHQUFpQ0EsUUFBUSxDQUFDM3NCLElBQVQsQ0FBYyxJQUFkLEVBQW9CLElBQXBCLENBQWpDLEdBQTZEMnNCLFFBRC9DLEVBRWQsT0FBT0QsU0FBUCxLQUFxQixVQUFyQixHQUFrQ0EsU0FBUyxDQUFDMXNCLElBQVYsQ0FBZSxJQUFmLEVBQXFCLElBQXJCLENBQWxDLEdBQStEMHNCLFNBRmpELENBQWhCO0FBSUQsS0FMRDtBQU1ELEdBbkJELE1BbUJPO0FBQ0wsV0FBTyxTQUFTRyxvQkFBVCxHQUFpQztBQUN0QztBQUNBLFVBQUlDLFlBQVksR0FBRyxPQUFPSCxRQUFQLEtBQW9CLFVBQXBCLEdBQ2ZBLFFBQVEsQ0FBQzNzQixJQUFULENBQWM2bUIsRUFBZCxFQUFrQkEsRUFBbEIsQ0FEZSxHQUVmOEYsUUFGSjtBQUdBLFVBQUlJLFdBQVcsR0FBRyxPQUFPTCxTQUFQLEtBQXFCLFVBQXJCLEdBQ2RBLFNBQVMsQ0FBQzFzQixJQUFWLENBQWU2bUIsRUFBZixFQUFtQkEsRUFBbkIsQ0FEYyxHQUVkNkYsU0FGSjs7QUFHQSxVQUFJSSxZQUFKLEVBQWtCO0FBQ2hCLGVBQU9SLFNBQVMsQ0FBQ1EsWUFBRCxFQUFlQyxXQUFmLENBQWhCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsV0FBUDtBQUNEO0FBQ0YsS0FiRDtBQWNEO0FBQ0Y7O0FBRURiLE1BQU0sQ0FBQ3A0QixJQUFQLEdBQWMsVUFDWjQ0QixTQURZLEVBRVpDLFFBRlksRUFHWjlGLEVBSFksRUFJWjtBQUNBLE1BQUksQ0FBQ0EsRUFBTCxFQUFTO0FBQ1AsUUFBSThGLFFBQVEsSUFBSSxPQUFPQSxRQUFQLEtBQW9CLFVBQXBDLEVBQWdEO0FBQzlDaFosV0FBQSxJQUF5Q3JELElBQUksQ0FDM0MsNENBQ0EsaURBREEsR0FFQSxjQUgyQyxFQUkzQ3VXLEVBSjJDLENBQTdDO0FBT0EsYUFBTzZGLFNBQVA7QUFDRDs7QUFDRCxXQUFPRCxhQUFhLENBQUNDLFNBQUQsRUFBWUMsUUFBWixDQUFwQjtBQUNEOztBQUVELFNBQU9GLGFBQWEsQ0FBQ0MsU0FBRCxFQUFZQyxRQUFaLEVBQXNCOUYsRUFBdEIsQ0FBcEI7QUFDRCxDQXBCRDtBQXNCQTs7Ozs7QUFHQSxTQUFTbUcsU0FBVCxDQUNFTixTQURGLEVBRUVDLFFBRkYsRUFHRTtBQUNBLE1BQUk1WSxHQUFHLEdBQUc0WSxRQUFRLEdBQ2RELFNBQVMsR0FDUEEsU0FBUyxDQUFDbjVCLE1BQVYsQ0FBaUJvNUIsUUFBakIsQ0FETyxHQUVQdjJCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3NZLFFBQWQsSUFDRUEsUUFERixHQUVFLENBQUNBLFFBQUQsQ0FMVSxHQU1kRCxTQU5KO0FBT0EsU0FBTzNZLEdBQUcsR0FDTmtaLFdBQVcsQ0FBQ2xaLEdBQUQsQ0FETCxHQUVOQSxHQUZKO0FBR0Q7O0FBRUQsU0FBU2taLFdBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQzNCLE1BQUluWixHQUFHLEdBQUcsRUFBVjs7QUFDQSxPQUFLLElBQUk1akIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRys4QixLQUFLLENBQUMzM0MsTUFBMUIsRUFBa0M0YSxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLFFBQUk0akIsR0FBRyxDQUFDNTdCLE9BQUosQ0FBWSswQyxLQUFLLENBQUMvOEIsQ0FBRCxDQUFqQixNQUEwQixDQUFDLENBQS9CLEVBQWtDO0FBQ2hDNGpCLFNBQUcsQ0FBQ25yQixJQUFKLENBQVNza0MsS0FBSyxDQUFDLzhCLENBQUQsQ0FBZDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTzRqQixHQUFQO0FBQ0Q7O0FBRURxUixlQUFlLENBQUMvMEIsT0FBaEIsQ0FBd0IsVUFBVTg4QixJQUFWLEVBQWdCO0FBQ3RDakIsUUFBTSxDQUFDaUIsSUFBRCxDQUFOLEdBQWVILFNBQWY7QUFDRCxDQUZEO0FBSUE7Ozs7Ozs7O0FBT0EsU0FBU0ksV0FBVCxDQUNFVixTQURGLEVBRUVDLFFBRkYsRUFHRTlGLEVBSEYsRUFJRTd3QixHQUpGLEVBS0U7QUFDQSxNQUFJK2QsR0FBRyxHQUFHcC9CLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWN1TSxTQUFTLElBQUksSUFBM0IsQ0FBVjs7QUFDQSxNQUFJQyxRQUFKLEVBQWM7QUFDWmhaLFNBQUEsSUFBeUMwWixnQkFBZ0IsQ0FBQ3IzQixHQUFELEVBQU0yMkIsUUFBTixFQUFnQjlGLEVBQWhCLENBQXpEO0FBQ0EsV0FBT3JGLE1BQU0sQ0FBQ3pOLEdBQUQsRUFBTTRZLFFBQU4sQ0FBYjtBQUNELEdBSEQsTUFHTztBQUNMLFdBQU81WSxHQUFQO0FBQ0Q7QUFDRjs7QUFFRG9SLFdBQVcsQ0FBQzkwQixPQUFaLENBQW9CLFVBQVVoRyxJQUFWLEVBQWdCO0FBQ2xDNmhDLFFBQU0sQ0FBQzdoQyxJQUFJLEdBQUcsR0FBUixDQUFOLEdBQXFCK2lDLFdBQXJCO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7O0FBTUFsQixNQUFNLENBQUNoZixLQUFQLEdBQWUsVUFDYndmLFNBRGEsRUFFYkMsUUFGYSxFQUdiOUYsRUFIYSxFQUliN3dCLEdBSmEsRUFLYjtBQUNBO0FBQ0EsTUFBSTAyQixTQUFTLEtBQUt0SSxXQUFsQixFQUErQjtBQUFFc0ksYUFBUyxHQUFHeDFDLFNBQVo7QUFBd0I7O0FBQ3pELE1BQUl5MUMsUUFBUSxLQUFLdkksV0FBakIsRUFBOEI7QUFBRXVJLFlBQVEsR0FBR3oxQyxTQUFYO0FBQXVCO0FBQ3ZEOzs7QUFDQSxNQUFJLENBQUN5MUMsUUFBTCxFQUFlO0FBQUUsV0FBT2g0QyxNQUFNLENBQUN3ckMsTUFBUCxDQUFjdU0sU0FBUyxJQUFJLElBQTNCLENBQVA7QUFBeUM7O0FBQzFELE1BQUkvWSxJQUFKLEVBQTJDO0FBQ3pDMFosb0JBQWdCLENBQUNyM0IsR0FBRCxFQUFNMjJCLFFBQU4sRUFBZ0I5RixFQUFoQixDQUFoQjtBQUNEOztBQUNELE1BQUksQ0FBQzZGLFNBQUwsRUFBZ0I7QUFBRSxXQUFPQyxRQUFQO0FBQWlCOztBQUNuQyxNQUFJNU8sR0FBRyxHQUFHLEVBQVY7QUFDQXlELFFBQU0sQ0FBQ3pELEdBQUQsRUFBTTJPLFNBQU4sQ0FBTjs7QUFDQSxPQUFLLElBQUlZLEtBQVQsSUFBa0JYLFFBQWxCLEVBQTRCO0FBQzFCLFFBQUl6bEIsTUFBTSxHQUFHNlcsR0FBRyxDQUFDdVAsS0FBRCxDQUFoQjtBQUNBLFFBQUk3RCxLQUFLLEdBQUdrRCxRQUFRLENBQUNXLEtBQUQsQ0FBcEI7O0FBQ0EsUUFBSXBtQixNQUFNLElBQUksQ0FBQzlRLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY25OLE1BQWQsQ0FBZixFQUFzQztBQUNwQ0EsWUFBTSxHQUFHLENBQUNBLE1BQUQsQ0FBVDtBQUNEOztBQUNENlcsT0FBRyxDQUFDdVAsS0FBRCxDQUFILEdBQWFwbUIsTUFBTSxHQUNmQSxNQUFNLENBQUMzVCxNQUFQLENBQWNrMkIsS0FBZCxDQURlLEdBRWZyekIsS0FBSyxDQUFDaWUsT0FBTixDQUFjb1YsS0FBZCxJQUF1QkEsS0FBdkIsR0FBK0IsQ0FBQ0EsS0FBRCxDQUZuQztBQUdEOztBQUNELFNBQU8xTCxHQUFQO0FBQ0QsQ0E1QkQ7QUE4QkE7Ozs7O0FBR0FtTyxNQUFNLENBQUNwZixLQUFQLEdBQ0FvZixNQUFNLENBQUMzZCxPQUFQLEdBQ0EyZCxNQUFNLENBQUNxQixNQUFQLEdBQ0FyQixNQUFNLENBQUMxZSxRQUFQLEdBQWtCLFVBQ2hCa2YsU0FEZ0IsRUFFaEJDLFFBRmdCLEVBR2hCOUYsRUFIZ0IsRUFJaEI3d0IsR0FKZ0IsRUFLaEI7QUFDQSxNQUFJMjJCLFFBQVEsSUFBSWhaLGFBQUEsS0FBeUIsWUFBekMsRUFBdUQ7QUFDckQwWixvQkFBZ0IsQ0FBQ3IzQixHQUFELEVBQU0yMkIsUUFBTixFQUFnQjlGLEVBQWhCLENBQWhCO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDNkYsU0FBTCxFQUFnQjtBQUFFLFdBQU9DLFFBQVA7QUFBaUI7O0FBQ25DLE1BQUk1TyxHQUFHLEdBQUdwcEMsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYyxJQUFkLENBQVY7QUFDQXFCLFFBQU0sQ0FBQ3pELEdBQUQsRUFBTTJPLFNBQU4sQ0FBTjs7QUFDQSxNQUFJQyxRQUFKLEVBQWM7QUFBRW5MLFVBQU0sQ0FBQ3pELEdBQUQsRUFBTTRPLFFBQU4sQ0FBTjtBQUF3Qjs7QUFDeEMsU0FBTzVPLEdBQVA7QUFDRCxDQWpCRDs7QUFrQkFtTyxNQUFNLENBQUNzQixPQUFQLEdBQWlCZixhQUFqQjtBQUVBOzs7O0FBR0EsSUFBSUosWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVUssU0FBVixFQUFxQkMsUUFBckIsRUFBK0I7QUFDaEQsU0FBT0EsUUFBUSxLQUFLejFDLFNBQWIsR0FDSHcxQyxTQURHLEdBRUhDLFFBRko7QUFHRCxDQUpEO0FBTUE7Ozs7O0FBR0EsU0FBU2MsZUFBVCxDQUEwQjViLE9BQTFCLEVBQW1DO0FBQ2pDLE9BQUssSUFBSTdiLEdBQVQsSUFBZ0I2YixPQUFPLENBQUM1aUIsVUFBeEIsRUFBb0M7QUFDbEN5K0IseUJBQXFCLENBQUMxM0IsR0FBRCxDQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzAzQixxQkFBVCxDQUFnQ3p6QyxJQUFoQyxFQUFzQztBQUNwQyxNQUFJLENBQUMsSUFBSWk3QixNQUFKLENBQVkseUJBQTBCME4sYUFBYSxDQUFDdnZCLE1BQXhDLEdBQWtELEtBQTlELEVBQXNFamQsSUFBdEUsQ0FBMkU2RCxJQUEzRSxDQUFMLEVBQXVGO0FBQ3JGcTJCLFFBQUksQ0FDRiw4QkFBOEJyMkIsSUFBOUIsR0FBcUMscUJBQXJDLEdBQ0EscUVBRkUsQ0FBSjtBQUlEOztBQUNELE1BQUltbUMsWUFBWSxDQUFDbm1DLElBQUQsQ0FBWixJQUFzQm9yQyxNQUFNLENBQUNTLGFBQVAsQ0FBcUI3ckMsSUFBckIsQ0FBMUIsRUFBc0Q7QUFDcERxMkIsUUFBSSxDQUNGLGdFQUNBLE1BREEsR0FDU3IyQixJQUZQLENBQUo7QUFJRDtBQUNGO0FBRUQ7Ozs7OztBQUlBLFNBQVMwekMsY0FBVCxDQUF5QjliLE9BQXpCLEVBQWtDZ1YsRUFBbEMsRUFBc0M7QUFDcEMsTUFBSS9aLEtBQUssR0FBRytFLE9BQU8sQ0FBQy9FLEtBQXBCOztBQUNBLE1BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQUU7QUFBUTs7QUFDdEIsTUFBSWlILEdBQUcsR0FBRyxFQUFWO0FBQ0EsTUFBSTVqQixDQUFKLEVBQU95ckIsR0FBUCxFQUFZM2hDLElBQVo7O0FBQ0EsTUFBSW1jLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3ZILEtBQWQsQ0FBSixFQUEwQjtBQUN4QjNjLEtBQUMsR0FBRzJjLEtBQUssQ0FBQ3YzQixNQUFWOztBQUNBLFdBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUNWeXJCLFNBQUcsR0FBRzlPLEtBQUssQ0FBQzNjLENBQUQsQ0FBWDs7QUFDQSxVQUFJLE9BQU95ckIsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCM2hDLFlBQUksR0FBRzZtQyxRQUFRLENBQUNsRixHQUFELENBQWY7QUFDQTdILFdBQUcsQ0FBQzk1QixJQUFELENBQUgsR0FBWTtBQUFFb1EsY0FBSSxFQUFFO0FBQVIsU0FBWjtBQUNELE9BSEQsTUFHTyxJQUFJc3BCLElBQUosRUFBMkM7QUFDaERyRCxZQUFJLENBQUMsZ0RBQUQsQ0FBSjtBQUNEO0FBQ0Y7QUFDRixHQVhELE1BV08sSUFBSW1QLGFBQWEsQ0FBQzNTLEtBQUQsQ0FBakIsRUFBMEI7QUFDL0IsU0FBSyxJQUFJOVcsR0FBVCxJQUFnQjhXLEtBQWhCLEVBQXVCO0FBQ3JCOE8sU0FBRyxHQUFHOU8sS0FBSyxDQUFDOVcsR0FBRCxDQUFYO0FBQ0EvYixVQUFJLEdBQUc2bUMsUUFBUSxDQUFDOXFCLEdBQUQsQ0FBZjtBQUNBK2QsU0FBRyxDQUFDOTVCLElBQUQsQ0FBSCxHQUFZd2xDLGFBQWEsQ0FBQzdELEdBQUQsQ0FBYixHQUNSQSxHQURRLEdBRVI7QUFBRXZ4QixZQUFJLEVBQUV1eEI7QUFBUixPQUZKO0FBR0Q7QUFDRixHQVJNLE1BUUEsSUFBSWpJLElBQUosRUFBMkM7QUFDaERyRCxRQUFJLENBQ0YseUVBQ0EsVUFEQSxHQUNja1AsU0FBUyxDQUFDMVMsS0FBRCxDQUR2QixHQUNrQyxHQUZoQyxFQUdGK1osRUFIRSxDQUFKO0FBS0Q7O0FBQ0RoVixTQUFPLENBQUMvRSxLQUFSLEdBQWdCaUgsR0FBaEI7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVM2WixlQUFULENBQTBCL2IsT0FBMUIsRUFBbUNnVixFQUFuQyxFQUF1QztBQUNyQyxNQUFJMEcsTUFBTSxHQUFHMWIsT0FBTyxDQUFDMGIsTUFBckI7O0FBQ0EsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFBRTtBQUFROztBQUN2QixNQUFJTSxVQUFVLEdBQUdoYyxPQUFPLENBQUMwYixNQUFSLEdBQWlCLEVBQWxDOztBQUNBLE1BQUluM0IsS0FBSyxDQUFDaWUsT0FBTixDQUFja1osTUFBZCxDQUFKLEVBQTJCO0FBQ3pCLFNBQUssSUFBSXA5QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbzlCLE1BQU0sQ0FBQ2g0QyxNQUEzQixFQUFtQzRhLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMwOUIsZ0JBQVUsQ0FBQ04sTUFBTSxDQUFDcDlCLENBQUQsQ0FBUCxDQUFWLEdBQXdCO0FBQUVpWSxZQUFJLEVBQUVtbEIsTUFBTSxDQUFDcDlCLENBQUQ7QUFBZCxPQUF4QjtBQUNEO0FBQ0YsR0FKRCxNQUlPLElBQUlzdkIsYUFBYSxDQUFDOE4sTUFBRCxDQUFqQixFQUEyQjtBQUNoQyxTQUFLLElBQUl2M0IsR0FBVCxJQUFnQnUzQixNQUFoQixFQUF3QjtBQUN0QixVQUFJM1IsR0FBRyxHQUFHMlIsTUFBTSxDQUFDdjNCLEdBQUQsQ0FBaEI7QUFDQTYzQixnQkFBVSxDQUFDNzNCLEdBQUQsQ0FBVixHQUFrQnlwQixhQUFhLENBQUM3RCxHQUFELENBQWIsR0FDZDRGLE1BQU0sQ0FBQztBQUFFcFosWUFBSSxFQUFFcFM7QUFBUixPQUFELEVBQWdCNGxCLEdBQWhCLENBRFEsR0FFZDtBQUFFeFQsWUFBSSxFQUFFd1Q7QUFBUixPQUZKO0FBR0Q7QUFDRixHQVBNLE1BT0EsSUFBSWpJLElBQUosRUFBMkM7QUFDaERyRCxRQUFJLENBQ0YsMEVBQ0EsVUFEQSxHQUNja1AsU0FBUyxDQUFDK04sTUFBRCxDQUR2QixHQUNtQyxHQUZqQyxFQUdGMUcsRUFIRSxDQUFKO0FBS0Q7QUFDRjtBQUVEOzs7OztBQUdBLFNBQVNpSCxtQkFBVCxDQUE4QmpjLE9BQTlCLEVBQXVDO0FBQ3JDLE1BQUlrYyxJQUFJLEdBQUdsYyxPQUFPLENBQUNtYyxVQUFuQjs7QUFDQSxNQUFJRCxJQUFKLEVBQVU7QUFDUixTQUFLLElBQUkvM0IsR0FBVCxJQUFnQiszQixJQUFoQixFQUFzQjtBQUNwQixVQUFJakwsR0FBRyxHQUFHaUwsSUFBSSxDQUFDLzNCLEdBQUQsQ0FBZDs7QUFDQSxVQUFJLE9BQU84c0IsR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCaUwsWUFBSSxDQUFDLzNCLEdBQUQsQ0FBSixHQUFZO0FBQUVtQixjQUFJLEVBQUUyckIsR0FBUjtBQUFhMVEsZ0JBQU0sRUFBRTBRO0FBQXJCLFNBQVo7QUFDRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTdUssZ0JBQVQsQ0FBMkJwekMsSUFBM0IsRUFBaUNuRixLQUFqQyxFQUF3Qyt4QyxFQUF4QyxFQUE0QztBQUMxQyxNQUFJLENBQUNwSCxhQUFhLENBQUMzcUMsS0FBRCxDQUFsQixFQUEyQjtBQUN6Qnc3QixRQUFJLENBQ0YsZ0NBQWdDcjJCLElBQWhDLEdBQXVDLDBCQUF2QyxHQUNBLFVBREEsR0FDY3VsQyxTQUFTLENBQUMxcUMsS0FBRCxDQUR2QixHQUNrQyxHQUZoQyxFQUdGK3hDLEVBSEUsQ0FBSjtBQUtEO0FBQ0Y7QUFFRDs7Ozs7O0FBSUEsU0FBU29ILFlBQVQsQ0FDRS9tQixNQURGLEVBRUV1aUIsS0FGRixFQUdFNUMsRUFIRixFQUlFO0FBQ0EsTUFBSWxULElBQUosRUFBMkM7QUFDekM4WixtQkFBZSxDQUFDaEUsS0FBRCxDQUFmO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQy9CQSxTQUFLLEdBQUdBLEtBQUssQ0FBQzVYLE9BQWQ7QUFDRDs7QUFFRDhiLGdCQUFjLENBQUNsRSxLQUFELEVBQVE1QyxFQUFSLENBQWQ7QUFDQStHLGlCQUFlLENBQUNuRSxLQUFELEVBQVE1QyxFQUFSLENBQWY7QUFDQWlILHFCQUFtQixDQUFDckUsS0FBRCxDQUFuQixDQVhBLENBYUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSSxDQUFDQSxLQUFLLENBQUN5RSxLQUFYLEVBQWtCO0FBQ2hCLFFBQUl6RSxLQUFLLENBQUMwRSxPQUFWLEVBQW1CO0FBQ2pCam5CLFlBQU0sR0FBRyttQixZQUFZLENBQUMvbUIsTUFBRCxFQUFTdWlCLEtBQUssQ0FBQzBFLE9BQWYsRUFBd0J0SCxFQUF4QixDQUFyQjtBQUNEOztBQUNELFFBQUk0QyxLQUFLLENBQUMyRSxNQUFWLEVBQWtCO0FBQ2hCLFdBQUssSUFBSWorQixDQUFDLEdBQUcsQ0FBUixFQUFXbFgsQ0FBQyxHQUFHd3dDLEtBQUssQ0FBQzJFLE1BQU4sQ0FBYTc0QyxNQUFqQyxFQUF5QzRhLENBQUMsR0FBR2xYLENBQTdDLEVBQWdEa1gsQ0FBQyxFQUFqRCxFQUFxRDtBQUNuRCtXLGNBQU0sR0FBRyttQixZQUFZLENBQUMvbUIsTUFBRCxFQUFTdWlCLEtBQUssQ0FBQzJFLE1BQU4sQ0FBYWorQixDQUFiLENBQVQsRUFBMEIwMkIsRUFBMUIsQ0FBckI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSWhWLE9BQU8sR0FBRyxFQUFkO0FBQ0EsTUFBSTdiLEdBQUo7O0FBQ0EsT0FBS0EsR0FBTCxJQUFZa1IsTUFBWixFQUFvQjtBQUNsQm1uQixjQUFVLENBQUNyNEIsR0FBRCxDQUFWO0FBQ0Q7O0FBQ0QsT0FBS0EsR0FBTCxJQUFZeXpCLEtBQVosRUFBbUI7QUFDakIsUUFBSSxDQUFDakosUUFBUSxDQUFDdFosTUFBRCxFQUFTbFIsR0FBVCxDQUFiLEVBQTRCO0FBQzFCcTRCLGdCQUFVLENBQUNyNEIsR0FBRCxDQUFWO0FBQ0Q7QUFDRjs7QUFDRCxXQUFTcTRCLFVBQVQsQ0FBcUJyNEIsR0FBckIsRUFBMEI7QUFDeEIsUUFBSXM0QixLQUFLLEdBQUdwQyxNQUFNLENBQUNsMkIsR0FBRCxDQUFOLElBQWVxMkIsWUFBM0I7QUFDQXhhLFdBQU8sQ0FBQzdiLEdBQUQsQ0FBUCxHQUFlczRCLEtBQUssQ0FBQ3BuQixNQUFNLENBQUNsUixHQUFELENBQVAsRUFBY3l6QixLQUFLLENBQUN6ekIsR0FBRCxDQUFuQixFQUEwQjZ3QixFQUExQixFQUE4Qjd3QixHQUE5QixDQUFwQjtBQUNEOztBQUNELFNBQU82YixPQUFQO0FBQ0Q7QUFFRDs7Ozs7OztBQUtBLFNBQVMwYyxZQUFULENBQ0UxYyxPQURGLEVBRUV4bkIsSUFGRixFQUdFeUksRUFIRixFQUlFMDdCLFdBSkYsRUFLRTtBQUNBO0FBQ0EsTUFBSSxPQUFPMTdCLEVBQVAsS0FBYyxRQUFsQixFQUE0QjtBQUMxQjtBQUNEOztBQUNELE1BQUkyN0IsTUFBTSxHQUFHNWMsT0FBTyxDQUFDeG5CLElBQUQsQ0FBcEIsQ0FMQSxDQU1BOztBQUNBLE1BQUltMkIsUUFBUSxDQUFDaU8sTUFBRCxFQUFTMzdCLEVBQVQsQ0FBWixFQUEwQjtBQUFFLFdBQU8yN0IsTUFBTSxDQUFDMzdCLEVBQUQsQ0FBYjtBQUFtQjs7QUFDL0MsTUFBSTQ3QixXQUFXLEdBQUc1TixRQUFRLENBQUNodUIsRUFBRCxDQUExQjs7QUFDQSxNQUFJMHRCLFFBQVEsQ0FBQ2lPLE1BQUQsRUFBU0MsV0FBVCxDQUFaLEVBQW1DO0FBQUUsV0FBT0QsTUFBTSxDQUFDQyxXQUFELENBQWI7QUFBNEI7O0FBQ2pFLE1BQUlDLFlBQVksR0FBRzNOLFVBQVUsQ0FBQzBOLFdBQUQsQ0FBN0I7O0FBQ0EsTUFBSWxPLFFBQVEsQ0FBQ2lPLE1BQUQsRUFBU0UsWUFBVCxDQUFaLEVBQW9DO0FBQUUsV0FBT0YsTUFBTSxDQUFDRSxZQUFELENBQWI7QUFBNkIsR0FYbkUsQ0FZQTs7O0FBQ0EsTUFBSTVhLEdBQUcsR0FBRzBhLE1BQU0sQ0FBQzM3QixFQUFELENBQU4sSUFBYzI3QixNQUFNLENBQUNDLFdBQUQsQ0FBcEIsSUFBcUNELE1BQU0sQ0FBQ0UsWUFBRCxDQUFyRDs7QUFDQSxNQUFJaGIsS0FBQSxJQUF5QzZhLFdBQXpDLElBQXdELENBQUN6YSxHQUE3RCxFQUFrRTtBQUNoRXpELFFBQUksQ0FDRix1QkFBdUJqbUIsSUFBSSxDQUFDc3ZCLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLENBQXZCLEdBQTJDLElBQTNDLEdBQWtEN21CLEVBRGhELEVBRUYrZSxPQUZFLENBQUo7QUFJRDs7QUFDRCxTQUFPa0MsR0FBUDtBQUNEO0FBRUQ7OztBQUlBLFNBQVM2YSxZQUFULENBQ0U1NEIsR0FERixFQUVFNjRCLFdBRkYsRUFHRXpDLFNBSEYsRUFJRXZGLEVBSkYsRUFLRTtBQUNBLE1BQUlqYSxJQUFJLEdBQUdpaUIsV0FBVyxDQUFDNzRCLEdBQUQsQ0FBdEI7QUFDQSxNQUFJODRCLE1BQU0sR0FBRyxDQUFDdE8sUUFBUSxDQUFDNEwsU0FBRCxFQUFZcDJCLEdBQVosQ0FBdEI7QUFDQSxNQUFJbGhCLEtBQUssR0FBR3MzQyxTQUFTLENBQUNwMkIsR0FBRCxDQUFyQixDQUhBLENBSUE7O0FBQ0EsTUFBSSs0QixZQUFZLEdBQUdDLFlBQVksQ0FBQ3YrQixPQUFELEVBQVVtYyxJQUFJLENBQUN2aUIsSUFBZixDQUEvQjs7QUFDQSxNQUFJMGtDLFlBQVksR0FBRyxDQUFDLENBQXBCLEVBQXVCO0FBQ3JCLFFBQUlELE1BQU0sSUFBSSxDQUFDdE8sUUFBUSxDQUFDNVQsSUFBRCxFQUFPLFNBQVAsQ0FBdkIsRUFBMEM7QUFDeEM5M0IsV0FBSyxHQUFHLEtBQVI7QUFDRCxLQUZELE1BRU8sSUFBSUEsS0FBSyxLQUFLLEVBQVYsSUFBZ0JBLEtBQUssS0FBS29zQyxTQUFTLENBQUNsckIsR0FBRCxDQUF2QyxFQUE4QztBQUNuRDtBQUNBO0FBQ0EsVUFBSWk1QixXQUFXLEdBQUdELFlBQVksQ0FBQzErQixNQUFELEVBQVNzYyxJQUFJLENBQUN2aUIsSUFBZCxDQUE5Qjs7QUFDQSxVQUFJNGtDLFdBQVcsR0FBRyxDQUFkLElBQW1CRixZQUFZLEdBQUdFLFdBQXRDLEVBQW1EO0FBQ2pEbjZDLGFBQUssR0FBRyxJQUFSO0FBQ0Q7QUFDRjtBQUNGLEdBakJELENBa0JBOzs7QUFDQSxNQUFJQSxLQUFLLEtBQUtvQyxTQUFkLEVBQXlCO0FBQ3ZCcEMsU0FBSyxHQUFHbzZDLG1CQUFtQixDQUFDckksRUFBRCxFQUFLamEsSUFBTCxFQUFXNVcsR0FBWCxDQUEzQixDQUR1QixDQUV2QjtBQUNBOztBQUNBLFFBQUltNUIsaUJBQWlCLEdBQUd0RSxhQUF4QjtBQUNBQyxtQkFBZSxDQUFDLElBQUQsQ0FBZjtBQUNBTSxXQUFPLENBQUN0MkMsS0FBRCxDQUFQO0FBQ0FnMkMsbUJBQWUsQ0FBQ3FFLGlCQUFELENBQWY7QUFDRDs7QUFDRCxNQUNFeGIsSUFERixFQUlFO0FBQ0F5YixjQUFVLENBQUN4aUIsSUFBRCxFQUFPNVcsR0FBUCxFQUFZbGhCLEtBQVosRUFBbUIreEMsRUFBbkIsRUFBdUJpSSxNQUF2QixDQUFWO0FBQ0Q7O0FBQ0QsU0FBT2g2QyxLQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHQSxTQUFTbzZDLG1CQUFULENBQThCckksRUFBOUIsRUFBa0NqYSxJQUFsQyxFQUF3QzVXLEdBQXhDLEVBQTZDO0FBQzNDO0FBQ0EsTUFBSSxDQUFDd3FCLFFBQVEsQ0FBQzVULElBQUQsRUFBTyxTQUFQLENBQWIsRUFBZ0M7QUFDOUIsV0FBTzExQixTQUFQO0FBQ0Q7O0FBQ0QsTUFBSTRyQyxHQUFHLEdBQUdsVyxJQUFJLENBQUNJLE9BQWYsQ0FMMkMsQ0FNM0M7O0FBQ0EsTUFBSTJHLEtBQUEsSUFBeUMyTCxVQUFVLENBQUN3RCxHQUFELENBQXZELEVBQThEO0FBQzVEeFMsUUFBSSxDQUNGLHFDQUFxQ3RhLEdBQXJDLEdBQTJDLEtBQTNDLEdBQ0EsMkRBREEsR0FFQSw4QkFIRSxFQUlGNndCLEVBSkUsQ0FBSjtBQU1ELEdBZDBDLENBZTNDO0FBQ0E7OztBQUNBLE1BQUlBLEVBQUUsSUFBSUEsRUFBRSxDQUFDTSxRQUFILENBQVlpRixTQUFsQixJQUNGdkYsRUFBRSxDQUFDTSxRQUFILENBQVlpRixTQUFaLENBQXNCcDJCLEdBQXRCLE1BQStCOWUsU0FEN0IsSUFFRjJ2QyxFQUFFLENBQUN3SSxNQUFILENBQVVyNUIsR0FBVixNQUFtQjllLFNBRnJCLEVBR0U7QUFDQSxXQUFPMnZDLEVBQUUsQ0FBQ3dJLE1BQUgsQ0FBVXI1QixHQUFWLENBQVA7QUFDRCxHQXRCMEMsQ0F1QjNDO0FBQ0E7OztBQUNBLFNBQU8sT0FBTzhzQixHQUFQLEtBQWUsVUFBZixJQUE2QndNLE9BQU8sQ0FBQzFpQixJQUFJLENBQUN2aUIsSUFBTixDQUFQLEtBQXVCLFVBQXBELEdBQ0h5NEIsR0FBRyxDQUFDOWlCLElBQUosQ0FBUzZtQixFQUFULENBREcsR0FFSC9ELEdBRko7QUFHRDtBQUVEOzs7OztBQUdBLFNBQVNzTSxVQUFULENBQ0V4aUIsSUFERixFQUVFM3lCLElBRkYsRUFHRW5GLEtBSEYsRUFJRSt4QyxFQUpGLEVBS0VpSSxNQUxGLEVBTUU7QUFDQSxNQUFJbGlCLElBQUksQ0FBQ0csUUFBTCxJQUFpQitoQixNQUFyQixFQUE2QjtBQUMzQnhlLFFBQUksQ0FDRiw2QkFBNkJyMkIsSUFBN0IsR0FBb0MsR0FEbEMsRUFFRjRzQyxFQUZFLENBQUo7QUFJQTtBQUNEOztBQUNELE1BQUkveEMsS0FBSyxJQUFJLElBQVQsSUFBaUIsQ0FBQzgzQixJQUFJLENBQUNHLFFBQTNCLEVBQXFDO0FBQ25DO0FBQ0Q7O0FBQ0QsTUFBSTFpQixJQUFJLEdBQUd1aUIsSUFBSSxDQUFDdmlCLElBQWhCO0FBQ0EsTUFBSWtsQyxLQUFLLEdBQUcsQ0FBQ2xsQyxJQUFELElBQVNBLElBQUksS0FBSyxJQUE5QjtBQUNBLE1BQUltbEMsYUFBYSxHQUFHLEVBQXBCOztBQUNBLE1BQUlubEMsSUFBSixFQUFVO0FBQ1IsUUFBSSxDQUFDK0wsS0FBSyxDQUFDaWUsT0FBTixDQUFjaHFCLElBQWQsQ0FBTCxFQUEwQjtBQUN4QkEsVUFBSSxHQUFHLENBQUNBLElBQUQsQ0FBUDtBQUNEOztBQUNELFNBQUssSUFBSThGLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc5RixJQUFJLENBQUM5VSxNQUFULElBQW1CLENBQUNnNkMsS0FBcEMsRUFBMkNwL0IsQ0FBQyxFQUE1QyxFQUFnRDtBQUM5QyxVQUFJcy9CLFlBQVksR0FBR0MsVUFBVSxDQUFDNTZDLEtBQUQsRUFBUXVWLElBQUksQ0FBQzhGLENBQUQsQ0FBWixDQUE3QjtBQUNBcS9CLG1CQUFhLENBQUM1bUMsSUFBZCxDQUFtQjZtQyxZQUFZLENBQUNFLFlBQWIsSUFBNkIsRUFBaEQ7QUFDQUosV0FBSyxHQUFHRSxZQUFZLENBQUNGLEtBQXJCO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNWamYsUUFBSSxDQUNGc2YscUJBQXFCLENBQUMzMUMsSUFBRCxFQUFPbkYsS0FBUCxFQUFjMDZDLGFBQWQsQ0FEbkIsRUFFRjNJLEVBRkUsQ0FBSjtBQUlBO0FBQ0Q7O0FBQ0QsTUFBSWdKLFNBQVMsR0FBR2pqQixJQUFJLENBQUNpakIsU0FBckI7O0FBQ0EsTUFBSUEsU0FBSixFQUFlO0FBQ2IsUUFBSSxDQUFDQSxTQUFTLENBQUMvNkMsS0FBRCxDQUFkLEVBQXVCO0FBQ3JCdzdCLFVBQUksQ0FDRiwyREFBMkRyMkIsSUFBM0QsR0FBa0UsSUFEaEUsRUFFRjRzQyxFQUZFLENBQUo7QUFJRDtBQUNGO0FBQ0Y7O0FBRUQsSUFBSWlKLGFBQWEsR0FBRywyQ0FBcEI7O0FBRUEsU0FBU0osVUFBVCxDQUFxQjU2QyxLQUFyQixFQUE0QnVWLElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlrbEMsS0FBSjtBQUNBLE1BQUlJLFlBQVksR0FBR0wsT0FBTyxDQUFDamxDLElBQUQsQ0FBMUI7O0FBQ0EsTUFBSXlsQyxhQUFhLENBQUMxNUMsSUFBZCxDQUFtQnU1QyxZQUFuQixDQUFKLEVBQXNDO0FBQ3BDLFFBQUloM0MsQ0FBQyxHQUFHLE9BQU83RCxLQUFmO0FBQ0F5NkMsU0FBSyxHQUFHNTJDLENBQUMsS0FBS2czQyxZQUFZLENBQUN6M0MsV0FBYixFQUFkLENBRm9DLENBR3BDOztBQUNBLFFBQUksQ0FBQ3EzQyxLQUFELElBQVU1MkMsQ0FBQyxLQUFLLFFBQXBCLEVBQThCO0FBQzVCNDJDLFdBQUssR0FBR3o2QyxLQUFLLFlBQVl1VixJQUF6QjtBQUNEO0FBQ0YsR0FQRCxNQU9PLElBQUlzbEMsWUFBWSxLQUFLLFFBQXJCLEVBQStCO0FBQ3BDSixTQUFLLEdBQUc5UCxhQUFhLENBQUMzcUMsS0FBRCxDQUFyQjtBQUNELEdBRk0sTUFFQSxJQUFJNjZDLFlBQVksS0FBSyxPQUFyQixFQUE4QjtBQUNuQ0osU0FBSyxHQUFHbjVCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3YvQixLQUFkLENBQVI7QUFDRCxHQUZNLE1BRUE7QUFDTHk2QyxTQUFLLEdBQUd6NkMsS0FBSyxZQUFZdVYsSUFBekI7QUFDRDs7QUFDRCxTQUFPO0FBQ0xrbEMsU0FBSyxFQUFFQSxLQURGO0FBRUxJLGdCQUFZLEVBQUVBO0FBRlQsR0FBUDtBQUlEO0FBRUQ7Ozs7Ozs7QUFLQSxTQUFTTCxPQUFULENBQWtCOWEsRUFBbEIsRUFBc0I7QUFDcEIsTUFBSXFKLEtBQUssR0FBR3JKLEVBQUUsSUFBSUEsRUFBRSxDQUFDMThCLFFBQUgsR0FBYytsQyxLQUFkLENBQW9CLG9CQUFwQixDQUFsQjtBQUNBLFNBQU9BLEtBQUssR0FBR0EsS0FBSyxDQUFDLENBQUQsQ0FBUixHQUFjLEVBQTFCO0FBQ0Q7O0FBRUQsU0FBU2tTLFVBQVQsQ0FBcUJuNUMsQ0FBckIsRUFBd0JJLENBQXhCLEVBQTJCO0FBQ3pCLFNBQU9zNEMsT0FBTyxDQUFDMTRDLENBQUQsQ0FBUCxLQUFlMDRDLE9BQU8sQ0FBQ3Q0QyxDQUFELENBQTdCO0FBQ0Q7O0FBRUQsU0FBU2c0QyxZQUFULENBQXVCM2tDLElBQXZCLEVBQTZCbWxDLGFBQTdCLEVBQTRDO0FBQzFDLE1BQUksQ0FBQ3A1QixLQUFLLENBQUNpZSxPQUFOLENBQWNtYixhQUFkLENBQUwsRUFBbUM7QUFDakMsV0FBT08sVUFBVSxDQUFDUCxhQUFELEVBQWdCbmxDLElBQWhCLENBQVYsR0FBa0MsQ0FBbEMsR0FBc0MsQ0FBQyxDQUE5QztBQUNEOztBQUNELE9BQUssSUFBSThGLENBQUMsR0FBRyxDQUFSLEVBQVdtNkIsR0FBRyxHQUFHa0YsYUFBYSxDQUFDajZDLE1BQXBDLEVBQTRDNGEsQ0FBQyxHQUFHbTZCLEdBQWhELEVBQXFEbjZCLENBQUMsRUFBdEQsRUFBMEQ7QUFDeEQsUUFBSTQvQixVQUFVLENBQUNQLGFBQWEsQ0FBQ3IvQixDQUFELENBQWQsRUFBbUI5RixJQUFuQixDQUFkLEVBQXdDO0FBQ3RDLGFBQU84RixDQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPLENBQUMsQ0FBUjtBQUNEOztBQUVELFNBQVN5L0IscUJBQVQsQ0FBZ0MzMUMsSUFBaEMsRUFBc0NuRixLQUF0QyxFQUE2QzA2QyxhQUE3QyxFQUE0RDtBQUMxRCxNQUFJcGYsT0FBTyxHQUFHLGdEQUFnRG4yQixJQUFoRCxHQUF1RCxLQUF2RCxHQUNaLFlBRFksR0FDSXUxQyxhQUFhLENBQUNsZ0MsR0FBZCxDQUFrQjB4QixVQUFsQixFQUE4QnB4QixJQUE5QixDQUFtQyxJQUFuQyxDQURsQjtBQUVBLE1BQUkrL0IsWUFBWSxHQUFHSCxhQUFhLENBQUMsQ0FBRCxDQUFoQztBQUNBLE1BQUlRLFlBQVksR0FBR3hRLFNBQVMsQ0FBQzFxQyxLQUFELENBQTVCO0FBQ0EsTUFBSW03QyxhQUFhLEdBQUdDLFVBQVUsQ0FBQ3A3QyxLQUFELEVBQVE2NkMsWUFBUixDQUE5QjtBQUNBLE1BQUlRLGFBQWEsR0FBR0QsVUFBVSxDQUFDcDdDLEtBQUQsRUFBUWs3QyxZQUFSLENBQTlCLENBTjBELENBTzFEOztBQUNBLE1BQUlSLGFBQWEsQ0FBQ2o2QyxNQUFkLEtBQXlCLENBQXpCLElBQ0E2NkMsWUFBWSxDQUFDVCxZQUFELENBRFosSUFFQSxDQUFDVSxXQUFXLENBQUNWLFlBQUQsRUFBZUssWUFBZixDQUZoQixFQUU4QztBQUM1QzVmLFdBQU8sSUFBSSxpQkFBaUI2ZixhQUE1QjtBQUNEOztBQUNEN2YsU0FBTyxJQUFJLFdBQVc0ZixZQUFYLEdBQTBCLEdBQXJDLENBYjBELENBYzFEOztBQUNBLE1BQUlJLFlBQVksQ0FBQ0osWUFBRCxDQUFoQixFQUFnQztBQUM5QjVmLFdBQU8sSUFBSSxnQkFBZ0IrZixhQUFoQixHQUFnQyxHQUEzQztBQUNEOztBQUNELFNBQU8vZixPQUFQO0FBQ0Q7O0FBRUQsU0FBUzhmLFVBQVQsQ0FBcUJwN0MsS0FBckIsRUFBNEJ1VixJQUE1QixFQUFrQztBQUNoQyxNQUFJQSxJQUFJLEtBQUssUUFBYixFQUF1QjtBQUNyQixXQUFRLE9BQU92VixLQUFQLEdBQWUsSUFBdkI7QUFDRCxHQUZELE1BRU8sSUFBSXVWLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQzVCLFdBQVEsS0FBTWtHLE1BQU0sQ0FBQ3piLEtBQUQsQ0FBcEI7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFRLEtBQUtBLEtBQWI7QUFDRDtBQUNGOztBQUVELFNBQVNzN0MsWUFBVCxDQUF1QnQ3QyxLQUF2QixFQUE4QjtBQUM1QixNQUFJdzdDLGFBQWEsR0FBRyxDQUFDLFFBQUQsRUFBVyxRQUFYLEVBQXFCLFNBQXJCLENBQXBCO0FBQ0EsU0FBT0EsYUFBYSxDQUFDQyxJQUFkLENBQW1CLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPMTdDLEtBQUssQ0FBQ29ELFdBQU4sT0FBd0JzNEMsSUFBL0I7QUFBc0MsR0FBM0UsQ0FBUDtBQUNEOztBQUVELFNBQVNILFdBQVQsR0FBd0I7QUFDdEIsTUFBSTcxQixJQUFJLEdBQUcsRUFBWDtBQUFBLE1BQWU4dkIsR0FBRyxHQUFHaDFDLFNBQVMsQ0FBQ0MsTUFBL0I7O0FBQ0EsU0FBUSswQyxHQUFHLEVBQVg7QUFBZ0I5dkIsUUFBSSxDQUFFOHZCLEdBQUYsQ0FBSixHQUFjaDFDLFNBQVMsQ0FBRWcxQyxHQUFGLENBQXZCO0FBQWhCOztBQUVBLFNBQU85dkIsSUFBSSxDQUFDKzFCLElBQUwsQ0FBVSxVQUFVQyxJQUFWLEVBQWdCO0FBQUUsV0FBT0EsSUFBSSxDQUFDdDRDLFdBQUwsT0FBdUIsU0FBOUI7QUFBMEMsR0FBdEUsQ0FBUDtBQUNEO0FBRUQ7OztBQUVBLFNBQVN1NEMsV0FBVCxDQUFzQjFnQixHQUF0QixFQUEyQjhXLEVBQTNCLEVBQStCbjFCLElBQS9CLEVBQXFDO0FBQ25DO0FBQ0E7QUFDQXkyQixZQUFVOztBQUNWLE1BQUk7QUFDRixRQUFJdEIsRUFBSixFQUFRO0FBQ04sVUFBSWhJLEdBQUcsR0FBR2dJLEVBQVY7O0FBQ0EsYUFBUWhJLEdBQUcsR0FBR0EsR0FBRyxDQUFDeUksT0FBbEIsRUFBNEI7QUFDMUIsWUFBSTRGLEtBQUssR0FBR3JPLEdBQUcsQ0FBQ3NJLFFBQUosQ0FBYXVKLGFBQXpCOztBQUNBLFlBQUl4RCxLQUFKLEVBQVc7QUFDVCxlQUFLLElBQUkvOEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRys4QixLQUFLLENBQUMzM0MsTUFBMUIsRUFBa0M0YSxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLGdCQUFJO0FBQ0Ysa0JBQUl3Z0MsT0FBTyxHQUFHekQsS0FBSyxDQUFDLzhCLENBQUQsQ0FBTCxDQUFTNlAsSUFBVCxDQUFjNmUsR0FBZCxFQUFtQjlPLEdBQW5CLEVBQXdCOFcsRUFBeEIsRUFBNEJuMUIsSUFBNUIsTUFBc0MsS0FBcEQ7O0FBQ0Esa0JBQUlpL0IsT0FBSixFQUFhO0FBQUU7QUFBUTtBQUN4QixhQUhELENBR0UsT0FBT2xkLENBQVAsRUFBVTtBQUNWbWQsK0JBQWlCLENBQUNuZCxDQUFELEVBQUlvTCxHQUFKLEVBQVMsb0JBQVQsQ0FBakI7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUNGOztBQUNEK1IscUJBQWlCLENBQUM3Z0IsR0FBRCxFQUFNOFcsRUFBTixFQUFVbjFCLElBQVYsQ0FBakI7QUFDRCxHQWxCRCxTQWtCVTtBQUNSMDJCLGFBQVM7QUFDVjtBQUNGOztBQUVELFNBQVN5SSx1QkFBVCxDQUNFMWpCLE9BREYsRUFFRXVCLE9BRkYsRUFHRWxVLElBSEYsRUFJRXFzQixFQUpGLEVBS0VuMUIsSUFMRixFQU1FO0FBQ0EsTUFBSXFpQixHQUFKOztBQUNBLE1BQUk7QUFDRkEsT0FBRyxHQUFHdlosSUFBSSxHQUFHMlMsT0FBTyxDQUFDNXpCLEtBQVIsQ0FBY20xQixPQUFkLEVBQXVCbFUsSUFBdkIsQ0FBSCxHQUFrQzJTLE9BQU8sQ0FBQ25OLElBQVIsQ0FBYTBPLE9BQWIsQ0FBNUM7O0FBQ0EsUUFBSXFGLEdBQUcsSUFBSSxDQUFDQSxHQUFHLENBQUNtVCxNQUFaLElBQXNCckgsU0FBUyxDQUFDOUwsR0FBRCxDQUEvQixJQUF3QyxDQUFDQSxHQUFHLENBQUMrYyxRQUFqRCxFQUEyRDtBQUN6RC9jLFNBQUcsQ0FBQzlCLEtBQUosQ0FBVSxVQUFVd0IsQ0FBVixFQUFhO0FBQUUsZUFBT2dkLFdBQVcsQ0FBQ2hkLENBQUQsRUFBSW9ULEVBQUosRUFBUW4xQixJQUFJLEdBQUcsa0JBQWYsQ0FBbEI7QUFBdUQsT0FBaEYsRUFEeUQsQ0FFekQ7QUFDQTs7QUFDQXFpQixTQUFHLENBQUMrYyxRQUFKLEdBQWUsSUFBZjtBQUNEO0FBQ0YsR0FSRCxDQVFFLE9BQU9yZCxDQUFQLEVBQVU7QUFDVmdkLGVBQVcsQ0FBQ2hkLENBQUQsRUFBSW9ULEVBQUosRUFBUW4xQixJQUFSLENBQVg7QUFDRDs7QUFDRCxTQUFPcWlCLEdBQVA7QUFDRDs7QUFFRCxTQUFTNmMsaUJBQVQsQ0FBNEI3Z0IsR0FBNUIsRUFBaUM4VyxFQUFqQyxFQUFxQ24xQixJQUFyQyxFQUEyQztBQUN6QyxNQUFJMnpCLE1BQU0sQ0FBQ0ssWUFBWCxFQUF5QjtBQUN2QixRQUFJO0FBQ0YsYUFBT0wsTUFBTSxDQUFDSyxZQUFQLENBQW9CMWxCLElBQXBCLENBQXlCLElBQXpCLEVBQStCK1AsR0FBL0IsRUFBb0M4VyxFQUFwQyxFQUF3Q24xQixJQUF4QyxDQUFQO0FBQ0QsS0FGRCxDQUVFLE9BQU8raEIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQUlBLENBQUMsS0FBSzFELEdBQVYsRUFBZTtBQUNiZ2hCLGdCQUFRLENBQUN0ZCxDQUFELEVBQUksSUFBSixFQUFVLHFCQUFWLENBQVI7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0RzZCxVQUFRLENBQUNoaEIsR0FBRCxFQUFNOFcsRUFBTixFQUFVbjFCLElBQVYsQ0FBUjtBQUNEOztBQUVELFNBQVNxL0IsUUFBVCxDQUFtQmhoQixHQUFuQixFQUF3QjhXLEVBQXhCLEVBQTRCbjFCLElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlpaUIsSUFBSixFQUEyQztBQUN6Q3JELFFBQUksQ0FBRSxjQUFjNWUsSUFBZCxHQUFxQixNQUFyQixHQUErQnFlLEdBQUcsQ0FBQ2o0QixRQUFKLEVBQS9CLEdBQWlELElBQW5ELEVBQTBEK3VDLEVBQTFELENBQUo7QUFDRDtBQUNEOzs7QUFDQSxNQUFJLENBQUN4RCxTQUFTLElBQUlDLE1BQWQsS0FBeUIsT0FBT2pULE9BQVAsS0FBbUIsV0FBaEQsRUFBNkQ7QUFDM0RBLFdBQU8sQ0FBQ0UsS0FBUixDQUFjUixHQUFkO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsVUFBTUEsR0FBTjtBQUNEO0FBQ0Y7QUFFRDs7O0FBRUEsSUFBSWloQixTQUFTLEdBQUcsRUFBaEI7QUFDQSxJQUFJQyxPQUFPLEdBQUcsS0FBZDs7QUFFQSxTQUFTQyxjQUFULEdBQTJCO0FBQ3pCRCxTQUFPLEdBQUcsS0FBVjtBQUNBLE1BQUlFLE1BQU0sR0FBR0gsU0FBUyxDQUFDclgsS0FBVixDQUFnQixDQUFoQixDQUFiO0FBQ0FxWCxXQUFTLENBQUN6N0MsTUFBVixHQUFtQixDQUFuQjs7QUFDQSxPQUFLLElBQUk0YSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZ2hDLE1BQU0sQ0FBQzU3QyxNQUEzQixFQUFtQzRhLENBQUMsRUFBcEMsRUFBd0M7QUFDdENnaEMsVUFBTSxDQUFDaGhDLENBQUQsQ0FBTjtBQUNEO0FBQ0YsQyxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLElBQUlpaEMsU0FBSixDLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOztBQUNBLElBQUksT0FBTzFlLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NpUyxRQUFRLENBQUNqUyxPQUFELENBQTlDLEVBQXlEO0FBQ3ZELE1BQUkyZSxDQUFDLEdBQUczZSxPQUFPLENBQUNDLE9BQVIsRUFBUjs7QUFDQXllLFdBQVMsR0FBRyxxQkFBWTtBQUN0QkMsS0FBQyxDQUFDdGYsSUFBRixDQUFPbWYsY0FBUCxFQURzQixDQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFFBQUl6NEIsS0FBSixFQUFXO0FBQUU2NEIsZ0JBQVUsQ0FBQzFQLElBQUQsQ0FBVjtBQUFtQjtBQUNqQyxHQVJEO0FBU0QsQ0FYRCxNQVdPLElBQUksQ0FBQ2lDLElBQUQsSUFBUyxPQUFPME4sZ0JBQVAsS0FBNEIsV0FBckMsS0FDVDVNLFFBQVEsQ0FBQzRNLGdCQUFELENBQVIsSUFDQTtBQUNBQSxnQkFBZ0IsQ0FBQ3o1QyxRQUFqQixPQUFnQyxzQ0FIdkIsQ0FBSixFQUlKO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsTUFBSTA1QyxPQUFPLEdBQUcsQ0FBZDtBQUNBLE1BQUlDLFFBQVEsR0FBRyxJQUFJRixnQkFBSixDQUFxQkwsY0FBckIsQ0FBZjtBQUNBLE1BQUlRLFFBQVEsR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCdGhDLE1BQU0sQ0FBQ2toQyxPQUFELENBQTlCLENBQWY7QUFDQUMsVUFBUSxDQUFDckcsT0FBVCxDQUFpQnNHLFFBQWpCLEVBQTJCO0FBQ3pCRyxpQkFBYSxFQUFFO0FBRFUsR0FBM0I7O0FBR0FULFdBQVMsR0FBRyxxQkFBWTtBQUN0QkksV0FBTyxHQUFHLENBQUNBLE9BQU8sR0FBRyxDQUFYLElBQWdCLENBQTFCO0FBQ0FFLFlBQVEsQ0FBQzU5QixJQUFULEdBQWdCeEQsTUFBTSxDQUFDa2hDLE9BQUQsQ0FBdEI7QUFDRCxHQUhEO0FBSUQsQ0FsQk0sTUFrQkEsSUFBSSxPQUFPTSxZQUFQLEtBQXdCLFdBQXhCLElBQXVDbk4sUUFBUSxDQUFDbU4sWUFBRCxDQUFuRCxFQUFtRTtBQUN4RTtBQUNBO0FBQ0E7QUFDQVYsV0FBUyxHQUFHLHFCQUFZO0FBQ3RCVSxnQkFBWSxDQUFDWixjQUFELENBQVo7QUFDRCxHQUZEO0FBR0QsQ0FQTSxNQU9BO0FBQ0w7QUFDQUUsV0FBUyxHQUFHLHFCQUFZO0FBQ3RCRSxjQUFVLENBQUNKLGNBQUQsRUFBaUIsQ0FBakIsQ0FBVjtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTYSxRQUFULENBQW1CQyxFQUFuQixFQUF1QnZkLEdBQXZCLEVBQTRCO0FBQzFCLE1BQUl3ZCxRQUFKOztBQUNBakIsV0FBUyxDQUFDcG9DLElBQVYsQ0FBZSxZQUFZO0FBQ3pCLFFBQUlvcEMsRUFBSixFQUFRO0FBQ04sVUFBSTtBQUNGQSxVQUFFLENBQUNoeUIsSUFBSCxDQUFReVUsR0FBUjtBQUNELE9BRkQsQ0FFRSxPQUFPaEIsQ0FBUCxFQUFVO0FBQ1ZnZCxtQkFBVyxDQUFDaGQsQ0FBRCxFQUFJZ0IsR0FBSixFQUFTLFVBQVQsQ0FBWDtBQUNEO0FBQ0YsS0FORCxNQU1PLElBQUl3ZCxRQUFKLEVBQWM7QUFDbkJBLGNBQVEsQ0FBQ3hkLEdBQUQsQ0FBUjtBQUNEO0FBQ0YsR0FWRDs7QUFXQSxNQUFJLENBQUN3YyxPQUFMLEVBQWM7QUFDWkEsV0FBTyxHQUFHLElBQVY7QUFDQUcsYUFBUztBQUNWLEdBaEJ5QixDQWlCMUI7OztBQUNBLE1BQUksQ0FBQ1ksRUFBRCxJQUFPLE9BQU90ZixPQUFQLEtBQW1CLFdBQTlCLEVBQTJDO0FBQ3pDLFdBQU8sSUFBSUEsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUI7QUFDcENzZixjQUFRLEdBQUd0ZixPQUFYO0FBQ0QsS0FGTSxDQUFQO0FBR0Q7QUFDRjtBQUVEOztBQUVBOzs7QUFFQSxJQUFJdWYsR0FBRyxHQUFHO0FBQ1IvUixRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFpQjU1QixDQUFqQixFQUFvQndqQyxLQUFwQixFQUEyQjtBQUNqQ29JLGVBQVcsQ0FBQ3BJLEtBQUQsQ0FBWDtBQUNELEdBSE87QUFJUjNYLFFBQU0sRUFBRSxTQUFTQSxNQUFULENBQWlCekQsUUFBakIsRUFBMkJvYixLQUEzQixFQUFrQztBQUN4QyxRQUFJcGIsUUFBUSxDQUFDN2EsSUFBVCxDQUFjbytCLEdBQWQsS0FBc0JuSSxLQUFLLENBQUNqMkIsSUFBTixDQUFXbytCLEdBQXJDLEVBQTBDO0FBQ3hDQyxpQkFBVyxDQUFDeGpCLFFBQUQsRUFBVyxJQUFYLENBQVg7QUFDQXdqQixpQkFBVyxDQUFDcEksS0FBRCxDQUFYO0FBQ0Q7QUFDRixHQVRPO0FBVVJxSSxTQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFrQnJJLEtBQWxCLEVBQXlCO0FBQ2hDb0ksZUFBVyxDQUFDcEksS0FBRCxFQUFRLElBQVIsQ0FBWDtBQUNEO0FBWk8sQ0FBVjs7QUFlQSxTQUFTb0ksV0FBVCxDQUFzQnBJLEtBQXRCLEVBQTZCc0ksU0FBN0IsRUFBd0M7QUFDdEMsTUFBSXI4QixHQUFHLEdBQUcrekIsS0FBSyxDQUFDajJCLElBQU4sQ0FBV28rQixHQUFyQjs7QUFDQSxNQUFJLENBQUNoVCxLQUFLLENBQUNscEIsR0FBRCxDQUFWLEVBQWlCO0FBQUU7QUFBUTs7QUFFM0IsTUFBSTZ3QixFQUFFLEdBQUdrRCxLQUFLLENBQUNyYixPQUFmO0FBQ0EsTUFBSXdqQixHQUFHLEdBQUduSSxLQUFLLENBQUNoQixpQkFBTixJQUEyQmdCLEtBQUssQ0FBQ3ZCLEdBQTNDO0FBQ0EsTUFBSThKLElBQUksR0FBR3pMLEVBQUUsQ0FBQ3haLEtBQWQ7O0FBQ0EsTUFBSWdsQixTQUFKLEVBQWU7QUFDYixRQUFJajhCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY2llLElBQUksQ0FBQ3Q4QixHQUFELENBQWxCLENBQUosRUFBOEI7QUFDNUJzcUIsWUFBTSxDQUFDZ1MsSUFBSSxDQUFDdDhCLEdBQUQsQ0FBTCxFQUFZazhCLEdBQVosQ0FBTjtBQUNELEtBRkQsTUFFTyxJQUFJSSxJQUFJLENBQUN0OEIsR0FBRCxDQUFKLEtBQWNrOEIsR0FBbEIsRUFBdUI7QUFDNUJJLFVBQUksQ0FBQ3Q4QixHQUFELENBQUosR0FBWTllLFNBQVo7QUFDRDtBQUNGLEdBTkQsTUFNTztBQUNMLFFBQUk2eUMsS0FBSyxDQUFDajJCLElBQU4sQ0FBV3krQixRQUFmLEVBQXlCO0FBQ3ZCLFVBQUksQ0FBQ244QixLQUFLLENBQUNpZSxPQUFOLENBQWNpZSxJQUFJLENBQUN0OEIsR0FBRCxDQUFsQixDQUFMLEVBQStCO0FBQzdCczhCLFlBQUksQ0FBQ3Q4QixHQUFELENBQUosR0FBWSxDQUFDazhCLEdBQUQsQ0FBWjtBQUNELE9BRkQsTUFFTyxJQUFJSSxJQUFJLENBQUN0OEIsR0FBRCxDQUFKLENBQVU3ZCxPQUFWLENBQWtCKzVDLEdBQWxCLElBQXlCLENBQTdCLEVBQWdDO0FBQ3JDO0FBQ0FJLFlBQUksQ0FBQ3Q4QixHQUFELENBQUosQ0FBVXBOLElBQVYsQ0FBZXNwQyxHQUFmO0FBQ0Q7QUFDRixLQVBELE1BT087QUFDTEksVUFBSSxDQUFDdDhCLEdBQUQsQ0FBSixHQUFZazhCLEdBQVo7QUFDRDtBQUNGO0FBQ0Y7QUFFRDs7O0FBRUEsSUFBSU0sV0FBVyxHQUFHLElBQUl2TixJQUFKLEVBQWxCO0FBRUE7Ozs7OztBQUtBLFNBQVN3TixRQUFULENBQW1CN1csR0FBbkIsRUFBd0I7QUFDdEI4VyxXQUFTLENBQUM5VyxHQUFELEVBQU00VyxXQUFOLENBQVQ7O0FBQ0FBLGFBQVcsQ0FBQ2pxQixLQUFaO0FBQ0Q7O0FBRUQsU0FBU21xQixTQUFULENBQW9COVcsR0FBcEIsRUFBeUJJLElBQXpCLEVBQStCO0FBQzdCLE1BQUk3ckIsQ0FBSixFQUFPa1ksSUFBUDtBQUNBLE1BQUlzcUIsR0FBRyxHQUFHdjhCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3VILEdBQWQsQ0FBVjs7QUFDQSxNQUFLLENBQUMrVyxHQUFELElBQVEsQ0FBQ3JULFVBQVUsQ0FBQzFELEdBQUQsQ0FBcEIsSUFBOEJqbkMsTUFBTSxDQUFDaStDLFFBQVAsQ0FBZ0JoWCxHQUFoQixDQUE5QixJQUFzREEsR0FBRyxZQUFZeU0sS0FBekUsRUFBZ0Y7QUFDOUU7QUFDRDs7QUFDRCxNQUFJek0sR0FBRyxDQUFDNE8sTUFBUixFQUFnQjtBQUNkLFFBQUlxSSxLQUFLLEdBQUdqWCxHQUFHLENBQUM0TyxNQUFKLENBQVdHLEdBQVgsQ0FBZTczQixFQUEzQjs7QUFDQSxRQUFJa3BCLElBQUksQ0FBQzMyQixHQUFMLENBQVN3dEMsS0FBVCxDQUFKLEVBQXFCO0FBQ25CO0FBQ0Q7O0FBQ0Q3VyxRQUFJLENBQUMrQyxHQUFMLENBQVM4VCxLQUFUO0FBQ0Q7O0FBQ0QsTUFBSUYsR0FBSixFQUFTO0FBQ1B4aUMsS0FBQyxHQUFHeXJCLEdBQUcsQ0FBQ3JtQyxNQUFSOztBQUNBLFdBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUFFdWlDLGVBQVMsQ0FBQzlXLEdBQUcsQ0FBQ3pyQixDQUFELENBQUosRUFBUzZyQixJQUFULENBQVQ7QUFBMEI7QUFDekMsR0FIRCxNQUdPO0FBQ0wzVCxRQUFJLEdBQUcxekIsTUFBTSxDQUFDMHpCLElBQVAsQ0FBWXVULEdBQVosQ0FBUDtBQUNBenJCLEtBQUMsR0FBR2tZLElBQUksQ0FBQzl5QixNQUFUOztBQUNBLFdBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUFFdWlDLGVBQVMsQ0FBQzlXLEdBQUcsQ0FBQ3ZULElBQUksQ0FBQ2xZLENBQUQsQ0FBTCxDQUFKLEVBQWU2ckIsSUFBZixDQUFUO0FBQWdDO0FBQy9DO0FBQ0Y7QUFFRDs7O0FBRUEsSUFBSThXLGdCQUFnQixHQUFHLEdBQXZCO0FBRUEsSUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxJQUFJQyxpQkFBaUIsR0FBRyxFQUF4QjtBQUNBLElBQUlDLEtBQUssR0FBRyxFQUFaO0FBQ0EsSUFBSUMsUUFBUSxHQUFHLEVBQWY7QUFDQSxJQUFJQyxPQUFPLEdBQUcsS0FBZDtBQUNBLElBQUlDLFFBQVEsR0FBRyxLQUFmO0FBQ0EsSUFBSS9wQyxLQUFLLEdBQUcsQ0FBWjtBQUVBOzs7O0FBR0EsU0FBU2dxQyxtQkFBVCxHQUFnQztBQUM5QmhxQyxPQUFLLEdBQUcwcEMsS0FBSyxDQUFDeDlDLE1BQU4sR0FBZXk5QyxpQkFBaUIsQ0FBQ3o5QyxNQUFsQixHQUEyQixDQUFsRDtBQUNBMDlDLE9BQUssR0FBRyxFQUFSOztBQUNBLE1BQUl0ZixJQUFKLEVBQTJDO0FBQ3pDdWYsWUFBUSxHQUFHLEVBQVg7QUFDRDs7QUFDREMsU0FBTyxHQUFHQyxRQUFRLEdBQUcsS0FBckI7QUFDRCxDLENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBSUUscUJBQXFCLEdBQUcsQ0FBNUIsQyxDQUVBOztBQUNBLElBQUlDLE1BQU0sR0FBR3ZjLElBQUksQ0FBQ3djLEdBQWxCLEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSW5RLFNBQVMsSUFBSSxDQUFDUSxJQUFsQixFQUF3QjtBQUN0QixNQUFJNEIsV0FBVyxHQUFHL1IsTUFBTSxDQUFDK1IsV0FBekI7O0FBQ0EsTUFDRUEsV0FBVyxJQUNYLE9BQU9BLFdBQVcsQ0FBQytOLEdBQW5CLEtBQTJCLFVBRDNCLElBRUFELE1BQU0sS0FBSzVCLFFBQVEsQ0FBQzhCLFdBQVQsQ0FBcUIsT0FBckIsRUFBOEJDLFNBSDNDLEVBSUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSCxVQUFNLEdBQUcsa0JBQVk7QUFBRSxhQUFPOU4sV0FBVyxDQUFDK04sR0FBWixFQUFQO0FBQTJCLEtBQWxEO0FBQ0Q7QUFDRjtBQUVEOzs7OztBQUdBLFNBQVNHLG1CQUFULEdBQWdDO0FBQzlCTCx1QkFBcUIsR0FBR0MsTUFBTSxFQUE5QjtBQUNBSCxVQUFRLEdBQUcsSUFBWDtBQUNBLE1BQUlRLE9BQUosRUFBYTlnQyxFQUFiLENBSDhCLENBSzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FpZ0MsT0FBSyxDQUFDOUssSUFBTixDQUFXLFVBQVVyeEMsQ0FBVixFQUFhSSxDQUFiLEVBQWdCO0FBQUUsV0FBT0osQ0FBQyxDQUFDa2MsRUFBRixHQUFPOWIsQ0FBQyxDQUFDOGIsRUFBaEI7QUFBcUIsR0FBbEQsRUFiOEIsQ0FlOUI7QUFDQTs7QUFDQSxPQUFLekosS0FBSyxHQUFHLENBQWIsRUFBZ0JBLEtBQUssR0FBRzBwQyxLQUFLLENBQUN4OUMsTUFBOUIsRUFBc0M4VCxLQUFLLEVBQTNDLEVBQStDO0FBQzdDdXFDLFdBQU8sR0FBR2IsS0FBSyxDQUFDMXBDLEtBQUQsQ0FBZjs7QUFDQSxRQUFJdXFDLE9BQU8sQ0FBQ0MsTUFBWixFQUFvQjtBQUNsQkQsYUFBTyxDQUFDQyxNQUFSO0FBQ0Q7O0FBQ0QvZ0MsTUFBRSxHQUFHOGdDLE9BQU8sQ0FBQzlnQyxFQUFiO0FBQ0FtZ0MsU0FBSyxDQUFDbmdDLEVBQUQsQ0FBTCxHQUFZLElBQVo7QUFDQThnQyxXQUFPLENBQUNFLEdBQVIsR0FQNkMsQ0FRN0M7O0FBQ0EsUUFBSW5nQixLQUFBLElBQXlDc2YsS0FBSyxDQUFDbmdDLEVBQUQsQ0FBTCxJQUFhLElBQTFELEVBQWdFO0FBQzlEb2dDLGNBQVEsQ0FBQ3BnQyxFQUFELENBQVIsR0FBZSxDQUFDb2dDLFFBQVEsQ0FBQ3BnQyxFQUFELENBQVIsSUFBZ0IsQ0FBakIsSUFBc0IsQ0FBckM7O0FBQ0EsVUFBSW9nQyxRQUFRLENBQUNwZ0MsRUFBRCxDQUFSLEdBQWVnZ0MsZ0JBQW5CLEVBQXFDO0FBQ25DeGlCLFlBQUksQ0FDRiwyQ0FDRXNqQixPQUFPLENBQUNHLElBQVIsR0FDSyxrQ0FBbUNILE9BQU8sQ0FBQ3Q4QixVQUEzQyxHQUF5RCxJQUQ5RCxHQUVJLGlDQUhOLENBREUsRUFNRnM4QixPQUFPLENBQUMvTSxFQU5OLENBQUo7QUFRQTtBQUNEO0FBQ0Y7QUFDRixHQXhDNkIsQ0EwQzlCOzs7QUFDQSxNQUFJbU4sY0FBYyxHQUFHaEIsaUJBQWlCLENBQUNyWixLQUFsQixFQUFyQjtBQUNBLE1BQUlzYSxZQUFZLEdBQUdsQixLQUFLLENBQUNwWixLQUFOLEVBQW5CO0FBRUEwWixxQkFBbUIsR0E5Q1csQ0FnRDlCOztBQUNBYSxvQkFBa0IsQ0FBQ0YsY0FBRCxDQUFsQjtBQUNBRyxrQkFBZ0IsQ0FBQ0YsWUFBRCxDQUFoQixDQWxEOEIsQ0FvRDlCOztBQUNBOztBQUNBLE1BQUl4UCxRQUFRLElBQUlZLE1BQU0sQ0FBQ1osUUFBdkIsRUFBaUM7QUFDL0JBLFlBQVEsQ0FBQzJQLElBQVQsQ0FBYyxPQUFkO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTRCxnQkFBVCxDQUEyQnBCLEtBQTNCLEVBQWtDO0FBQ2hDLE1BQUk1aUMsQ0FBQyxHQUFHNGlDLEtBQUssQ0FBQ3g5QyxNQUFkOztBQUNBLFNBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUNWLFFBQUl5akMsT0FBTyxHQUFHYixLQUFLLENBQUM1aUMsQ0FBRCxDQUFuQjtBQUNBLFFBQUkwMkIsRUFBRSxHQUFHK00sT0FBTyxDQUFDL00sRUFBakI7O0FBQ0EsUUFBSUEsRUFBRSxDQUFDd04sUUFBSCxLQUFnQlQsT0FBaEIsSUFBMkIvTSxFQUFFLENBQUN5TixVQUE5QixJQUE0QyxDQUFDek4sRUFBRSxDQUFDME4sWUFBcEQsRUFBa0U7QUFDaEVDLGNBQVEsQ0FBQzNOLEVBQUQsRUFBSyxTQUFMLENBQVI7QUFDRDtBQUNGO0FBQ0Y7QUFFRDs7Ozs7O0FBSUEsU0FBUzROLHVCQUFULENBQWtDNU4sRUFBbEMsRUFBc0M7QUFDcEM7QUFDQTtBQUNBQSxJQUFFLENBQUM2TixTQUFILEdBQWUsS0FBZjtBQUNBMUIsbUJBQWlCLENBQUNwcUMsSUFBbEIsQ0FBdUJpK0IsRUFBdkI7QUFDRDs7QUFFRCxTQUFTcU4sa0JBQVQsQ0FBNkJuQixLQUE3QixFQUFvQztBQUNsQyxPQUFLLElBQUk1aUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzRpQyxLQUFLLENBQUN4OUMsTUFBMUIsRUFBa0M0YSxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDNGlDLFNBQUssQ0FBQzVpQyxDQUFELENBQUwsQ0FBU3VrQyxTQUFULEdBQXFCLElBQXJCO0FBQ0FDLDBCQUFzQixDQUFDNUIsS0FBSyxDQUFDNWlDLENBQUQsQ0FBTixFQUFXO0FBQUs7QUFBaEIsS0FBdEI7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7QUFLQSxTQUFTeWtDLFlBQVQsQ0FBdUJoQixPQUF2QixFQUFnQztBQUM5QixNQUFJOWdDLEVBQUUsR0FBRzhnQyxPQUFPLENBQUM5Z0MsRUFBakI7O0FBQ0EsTUFBSW1nQyxLQUFLLENBQUNuZ0MsRUFBRCxDQUFMLElBQWEsSUFBakIsRUFBdUI7QUFDckJtZ0MsU0FBSyxDQUFDbmdDLEVBQUQsQ0FBTCxHQUFZLElBQVo7O0FBQ0EsUUFBSSxDQUFDc2dDLFFBQUwsRUFBZTtBQUNiTCxXQUFLLENBQUNucUMsSUFBTixDQUFXZ3JDLE9BQVg7QUFDRCxLQUZELE1BRU87QUFDTDtBQUNBO0FBQ0EsVUFBSXpqQyxDQUFDLEdBQUc0aUMsS0FBSyxDQUFDeDlDLE1BQU4sR0FBZSxDQUF2Qjs7QUFDQSxhQUFPNGEsQ0FBQyxHQUFHOUcsS0FBSixJQUFhMHBDLEtBQUssQ0FBQzVpQyxDQUFELENBQUwsQ0FBUzJDLEVBQVQsR0FBYzhnQyxPQUFPLENBQUM5Z0MsRUFBMUMsRUFBOEM7QUFDNUMzQyxTQUFDO0FBQ0Y7O0FBQ0Q0aUMsV0FBSyxDQUFDeFMsTUFBTixDQUFhcHdCLENBQUMsR0FBRyxDQUFqQixFQUFvQixDQUFwQixFQUF1QnlqQyxPQUF2QjtBQUNELEtBWm9CLENBYXJCOzs7QUFDQSxRQUFJLENBQUNULE9BQUwsRUFBYztBQUNaQSxhQUFPLEdBQUcsSUFBVjs7QUFFQSxVQUFJeGYsS0FBQSxJQUF5QyxDQUFDMFIsTUFBTSxDQUFDZSxLQUFyRCxFQUE0RDtBQUMxRHVOLDJCQUFtQjtBQUNuQjtBQUNEOztBQUNENUIsY0FBUSxDQUFDNEIsbUJBQUQsQ0FBUjtBQUNEO0FBQ0Y7QUFDRjtBQUVEOzs7QUFJQSxJQUFJa0IsS0FBSyxHQUFHLENBQVo7QUFFQTs7Ozs7O0FBS0EsSUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FDWmpPLEVBRFksRUFFWmtPLE9BRlksRUFHWi9DLEVBSFksRUFJWm5nQixPQUpZLEVBS1ptakIsZUFMWSxFQU1aO0FBQ0EsT0FBS25PLEVBQUwsR0FBVUEsRUFBVjs7QUFDQSxNQUFJbU8sZUFBSixFQUFxQjtBQUNuQm5PLE1BQUUsQ0FBQ3dOLFFBQUgsR0FBYyxJQUFkO0FBQ0Q7O0FBQ0R4TixJQUFFLENBQUNvTyxTQUFILENBQWFyc0MsSUFBYixDQUFrQixJQUFsQixFQUxBLENBTUE7OztBQUNBLE1BQUlpcEIsT0FBSixFQUFhO0FBQ1gsU0FBS3RFLElBQUwsR0FBWSxDQUFDLENBQUNzRSxPQUFPLENBQUN0RSxJQUF0QjtBQUNBLFNBQUt3bUIsSUFBTCxHQUFZLENBQUMsQ0FBQ2xpQixPQUFPLENBQUNraUIsSUFBdEI7QUFDQSxTQUFLbUIsSUFBTCxHQUFZLENBQUMsQ0FBQ3JqQixPQUFPLENBQUNxakIsSUFBdEI7QUFDQSxTQUFLQyxJQUFMLEdBQVksQ0FBQyxDQUFDdGpCLE9BQU8sQ0FBQ3NqQixJQUF0QjtBQUNBLFNBQUt0QixNQUFMLEdBQWNoaUIsT0FBTyxDQUFDZ2lCLE1BQXRCO0FBQ0QsR0FORCxNQU1PO0FBQ0wsU0FBS3RtQixJQUFMLEdBQVksS0FBS3dtQixJQUFMLEdBQVksS0FBS21CLElBQUwsR0FBWSxLQUFLQyxJQUFMLEdBQVksS0FBaEQ7QUFDRDs7QUFDRCxPQUFLbkQsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsT0FBS2wvQixFQUFMLEdBQVUsRUFBRStoQyxLQUFaLENBakJBLENBaUJtQjs7QUFDbkIsT0FBS08sTUFBTCxHQUFjLElBQWQ7QUFDQSxPQUFLQyxLQUFMLEdBQWEsS0FBS0gsSUFBbEIsQ0FuQkEsQ0FtQndCOztBQUN4QixPQUFLSSxJQUFMLEdBQVksRUFBWjtBQUNBLE9BQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsT0FBS0MsTUFBTCxHQUFjLElBQUl2USxJQUFKLEVBQWQ7QUFDQSxPQUFLd1EsU0FBTCxHQUFpQixJQUFJeFEsSUFBSixFQUFqQjtBQUNBLE9BQUszdEIsVUFBTCxHQUFrQnFjLEtBQUEsR0FDZG9oQixPQUFPLENBQUNqOUMsUUFBUixFQURjLEdBRWQsU0FGSixDQXhCQSxDQTJCQTs7QUFDQSxNQUFJLE9BQU9pOUMsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQyxTQUFLckosTUFBTCxHQUFjcUosT0FBZDtBQUNELEdBRkQsTUFFTztBQUNMLFNBQUtySixNQUFMLEdBQWN6SSxTQUFTLENBQUM4UixPQUFELENBQXZCOztBQUNBLFFBQUksQ0FBQyxLQUFLckosTUFBVixFQUFrQjtBQUNoQixXQUFLQSxNQUFMLEdBQWM5SixJQUFkO0FBQ0FqTyxXQUFBLElBQXlDckQsSUFBSSxDQUMzQyw2QkFBNkJ5a0IsT0FBN0IsR0FBdUMsS0FBdkMsR0FDQSxtREFEQSxHQUVBLDJDQUgyQyxFQUkzQ2xPLEVBSjJDLENBQTdDO0FBTUQ7QUFDRjs7QUFDRCxPQUFLL3hDLEtBQUwsR0FBYSxLQUFLb2dELElBQUwsR0FDVGgrQyxTQURTLEdBRVQsS0FBS1QsR0FBTCxFQUZKO0FBR0QsQ0FuREQ7QUFxREE7Ozs7O0FBR0FxK0MsT0FBTyxDQUFDdCtDLFNBQVIsQ0FBa0JDLEdBQWxCLEdBQXdCLFNBQVNBLEdBQVQsR0FBZ0I7QUFDdEMweEMsWUFBVSxDQUFDLElBQUQsQ0FBVjtBQUNBLE1BQUlyekMsS0FBSjtBQUNBLE1BQUkreEMsRUFBRSxHQUFHLEtBQUtBLEVBQWQ7O0FBQ0EsTUFBSTtBQUNGL3hDLFNBQUssR0FBRyxLQUFLNDJDLE1BQUwsQ0FBWTFyQixJQUFaLENBQWlCNm1CLEVBQWpCLEVBQXFCQSxFQUFyQixDQUFSO0FBQ0QsR0FGRCxDQUVFLE9BQU9wVCxDQUFQLEVBQVU7QUFDVixRQUFJLEtBQUtzZ0IsSUFBVCxFQUFlO0FBQ2J0RCxpQkFBVyxDQUFDaGQsQ0FBRCxFQUFJb1QsRUFBSixFQUFTLDBCQUEyQixLQUFLdnZCLFVBQWhDLEdBQThDLElBQXZELENBQVg7QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNbWMsQ0FBTjtBQUNEO0FBQ0YsR0FSRCxTQVFVO0FBQ1I7QUFDQTtBQUNBLFFBQUksS0FBS2xHLElBQVQsRUFBZTtBQUNia2xCLGNBQVEsQ0FBQzM5QyxLQUFELENBQVI7QUFDRDs7QUFDRHN6QyxhQUFTO0FBQ1QsU0FBS3NOLFdBQUw7QUFDRDs7QUFDRCxTQUFPNWdELEtBQVA7QUFDRCxDQXRCRDtBQXdCQTs7Ozs7QUFHQWdnRCxPQUFPLENBQUN0K0MsU0FBUixDQUFrQnd4QyxNQUFsQixHQUEyQixTQUFTQSxNQUFULENBQWlCMkMsR0FBakIsRUFBc0I7QUFDL0MsTUFBSTczQixFQUFFLEdBQUc2M0IsR0FBRyxDQUFDNzNCLEVBQWI7O0FBQ0EsTUFBSSxDQUFDLEtBQUsyaUMsU0FBTCxDQUFlcHdDLEdBQWYsQ0FBbUJ5TixFQUFuQixDQUFMLEVBQTZCO0FBQzNCLFNBQUsyaUMsU0FBTCxDQUFlMVcsR0FBZixDQUFtQmpzQixFQUFuQjtBQUNBLFNBQUt5aUMsT0FBTCxDQUFhM3NDLElBQWIsQ0FBa0IraEMsR0FBbEI7O0FBQ0EsUUFBSSxDQUFDLEtBQUs2SyxNQUFMLENBQVlud0MsR0FBWixDQUFnQnlOLEVBQWhCLENBQUwsRUFBMEI7QUFDeEI2M0IsU0FBRyxDQUFDL0MsTUFBSixDQUFXLElBQVg7QUFDRDtBQUNGO0FBQ0YsQ0FURDtBQVdBOzs7OztBQUdBa04sT0FBTyxDQUFDdCtDLFNBQVIsQ0FBa0JrL0MsV0FBbEIsR0FBZ0MsU0FBU0EsV0FBVCxHQUF3QjtBQUN0RCxNQUFJdmxDLENBQUMsR0FBRyxLQUFLbWxDLElBQUwsQ0FBVS8vQyxNQUFsQjs7QUFDQSxTQUFPNGEsQ0FBQyxFQUFSLEVBQVk7QUFDVixRQUFJdzZCLEdBQUcsR0FBRyxLQUFLMkssSUFBTCxDQUFVbmxDLENBQVYsQ0FBVjs7QUFDQSxRQUFJLENBQUMsS0FBS3NsQyxTQUFMLENBQWVwd0MsR0FBZixDQUFtQnNsQyxHQUFHLENBQUM3M0IsRUFBdkIsQ0FBTCxFQUFpQztBQUMvQjYzQixTQUFHLENBQUM3QyxTQUFKLENBQWMsSUFBZDtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSTZOLEdBQUcsR0FBRyxLQUFLSCxNQUFmO0FBQ0EsT0FBS0EsTUFBTCxHQUFjLEtBQUtDLFNBQW5CO0FBQ0EsT0FBS0EsU0FBTCxHQUFpQkUsR0FBakI7QUFDQSxPQUFLRixTQUFMLENBQWVsdEIsS0FBZjtBQUNBb3RCLEtBQUcsR0FBRyxLQUFLTCxJQUFYO0FBQ0EsT0FBS0EsSUFBTCxHQUFZLEtBQUtDLE9BQWpCO0FBQ0EsT0FBS0EsT0FBTCxHQUFlSSxHQUFmO0FBQ0EsT0FBS0osT0FBTCxDQUFhaGdELE1BQWIsR0FBc0IsQ0FBdEI7QUFDRCxDQWhCRDtBQWtCQTs7Ozs7O0FBSUF1L0MsT0FBTyxDQUFDdCtDLFNBQVIsQ0FBa0I0N0IsTUFBbEIsR0FBMkIsU0FBU0EsTUFBVCxHQUFtQjtBQUM1QztBQUNBLE1BQUksS0FBSzhpQixJQUFULEVBQWU7QUFDYixTQUFLRyxLQUFMLEdBQWEsSUFBYjtBQUNELEdBRkQsTUFFTyxJQUFJLEtBQUtGLElBQVQsRUFBZTtBQUNwQixTQUFLckIsR0FBTDtBQUNELEdBRk0sTUFFQTtBQUNMYyxnQkFBWSxDQUFDLElBQUQsQ0FBWjtBQUNEO0FBQ0YsQ0FURDtBQVdBOzs7Ozs7QUFJQUUsT0FBTyxDQUFDdCtDLFNBQVIsQ0FBa0JzOUMsR0FBbEIsR0FBd0IsU0FBU0EsR0FBVCxHQUFnQjtBQUN0QyxNQUFJLEtBQUtzQixNQUFULEVBQWlCO0FBQ2YsUUFBSXRnRCxLQUFLLEdBQUcsS0FBSzJCLEdBQUwsRUFBWjs7QUFDQSxRQUNFM0IsS0FBSyxLQUFLLEtBQUtBLEtBQWYsSUFDQTtBQUNBO0FBQ0E7QUFDQXdxQyxjQUFVLENBQUN4cUMsS0FBRCxDQUpWLElBS0EsS0FBS3k0QixJQU5QLEVBT0U7QUFDQTtBQUNBLFVBQUk3VCxRQUFRLEdBQUcsS0FBSzVrQixLQUFwQjtBQUNBLFdBQUtBLEtBQUwsR0FBYUEsS0FBYjs7QUFDQSxVQUFJLEtBQUtpL0MsSUFBVCxFQUFlO0FBQ2IsWUFBSTtBQUNGLGVBQUsvQixFQUFMLENBQVFoeUIsSUFBUixDQUFhLEtBQUs2bUIsRUFBbEIsRUFBc0IveEMsS0FBdEIsRUFBNkI0a0IsUUFBN0I7QUFDRCxTQUZELENBRUUsT0FBTytaLENBQVAsRUFBVTtBQUNWZ2QscUJBQVcsQ0FBQ2hkLENBQUQsRUFBSSxLQUFLb1QsRUFBVCxFQUFjLDRCQUE2QixLQUFLdnZCLFVBQWxDLEdBQWdELElBQTlELENBQVg7QUFDRDtBQUNGLE9BTkQsTUFNTztBQUNMLGFBQUswNkIsRUFBTCxDQUFRaHlCLElBQVIsQ0FBYSxLQUFLNm1CLEVBQWxCLEVBQXNCL3hDLEtBQXRCLEVBQTZCNGtCLFFBQTdCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsQ0F6QkQ7QUEyQkE7Ozs7OztBQUlBbzdCLE9BQU8sQ0FBQ3QrQyxTQUFSLENBQWtCby9DLFFBQWxCLEdBQTZCLFNBQVNBLFFBQVQsR0FBcUI7QUFDaEQsT0FBSzlnRCxLQUFMLEdBQWEsS0FBSzJCLEdBQUwsRUFBYjtBQUNBLE9BQUs0K0MsS0FBTCxHQUFhLEtBQWI7QUFDRCxDQUhEO0FBS0E7Ozs7O0FBR0FQLE9BQU8sQ0FBQ3QrQyxTQUFSLENBQWtCdXhDLE1BQWxCLEdBQTJCLFNBQVNBLE1BQVQsR0FBbUI7QUFDNUMsTUFBSTUzQixDQUFDLEdBQUcsS0FBS21sQyxJQUFMLENBQVUvL0MsTUFBbEI7O0FBQ0EsU0FBTzRhLENBQUMsRUFBUixFQUFZO0FBQ1YsU0FBS21sQyxJQUFMLENBQVVubEMsQ0FBVixFQUFhNDNCLE1BQWI7QUFDRDtBQUNGLENBTEQ7QUFPQTs7Ozs7QUFHQStNLE9BQU8sQ0FBQ3QrQyxTQUFSLENBQWtCcS9DLFFBQWxCLEdBQTZCLFNBQVNBLFFBQVQsR0FBcUI7QUFDaEQsTUFBSSxLQUFLVCxNQUFULEVBQWlCO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsUUFBSSxDQUFDLEtBQUt2TyxFQUFMLENBQVFpUCxpQkFBYixFQUFnQztBQUM5QnhWLFlBQU0sQ0FBQyxLQUFLdUcsRUFBTCxDQUFRb08sU0FBVCxFQUFvQixJQUFwQixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSTlrQyxDQUFDLEdBQUcsS0FBS21sQyxJQUFMLENBQVUvL0MsTUFBbEI7O0FBQ0EsV0FBTzRhLENBQUMsRUFBUixFQUFZO0FBQ1YsV0FBS21sQyxJQUFMLENBQVVubEMsQ0FBVixFQUFhMjNCLFNBQWIsQ0FBdUIsSUFBdkI7QUFDRDs7QUFDRCxTQUFLc04sTUFBTCxHQUFjLEtBQWQ7QUFDRDtBQUNGLENBZEQ7O0FBZ0JBLElBQUlXLElBQUo7QUFDQSxJQUFJcnhCLE9BQUo7O0FBRUEsSUFBSWlQLElBQUosRUFBMkM7QUFDekMsTUFBSXFpQixJQUFJLEdBQUczUyxTQUFTLElBQUkzUCxNQUFNLENBQUMrUixXQUEvQjtBQUNBOztBQUNBLE1BQ0V1USxJQUFJLElBQ0pBLElBQUksQ0FBQ0QsSUFETCxJQUVBQyxJQUFJLENBQUN0eEIsT0FGTCxJQUdBc3hCLElBQUksQ0FBQ0MsVUFITCxJQUlBRCxJQUFJLENBQUNFLGFBTFAsRUFNRTtBQUNBSCxRQUFJLEdBQUcsY0FBVXpOLEdBQVYsRUFBZTtBQUFFLGFBQU8wTixJQUFJLENBQUNELElBQUwsQ0FBVXpOLEdBQVYsQ0FBUDtBQUF3QixLQUFoRDs7QUFDQTVqQixXQUFPLEdBQUcsaUJBQVV6cUIsSUFBVixFQUFnQms4QyxRQUFoQixFQUEwQkMsTUFBMUIsRUFBa0M7QUFDMUNKLFVBQUksQ0FBQ3R4QixPQUFMLENBQWF6cUIsSUFBYixFQUFtQms4QyxRQUFuQixFQUE2QkMsTUFBN0I7QUFDQUosVUFBSSxDQUFDQyxVQUFMLENBQWdCRSxRQUFoQjtBQUNBSCxVQUFJLENBQUNDLFVBQUwsQ0FBZ0JHLE1BQWhCLEVBSDBDLENBSTFDO0FBQ0QsS0FMRDtBQU1EO0FBQ0Y7QUFFRDs7O0FBRUEsSUFBSUMsY0FBYyxHQUFHNVYsTUFBTSxDQUFDLFVBQVV4bUMsSUFBVixFQUFnQjtBQUMxQyxNQUFJcThDLE9BQU8sR0FBR3I4QyxJQUFJLENBQUM5QyxNQUFMLENBQVksQ0FBWixNQUFtQixHQUFqQztBQUNBOEMsTUFBSSxHQUFHcThDLE9BQU8sR0FBR3I4QyxJQUFJLENBQUMwL0IsS0FBTCxDQUFXLENBQVgsQ0FBSCxHQUFtQjEvQixJQUFqQztBQUNBLE1BQUl5b0MsSUFBSSxHQUFHem9DLElBQUksQ0FBQzlDLE1BQUwsQ0FBWSxDQUFaLE1BQW1CLEdBQTlCLENBSDBDLENBR1A7O0FBQ25DOEMsTUFBSSxHQUFHeW9DLElBQUksR0FBR3pvQyxJQUFJLENBQUMwL0IsS0FBTCxDQUFXLENBQVgsQ0FBSCxHQUFtQjEvQixJQUE5QjtBQUNBLE1BQUkwMkMsT0FBTyxHQUFHMTJDLElBQUksQ0FBQzlDLE1BQUwsQ0FBWSxDQUFaLE1BQW1CLEdBQWpDO0FBQ0E4QyxNQUFJLEdBQUcwMkMsT0FBTyxHQUFHMTJDLElBQUksQ0FBQzAvQixLQUFMLENBQVcsQ0FBWCxDQUFILEdBQW1CMS9CLElBQWpDO0FBQ0EsU0FBTztBQUNMQSxRQUFJLEVBQUVBLElBREQ7QUFFTHlvQyxRQUFJLEVBQUVBLElBRkQ7QUFHTGlPLFdBQU8sRUFBRUEsT0FISjtBQUlMMkYsV0FBTyxFQUFFQTtBQUpKLEdBQVA7QUFNRCxDQWIwQixDQUEzQjs7QUFlQSxTQUFTQyxlQUFULENBQTBCQyxHQUExQixFQUErQjNQLEVBQS9CLEVBQW1DO0FBQ2pDLFdBQVM0UCxPQUFULEdBQW9CO0FBQ2xCLFFBQUlDLFdBQVcsR0FBR3BoRCxTQUFsQjtBQUVBLFFBQUlraEQsR0FBRyxHQUFHQyxPQUFPLENBQUNELEdBQWxCOztBQUNBLFFBQUlwZ0MsS0FBSyxDQUFDaWUsT0FBTixDQUFjbWlCLEdBQWQsQ0FBSixFQUF3QjtBQUN0QixVQUFJeE0sTUFBTSxHQUFHd00sR0FBRyxDQUFDN2MsS0FBSixFQUFiOztBQUNBLFdBQUssSUFBSXhwQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNjVCLE1BQU0sQ0FBQ3owQyxNQUEzQixFQUFtQzRhLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMwZ0MsK0JBQXVCLENBQUM3RyxNQUFNLENBQUM3NUIsQ0FBRCxDQUFQLEVBQVksSUFBWixFQUFrQnVtQyxXQUFsQixFQUErQjdQLEVBQS9CLEVBQW1DLGNBQW5DLENBQXZCO0FBQ0Q7QUFDRixLQUxELE1BS087QUFDTDtBQUNBLGFBQU9nSyx1QkFBdUIsQ0FBQzJGLEdBQUQsRUFBTSxJQUFOLEVBQVlsaEQsU0FBWixFQUF1QnV4QyxFQUF2QixFQUEyQixjQUEzQixDQUE5QjtBQUNEO0FBQ0Y7O0FBQ0Q0UCxTQUFPLENBQUNELEdBQVIsR0FBY0EsR0FBZDtBQUNBLFNBQU9DLE9BQVA7QUFDRDs7QUFFRCxTQUFTRSxlQUFULENBQ0VDLEVBREYsRUFFRUMsS0FGRixFQUdFOVgsR0FIRixFQUlFdUIsTUFKRixFQUtFd1csaUJBTEYsRUFNRWpRLEVBTkYsRUFPRTtBQUNBLE1BQUk1c0MsSUFBSixFQUFVNm9DLEdBQVYsRUFBZWpFLEdBQWYsRUFBb0IxVixHQUFwQixFQUF5QjBELEtBQXpCOztBQUNBLE9BQUs1eUIsSUFBTCxJQUFhMjhDLEVBQWIsRUFBaUI7QUFDZjlULE9BQUcsR0FBR2pFLEdBQUcsR0FBRytYLEVBQUUsQ0FBQzM4QyxJQUFELENBQWQ7QUFDQWt2QixPQUFHLEdBQUcwdEIsS0FBSyxDQUFDNThDLElBQUQsQ0FBWDtBQUNBNHlCLFNBQUssR0FBR3dwQixjQUFjLENBQUNwOEMsSUFBRCxDQUF0Qjs7QUFDQSxRQUFJZ2xDLE9BQU8sQ0FBQ0osR0FBRCxDQUFYLEVBQWtCO0FBQ2hCbEwsV0FBQSxJQUF5Q3JELElBQUksQ0FDM0MsaUNBQWtDekQsS0FBSyxDQUFDNXlCLElBQXhDLEdBQWdELFVBQWhELEdBQTZEcVcsTUFBTSxDQUFDdXVCLEdBQUQsQ0FEeEIsRUFFM0NnSSxFQUYyQyxDQUE3QztBQUlELEtBTEQsTUFLTyxJQUFJNUgsT0FBTyxDQUFDOVYsR0FBRCxDQUFYLEVBQWtCO0FBQ3ZCLFVBQUk4VixPQUFPLENBQUNKLEdBQUcsQ0FBQzJYLEdBQUwsQ0FBWCxFQUFzQjtBQUNwQjNYLFdBQUcsR0FBRytYLEVBQUUsQ0FBQzM4QyxJQUFELENBQUYsR0FBV3M4QyxlQUFlLENBQUMxWCxHQUFELEVBQU1nSSxFQUFOLENBQWhDO0FBQ0Q7O0FBQ0QsVUFBSTFILE1BQU0sQ0FBQ3RTLEtBQUssQ0FBQzZWLElBQVAsQ0FBVixFQUF3QjtBQUN0QjdELFdBQUcsR0FBRytYLEVBQUUsQ0FBQzM4QyxJQUFELENBQUYsR0FBVzY4QyxpQkFBaUIsQ0FBQ2pxQixLQUFLLENBQUM1eUIsSUFBUCxFQUFhNGtDLEdBQWIsRUFBa0JoUyxLQUFLLENBQUM4akIsT0FBeEIsQ0FBbEM7QUFDRDs7QUFDRDVSLFNBQUcsQ0FBQ2xTLEtBQUssQ0FBQzV5QixJQUFQLEVBQWE0a0MsR0FBYixFQUFrQmhTLEtBQUssQ0FBQzhqQixPQUF4QixFQUFpQzlqQixLQUFLLENBQUN5cEIsT0FBdkMsRUFBZ0R6cEIsS0FBSyxDQUFDa3FCLE1BQXRELENBQUg7QUFDRCxLQVJNLE1BUUEsSUFBSWxZLEdBQUcsS0FBSzFWLEdBQVosRUFBaUI7QUFDdEJBLFNBQUcsQ0FBQ3F0QixHQUFKLEdBQVUzWCxHQUFWO0FBQ0ErWCxRQUFFLENBQUMzOEMsSUFBRCxDQUFGLEdBQVdrdkIsR0FBWDtBQUNEO0FBQ0Y7O0FBQ0QsT0FBS2x2QixJQUFMLElBQWE0OEMsS0FBYixFQUFvQjtBQUNsQixRQUFJNVgsT0FBTyxDQUFDMlgsRUFBRSxDQUFDMzhDLElBQUQsQ0FBSCxDQUFYLEVBQXVCO0FBQ3JCNHlCLFdBQUssR0FBR3dwQixjQUFjLENBQUNwOEMsSUFBRCxDQUF0QjtBQUNBcW1DLFlBQU0sQ0FBQ3pULEtBQUssQ0FBQzV5QixJQUFQLEVBQWE0OEMsS0FBSyxDQUFDNThDLElBQUQsQ0FBbEIsRUFBMEI0eUIsS0FBSyxDQUFDOGpCLE9BQWhDLENBQU47QUFDRDtBQUNGO0FBQ0Y7QUFFRDs7O0FBRUEsU0FBU3FHLGNBQVQsQ0FBeUJsVSxHQUF6QixFQUE4Qm1VLE9BQTlCLEVBQXVDOUosSUFBdkMsRUFBNkM7QUFDM0MsTUFBSXJLLEdBQUcsWUFBWXVGLEtBQW5CLEVBQTBCO0FBQ3hCdkYsT0FBRyxHQUFHQSxHQUFHLENBQUNodkIsSUFBSixDQUFTcTVCLElBQVQsS0FBa0JySyxHQUFHLENBQUNodkIsSUFBSixDQUFTcTVCLElBQVQsR0FBZ0IsRUFBbEMsQ0FBTjtBQUNEOztBQUNELE1BQUlzSixPQUFKO0FBQ0EsTUFBSVMsT0FBTyxHQUFHcFUsR0FBRyxDQUFDbVUsT0FBRCxDQUFqQjs7QUFFQSxXQUFTRSxXQUFULEdBQXdCO0FBQ3RCaEssUUFBSSxDQUFDNXpDLEtBQUwsQ0FBVyxJQUFYLEVBQWlCakUsU0FBakIsRUFEc0IsQ0FFdEI7QUFDQTs7QUFDQWdyQyxVQUFNLENBQUNtVyxPQUFPLENBQUNELEdBQVQsRUFBY1csV0FBZCxDQUFOO0FBQ0Q7O0FBRUQsTUFBSWxZLE9BQU8sQ0FBQ2lZLE9BQUQsQ0FBWCxFQUFzQjtBQUNwQjtBQUNBVCxXQUFPLEdBQUdGLGVBQWUsQ0FBQyxDQUFDWSxXQUFELENBQUQsQ0FBekI7QUFDRCxHQUhELE1BR087QUFDTDtBQUNBLFFBQUlqWSxLQUFLLENBQUNnWSxPQUFPLENBQUNWLEdBQVQsQ0FBTCxJQUFzQnJYLE1BQU0sQ0FBQytYLE9BQU8sQ0FBQ0UsTUFBVCxDQUFoQyxFQUFrRDtBQUNoRDtBQUNBWCxhQUFPLEdBQUdTLE9BQVY7QUFDQVQsYUFBTyxDQUFDRCxHQUFSLENBQVk1dEMsSUFBWixDQUFpQnV1QyxXQUFqQjtBQUNELEtBSkQsTUFJTztBQUNMO0FBQ0FWLGFBQU8sR0FBR0YsZUFBZSxDQUFDLENBQUNXLE9BQUQsRUFBVUMsV0FBVixDQUFELENBQXpCO0FBQ0Q7QUFDRjs7QUFFRFYsU0FBTyxDQUFDVyxNQUFSLEdBQWlCLElBQWpCO0FBQ0F0VSxLQUFHLENBQUNtVSxPQUFELENBQUgsR0FBZVIsT0FBZjtBQUNEO0FBRUQ7OztBQUVBLFNBQVNZLHlCQUFULENBQ0V2akMsSUFERixFQUVFOHdCLElBRkYsRUFHRTBELEdBSEYsRUFJRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUl1RyxXQUFXLEdBQUdqSyxJQUFJLENBQUMvUyxPQUFMLENBQWEvRSxLQUEvQjs7QUFDQSxNQUFJbVMsT0FBTyxDQUFDNFAsV0FBRCxDQUFYLEVBQTBCO0FBQ3hCO0FBQ0Q7O0FBQ0QsTUFBSTlhLEdBQUcsR0FBRyxFQUFWO0FBQ0EsTUFBSXVqQixLQUFLLEdBQUd4akMsSUFBSSxDQUFDd2pDLEtBQWpCO0FBQ0EsTUFBSXhxQixLQUFLLEdBQUdoWixJQUFJLENBQUNnWixLQUFqQjs7QUFDQSxNQUFJb1MsS0FBSyxDQUFDb1ksS0FBRCxDQUFMLElBQWdCcFksS0FBSyxDQUFDcFMsS0FBRCxDQUF6QixFQUFrQztBQUNoQyxTQUFLLElBQUk5VyxHQUFULElBQWdCNjRCLFdBQWhCLEVBQTZCO0FBQzNCLFVBQUkwSSxNQUFNLEdBQUdyVyxTQUFTLENBQUNsckIsR0FBRCxDQUF0Qjs7QUFDQSxVQUFJMmQsSUFBSixFQUEyQztBQUN6QyxZQUFJNmpCLGNBQWMsR0FBR3hoQyxHQUFHLENBQUM5ZCxXQUFKLEVBQXJCOztBQUNBLFlBQ0U4ZCxHQUFHLEtBQUt3aEMsY0FBUixJQUNBRixLQURBLElBQ1M5VyxRQUFRLENBQUM4VyxLQUFELEVBQVFFLGNBQVIsQ0FGbkIsRUFHRTtBQUNBbFIsYUFBRyxDQUNELFlBQVlrUixjQUFaLEdBQTZCLDRCQUE3QixHQUNDaFIsbUJBQW1CLENBQUM4QixHQUFHLElBQUkxRCxJQUFSLENBRHBCLEdBQ3FDLGlDQURyQyxHQUVBLEtBRkEsR0FFUTV1QixHQUZSLEdBRWMsTUFGZCxHQUdBLGdFQUhBLEdBSUEsbUVBSkEsR0FLQSx1Q0FMQSxHQUswQ3VoQyxNQUwxQyxHQUttRCxrQkFMbkQsR0FLd0V2aEMsR0FMeEUsR0FLOEUsS0FON0UsQ0FBSDtBQVFEO0FBQ0Y7O0FBQ0R5aEMsZUFBUyxDQUFDMWpCLEdBQUQsRUFBTWpILEtBQU4sRUFBYTlXLEdBQWIsRUFBa0J1aEMsTUFBbEIsRUFBMEIsSUFBMUIsQ0FBVCxJQUNBRSxTQUFTLENBQUMxakIsR0FBRCxFQUFNdWpCLEtBQU4sRUFBYXRoQyxHQUFiLEVBQWtCdWhDLE1BQWxCLEVBQTBCLEtBQTFCLENBRFQ7QUFFRDtBQUNGOztBQUNELFNBQU94akIsR0FBUDtBQUNEOztBQUVELFNBQVMwakIsU0FBVCxDQUNFMWpCLEdBREYsRUFFRXhCLElBRkYsRUFHRXZjLEdBSEYsRUFJRXVoQyxNQUpGLEVBS0VHLFFBTEYsRUFNRTtBQUNBLE1BQUl4WSxLQUFLLENBQUMzTSxJQUFELENBQVQsRUFBaUI7QUFDZixRQUFJaU8sUUFBUSxDQUFDak8sSUFBRCxFQUFPdmMsR0FBUCxDQUFaLEVBQXlCO0FBQ3ZCK2QsU0FBRyxDQUFDL2QsR0FBRCxDQUFILEdBQVd1YyxJQUFJLENBQUN2YyxHQUFELENBQWY7O0FBQ0EsVUFBSSxDQUFDMGhDLFFBQUwsRUFBZTtBQUNiLGVBQU9ubEIsSUFBSSxDQUFDdmMsR0FBRCxDQUFYO0FBQ0Q7O0FBQ0QsYUFBTyxJQUFQO0FBQ0QsS0FORCxNQU1PLElBQUl3cUIsUUFBUSxDQUFDak8sSUFBRCxFQUFPZ2xCLE1BQVAsQ0FBWixFQUE0QjtBQUNqQ3hqQixTQUFHLENBQUMvZCxHQUFELENBQUgsR0FBV3VjLElBQUksQ0FBQ2dsQixNQUFELENBQWY7O0FBQ0EsVUFBSSxDQUFDRyxRQUFMLEVBQWU7QUFDYixlQUFPbmxCLElBQUksQ0FBQ2dsQixNQUFELENBQVg7QUFDRDs7QUFDRCxhQUFPLElBQVA7QUFDRDtBQUNGOztBQUNELFNBQU8sS0FBUDtBQUNEO0FBRUQ7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTSSx1QkFBVCxDQUFrQ3BQLFFBQWxDLEVBQTRDO0FBQzFDLE9BQUssSUFBSXA0QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbzRCLFFBQVEsQ0FBQ2h6QyxNQUE3QixFQUFxQzRhLENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsUUFBSWlHLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY2tVLFFBQVEsQ0FBQ3A0QixDQUFELENBQXRCLENBQUosRUFBZ0M7QUFDOUIsYUFBT2lHLEtBQUssQ0FBQzVmLFNBQU4sQ0FBZ0IrYyxNQUFoQixDQUF1QmhhLEtBQXZCLENBQTZCLEVBQTdCLEVBQWlDZ3ZDLFFBQWpDLENBQVA7QUFDRDtBQUNGOztBQUNELFNBQU9BLFFBQVA7QUFDRCxDLENBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNxUCxpQkFBVCxDQUE0QnJQLFFBQTVCLEVBQXNDO0FBQ3BDLFNBQU9sSixXQUFXLENBQUNrSixRQUFELENBQVgsR0FDSCxDQUFDc0IsZUFBZSxDQUFDdEIsUUFBRCxDQUFoQixDQURHLEdBRUhueUIsS0FBSyxDQUFDaWUsT0FBTixDQUFja1UsUUFBZCxJQUNFc1Asc0JBQXNCLENBQUN0UCxRQUFELENBRHhCLEdBRUVyeEMsU0FKTjtBQUtEOztBQUVELFNBQVM0Z0QsVUFBVCxDQUFxQmxPLElBQXJCLEVBQTJCO0FBQ3pCLFNBQU8xSyxLQUFLLENBQUMwSyxJQUFELENBQUwsSUFBZTFLLEtBQUssQ0FBQzBLLElBQUksQ0FBQzFtQyxJQUFOLENBQXBCLElBQW1DazhCLE9BQU8sQ0FBQ3dLLElBQUksQ0FBQ1QsU0FBTixDQUFqRDtBQUNEOztBQUVELFNBQVMwTyxzQkFBVCxDQUFpQ3RQLFFBQWpDLEVBQTJDd1AsV0FBM0MsRUFBd0Q7QUFDdEQsTUFBSWhrQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUk1akIsQ0FBSixFQUFPNHdCLENBQVAsRUFBVTM5QixTQUFWLEVBQXFCMHRCLElBQXJCOztBQUNBLE9BQUszZ0IsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHbzRCLFFBQVEsQ0FBQ2h6QyxNQUF6QixFQUFpQzRhLENBQUMsRUFBbEMsRUFBc0M7QUFDcEM0d0IsS0FBQyxHQUFHd0gsUUFBUSxDQUFDcDRCLENBQUQsQ0FBWjs7QUFDQSxRQUFJOHVCLE9BQU8sQ0FBQzhCLENBQUQsQ0FBUCxJQUFjLE9BQU9BLENBQVAsS0FBYSxTQUEvQixFQUEwQztBQUFFO0FBQVU7O0FBQ3REMzlCLGFBQVMsR0FBRzJ3QixHQUFHLENBQUN4K0IsTUFBSixHQUFhLENBQXpCO0FBQ0F1N0IsUUFBSSxHQUFHaUQsR0FBRyxDQUFDM3dCLFNBQUQsQ0FBVixDQUpvQyxDQUtwQzs7QUFDQSxRQUFJZ1QsS0FBSyxDQUFDaWUsT0FBTixDQUFjME0sQ0FBZCxDQUFKLEVBQXNCO0FBQ3BCLFVBQUlBLENBQUMsQ0FBQ3hyQyxNQUFGLEdBQVcsQ0FBZixFQUFrQjtBQUNoQndyQyxTQUFDLEdBQUc4VyxzQkFBc0IsQ0FBQzlXLENBQUQsRUFBSyxDQUFDZ1gsV0FBVyxJQUFJLEVBQWhCLElBQXNCLEdBQXRCLEdBQTRCNW5DLENBQWpDLENBQTFCLENBRGdCLENBRWhCOztBQUNBLFlBQUkybkMsVUFBVSxDQUFDL1csQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFWLElBQW9CK1csVUFBVSxDQUFDaG5CLElBQUQsQ0FBbEMsRUFBMEM7QUFDeENpRCxhQUFHLENBQUMzd0IsU0FBRCxDQUFILEdBQWlCeW1DLGVBQWUsQ0FBQy9ZLElBQUksQ0FBQzV0QixJQUFMLEdBQWE2OUIsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFPNzlCLElBQXBCLENBQWhDO0FBQ0E2OUIsV0FBQyxDQUFDaVgsS0FBRjtBQUNEOztBQUNEamtCLFdBQUcsQ0FBQ25yQixJQUFKLENBQVNyUCxLQUFULENBQWV3NkIsR0FBZixFQUFvQmdOLENBQXBCO0FBQ0Q7QUFDRixLQVZELE1BVU8sSUFBSTFCLFdBQVcsQ0FBQzBCLENBQUQsQ0FBZixFQUFvQjtBQUN6QixVQUFJK1csVUFBVSxDQUFDaG5CLElBQUQsQ0FBZCxFQUFzQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQWlELFdBQUcsQ0FBQzN3QixTQUFELENBQUgsR0FBaUJ5bUMsZUFBZSxDQUFDL1ksSUFBSSxDQUFDNXRCLElBQUwsR0FBWTY5QixDQUFiLENBQWhDO0FBQ0QsT0FMRCxNQUtPLElBQUlBLENBQUMsS0FBSyxFQUFWLEVBQWM7QUFDbkI7QUFDQWhOLFdBQUcsQ0FBQ25yQixJQUFKLENBQVNpaEMsZUFBZSxDQUFDOUksQ0FBRCxDQUF4QjtBQUNEO0FBQ0YsS0FWTSxNQVVBO0FBQ0wsVUFBSStXLFVBQVUsQ0FBQy9XLENBQUQsQ0FBVixJQUFpQitXLFVBQVUsQ0FBQ2huQixJQUFELENBQS9CLEVBQXVDO0FBQ3JDO0FBQ0FpRCxXQUFHLENBQUMzd0IsU0FBRCxDQUFILEdBQWlCeW1DLGVBQWUsQ0FBQy9ZLElBQUksQ0FBQzV0QixJQUFMLEdBQVk2OUIsQ0FBQyxDQUFDNzlCLElBQWYsQ0FBaEM7QUFDRCxPQUhELE1BR087QUFDTDtBQUNBLFlBQUlpOEIsTUFBTSxDQUFDb0osUUFBUSxDQUFDMFAsUUFBVixDQUFOLElBQ0YvWSxLQUFLLENBQUM2QixDQUFDLENBQUN1SCxHQUFILENBREgsSUFFRnJKLE9BQU8sQ0FBQzhCLENBQUMsQ0FBQy9xQixHQUFILENBRkwsSUFHRmtwQixLQUFLLENBQUM2WSxXQUFELENBSFAsRUFHc0I7QUFDcEJoWCxXQUFDLENBQUMvcUIsR0FBRixHQUFRLFlBQVkraEMsV0FBWixHQUEwQixHQUExQixHQUFnQzVuQyxDQUFoQyxHQUFvQyxJQUE1QztBQUNEOztBQUNENGpCLFdBQUcsQ0FBQ25yQixJQUFKLENBQVNtNEIsQ0FBVDtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPaE4sR0FBUDtBQUNEO0FBRUQ7OztBQUVBLElBQUlta0IsU0FBSjs7QUFFQSxJQUFJdmtCLElBQUosRUFBMkM7QUFDekMsTUFBSXdrQixjQUFjLEdBQUdsWSxPQUFPLENBQzFCLDJDQUNBLGdGQURBLEdBRUEsd0VBRkEsR0FHQSxTQUowQixDQUloQjtBQUpnQixHQUE1Qjs7QUFPQSxNQUFJbVksY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVcDhCLE1BQVYsRUFBa0JoRyxHQUFsQixFQUF1QjtBQUMxQ3NhLFFBQUksQ0FDRiwwQkFBMEJ0YSxHQUExQixHQUFnQyx3Q0FBaEMsR0FDQSxzRUFEQSxHQUVBLCtEQUZBLEdBR0EsNkJBSEEsR0FJQSxnRkFMRSxFQU1GZ0csTUFORSxDQUFKO0FBUUQsR0FURDs7QUFXQSxNQUFJcThCLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FBVXI4QixNQUFWLEVBQWtCaEcsR0FBbEIsRUFBdUI7QUFDOUNzYSxRQUFJLENBQ0YsZ0JBQWdCdGEsR0FBaEIsR0FBc0IsbUNBQXRCLEdBQTREQSxHQUE1RCxHQUFrRSxhQUFsRSxHQUNBLDZFQURBLEdBRUEsc0NBRkEsR0FHQSxxQ0FKRSxFQUtGZ0csTUFMRSxDQUFKO0FBT0QsR0FSRDs7QUFVQSxNQUFJczhCLFFBQVEsR0FDVixPQUFPQyxLQUFQLEtBQWlCLFdBQWpCLElBQWdDNVQsUUFBUSxDQUFDNFQsS0FBRCxDQUQxQzs7QUFHQSxNQUFJRCxRQUFKLEVBQWM7QUFDWixRQUFJRSxpQkFBaUIsR0FBR3ZZLE9BQU8sQ0FBQyw2Q0FBRCxDQUEvQjtBQUNBb0YsVUFBTSxDQUFDUSxRQUFQLEdBQWtCLElBQUkwUyxLQUFKLENBQVVsVCxNQUFNLENBQUNRLFFBQWpCLEVBQTJCO0FBQzNDcjBCLFNBQUcsRUFBRSxTQUFTQSxHQUFULENBQWN3SyxNQUFkLEVBQXNCaEcsR0FBdEIsRUFBMkJsaEIsS0FBM0IsRUFBa0M7QUFDckMsWUFBSTBqRCxpQkFBaUIsQ0FBQ3hpQyxHQUFELENBQXJCLEVBQTRCO0FBQzFCc2EsY0FBSSxDQUFFLDhEQUE4RHRhLEdBQWhFLENBQUo7QUFDQSxpQkFBTyxLQUFQO0FBQ0QsU0FIRCxNQUdPO0FBQ0xnRyxnQkFBTSxDQUFDaEcsR0FBRCxDQUFOLEdBQWNsaEIsS0FBZDtBQUNBLGlCQUFPLElBQVA7QUFDRDtBQUNGO0FBVDBDLEtBQTNCLENBQWxCO0FBV0Q7O0FBRUQsTUFBSTJqRCxVQUFVLEdBQUc7QUFDZnB6QyxPQUFHLEVBQUUsU0FBU0EsR0FBVCxDQUFjMlcsTUFBZCxFQUFzQmhHLEdBQXRCLEVBQTJCO0FBQzlCLFVBQUkzUSxHQUFHLEdBQUcyUSxHQUFHLElBQUlnRyxNQUFqQjtBQUNBLFVBQUkwOEIsU0FBUyxHQUFHUCxjQUFjLENBQUNuaUMsR0FBRCxDQUFkLElBQ2IsT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkJBLEdBQUcsQ0FBQzdlLE1BQUosQ0FBVyxDQUFYLE1BQWtCLEdBQTdDLElBQW9ELEVBQUU2ZSxHQUFHLElBQUlnRyxNQUFNLENBQUMyOEIsS0FBaEIsQ0FEdkQ7O0FBRUEsVUFBSSxDQUFDdHpDLEdBQUQsSUFBUSxDQUFDcXpDLFNBQWIsRUFBd0I7QUFDdEIsWUFBSTFpQyxHQUFHLElBQUlnRyxNQUFNLENBQUMyOEIsS0FBbEIsRUFBeUI7QUFBRU4sNEJBQWtCLENBQUNyOEIsTUFBRCxFQUFTaEcsR0FBVCxDQUFsQjtBQUFrQyxTQUE3RCxNQUNLO0FBQUVvaUMsd0JBQWMsQ0FBQ3A4QixNQUFELEVBQVNoRyxHQUFULENBQWQ7QUFBOEI7QUFDdEM7O0FBQ0QsYUFBTzNRLEdBQUcsSUFBSSxDQUFDcXpDLFNBQWY7QUFDRDtBQVZjLEdBQWpCO0FBYUEsTUFBSUUsVUFBVSxHQUFHO0FBQ2ZuaUQsT0FBRyxFQUFFLFNBQVNBLEdBQVQsQ0FBY3VsQixNQUFkLEVBQXNCaEcsR0FBdEIsRUFBMkI7QUFDOUIsVUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQixFQUFFQSxHQUFHLElBQUlnRyxNQUFULENBQS9CLEVBQWlEO0FBQy9DLFlBQUloRyxHQUFHLElBQUlnRyxNQUFNLENBQUMyOEIsS0FBbEIsRUFBeUI7QUFBRU4sNEJBQWtCLENBQUNyOEIsTUFBRCxFQUFTaEcsR0FBVCxDQUFsQjtBQUFrQyxTQUE3RCxNQUNLO0FBQUVvaUMsd0JBQWMsQ0FBQ3A4QixNQUFELEVBQVNoRyxHQUFULENBQWQ7QUFBOEI7QUFDdEM7O0FBQ0QsYUFBT2dHLE1BQU0sQ0FBQ2hHLEdBQUQsQ0FBYjtBQUNEO0FBUGMsR0FBakI7O0FBVUFraUMsV0FBUyxHQUFHLFNBQVNBLFNBQVQsQ0FBb0JyUixFQUFwQixFQUF3QjtBQUNsQyxRQUFJeVIsUUFBSixFQUFjO0FBQ1o7QUFDQSxVQUFJem1CLE9BQU8sR0FBR2dWLEVBQUUsQ0FBQ00sUUFBakI7QUFDQSxVQUFJMFIsUUFBUSxHQUFHaG5CLE9BQU8sQ0FBQ2luQixNQUFSLElBQWtCam5CLE9BQU8sQ0FBQ2luQixNQUFSLENBQWVDLGFBQWpDLEdBQ1hILFVBRFcsR0FFWEgsVUFGSjtBQUdBNVIsUUFBRSxDQUFDbVMsWUFBSCxHQUFrQixJQUFJVCxLQUFKLENBQVUxUixFQUFWLEVBQWNnUyxRQUFkLENBQWxCO0FBQ0QsS0FQRCxNQU9PO0FBQ0xoUyxRQUFFLENBQUNtUyxZQUFILEdBQWtCblMsRUFBbEI7QUFDRDtBQUNGLEdBWEQ7QUFZRDtBQUVEOzs7QUFFQSxJQUFJb1Msd0JBQXdCLEdBQUc7QUFDN0J2aUQsWUFBVSxFQUFFLElBRGlCO0FBRTdCQyxjQUFZLEVBQUUsSUFGZTtBQUc3QkYsS0FBRyxFQUFFbXJDLElBSHdCO0FBSTdCcHdCLEtBQUcsRUFBRW93QjtBQUp3QixDQUEvQjs7QUFPQSxTQUFTc1gsS0FBVCxDQUFnQmw5QixNQUFoQixFQUF3Qm05QixTQUF4QixFQUFtQ25qQyxHQUFuQyxFQUF3QztBQUN0Q2lqQywwQkFBd0IsQ0FBQ3hpRCxHQUF6QixHQUErQixTQUFTMmlELFdBQVQsR0FBd0I7QUFDckQsV0FBTyxLQUFLRCxTQUFMLEVBQWdCbmpDLEdBQWhCLENBQVA7QUFDRCxHQUZEOztBQUdBaWpDLDBCQUF3QixDQUFDem5DLEdBQXpCLEdBQStCLFNBQVM2bkMsV0FBVCxDQUFzQnpkLEdBQXRCLEVBQTJCO0FBQ3hELFNBQUt1ZCxTQUFMLEVBQWdCbmpDLEdBQWhCLElBQXVCNGxCLEdBQXZCO0FBQ0QsR0FGRDs7QUFHQWpuQyxRQUFNLENBQUNDLGNBQVAsQ0FBc0JvbkIsTUFBdEIsRUFBOEJoRyxHQUE5QixFQUFtQ2lqQyx3QkFBbkM7QUFDRDs7QUFFRCxTQUFTSyxTQUFULENBQW9CelMsRUFBcEIsRUFBd0I7QUFDdEJBLElBQUUsQ0FBQ29PLFNBQUgsR0FBZSxFQUFmO0FBQ0EsTUFBSWxaLElBQUksR0FBRzhLLEVBQUUsQ0FBQ00sUUFBZDs7QUFDQSxNQUFJcEwsSUFBSSxDQUFDalAsS0FBVCxFQUFnQjtBQUFFeXNCLGFBQVMsQ0FBQzFTLEVBQUQsRUFBSzlLLElBQUksQ0FBQ2pQLEtBQVYsQ0FBVDtBQUE0Qjs7QUFDOUMsTUFBSWlQLElBQUksQ0FBQ3hOLE9BQVQsRUFBa0I7QUFBRWlyQixlQUFXLENBQUMzUyxFQUFELEVBQUs5SyxJQUFJLENBQUN4TixPQUFWLENBQVg7QUFBZ0M7O0FBQ3BELE1BQUl3TixJQUFJLENBQUNqb0IsSUFBVCxFQUFlO0FBQ2IybEMsWUFBUSxDQUFDNVMsRUFBRCxDQUFSO0FBQ0QsR0FGRCxNQUVPO0FBQ0x1RSxXQUFPLENBQUN2RSxFQUFFLENBQUM2UyxLQUFILEdBQVcsRUFBWixFQUFnQjtBQUFLO0FBQXJCLEtBQVA7QUFDRDs7QUFDRCxNQUFJM2QsSUFBSSxDQUFDdk8sUUFBVCxFQUFtQjtBQUFFbXNCLGdCQUFZLENBQUM5UyxFQUFELEVBQUs5SyxJQUFJLENBQUN2TyxRQUFWLENBQVo7QUFBa0M7O0FBQ3ZELE1BQUl1TyxJQUFJLENBQUM3TyxLQUFMLElBQWM2TyxJQUFJLENBQUM3TyxLQUFMLEtBQWVrWCxXQUFqQyxFQUE4QztBQUM1Q3dWLGFBQVMsQ0FBQy9TLEVBQUQsRUFBSzlLLElBQUksQ0FBQzdPLEtBQVYsQ0FBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU3FzQixTQUFULENBQW9CMVMsRUFBcEIsRUFBd0JnVCxZQUF4QixFQUFzQztBQUNwQyxNQUFJek4sU0FBUyxHQUFHdkYsRUFBRSxDQUFDTSxRQUFILENBQVlpRixTQUFaLElBQXlCLEVBQXpDO0FBQ0EsTUFBSXRmLEtBQUssR0FBRytaLEVBQUUsQ0FBQ3dJLE1BQUgsR0FBWSxFQUF4QixDQUZvQyxDQUdwQztBQUNBOztBQUNBLE1BQUlobkIsSUFBSSxHQUFHd2UsRUFBRSxDQUFDTSxRQUFILENBQVkyUyxTQUFaLEdBQXdCLEVBQW5DO0FBQ0EsTUFBSUMsTUFBTSxHQUFHLENBQUNsVCxFQUFFLENBQUNTLE9BQWpCLENBTm9DLENBT3BDOztBQUNBLE1BQUksQ0FBQ3lTLE1BQUwsRUFBYTtBQUNYalAsbUJBQWUsQ0FBQyxLQUFELENBQWY7QUFDRDs7QUFDRCxNQUFJa1AsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBV2hrQyxHQUFYLEVBQWlCO0FBQzFCcVMsUUFBSSxDQUFDemYsSUFBTCxDQUFVb04sR0FBVjtBQUNBLFFBQUlsaEIsS0FBSyxHQUFHODVDLFlBQVksQ0FBQzU0QixHQUFELEVBQU02akMsWUFBTixFQUFvQnpOLFNBQXBCLEVBQStCdkYsRUFBL0IsQ0FBeEI7QUFDQTs7QUFDQSxRQUFJbFQsSUFBSixFQUEyQztBQUN6QyxVQUFJc21CLGFBQWEsR0FBRy9ZLFNBQVMsQ0FBQ2xyQixHQUFELENBQTdCOztBQUNBLFVBQUlxcUIsbUJBQW1CLENBQUM0WixhQUFELENBQW5CLElBQ0E1VSxNQUFNLENBQUNVLGNBQVAsQ0FBc0JrVSxhQUF0QixDQURKLEVBQzBDO0FBQ3hDM3BCLFlBQUksQ0FDRCxPQUFPMnBCLGFBQVAsR0FBdUIsa0VBRHRCLEVBRUZwVCxFQUZFLENBQUo7QUFJRDs7QUFDRHNFLG9CQUFjLENBQUNyZSxLQUFELEVBQVE5VyxHQUFSLEVBQWFsaEIsS0FBYixFQUFvQixZQUFZO0FBQzVDLFlBQUksQ0FBQ2lsRCxNQUFELElBQVcsQ0FBQ0csd0JBQWhCLEVBQTBDO0FBQ3hDNXBCLGNBQUksQ0FDRiw0REFDQSx3REFEQSxHQUVBLCtEQUZBLEdBR0EsK0JBSEEsR0FHa0N0YSxHQUhsQyxHQUd3QyxJQUp0QyxFQUtGNndCLEVBTEUsQ0FBSjtBQU9EO0FBQ0YsT0FWYSxDQUFkO0FBV0QsS0FwQkQsTUFvQk8sRUF4Qm1CLENBMkIxQjtBQUNBO0FBQ0E7OztBQUNBLFFBQUksRUFBRTd3QixHQUFHLElBQUk2d0IsRUFBVCxDQUFKLEVBQWtCO0FBQ2hCcVMsV0FBSyxDQUFDclMsRUFBRCxFQUFLLFFBQUwsRUFBZTd3QixHQUFmLENBQUw7QUFDRDtBQUNGLEdBakNEOztBQW1DQSxPQUFLLElBQUlBLEdBQVQsSUFBZ0I2akMsWUFBaEI7QUFBOEJHLFFBQUksQ0FBRWhrQyxHQUFGLENBQUo7QUFBOUI7O0FBQ0E4MEIsaUJBQWUsQ0FBQyxJQUFELENBQWY7QUFDRDs7QUFFRCxTQUFTMk8sUUFBVCxDQUFtQjVTLEVBQW5CLEVBQXVCO0FBQ3JCLE1BQUkveUIsSUFBSSxHQUFHK3lCLEVBQUUsQ0FBQ00sUUFBSCxDQUFZcnpCLElBQXZCO0FBQ0FBLE1BQUksR0FBRyt5QixFQUFFLENBQUM2UyxLQUFILEdBQVcsT0FBTzVsQyxJQUFQLEtBQWdCLFVBQWhCLEdBQ2RxbUMsT0FBTyxDQUFDcm1DLElBQUQsRUFBTyt5QixFQUFQLENBRE8sR0FFZC95QixJQUFJLElBQUksRUFGWjs7QUFHQSxNQUFJLENBQUMyckIsYUFBYSxDQUFDM3JCLElBQUQsQ0FBbEIsRUFBMEI7QUFDeEJBLFFBQUksR0FBRyxFQUFQO0FBQ0E2ZixTQUFBLElBQXlDckQsSUFBSSxDQUMzQyw4Q0FDQSxvRUFGMkMsRUFHM0N1VyxFQUgyQyxDQUE3QztBQUtELEdBWm9CLENBYXJCOzs7QUFDQSxNQUFJeGUsSUFBSSxHQUFHMXpCLE1BQU0sQ0FBQzB6QixJQUFQLENBQVl2VSxJQUFaLENBQVg7QUFDQSxNQUFJZ1osS0FBSyxHQUFHK1osRUFBRSxDQUFDTSxRQUFILENBQVlyYSxLQUF4QjtBQUNBLE1BQUl5QixPQUFPLEdBQUdzWSxFQUFFLENBQUNNLFFBQUgsQ0FBWTVZLE9BQTFCO0FBQ0EsTUFBSXBlLENBQUMsR0FBR2tZLElBQUksQ0FBQzl5QixNQUFiOztBQUNBLFNBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUNWLFFBQUk2RixHQUFHLEdBQUdxUyxJQUFJLENBQUNsWSxDQUFELENBQWQ7O0FBQ0EsUUFBSXdqQixJQUFKLEVBQTJDO0FBQ3pDLFVBQUlwRixPQUFPLElBQUlpUyxRQUFRLENBQUNqUyxPQUFELEVBQVV2WSxHQUFWLENBQXZCLEVBQXVDO0FBQ3JDc2EsWUFBSSxDQUNELGNBQWN0YSxHQUFkLEdBQW9CLGlEQURuQixFQUVGNndCLEVBRkUsQ0FBSjtBQUlEO0FBQ0Y7O0FBQ0QsUUFBSS9aLEtBQUssSUFBSTBULFFBQVEsQ0FBQzFULEtBQUQsRUFBUTlXLEdBQVIsQ0FBckIsRUFBbUM7QUFDakMyZCxXQUFBLElBQXlDckQsSUFBSSxDQUMzQyx5QkFBeUJ0YSxHQUF6QixHQUErQixvQ0FBL0IsR0FDQSxpQ0FGMkMsRUFHM0M2d0IsRUFIMkMsQ0FBN0M7QUFLRCxLQU5ELE1BTU8sSUFBSSxDQUFDaEUsVUFBVSxDQUFDN3NCLEdBQUQsQ0FBZixFQUFzQjtBQUMzQmtqQyxXQUFLLENBQUNyUyxFQUFELEVBQUssT0FBTCxFQUFjN3dCLEdBQWQsQ0FBTDtBQUNEO0FBQ0YsR0FyQ29CLENBc0NyQjs7O0FBQ0FvMUIsU0FBTyxDQUFDdDNCLElBQUQsRUFBTztBQUFLO0FBQVosR0FBUDtBQUNEOztBQUVELFNBQVNxbUMsT0FBVCxDQUFrQnJtQyxJQUFsQixFQUF3Qit5QixFQUF4QixFQUE0QjtBQUMxQjtBQUNBc0IsWUFBVTs7QUFDVixNQUFJO0FBQ0YsV0FBT3IwQixJQUFJLENBQUNrTSxJQUFMLENBQVU2bUIsRUFBVixFQUFjQSxFQUFkLENBQVA7QUFDRCxHQUZELENBRUUsT0FBT3BULENBQVAsRUFBVTtBQUNWZ2QsZUFBVyxDQUFDaGQsQ0FBRCxFQUFJb1QsRUFBSixFQUFRLFFBQVIsQ0FBWDtBQUNBLFdBQU8sRUFBUDtBQUNELEdBTEQsU0FLVTtBQUNSdUIsYUFBUztBQUNWO0FBQ0Y7O0FBRUQsSUFBSWdTLHNCQUFzQixHQUFHO0FBQUVsRixNQUFJLEVBQUU7QUFBUixDQUE3Qjs7QUFFQSxTQUFTeUUsWUFBVCxDQUF1QjlTLEVBQXZCLEVBQTJCclosUUFBM0IsRUFBcUM7QUFDbkM7QUFDQSxNQUFJNnNCLFFBQVEsR0FBR3hULEVBQUUsQ0FBQ3lULGlCQUFILEdBQXVCM2xELE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWMsSUFBZCxDQUF0QyxDQUZtQyxDQUduQzs7QUFDQSxNQUFJb2EsS0FBSyxHQUFHaFcsaUJBQWlCLEVBQTdCOztBQUVBLE9BQUssSUFBSXZ1QixHQUFULElBQWdCd1gsUUFBaEIsRUFBMEI7QUFDeEIsUUFBSWd0QixPQUFPLEdBQUdodEIsUUFBUSxDQUFDeFgsR0FBRCxDQUF0QjtBQUNBLFFBQUkwMUIsTUFBTSxHQUFHLE9BQU84TyxPQUFQLEtBQW1CLFVBQW5CLEdBQWdDQSxPQUFoQyxHQUEwQ0EsT0FBTyxDQUFDL2pELEdBQS9EOztBQUNBLFFBQUlrOUIsS0FBQSxJQUF5QytYLE1BQU0sSUFBSSxJQUF2RCxFQUE2RDtBQUMzRHBiLFVBQUksQ0FDRCwrQ0FBK0N0YSxHQUEvQyxHQUFxRCxLQURwRCxFQUVGNndCLEVBRkUsQ0FBSjtBQUlEOztBQUVELFFBQUksQ0FBQzBULEtBQUwsRUFBWTtBQUNWO0FBQ0FGLGNBQVEsQ0FBQ3JrQyxHQUFELENBQVIsR0FBZ0IsSUFBSTgrQixPQUFKLENBQ2RqTyxFQURjLEVBRWQ2RSxNQUFNLElBQUk5SixJQUZJLEVBR2RBLElBSGMsRUFJZHdZLHNCQUpjLENBQWhCO0FBTUQsS0FsQnVCLENBb0J4QjtBQUNBO0FBQ0E7OztBQUNBLFFBQUksRUFBRXBrQyxHQUFHLElBQUk2d0IsRUFBVCxDQUFKLEVBQWtCO0FBQ2hCNFQsb0JBQWMsQ0FBQzVULEVBQUQsRUFBSzd3QixHQUFMLEVBQVV3a0MsT0FBVixDQUFkO0FBQ0QsS0FGRCxNQUVPLElBQUk3bUIsSUFBSixFQUEyQztBQUNoRCxVQUFJM2QsR0FBRyxJQUFJNndCLEVBQUUsQ0FBQzhSLEtBQWQsRUFBcUI7QUFDbkJyb0IsWUFBSSxDQUFFLDZCQUE2QnRhLEdBQTdCLEdBQW1DLGdDQUFyQyxFQUF3RTZ3QixFQUF4RSxDQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLEVBQUUsQ0FBQ00sUUFBSCxDQUFZcmEsS0FBWixJQUFxQjlXLEdBQUcsSUFBSTZ3QixFQUFFLENBQUNNLFFBQUgsQ0FBWXJhLEtBQTVDLEVBQW1EO0FBQ3hEd0QsWUFBSSxDQUFFLDZCQUE2QnRhLEdBQTdCLEdBQW1DLGtDQUFyQyxFQUEwRTZ3QixFQUExRSxDQUFKO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsU0FBUzRULGNBQVQsQ0FDRXorQixNQURGLEVBRUVoRyxHQUZGLEVBR0V3a0MsT0FIRixFQUlFO0FBQ0EsTUFBSUUsV0FBVyxHQUFHLENBQUNuVyxpQkFBaUIsRUFBcEM7O0FBQ0EsTUFBSSxPQUFPaVcsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ3ZCLDRCQUF3QixDQUFDeGlELEdBQXpCLEdBQStCaWtELFdBQVcsR0FDdENDLG9CQUFvQixDQUFDM2tDLEdBQUQsQ0FEa0IsR0FFdEM0a0MsbUJBQW1CLENBQUNKLE9BQUQsQ0FGdkI7QUFHQXZCLDRCQUF3QixDQUFDem5DLEdBQXpCLEdBQStCb3dCLElBQS9CO0FBQ0QsR0FMRCxNQUtPO0FBQ0xxWCw0QkFBd0IsQ0FBQ3hpRCxHQUF6QixHQUErQitqRCxPQUFPLENBQUMvakQsR0FBUixHQUMzQmlrRCxXQUFXLElBQUlGLE9BQU8sQ0FBQzlaLEtBQVIsS0FBa0IsS0FBakMsR0FDRWlhLG9CQUFvQixDQUFDM2tDLEdBQUQsQ0FEdEIsR0FFRTRrQyxtQkFBbUIsQ0FBQ0osT0FBTyxDQUFDL2pELEdBQVQsQ0FITSxHQUkzQm1yQyxJQUpKO0FBS0FxWCw0QkFBd0IsQ0FBQ3puQyxHQUF6QixHQUErQmdwQyxPQUFPLENBQUNocEMsR0FBUixJQUFlb3dCLElBQTlDO0FBQ0Q7O0FBQ0QsTUFBSWpPLEtBQUEsSUFDQXNsQix3QkFBd0IsQ0FBQ3puQyxHQUF6QixLQUFpQ293QixJQURyQyxFQUMyQztBQUN6Q3FYLDRCQUF3QixDQUFDem5DLEdBQXpCLEdBQStCLFlBQVk7QUFDekM4ZSxVQUFJLENBQ0QseUJBQXlCdGEsR0FBekIsR0FBK0IsMENBRDlCLEVBRUYsSUFGRSxDQUFKO0FBSUQsS0FMRDtBQU1EOztBQUNEcmhCLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQm9uQixNQUF0QixFQUE4QmhHLEdBQTlCLEVBQW1DaWpDLHdCQUFuQztBQUNEOztBQUVELFNBQVMwQixvQkFBVCxDQUErQjNrQyxHQUEvQixFQUFvQztBQUNsQyxTQUFPLFNBQVM2a0MsY0FBVCxHQUEyQjtBQUNoQyxRQUFJakgsT0FBTyxHQUFHLEtBQUswRyxpQkFBTCxJQUEwQixLQUFLQSxpQkFBTCxDQUF1QnRrQyxHQUF2QixDQUF4Qzs7QUFDQSxRQUFJNDlCLE9BQUosRUFBYTtBQUNYLFVBQUlBLE9BQU8sQ0FBQ3lCLEtBQVosRUFBbUI7QUFDakJ6QixlQUFPLENBQUNnQyxRQUFSO0FBQ0Q7O0FBQ0QsVUFBSWxPLEdBQUcsQ0FBQzFyQixNQUFSLEVBQWdCO0FBQ2Q0M0IsZUFBTyxDQUFDN0wsTUFBUjtBQUNEOztBQUNELGFBQU82TCxPQUFPLENBQUM5K0MsS0FBZjtBQUNEO0FBQ0YsR0FYRDtBQVlEOztBQUVELFNBQVM4bEQsbUJBQVQsQ0FBNkJwbUIsRUFBN0IsRUFBaUM7QUFDL0IsU0FBTyxTQUFTcW1CLGNBQVQsR0FBMkI7QUFDaEMsV0FBT3JtQixFQUFFLENBQUN4VSxJQUFILENBQVEsSUFBUixFQUFjLElBQWQsQ0FBUDtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTdzVCLFdBQVQsQ0FBc0IzUyxFQUF0QixFQUEwQnRZLE9BQTFCLEVBQW1DO0FBQ2pDLE1BQUl6QixLQUFLLEdBQUcrWixFQUFFLENBQUNNLFFBQUgsQ0FBWXJhLEtBQXhCOztBQUNBLE9BQUssSUFBSTlXLEdBQVQsSUFBZ0J1WSxPQUFoQixFQUF5QjtBQUN2QixRQUFJb0YsSUFBSixFQUEyQztBQUN6QyxVQUFJLE9BQU9wRixPQUFPLENBQUN2WSxHQUFELENBQWQsS0FBd0IsVUFBNUIsRUFBd0M7QUFDdENzYSxZQUFJLENBQ0YsY0FBY3RhLEdBQWQsR0FBb0IsZ0JBQXBCLEdBQXdDLE9BQU91WSxPQUFPLENBQUN2WSxHQUFELENBQXRELEdBQStELGtDQUEvRCxHQUNBLDJDQUZFLEVBR0Y2d0IsRUFIRSxDQUFKO0FBS0Q7O0FBQ0QsVUFBSS9aLEtBQUssSUFBSTBULFFBQVEsQ0FBQzFULEtBQUQsRUFBUTlXLEdBQVIsQ0FBckIsRUFBbUM7QUFDakNzYSxZQUFJLENBQ0QsY0FBY3RhLEdBQWQsR0FBb0Isd0NBRG5CLEVBRUY2d0IsRUFGRSxDQUFKO0FBSUQ7O0FBQ0QsVUFBSzd3QixHQUFHLElBQUk2d0IsRUFBUixJQUFlaEUsVUFBVSxDQUFDN3NCLEdBQUQsQ0FBN0IsRUFBb0M7QUFDbENzYSxZQUFJLENBQ0YsY0FBY3RhLEdBQWQsR0FBb0IscURBQXBCLEdBQ0EsMERBRkUsQ0FBSjtBQUlEO0FBQ0Y7O0FBQ0Q2d0IsTUFBRSxDQUFDN3dCLEdBQUQsQ0FBRixHQUFVLE9BQU91WSxPQUFPLENBQUN2WSxHQUFELENBQWQsS0FBd0IsVUFBeEIsR0FBcUM0ckIsSUFBckMsR0FBNEN6cUIsSUFBSSxDQUFDb1gsT0FBTyxDQUFDdlksR0FBRCxDQUFSLEVBQWU2d0IsRUFBZixDQUExRDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUytTLFNBQVQsQ0FBb0IvUyxFQUFwQixFQUF3QjNaLEtBQXhCLEVBQStCO0FBQzdCLE9BQUssSUFBSWxYLEdBQVQsSUFBZ0JrWCxLQUFoQixFQUF1QjtBQUNyQixRQUFJQyxPQUFPLEdBQUdELEtBQUssQ0FBQ2xYLEdBQUQsQ0FBbkI7O0FBQ0EsUUFBSUksS0FBSyxDQUFDaWUsT0FBTixDQUFjbEgsT0FBZCxDQUFKLEVBQTRCO0FBQzFCLFdBQUssSUFBSWhkLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdnZCxPQUFPLENBQUM1M0IsTUFBNUIsRUFBb0M0YSxDQUFDLEVBQXJDLEVBQXlDO0FBQ3ZDMnFDLHFCQUFhLENBQUNqVSxFQUFELEVBQUs3d0IsR0FBTCxFQUFVbVgsT0FBTyxDQUFDaGQsQ0FBRCxDQUFqQixDQUFiO0FBQ0Q7QUFDRixLQUpELE1BSU87QUFDTDJxQyxtQkFBYSxDQUFDalUsRUFBRCxFQUFLN3dCLEdBQUwsRUFBVW1YLE9BQVYsQ0FBYjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTMnRCLGFBQVQsQ0FDRWpVLEVBREYsRUFFRWtPLE9BRkYsRUFHRTVuQixPQUhGLEVBSUUwRSxPQUpGLEVBS0U7QUFDQSxNQUFJNE4sYUFBYSxDQUFDdFMsT0FBRCxDQUFqQixFQUE0QjtBQUMxQjBFLFdBQU8sR0FBRzFFLE9BQVY7QUFDQUEsV0FBTyxHQUFHQSxPQUFPLENBQUNBLE9BQWxCO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPQSxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQy9CQSxXQUFPLEdBQUcwWixFQUFFLENBQUMxWixPQUFELENBQVo7QUFDRDs7QUFDRCxTQUFPMFosRUFBRSxDQUFDa1UsTUFBSCxDQUFVaEcsT0FBVixFQUFtQjVuQixPQUFuQixFQUE0QjBFLE9BQTVCLENBQVA7QUFDRDs7QUFFRCxTQUFTbXBCLFVBQVQsQ0FBcUJ0dUIsR0FBckIsRUFBMEI7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsTUFBSXV1QixPQUFPLEdBQUcsRUFBZDs7QUFDQUEsU0FBTyxDQUFDeGtELEdBQVIsR0FBYyxZQUFZO0FBQUUsV0FBTyxLQUFLaWpELEtBQVo7QUFBbUIsR0FBL0M7O0FBQ0EsTUFBSXdCLFFBQVEsR0FBRyxFQUFmOztBQUNBQSxVQUFRLENBQUN6a0QsR0FBVCxHQUFlLFlBQVk7QUFBRSxXQUFPLEtBQUs0NEMsTUFBWjtBQUFvQixHQUFqRDs7QUFDQSxNQUFJMWIsSUFBSixFQUEyQztBQUN6Q3NuQixXQUFPLENBQUN6cEMsR0FBUixHQUFjLFlBQVk7QUFDeEI4ZSxVQUFJLENBQ0YsMENBQ0EscUNBRkUsRUFHRixJQUhFLENBQUo7QUFLRCxLQU5EOztBQU9BNHFCLFlBQVEsQ0FBQzFwQyxHQUFULEdBQWUsWUFBWTtBQUN6QjhlLFVBQUksQ0FBQyxxQkFBRCxFQUF3QixJQUF4QixDQUFKO0FBQ0QsS0FGRDtBQUdEOztBQUNEMzdCLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQjgzQixHQUFHLENBQUNsMkIsU0FBMUIsRUFBcUMsT0FBckMsRUFBOEN5a0QsT0FBOUM7QUFDQXRtRCxRQUFNLENBQUNDLGNBQVAsQ0FBc0I4M0IsR0FBRyxDQUFDbDJCLFNBQTFCLEVBQXFDLFFBQXJDLEVBQStDMGtELFFBQS9DO0FBRUF4dUIsS0FBRyxDQUFDbDJCLFNBQUosQ0FBYzJrRCxJQUFkLEdBQXFCM3BDLEdBQXJCO0FBQ0FrYixLQUFHLENBQUNsMkIsU0FBSixDQUFjNGtELE9BQWQsR0FBd0JuUCxHQUF4Qjs7QUFFQXZmLEtBQUcsQ0FBQ2wyQixTQUFKLENBQWN1a0QsTUFBZCxHQUF1QixVQUNyQmhHLE9BRHFCLEVBRXJCL0MsRUFGcUIsRUFHckJuZ0IsT0FIcUIsRUFJckI7QUFDQSxRQUFJZ1YsRUFBRSxHQUFHLElBQVQ7O0FBQ0EsUUFBSXBILGFBQWEsQ0FBQ3VTLEVBQUQsQ0FBakIsRUFBdUI7QUFDckIsYUFBTzhJLGFBQWEsQ0FBQ2pVLEVBQUQsRUFBS2tPLE9BQUwsRUFBYy9DLEVBQWQsRUFBa0JuZ0IsT0FBbEIsQ0FBcEI7QUFDRDs7QUFDREEsV0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFDQUEsV0FBTyxDQUFDa2lCLElBQVIsR0FBZSxJQUFmO0FBQ0EsUUFBSUgsT0FBTyxHQUFHLElBQUlrQixPQUFKLENBQVlqTyxFQUFaLEVBQWdCa08sT0FBaEIsRUFBeUIvQyxFQUF6QixFQUE2Qm5nQixPQUE3QixDQUFkOztBQUNBLFFBQUlBLE9BQU8sQ0FBQ3dwQixTQUFaLEVBQXVCO0FBQ3JCLFVBQUk7QUFDRnJKLFVBQUUsQ0FBQ2h5QixJQUFILENBQVE2bUIsRUFBUixFQUFZK00sT0FBTyxDQUFDOStDLEtBQXBCO0FBQ0QsT0FGRCxDQUVFLE9BQU95N0IsS0FBUCxFQUFjO0FBQ2RrZ0IsbUJBQVcsQ0FBQ2xnQixLQUFELEVBQVFzVyxFQUFSLEVBQWEsc0NBQXVDK00sT0FBTyxDQUFDdDhCLFVBQS9DLEdBQTZELElBQTFFLENBQVg7QUFDRDtBQUNGOztBQUNELFdBQU8sU0FBU2drQyxTQUFULEdBQXNCO0FBQzNCMUgsYUFBTyxDQUFDaUMsUUFBUjtBQUNELEtBRkQ7QUFHRCxHQXRCRDtBQXVCRDtBQUVEOzs7QUFFQSxTQUFTMEYsV0FBVCxDQUFzQjFVLEVBQXRCLEVBQTBCO0FBQ3hCLE1BQUkyRyxPQUFPLEdBQUczRyxFQUFFLENBQUNNLFFBQUgsQ0FBWXFHLE9BQTFCOztBQUNBLE1BQUlBLE9BQUosRUFBYTtBQUNYM0csTUFBRSxDQUFDMlUsU0FBSCxHQUFlLE9BQU9oTyxPQUFQLEtBQW1CLFVBQW5CLEdBQ1hBLE9BQU8sQ0FBQ3h0QixJQUFSLENBQWE2bUIsRUFBYixDQURXLEdBRVgyRyxPQUZKO0FBR0Q7QUFDRjs7QUFFRCxTQUFTaU8sY0FBVCxDQUF5QjVVLEVBQXpCLEVBQTZCO0FBQzNCLE1BQUl4akMsTUFBTSxHQUFHcTRDLGFBQWEsQ0FBQzdVLEVBQUUsQ0FBQ00sUUFBSCxDQUFZb0csTUFBYixFQUFxQjFHLEVBQXJCLENBQTFCOztBQUNBLE1BQUl4akMsTUFBSixFQUFZO0FBQ1Z5bkMsbUJBQWUsQ0FBQyxLQUFELENBQWY7QUFDQW4yQyxVQUFNLENBQUMwekIsSUFBUCxDQUFZaGxCLE1BQVosRUFBb0JnTixPQUFwQixDQUE0QixVQUFVMkYsR0FBVixFQUFlO0FBQ3pDO0FBQ0EsVUFBSTJkLElBQUosRUFBMkM7QUFDekN3WCxzQkFBYyxDQUFDdEUsRUFBRCxFQUFLN3dCLEdBQUwsRUFBVTNTLE1BQU0sQ0FBQzJTLEdBQUQsQ0FBaEIsRUFBdUIsWUFBWTtBQUMvQ3NhLGNBQUksQ0FDRix5RUFDQSwwREFEQSxHQUVBLDZCQUZBLEdBRWdDdGEsR0FGaEMsR0FFc0MsSUFIcEMsRUFJRjZ3QixFQUpFLENBQUo7QUFNRCxTQVBhLENBQWQ7QUFRRCxPQVRELE1BU08sRUFFTjtBQUNGLEtBZEQ7QUFlQWlFLG1CQUFlLENBQUMsSUFBRCxDQUFmO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTNFEsYUFBVCxDQUF3Qm5PLE1BQXhCLEVBQWdDMUcsRUFBaEMsRUFBb0M7QUFDbEMsTUFBSTBHLE1BQUosRUFBWTtBQUNWO0FBQ0EsUUFBSWxxQyxNQUFNLEdBQUcxTyxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FBYjtBQUNBLFFBQUk5WCxJQUFJLEdBQUd3YyxTQUFTLEdBQ2hCRSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0J1SSxNQUFoQixDQURnQixHQUVoQjU0QyxNQUFNLENBQUMwekIsSUFBUCxDQUFZa2xCLE1BQVosQ0FGSjs7QUFJQSxTQUFLLElBQUlwOUIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2tZLElBQUksQ0FBQzl5QixNQUF6QixFQUFpQzRhLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsVUFBSTZGLEdBQUcsR0FBR3FTLElBQUksQ0FBQ2xZLENBQUQsQ0FBZCxDQURvQyxDQUVwQzs7QUFDQSxVQUFJNkYsR0FBRyxLQUFLLFFBQVosRUFBc0I7QUFBRTtBQUFVOztBQUNsQyxVQUFJMmxDLFVBQVUsR0FBR3BPLE1BQU0sQ0FBQ3YzQixHQUFELENBQU4sQ0FBWW9TLElBQTdCO0FBQ0EsVUFBSS9VLE1BQU0sR0FBR3d6QixFQUFiOztBQUNBLGFBQU94ekIsTUFBUCxFQUFlO0FBQ2IsWUFBSUEsTUFBTSxDQUFDbW9DLFNBQVAsSUFBb0JoYixRQUFRLENBQUNudEIsTUFBTSxDQUFDbW9DLFNBQVIsRUFBbUJHLFVBQW5CLENBQWhDLEVBQWdFO0FBQzlEdDRDLGdCQUFNLENBQUMyUyxHQUFELENBQU4sR0FBYzNDLE1BQU0sQ0FBQ21vQyxTQUFQLENBQWlCRyxVQUFqQixDQUFkO0FBQ0E7QUFDRDs7QUFDRHRvQyxjQUFNLEdBQUdBLE1BQU0sQ0FBQ2kwQixPQUFoQjtBQUNEOztBQUNELFVBQUksQ0FBQ2owQixNQUFMLEVBQWE7QUFDWCxZQUFJLGFBQWFrNkIsTUFBTSxDQUFDdjNCLEdBQUQsQ0FBdkIsRUFBOEI7QUFDNUIsY0FBSTRsQyxjQUFjLEdBQUdyTyxNQUFNLENBQUN2M0IsR0FBRCxDQUFOLENBQVlnWCxPQUFqQztBQUNBM3BCLGdCQUFNLENBQUMyUyxHQUFELENBQU4sR0FBYyxPQUFPNGxDLGNBQVAsS0FBMEIsVUFBMUIsR0FDVkEsY0FBYyxDQUFDNTdCLElBQWYsQ0FBb0I2bUIsRUFBcEIsQ0FEVSxHQUVWK1UsY0FGSjtBQUdELFNBTEQsTUFLTyxJQUFJam9CLElBQUosRUFBMkM7QUFDaERyRCxjQUFJLENBQUUsaUJBQWlCdGEsR0FBakIsR0FBdUIsY0FBekIsRUFBMEM2d0IsRUFBMUMsQ0FBSjtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxXQUFPeGpDLE1BQVA7QUFDRDtBQUNGO0FBRUQ7OztBQUVBLElBQUl3NEMsS0FBSyxHQUFHLENBQVo7O0FBRUEsU0FBU0MsU0FBVCxDQUFvQnB2QixHQUFwQixFQUF5QjtBQUN2QkEsS0FBRyxDQUFDbDJCLFNBQUosQ0FBY3VsRCxLQUFkLEdBQXNCLFVBQVVscUIsT0FBVixFQUFtQjtBQUN2QyxRQUFJZ1YsRUFBRSxHQUFHLElBQVQsQ0FEdUMsQ0FFdkM7O0FBQ0FBLE1BQUUsQ0FBQ21WLElBQUgsR0FBVUgsS0FBSyxFQUFmO0FBRUEsUUFBSTFGLFFBQUosRUFBY0MsTUFBZDtBQUNBOztBQUNBLFFBQUl6aUIsS0FBQSxJQUF5QzBSLE1BQU0sQ0FBQ0ksV0FBaEQsSUFBK0RzUSxJQUFuRSxFQUF5RTtBQUN2RUksY0FBUSxHQUFHLG9CQUFxQnRQLEVBQUUsQ0FBQ21WLElBQW5DO0FBQ0E1RixZQUFNLEdBQUcsa0JBQW1CdlAsRUFBRSxDQUFDbVYsSUFBL0I7QUFDQWpHLFVBQUksQ0FBQ0ksUUFBRCxDQUFKO0FBQ0QsS0FYc0MsQ0FhdkM7OztBQUNBdFAsTUFBRSxDQUFDSyxNQUFILEdBQVksSUFBWixDQWR1QyxDQWV2Qzs7QUFDQSxRQUFJclYsT0FBTyxJQUFJQSxPQUFPLENBQUNvcUIsWUFBdkIsRUFBcUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0FDLDJCQUFxQixDQUFDclYsRUFBRCxFQUFLaFYsT0FBTCxDQUFyQjtBQUNELEtBTEQsTUFLTztBQUNMZ1YsUUFBRSxDQUFDTSxRQUFILEdBQWM4RyxZQUFZLENBQ3hCa08seUJBQXlCLENBQUN0VixFQUFFLENBQUN2MUIsV0FBSixDQURELEVBRXhCdWdCLE9BQU8sSUFBSSxFQUZhLEVBR3hCZ1YsRUFId0IsQ0FBMUI7QUFLRDtBQUNEOzs7QUFDQSxRQUFJbFQsSUFBSixFQUEyQztBQUN6Q3VrQixlQUFTLENBQUNyUixFQUFELENBQVQ7QUFDRCxLQUZELE1BRU8sRUEvQmdDLENBa0N2Qzs7O0FBQ0FBLE1BQUUsQ0FBQ3VWLEtBQUgsR0FBV3ZWLEVBQVg7QUFDQXdWLGlCQUFhLENBQUN4VixFQUFELENBQWI7QUFDQXlWLGNBQVUsQ0FBQ3pWLEVBQUQsQ0FBVjtBQUNBMFYsY0FBVSxDQUFDMVYsRUFBRCxDQUFWO0FBQ0EyTixZQUFRLENBQUMzTixFQUFELEVBQUssY0FBTCxDQUFSO0FBQ0E0VSxrQkFBYyxDQUFDNVUsRUFBRCxDQUFkLENBeEN1QyxDQXdDbkI7O0FBQ3BCeVMsYUFBUyxDQUFDelMsRUFBRCxDQUFUO0FBQ0EwVSxlQUFXLENBQUMxVSxFQUFELENBQVgsQ0ExQ3VDLENBMEN0Qjs7QUFDakIyTixZQUFRLENBQUMzTixFQUFELEVBQUssU0FBTCxDQUFSO0FBRUE7O0FBQ0EsUUFBSWxULEtBQUEsSUFBeUMwUixNQUFNLENBQUNJLFdBQWhELElBQStEc1EsSUFBbkUsRUFBeUU7QUFDdkVsUCxRQUFFLENBQUMzd0MsS0FBSCxHQUFXc3dDLG1CQUFtQixDQUFDSyxFQUFELEVBQUssS0FBTCxDQUE5QjtBQUNBa1AsVUFBSSxDQUFDSyxNQUFELENBQUo7QUFDQTF4QixhQUFPLENBQUUsU0FBVW1pQixFQUFFLENBQUMzd0MsS0FBYixHQUFzQixPQUF4QixFQUFrQ2lnRCxRQUFsQyxFQUE0Q0MsTUFBNUMsQ0FBUDtBQUNEOztBQUVELFFBQUl2UCxFQUFFLENBQUNNLFFBQUgsQ0FBWWdGLEVBQWhCLEVBQW9CO0FBQ2xCdEYsUUFBRSxDQUFDMlYsTUFBSCxDQUFVM1YsRUFBRSxDQUFDTSxRQUFILENBQVlnRixFQUF0QjtBQUNEO0FBQ0YsR0F2REQ7QUF3REQ7O0FBRUQsU0FBUytQLHFCQUFULENBQWdDclYsRUFBaEMsRUFBb0NoVixPQUFwQyxFQUE2QztBQUMzQyxNQUFJa0ssSUFBSSxHQUFHOEssRUFBRSxDQUFDTSxRQUFILEdBQWN4eUMsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYzBHLEVBQUUsQ0FBQ3YxQixXQUFILENBQWV1Z0IsT0FBN0IsQ0FBekIsQ0FEMkMsQ0FFM0M7O0FBQ0EsTUFBSTRxQixXQUFXLEdBQUc1cUIsT0FBTyxDQUFDNnFCLFlBQTFCO0FBQ0EzZ0IsTUFBSSxDQUFDN1UsTUFBTCxHQUFjMkssT0FBTyxDQUFDM0ssTUFBdEI7QUFDQTZVLE1BQUksQ0FBQzJnQixZQUFMLEdBQW9CRCxXQUFwQjtBQUVBLE1BQUlFLHFCQUFxQixHQUFHRixXQUFXLENBQUNoVSxnQkFBeEM7QUFDQTFNLE1BQUksQ0FBQ3FRLFNBQUwsR0FBaUJ1USxxQkFBcUIsQ0FBQ3ZRLFNBQXZDO0FBQ0FyUSxNQUFJLENBQUM2Z0IsZ0JBQUwsR0FBd0JELHFCQUFxQixDQUFDbHZCLFNBQTlDO0FBQ0FzTyxNQUFJLENBQUM4Z0IsZUFBTCxHQUF1QkYscUJBQXFCLENBQUNwVSxRQUE3QztBQUNBeE0sTUFBSSxDQUFDcUwsYUFBTCxHQUFxQnVWLHFCQUFxQixDQUFDclUsR0FBM0M7O0FBRUEsTUFBSXpXLE9BQU8sQ0FBQ2luQixNQUFaLEVBQW9CO0FBQ2xCL2MsUUFBSSxDQUFDK2MsTUFBTCxHQUFjam5CLE9BQU8sQ0FBQ2luQixNQUF0QjtBQUNBL2MsUUFBSSxDQUFDK2dCLGVBQUwsR0FBdUJqckIsT0FBTyxDQUFDaXJCLGVBQS9CO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTWCx5QkFBVCxDQUFvQ3ZYLElBQXBDLEVBQTBDO0FBQ3hDLE1BQUkvUyxPQUFPLEdBQUcrUyxJQUFJLENBQUMvUyxPQUFuQjs7QUFDQSxNQUFJK1MsSUFBSSxDQUFDbVksS0FBVCxFQUFnQjtBQUNkLFFBQUlDLFlBQVksR0FBR2IseUJBQXlCLENBQUN2WCxJQUFJLENBQUNtWSxLQUFOLENBQTVDO0FBQ0EsUUFBSUUsa0JBQWtCLEdBQUdyWSxJQUFJLENBQUNvWSxZQUE5Qjs7QUFDQSxRQUFJQSxZQUFZLEtBQUtDLGtCQUFyQixFQUF5QztBQUN2QztBQUNBO0FBQ0FyWSxVQUFJLENBQUNvWSxZQUFMLEdBQW9CQSxZQUFwQixDQUh1QyxDQUl2Qzs7QUFDQSxVQUFJRSxlQUFlLEdBQUdDLHNCQUFzQixDQUFDdlksSUFBRCxDQUE1QyxDQUx1QyxDQU12Qzs7QUFDQSxVQUFJc1ksZUFBSixFQUFxQjtBQUNuQjFiLGNBQU0sQ0FBQ29ELElBQUksQ0FBQ3dZLGFBQU4sRUFBcUJGLGVBQXJCLENBQU47QUFDRDs7QUFDRHJyQixhQUFPLEdBQUcrUyxJQUFJLENBQUMvUyxPQUFMLEdBQWVvYyxZQUFZLENBQUMrTyxZQUFELEVBQWVwWSxJQUFJLENBQUN3WSxhQUFwQixDQUFyQzs7QUFDQSxVQUFJdnJCLE9BQU8sQ0FBQzUzQixJQUFaLEVBQWtCO0FBQ2hCNDNCLGVBQU8sQ0FBQzVpQixVQUFSLENBQW1CNGlCLE9BQU8sQ0FBQzUzQixJQUEzQixJQUFtQzJxQyxJQUFuQztBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPL1MsT0FBUDtBQUNEOztBQUVELFNBQVNzckIsc0JBQVQsQ0FBaUN2WSxJQUFqQyxFQUF1QztBQUNyQyxNQUFJeVksUUFBSjtBQUNBLE1BQUlDLE1BQU0sR0FBRzFZLElBQUksQ0FBQy9TLE9BQWxCO0FBQ0EsTUFBSTByQixNQUFNLEdBQUczWSxJQUFJLENBQUM0WSxhQUFsQjs7QUFDQSxPQUFLLElBQUl4bkMsR0FBVCxJQUFnQnNuQyxNQUFoQixFQUF3QjtBQUN0QixRQUFJQSxNQUFNLENBQUN0bkMsR0FBRCxDQUFOLEtBQWdCdW5DLE1BQU0sQ0FBQ3ZuQyxHQUFELENBQTFCLEVBQWlDO0FBQy9CLFVBQUksQ0FBQ3FuQyxRQUFMLEVBQWU7QUFBRUEsZ0JBQVEsR0FBRyxFQUFYO0FBQWdCOztBQUNqQ0EsY0FBUSxDQUFDcm5DLEdBQUQsQ0FBUixHQUFnQnNuQyxNQUFNLENBQUN0bkMsR0FBRCxDQUF0QjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT3FuQyxRQUFQO0FBQ0Q7QUFFRDs7QUFJQTs7Ozs7QUFHQSxTQUFTSSxZQUFULENBQ0VsVixRQURGLEVBRUU3WixPQUZGLEVBR0U7QUFDQSxNQUFJLENBQUM2WixRQUFELElBQWEsQ0FBQ0EsUUFBUSxDQUFDaHpDLE1BQTNCLEVBQW1DO0FBQ2pDLFdBQU8sRUFBUDtBQUNEOztBQUNELE1BQUltb0QsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsT0FBSyxJQUFJdnRDLENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUdzdkMsUUFBUSxDQUFDaHpDLE1BQTdCLEVBQXFDNGEsQ0FBQyxHQUFHbFgsQ0FBekMsRUFBNENrWCxDQUFDLEVBQTdDLEVBQWlEO0FBQy9DLFFBQUlzNUIsS0FBSyxHQUFHbEIsUUFBUSxDQUFDcDRCLENBQUQsQ0FBcEI7QUFDQSxRQUFJMkQsSUFBSSxHQUFHMjFCLEtBQUssQ0FBQzMxQixJQUFqQixDQUYrQyxDQUcvQzs7QUFDQSxRQUFJQSxJQUFJLElBQUlBLElBQUksQ0FBQ3dqQyxLQUFiLElBQXNCeGpDLElBQUksQ0FBQ3dqQyxLQUFMLENBQVdxRyxJQUFyQyxFQUEyQztBQUN6QyxhQUFPN3BDLElBQUksQ0FBQ3dqQyxLQUFMLENBQVdxRyxJQUFsQjtBQUNELEtBTjhDLENBTy9DO0FBQ0E7OztBQUNBLFFBQUksQ0FBQ2xVLEtBQUssQ0FBQy9hLE9BQU4sS0FBa0JBLE9BQWxCLElBQTZCK2EsS0FBSyxDQUFDYixTQUFOLEtBQW9CbGEsT0FBbEQsS0FDRjVhLElBREUsSUFDTUEsSUFBSSxDQUFDNnBDLElBQUwsSUFBYSxJQUR2QixFQUVFO0FBQ0EsVUFBSTFqRCxJQUFJLEdBQUc2WixJQUFJLENBQUM2cEMsSUFBaEI7QUFDQSxVQUFJQSxJQUFJLEdBQUlELEtBQUssQ0FBQ3pqRCxJQUFELENBQUwsS0FBZ0J5akQsS0FBSyxDQUFDempELElBQUQsQ0FBTCxHQUFjLEVBQTlCLENBQVo7O0FBQ0EsVUFBSXd2QyxLQUFLLENBQUNuQixHQUFOLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUJxVixZQUFJLENBQUMvMEMsSUFBTCxDQUFVclAsS0FBVixDQUFnQm9rRCxJQUFoQixFQUFzQmxVLEtBQUssQ0FBQ2xCLFFBQU4sSUFBa0IsRUFBeEM7QUFDRCxPQUZELE1BRU87QUFDTG9WLFlBQUksQ0FBQy8wQyxJQUFMLENBQVU2Z0MsS0FBVjtBQUNEO0FBQ0YsS0FWRCxNQVVPO0FBQ0wsT0FBQ2lVLEtBQUssQ0FBQzF3QixPQUFOLEtBQWtCMHdCLEtBQUssQ0FBQzF3QixPQUFOLEdBQWdCLEVBQWxDLENBQUQsRUFBd0Nwa0IsSUFBeEMsQ0FBNkM2Z0MsS0FBN0M7QUFDRDtBQUNGLEdBM0JELENBNEJBOzs7QUFDQSxPQUFLLElBQUltVSxNQUFULElBQW1CRixLQUFuQixFQUEwQjtBQUN4QixRQUFJQSxLQUFLLENBQUNFLE1BQUQsQ0FBTCxDQUFjanNCLEtBQWQsQ0FBb0Jrc0IsWUFBcEIsQ0FBSixFQUF1QztBQUNyQyxhQUFPSCxLQUFLLENBQUNFLE1BQUQsQ0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0YsS0FBUDtBQUNEOztBQUVELFNBQVNHLFlBQVQsQ0FBdUJqVSxJQUF2QixFQUE2QjtBQUMzQixTQUFRQSxJQUFJLENBQUNULFNBQUwsSUFBa0IsQ0FBQ1MsSUFBSSxDQUFDbEIsWUFBekIsSUFBMENrQixJQUFJLENBQUMxbUMsSUFBTCxLQUFjLEdBQS9EO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBUzQ2QyxvQkFBVCxDQUNFSixLQURGLEVBRUVLLFdBRkYsRUFHRUMsU0FIRixFQUlFO0FBQ0EsTUFBSWpxQixHQUFKO0FBQ0EsTUFBSWtxQixjQUFjLEdBQUd0cEQsTUFBTSxDQUFDMHpCLElBQVAsQ0FBWTAxQixXQUFaLEVBQXlCeG9ELE1BQXpCLEdBQWtDLENBQXZEO0FBQ0EsTUFBSTJvRCxRQUFRLEdBQUdSLEtBQUssR0FBRyxDQUFDLENBQUNBLEtBQUssQ0FBQ1MsT0FBWCxHQUFxQixDQUFDRixjQUExQztBQUNBLE1BQUlqb0MsR0FBRyxHQUFHMG5DLEtBQUssSUFBSUEsS0FBSyxDQUFDVSxJQUF6Qjs7QUFDQSxNQUFJLENBQUNWLEtBQUwsRUFBWTtBQUNWM3BCLE9BQUcsR0FBRyxFQUFOO0FBQ0QsR0FGRCxNQUVPLElBQUkycEIsS0FBSyxDQUFDVyxXQUFWLEVBQXVCO0FBQzVCO0FBQ0EsV0FBT1gsS0FBSyxDQUFDVyxXQUFiO0FBQ0QsR0FITSxNQUdBLElBQ0xILFFBQVEsSUFDUkYsU0FEQSxJQUVBQSxTQUFTLEtBQUtoZixXQUZkLElBR0FocEIsR0FBRyxLQUFLZ29DLFNBQVMsQ0FBQ0ksSUFIbEIsSUFJQSxDQUFDSCxjQUpELElBS0EsQ0FBQ0QsU0FBUyxDQUFDTSxVQU5OLEVBT0w7QUFDQTtBQUNBO0FBQ0EsV0FBT04sU0FBUDtBQUNELEdBWE0sTUFXQTtBQUNManFCLE9BQUcsR0FBRyxFQUFOOztBQUNBLFNBQUssSUFBSXVaLEtBQVQsSUFBa0JvUSxLQUFsQixFQUF5QjtBQUN2QixVQUFJQSxLQUFLLENBQUNwUSxLQUFELENBQUwsSUFBZ0JBLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxHQUFqQyxFQUFzQztBQUNwQ3ZaLFdBQUcsQ0FBQ3VaLEtBQUQsQ0FBSCxHQUFhaVIsbUJBQW1CLENBQUNSLFdBQUQsRUFBY3pRLEtBQWQsRUFBcUJvUSxLQUFLLENBQUNwUSxLQUFELENBQTFCLENBQWhDO0FBQ0Q7QUFDRjtBQUNGLEdBNUJELENBNkJBOzs7QUFDQSxPQUFLLElBQUlrUixLQUFULElBQWtCVCxXQUFsQixFQUErQjtBQUM3QixRQUFJLEVBQUVTLEtBQUssSUFBSXpxQixHQUFYLENBQUosRUFBcUI7QUFDbkJBLFNBQUcsQ0FBQ3lxQixLQUFELENBQUgsR0FBYUMsZUFBZSxDQUFDVixXQUFELEVBQWNTLEtBQWQsQ0FBNUI7QUFDRDtBQUNGLEdBbENELENBbUNBO0FBQ0E7OztBQUNBLE1BQUlkLEtBQUssSUFBSS9vRCxNQUFNLENBQUM0MkMsWUFBUCxDQUFvQm1TLEtBQXBCLENBQWIsRUFBeUM7QUFDdENBLFNBQUQsQ0FBUVcsV0FBUixHQUFzQnRxQixHQUF0QjtBQUNEOztBQUNEK08sS0FBRyxDQUFDL08sR0FBRCxFQUFNLFNBQU4sRUFBaUJtcUIsUUFBakIsQ0FBSDtBQUNBcGIsS0FBRyxDQUFDL08sR0FBRCxFQUFNLE1BQU4sRUFBYy9kLEdBQWQsQ0FBSDtBQUNBOHNCLEtBQUcsQ0FBQy9PLEdBQUQsRUFBTSxZQUFOLEVBQW9Ca3FCLGNBQXBCLENBQUg7QUFDQSxTQUFPbHFCLEdBQVA7QUFDRDs7QUFFRCxTQUFTd3FCLG1CQUFULENBQTZCUixXQUE3QixFQUEwQy9uQyxHQUExQyxFQUErQ3dlLEVBQS9DLEVBQW1EO0FBQ2pELE1BQUlxWixVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFZO0FBQzNCLFFBQUk5WixHQUFHLEdBQUd6K0IsU0FBUyxDQUFDQyxNQUFWLEdBQW1CaS9CLEVBQUUsQ0FBQ2o3QixLQUFILENBQVMsSUFBVCxFQUFlakUsU0FBZixDQUFuQixHQUErQ2svQixFQUFFLENBQUMsRUFBRCxDQUEzRDtBQUNBVCxPQUFHLEdBQUdBLEdBQUcsSUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBdEIsSUFBa0MsQ0FBQzNkLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY04sR0FBZCxDQUFuQyxHQUNGLENBQUNBLEdBQUQsQ0FERSxDQUNJO0FBREosTUFFRjZqQixpQkFBaUIsQ0FBQzdqQixHQUFELENBRnJCO0FBR0EsV0FBT0EsR0FBRyxLQUNSQSxHQUFHLENBQUN4K0IsTUFBSixLQUFlLENBQWYsSUFDQ3crQixHQUFHLENBQUN4K0IsTUFBSixLQUFlLENBQWYsSUFBb0J3K0IsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPb1YsU0FGcEIsQ0FFK0I7QUFGL0IsS0FBSCxHQUdIanlDLFNBSEcsR0FJSDY4QixHQUpKO0FBS0QsR0FWRCxDQURpRCxDQVlqRDtBQUNBO0FBQ0E7OztBQUNBLE1BQUlTLEVBQUUsQ0FBQzBrQixLQUFQLEVBQWM7QUFDWnZrRCxVQUFNLENBQUNDLGNBQVAsQ0FBc0JtcEQsV0FBdEIsRUFBbUMvbkMsR0FBbkMsRUFBd0M7QUFDdEN2ZixTQUFHLEVBQUVvM0MsVUFEaUM7QUFFdENuM0MsZ0JBQVUsRUFBRSxJQUYwQjtBQUd0Q0Msa0JBQVksRUFBRTtBQUh3QixLQUF4QztBQUtEOztBQUNELFNBQU9rM0MsVUFBUDtBQUNEOztBQUVELFNBQVM0USxlQUFULENBQXlCZixLQUF6QixFQUFnQzFuQyxHQUFoQyxFQUFxQztBQUNuQyxTQUFPLFlBQVk7QUFBRSxXQUFPMG5DLEtBQUssQ0FBQzFuQyxHQUFELENBQVo7QUFBb0IsR0FBekM7QUFDRDtBQUVEOztBQUVBOzs7OztBQUdBLFNBQVMwb0MsVUFBVCxDQUNFOWlCLEdBREYsRUFFRWtkLE1BRkYsRUFHRTtBQUNBLE1BQUkvYSxHQUFKLEVBQVM1dEIsQ0FBVCxFQUFZbFgsQ0FBWixFQUFlb3ZCLElBQWYsRUFBcUJyUyxHQUFyQjs7QUFDQSxNQUFJSSxLQUFLLENBQUNpZSxPQUFOLENBQWN1SCxHQUFkLEtBQXNCLE9BQU9BLEdBQVAsS0FBZSxRQUF6QyxFQUFtRDtBQUNqRG1DLE9BQUcsR0FBRyxJQUFJM25CLEtBQUosQ0FBVXdsQixHQUFHLENBQUNybUMsTUFBZCxDQUFOOztBQUNBLFNBQUs0YSxDQUFDLEdBQUcsQ0FBSixFQUFPbFgsQ0FBQyxHQUFHMmlDLEdBQUcsQ0FBQ3JtQyxNQUFwQixFQUE0QjRhLENBQUMsR0FBR2xYLENBQWhDLEVBQW1Da1gsQ0FBQyxFQUFwQyxFQUF3QztBQUN0QzR0QixTQUFHLENBQUM1dEIsQ0FBRCxDQUFILEdBQVMyb0MsTUFBTSxDQUFDbGQsR0FBRyxDQUFDenJCLENBQUQsQ0FBSixFQUFTQSxDQUFULENBQWY7QUFDRDtBQUNGLEdBTEQsTUFLTyxJQUFJLE9BQU95ckIsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ2xDbUMsT0FBRyxHQUFHLElBQUkzbkIsS0FBSixDQUFVd2xCLEdBQVYsQ0FBTjs7QUFDQSxTQUFLenJCLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR3lyQixHQUFoQixFQUFxQnpyQixDQUFDLEVBQXRCLEVBQTBCO0FBQ3hCNHRCLFNBQUcsQ0FBQzV0QixDQUFELENBQUgsR0FBUzJvQyxNQUFNLENBQUMzb0MsQ0FBQyxHQUFHLENBQUwsRUFBUUEsQ0FBUixDQUFmO0FBQ0Q7QUFDRixHQUxNLE1BS0EsSUFBSW12QixVQUFVLENBQUMxRCxHQUFELENBQWQsRUFBcUI7QUFDMUIsUUFBSWlKLFNBQVMsSUFBSWpKLEdBQUcsQ0FBQ2tKLE1BQU0sQ0FBQ25WLFFBQVIsQ0FBcEIsRUFBdUM7QUFDckNvTyxTQUFHLEdBQUcsRUFBTjtBQUNBLFVBQUlwTyxRQUFRLEdBQUdpTSxHQUFHLENBQUNrSixNQUFNLENBQUNuVixRQUFSLENBQUgsRUFBZjtBQUNBLFVBQUl0c0IsTUFBTSxHQUFHc3NCLFFBQVEsQ0FBQ3ZHLElBQVQsRUFBYjs7QUFDQSxhQUFPLENBQUMvbEIsTUFBTSxDQUFDczdDLElBQWYsRUFBcUI7QUFDbkI1Z0IsV0FBRyxDQUFDbjFCLElBQUosQ0FBU2t3QyxNQUFNLENBQUN6MUMsTUFBTSxDQUFDdk8sS0FBUixFQUFlaXBDLEdBQUcsQ0FBQ3hvQyxNQUFuQixDQUFmO0FBQ0E4TixjQUFNLEdBQUdzc0IsUUFBUSxDQUFDdkcsSUFBVCxFQUFUO0FBQ0Q7QUFDRixLQVJELE1BUU87QUFDTGYsVUFBSSxHQUFHMXpCLE1BQU0sQ0FBQzB6QixJQUFQLENBQVl1VCxHQUFaLENBQVA7QUFDQW1DLFNBQUcsR0FBRyxJQUFJM25CLEtBQUosQ0FBVWlTLElBQUksQ0FBQzl5QixNQUFmLENBQU47O0FBQ0EsV0FBSzRhLENBQUMsR0FBRyxDQUFKLEVBQU9sWCxDQUFDLEdBQUdvdkIsSUFBSSxDQUFDOXlCLE1BQXJCLEVBQTZCNGEsQ0FBQyxHQUFHbFgsQ0FBakMsRUFBb0NrWCxDQUFDLEVBQXJDLEVBQXlDO0FBQ3ZDNkYsV0FBRyxHQUFHcVMsSUFBSSxDQUFDbFksQ0FBRCxDQUFWO0FBQ0E0dEIsV0FBRyxDQUFDNXRCLENBQUQsQ0FBSCxHQUFTMm9DLE1BQU0sQ0FBQ2xkLEdBQUcsQ0FBQzVsQixHQUFELENBQUosRUFBV0EsR0FBWCxFQUFnQjdGLENBQWhCLENBQWY7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsTUFBSSxDQUFDK3VCLEtBQUssQ0FBQ25CLEdBQUQsQ0FBVixFQUFpQjtBQUNmQSxPQUFHLEdBQUcsRUFBTjtBQUNEOztBQUNBQSxLQUFELENBQU1rYSxRQUFOLEdBQWlCLElBQWpCO0FBQ0EsU0FBT2xhLEdBQVA7QUFDRDtBQUVEOztBQUVBOzs7OztBQUdBLFNBQVM2Z0IsVUFBVCxDQUNFM2tELElBREYsRUFFRTRrRCxRQUZGLEVBR0UveEIsS0FIRixFQUlFZ3lCLFVBSkYsRUFLRTtBQUNBLE1BQUlDLFlBQVksR0FBRyxLQUFLQyxZQUFMLENBQWtCL2tELElBQWxCLENBQW5CO0FBQ0EsTUFBSWdsRCxLQUFKOztBQUNBLE1BQUlGLFlBQUosRUFBa0I7QUFBRTtBQUNsQmp5QixTQUFLLEdBQUdBLEtBQUssSUFBSSxFQUFqQjs7QUFDQSxRQUFJZ3lCLFVBQUosRUFBZ0I7QUFDZCxVQUFJbnJCLEtBQUEsSUFBeUMsQ0FBQzJMLFVBQVUsQ0FBQ3dmLFVBQUQsQ0FBeEQsRUFBc0U7QUFDcEV4dUIsWUFBSSxDQUNGLGdEQURFLEVBRUYsSUFGRSxDQUFKO0FBSUQ7O0FBQ0R4RCxXQUFLLEdBQUcwVSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxFQUFELEVBQUtzZCxVQUFMLENBQVAsRUFBeUJoeUIsS0FBekIsQ0FBZDtBQUNEOztBQUNEbXlCLFNBQUssR0FBR0YsWUFBWSxDQUFDanlCLEtBQUQsQ0FBWixJQUF1Qit4QixRQUEvQjtBQUNELEdBWkQsTUFZTztBQUNMSSxTQUFLLEdBQUcsS0FBS0MsTUFBTCxDQUFZamxELElBQVosS0FBcUI0a0QsUUFBN0I7QUFDRDs7QUFFRCxNQUFJN2lDLE1BQU0sR0FBRzhRLEtBQUssSUFBSUEsS0FBSyxDQUFDNndCLElBQTVCOztBQUNBLE1BQUkzaEMsTUFBSixFQUFZO0FBQ1YsV0FBTyxLQUFLbWpDLGNBQUwsQ0FBb0IsVUFBcEIsRUFBZ0M7QUFBRXhCLFVBQUksRUFBRTNoQztBQUFSLEtBQWhDLEVBQWtEaWpDLEtBQWxELENBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPQSxLQUFQO0FBQ0Q7QUFDRjtBQUVEOztBQUVBOzs7OztBQUdBLFNBQVNHLGFBQVQsQ0FBd0J0c0MsRUFBeEIsRUFBNEI7QUFDMUIsU0FBT3k3QixZQUFZLENBQUMsS0FBS3BILFFBQU4sRUFBZ0IsU0FBaEIsRUFBMkJyMEIsRUFBM0IsRUFBK0IsSUFBL0IsQ0FBWixJQUFvRGd2QixRQUEzRDtBQUNEO0FBRUQ7OztBQUVBLFNBQVN1ZCxhQUFULENBQXdCQyxNQUF4QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDdEMsTUFBSW5wQyxLQUFLLENBQUNpZSxPQUFOLENBQWNpckIsTUFBZCxDQUFKLEVBQTJCO0FBQ3pCLFdBQU9BLE1BQU0sQ0FBQ25uRCxPQUFQLENBQWVvbkQsTUFBZixNQUEyQixDQUFDLENBQW5DO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0QsTUFBTSxLQUFLQyxNQUFsQjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7OztBQUtBLFNBQVNDLGFBQVQsQ0FDRUMsWUFERixFQUVFenBDLEdBRkYsRUFHRTBwQyxjQUhGLEVBSUVDLFlBSkYsRUFLRUMsY0FMRixFQU1FO0FBQ0EsTUFBSUMsYUFBYSxHQUFHeGEsTUFBTSxDQUFDUSxRQUFQLENBQWdCN3ZCLEdBQWhCLEtBQXdCMHBDLGNBQTVDOztBQUNBLE1BQUlFLGNBQWMsSUFBSUQsWUFBbEIsSUFBa0MsQ0FBQ3RhLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQjd2QixHQUFoQixDQUF2QyxFQUE2RDtBQUMzRCxXQUFPcXBDLGFBQWEsQ0FBQ08sY0FBRCxFQUFpQkQsWUFBakIsQ0FBcEI7QUFDRCxHQUZELE1BRU8sSUFBSUUsYUFBSixFQUFtQjtBQUN4QixXQUFPUixhQUFhLENBQUNRLGFBQUQsRUFBZ0JKLFlBQWhCLENBQXBCO0FBQ0QsR0FGTSxNQUVBLElBQUlFLFlBQUosRUFBa0I7QUFDdkIsV0FBT3plLFNBQVMsQ0FBQ3llLFlBQUQsQ0FBVCxLQUE0QjNwQyxHQUFuQztBQUNEO0FBQ0Y7QUFFRDs7QUFFQTs7Ozs7QUFHQSxTQUFTOHBDLGVBQVQsQ0FDRWhzQyxJQURGLEVBRUV3MEIsR0FGRixFQUdFeHpDLEtBSEYsRUFJRWlyRCxNQUpGLEVBS0VDLE1BTEYsRUFNRTtBQUNBLE1BQUlsckQsS0FBSixFQUFXO0FBQ1QsUUFBSSxDQUFDd3FDLFVBQVUsQ0FBQ3hxQyxLQUFELENBQWYsRUFBd0I7QUFDdEI2K0IsV0FBQSxJQUF5Q3JELElBQUksQ0FDM0MsMERBRDJDLEVBRTNDLElBRjJDLENBQTdDO0FBSUQsS0FMRCxNQUtPO0FBQ0wsVUFBSWxhLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3YvQixLQUFkLENBQUosRUFBMEI7QUFDeEJBLGFBQUssR0FBRzZzQyxRQUFRLENBQUM3c0MsS0FBRCxDQUFoQjtBQUNEOztBQUNELFVBQUl5OUIsSUFBSjs7QUFDQSxVQUFJeW5CLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVdoa0MsR0FBWCxFQUFpQjtBQUMxQixZQUNFQSxHQUFHLEtBQUssT0FBUixJQUNBQSxHQUFHLEtBQUssT0FEUixJQUVBcXFCLG1CQUFtQixDQUFDcnFCLEdBQUQsQ0FIckIsRUFJRTtBQUNBdWMsY0FBSSxHQUFHemUsSUFBUDtBQUNELFNBTkQsTUFNTztBQUNMLGNBQUl6SixJQUFJLEdBQUd5SixJQUFJLENBQUN3akMsS0FBTCxJQUFjeGpDLElBQUksQ0FBQ3dqQyxLQUFMLENBQVdqdEMsSUFBcEM7QUFDQWtvQixjQUFJLEdBQUd3dEIsTUFBTSxJQUFJMWEsTUFBTSxDQUFDYyxXQUFQLENBQW1CbUMsR0FBbkIsRUFBd0JqK0IsSUFBeEIsRUFBOEIyTCxHQUE5QixDQUFWLEdBQ0hsQyxJQUFJLENBQUNtc0MsUUFBTCxLQUFrQm5zQyxJQUFJLENBQUNtc0MsUUFBTCxHQUFnQixFQUFsQyxDQURHLEdBRUhuc0MsSUFBSSxDQUFDd2pDLEtBQUwsS0FBZXhqQyxJQUFJLENBQUN3akMsS0FBTCxHQUFhLEVBQTVCLENBRko7QUFHRDs7QUFDRCxZQUFJNEksWUFBWSxHQUFHcGYsUUFBUSxDQUFDOXFCLEdBQUQsQ0FBM0I7QUFDQSxZQUFJaWtDLGFBQWEsR0FBRy9ZLFNBQVMsQ0FBQ2xyQixHQUFELENBQTdCOztBQUNBLFlBQUksRUFBRWtxQyxZQUFZLElBQUkzdEIsSUFBbEIsS0FBMkIsRUFBRTBuQixhQUFhLElBQUkxbkIsSUFBbkIsQ0FBL0IsRUFBeUQ7QUFDdkRBLGNBQUksQ0FBQ3ZjLEdBQUQsQ0FBSixHQUFZbGhCLEtBQUssQ0FBQ2toQixHQUFELENBQWpCOztBQUVBLGNBQUlncUMsTUFBSixFQUFZO0FBQ1YsZ0JBQUlwSixFQUFFLEdBQUc5aUMsSUFBSSxDQUFDOGlDLEVBQUwsS0FBWTlpQyxJQUFJLENBQUM4aUMsRUFBTCxHQUFVLEVBQXRCLENBQVQ7O0FBQ0FBLGNBQUUsQ0FBRSxZQUFZNWdDLEdBQWQsQ0FBRixHQUF3QixVQUFVbXFDLE1BQVYsRUFBa0I7QUFDeENyckQsbUJBQUssQ0FBQ2toQixHQUFELENBQUwsR0FBYW1xQyxNQUFiO0FBQ0QsYUFGRDtBQUdEO0FBQ0Y7QUFDRixPQXpCRDs7QUEyQkEsV0FBSyxJQUFJbnFDLEdBQVQsSUFBZ0JsaEIsS0FBaEI7QUFBdUJrbEQsWUFBSSxDQUFFaGtDLEdBQUYsQ0FBSjtBQUF2QjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT2xDLElBQVA7QUFDRDtBQUVEOztBQUVBOzs7OztBQUdBLFNBQVNzc0MsWUFBVCxDQUNFLzJDLEtBREYsRUFFRWczQyxPQUZGLEVBR0U7QUFDQSxNQUFJNWYsTUFBTSxHQUFHLEtBQUs2ZixZQUFMLEtBQXNCLEtBQUtBLFlBQUwsR0FBb0IsRUFBMUMsQ0FBYjtBQUNBLE1BQUkvWSxJQUFJLEdBQUc5RyxNQUFNLENBQUNwM0IsS0FBRCxDQUFqQixDQUZBLENBR0E7QUFDQTs7QUFDQSxNQUFJaytCLElBQUksSUFBSSxDQUFDOFksT0FBYixFQUFzQjtBQUNwQixXQUFPOVksSUFBUDtBQUNELEdBUEQsQ0FRQTs7O0FBQ0FBLE1BQUksR0FBRzlHLE1BQU0sQ0FBQ3AzQixLQUFELENBQU4sR0FBZ0IsS0FBSzg5QixRQUFMLENBQWMyVixlQUFkLENBQThCenpDLEtBQTlCLEVBQXFDMlcsSUFBckMsQ0FDckIsS0FBS2c1QixZQURnQixFQUVyQixJQUZxQixFQUdyQixJQUhxQixDQUdoQjtBQUhnQixHQUF2QjtBQUtBdUgsWUFBVSxDQUFDaFosSUFBRCxFQUFRLGVBQWVsK0IsS0FBdkIsRUFBK0IsS0FBL0IsQ0FBVjtBQUNBLFNBQU9rK0IsSUFBUDtBQUNEO0FBRUQ7Ozs7OztBQUlBLFNBQVNpWixRQUFULENBQ0VqWixJQURGLEVBRUVsK0IsS0FGRixFQUdFMk0sR0FIRixFQUlFO0FBQ0F1cUMsWUFBVSxDQUFDaFosSUFBRCxFQUFRLGFBQWFsK0IsS0FBYixJQUFzQjJNLEdBQUcsR0FBSSxNQUFNQSxHQUFWLEdBQWlCLEVBQTFDLENBQVIsRUFBd0QsSUFBeEQsQ0FBVjtBQUNBLFNBQU91eEIsSUFBUDtBQUNEOztBQUVELFNBQVNnWixVQUFULENBQ0VoWixJQURGLEVBRUV2eEIsR0FGRixFQUdFcXpCLE1BSEYsRUFJRTtBQUNBLE1BQUlqekIsS0FBSyxDQUFDaWUsT0FBTixDQUFja1QsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFNBQUssSUFBSXAzQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbzNCLElBQUksQ0FBQ2h5QyxNQUF6QixFQUFpQzRhLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsVUFBSW8zQixJQUFJLENBQUNwM0IsQ0FBRCxDQUFKLElBQVcsT0FBT28zQixJQUFJLENBQUNwM0IsQ0FBRCxDQUFYLEtBQW1CLFFBQWxDLEVBQTRDO0FBQzFDc3dDLHNCQUFjLENBQUNsWixJQUFJLENBQUNwM0IsQ0FBRCxDQUFMLEVBQVc2RixHQUFHLEdBQUcsR0FBTixHQUFZN0YsQ0FBdkIsRUFBMkJrNUIsTUFBM0IsQ0FBZDtBQUNEO0FBQ0Y7QUFDRixHQU5ELE1BTU87QUFDTG9YLGtCQUFjLENBQUNsWixJQUFELEVBQU92eEIsR0FBUCxFQUFZcXpCLE1BQVosQ0FBZDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU29YLGNBQVQsQ0FBeUI3VyxJQUF6QixFQUErQjV6QixHQUEvQixFQUFvQ3F6QixNQUFwQyxFQUE0QztBQUMxQ08sTUFBSSxDQUFDWCxRQUFMLEdBQWdCLElBQWhCO0FBQ0FXLE1BQUksQ0FBQzV6QixHQUFMLEdBQVdBLEdBQVg7QUFDQTR6QixNQUFJLENBQUNQLE1BQUwsR0FBY0EsTUFBZDtBQUNEO0FBRUQ7OztBQUVBLFNBQVNxWCxtQkFBVCxDQUE4QjVzQyxJQUE5QixFQUFvQ2hmLEtBQXBDLEVBQTJDO0FBQ3pDLE1BQUlBLEtBQUosRUFBVztBQUNULFFBQUksQ0FBQzJxQyxhQUFhLENBQUMzcUMsS0FBRCxDQUFsQixFQUEyQjtBQUN6QjYrQixXQUFBLElBQXlDckQsSUFBSSxDQUMzQywrQ0FEMkMsRUFFM0MsSUFGMkMsQ0FBN0M7QUFJRCxLQUxELE1BS087QUFDTCxVQUFJc21CLEVBQUUsR0FBRzlpQyxJQUFJLENBQUM4aUMsRUFBTCxHQUFVOWlDLElBQUksQ0FBQzhpQyxFQUFMLEdBQVVwVixNQUFNLENBQUMsRUFBRCxFQUFLMXRCLElBQUksQ0FBQzhpQyxFQUFWLENBQWhCLEdBQWdDLEVBQW5EOztBQUNBLFdBQUssSUFBSTVnQyxHQUFULElBQWdCbGhCLEtBQWhCLEVBQXVCO0FBQ3JCLFlBQUk2ckQsUUFBUSxHQUFHL0osRUFBRSxDQUFDNWdDLEdBQUQsQ0FBakI7QUFDQSxZQUFJNHFDLElBQUksR0FBRzlyRCxLQUFLLENBQUNraEIsR0FBRCxDQUFoQjtBQUNBNGdDLFVBQUUsQ0FBQzVnQyxHQUFELENBQUYsR0FBVTJxQyxRQUFRLEdBQUcsR0FBR3B0QyxNQUFILENBQVVvdEMsUUFBVixFQUFvQkMsSUFBcEIsQ0FBSCxHQUErQkEsSUFBakQ7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsU0FBTzlzQyxJQUFQO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBUytzQyxrQkFBVCxDQUNFckssR0FERixFQUNPO0FBQ0x6aUIsR0FGRixFQUdFO0FBQ0Erc0IsY0FKRixFQUtFQyxjQUxGLEVBTUU7QUFDQWh0QixLQUFHLEdBQUdBLEdBQUcsSUFBSTtBQUFFb3FCLFdBQU8sRUFBRSxDQUFDMkM7QUFBWixHQUFiOztBQUNBLE9BQUssSUFBSTN3QyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHcW1DLEdBQUcsQ0FBQ2poRCxNQUF4QixFQUFnQzRhLENBQUMsRUFBakMsRUFBcUM7QUFDbkMsUUFBSXd0QyxJQUFJLEdBQUduSCxHQUFHLENBQUNybUMsQ0FBRCxDQUFkOztBQUNBLFFBQUlpRyxLQUFLLENBQUNpZSxPQUFOLENBQWNzcEIsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCa0Qsd0JBQWtCLENBQUNsRCxJQUFELEVBQU81cEIsR0FBUCxFQUFZK3NCLGNBQVosQ0FBbEI7QUFDRCxLQUZELE1BRU8sSUFBSW5ELElBQUosRUFBVTtBQUNmO0FBQ0EsVUFBSUEsSUFBSSxDQUFDekUsS0FBVCxFQUFnQjtBQUNkeUUsWUFBSSxDQUFDbnBCLEVBQUwsQ0FBUTBrQixLQUFSLEdBQWdCLElBQWhCO0FBQ0Q7O0FBQ0RubEIsU0FBRyxDQUFDNHBCLElBQUksQ0FBQzNuQyxHQUFOLENBQUgsR0FBZ0IybkMsSUFBSSxDQUFDbnBCLEVBQXJCO0FBQ0Q7QUFDRjs7QUFDRCxNQUFJdXNCLGNBQUosRUFBb0I7QUFDakJodEIsT0FBRCxDQUFNcXFCLElBQU4sR0FBYTJDLGNBQWI7QUFDRDs7QUFDRCxTQUFPaHRCLEdBQVA7QUFDRDtBQUVEOzs7QUFFQSxTQUFTaXRCLGVBQVQsQ0FBMEJDLE9BQTFCLEVBQW1DbnlDLE1BQW5DLEVBQTJDO0FBQ3pDLE9BQUssSUFBSXFCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdyQixNQUFNLENBQUN2WixNQUEzQixFQUFtQzRhLENBQUMsSUFBSSxDQUF4QyxFQUEyQztBQUN6QyxRQUFJNkYsR0FBRyxHQUFHbEgsTUFBTSxDQUFDcUIsQ0FBRCxDQUFoQjs7QUFDQSxRQUFJLE9BQU82RixHQUFQLEtBQWUsUUFBZixJQUEyQkEsR0FBL0IsRUFBb0M7QUFDbENpckMsYUFBTyxDQUFDbnlDLE1BQU0sQ0FBQ3FCLENBQUQsQ0FBUCxDQUFQLEdBQXFCckIsTUFBTSxDQUFDcUIsQ0FBQyxHQUFHLENBQUwsQ0FBM0I7QUFDRCxLQUZELE1BRU8sSUFBSXdqQixLQUFBLElBQXlDM2QsR0FBRyxLQUFLLEVBQWpELElBQXVEQSxHQUFHLEtBQUssSUFBbkUsRUFBeUU7QUFDOUU7QUFDQXNhLFVBQUksQ0FDRCw2RUFBNkV0YSxHQUQ1RSxFQUVGLElBRkUsQ0FBSjtBQUlEO0FBQ0Y7O0FBQ0QsU0FBT2lyQyxPQUFQO0FBQ0QsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0MsZUFBVCxDQUEwQnBzRCxLQUExQixFQUFpQ3FzRCxNQUFqQyxFQUF5QztBQUN2QyxTQUFPLE9BQU9yc0QsS0FBUCxLQUFpQixRQUFqQixHQUE0QnFzRCxNQUFNLEdBQUdyc0QsS0FBckMsR0FBNkNBLEtBQXBEO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBU3NzRCxvQkFBVCxDQUErQnBsQyxNQUEvQixFQUF1QztBQUNyQ0EsUUFBTSxDQUFDcWxDLEVBQVAsR0FBWWIsUUFBWjtBQUNBeGtDLFFBQU0sQ0FBQ3NsQyxFQUFQLEdBQVl2aEIsUUFBWjtBQUNBL2pCLFFBQU0sQ0FBQ3VsQyxFQUFQLEdBQVl6aEIsVUFBWjtBQUNBOWpCLFFBQU0sQ0FBQ3dsQyxFQUFQLEdBQVk5QyxVQUFaO0FBQ0ExaUMsUUFBTSxDQUFDeWxDLEVBQVAsR0FBWTdDLFVBQVo7QUFDQTVpQyxRQUFNLENBQUMwbEMsRUFBUCxHQUFZemYsVUFBWjtBQUNBam1CLFFBQU0sQ0FBQzJsQyxFQUFQLEdBQVlsZixZQUFaO0FBQ0F6bUIsUUFBTSxDQUFDNGxDLEVBQVAsR0FBWXhCLFlBQVo7QUFDQXBrQyxRQUFNLENBQUM2bEMsRUFBUCxHQUFZekMsYUFBWjtBQUNBcGpDLFFBQU0sQ0FBQzhsQyxFQUFQLEdBQVl0QyxhQUFaO0FBQ0F4akMsUUFBTSxDQUFDOWlCLEVBQVAsR0FBWTRtRCxlQUFaO0FBQ0E5akMsUUFBTSxDQUFDK2xDLEVBQVAsR0FBWWxZLGVBQVo7QUFDQTd0QixRQUFNLENBQUNnbUMsRUFBUCxHQUFZclksZ0JBQVo7QUFDQTN0QixRQUFNLENBQUNpbUMsRUFBUCxHQUFZcEIsa0JBQVo7QUFDQTdrQyxRQUFNLENBQUNrbUMsRUFBUCxHQUFZeEIsbUJBQVo7QUFDQTFrQyxRQUFNLENBQUNtbUMsRUFBUCxHQUFZbkIsZUFBWjtBQUNBaGxDLFFBQU0sQ0FBQ29tQyxFQUFQLEdBQVlsQixlQUFaO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBU21CLHVCQUFULENBQ0V2dUMsSUFERixFQUVFZ1osS0FGRixFQUdFeWIsUUFIRixFQUlFcmhCLE1BSkYsRUFLRTBkLElBTEYsRUFNRTtBQUNBLE1BQUkwZCxNQUFNLEdBQUcsSUFBYjtBQUVBLE1BQUl6d0IsT0FBTyxHQUFHK1MsSUFBSSxDQUFDL1MsT0FBbkIsQ0FIQSxDQUlBO0FBQ0E7O0FBQ0EsTUFBSTB3QixTQUFKOztBQUNBLE1BQUkvaEIsUUFBUSxDQUFDdFosTUFBRCxFQUFTLE1BQVQsQ0FBWixFQUE4QjtBQUM1QnE3QixhQUFTLEdBQUc1dEQsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBY2paLE1BQWQsQ0FBWixDQUQ0QixDQUU1Qjs7QUFDQXE3QixhQUFTLENBQUNDLFNBQVYsR0FBc0J0N0IsTUFBdEI7QUFDRCxHQUpELE1BSU87QUFDTDtBQUNBO0FBQ0E7QUFDQXE3QixhQUFTLEdBQUdyN0IsTUFBWixDQUpLLENBS0w7O0FBQ0FBLFVBQU0sR0FBR0EsTUFBTSxDQUFDczdCLFNBQWhCO0FBQ0Q7O0FBQ0QsTUFBSUMsVUFBVSxHQUFHdGpCLE1BQU0sQ0FBQ3ROLE9BQU8sQ0FBQzZ3QixTQUFULENBQXZCO0FBQ0EsTUFBSUMsaUJBQWlCLEdBQUcsQ0FBQ0YsVUFBekI7QUFFQSxPQUFLM3VDLElBQUwsR0FBWUEsSUFBWjtBQUNBLE9BQUtnWixLQUFMLEdBQWFBLEtBQWI7QUFDQSxPQUFLeWIsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxPQUFLcmhCLE1BQUwsR0FBY0EsTUFBZDtBQUNBLE9BQUt1RyxTQUFMLEdBQWlCM1osSUFBSSxDQUFDOGlDLEVBQUwsSUFBVzVYLFdBQTVCO0FBQ0EsT0FBSzRqQixVQUFMLEdBQWtCbEgsYUFBYSxDQUFDN3BCLE9BQU8sQ0FBQzBiLE1BQVQsRUFBaUJybUIsTUFBakIsQ0FBL0I7O0FBQ0EsT0FBS3cyQixLQUFMLEdBQWEsWUFBWTtBQUN2QixRQUFJLENBQUM0RSxNQUFNLENBQUNwRCxNQUFaLEVBQW9CO0FBQ2xCcEIsMEJBQW9CLENBQ2xCaHFDLElBQUksQ0FBQyt1QyxXQURhLEVBRWxCUCxNQUFNLENBQUNwRCxNQUFQLEdBQWdCekIsWUFBWSxDQUFDbFYsUUFBRCxFQUFXcmhCLE1BQVgsQ0FGVixDQUFwQjtBQUlEOztBQUNELFdBQU9vN0IsTUFBTSxDQUFDcEQsTUFBZDtBQUNELEdBUkQ7O0FBVUF2cUQsUUFBTSxDQUFDQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLGFBQTVCLEVBQTRDO0FBQzFDOEIsY0FBVSxFQUFFLElBRDhCO0FBRTFDRCxPQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFnQjtBQUNuQixhQUFPcW5ELG9CQUFvQixDQUFDaHFDLElBQUksQ0FBQyt1QyxXQUFOLEVBQW1CLEtBQUtuRixLQUFMLEVBQW5CLENBQTNCO0FBQ0Q7QUFKeUMsR0FBNUMsRUF0Q0EsQ0E2Q0E7O0FBQ0EsTUFBSStFLFVBQUosRUFBZ0I7QUFDZDtBQUNBLFNBQUt0YixRQUFMLEdBQWdCdFYsT0FBaEIsQ0FGYyxDQUdkOztBQUNBLFNBQUtxdEIsTUFBTCxHQUFjLEtBQUt4QixLQUFMLEVBQWQ7QUFDQSxTQUFLc0IsWUFBTCxHQUFvQmxCLG9CQUFvQixDQUFDaHFDLElBQUksQ0FBQyt1QyxXQUFOLEVBQW1CLEtBQUszRCxNQUF4QixDQUF4QztBQUNEOztBQUVELE1BQUlydEIsT0FBTyxDQUFDaXhCLFFBQVosRUFBc0I7QUFDcEIsU0FBS0MsRUFBTCxHQUFVLFVBQVVuc0QsQ0FBVixFQUFhSSxDQUFiLEVBQWdCK3BDLENBQWhCLEVBQW1CNUQsQ0FBbkIsRUFBc0I7QUFDOUIsVUFBSTRNLEtBQUssR0FBR2laLGFBQWEsQ0FBQ1QsU0FBRCxFQUFZM3JELENBQVosRUFBZUksQ0FBZixFQUFrQitwQyxDQUFsQixFQUFxQjVELENBQXJCLEVBQXdCd2xCLGlCQUF4QixDQUF6Qjs7QUFDQSxVQUFJNVksS0FBSyxJQUFJLENBQUMzekIsS0FBSyxDQUFDaWUsT0FBTixDQUFjMFYsS0FBZCxDQUFkLEVBQW9DO0FBQ2xDQSxhQUFLLENBQUNqQixTQUFOLEdBQWtCalgsT0FBTyxDQUFDaXhCLFFBQTFCO0FBQ0EvWSxhQUFLLENBQUNuQixTQUFOLEdBQWtCMWhCLE1BQWxCO0FBQ0Q7O0FBQ0QsYUFBTzZpQixLQUFQO0FBQ0QsS0FQRDtBQVFELEdBVEQsTUFTTztBQUNMLFNBQUtnWixFQUFMLEdBQVUsVUFBVW5zRCxDQUFWLEVBQWFJLENBQWIsRUFBZ0IrcEMsQ0FBaEIsRUFBbUI1RCxDQUFuQixFQUFzQjtBQUFFLGFBQU82bEIsYUFBYSxDQUFDVCxTQUFELEVBQVkzckQsQ0FBWixFQUFlSSxDQUFmLEVBQWtCK3BDLENBQWxCLEVBQXFCNUQsQ0FBckIsRUFBd0J3bEIsaUJBQXhCLENBQXBCO0FBQWlFLEtBQW5HO0FBQ0Q7QUFDRjs7QUFFRHZCLG9CQUFvQixDQUFDaUIsdUJBQXVCLENBQUM3ckQsU0FBekIsQ0FBcEI7O0FBRUEsU0FBU3lzRCx5QkFBVCxDQUNFcmUsSUFERixFQUVFd0gsU0FGRixFQUdFdDRCLElBSEYsRUFJRXl1QyxTQUpGLEVBS0VoYSxRQUxGLEVBTUU7QUFDQSxNQUFJMVcsT0FBTyxHQUFHK1MsSUFBSSxDQUFDL1MsT0FBbkI7QUFDQSxNQUFJL0UsS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJK2hCLFdBQVcsR0FBR2hkLE9BQU8sQ0FBQy9FLEtBQTFCOztBQUNBLE1BQUlvUyxLQUFLLENBQUMyUCxXQUFELENBQVQsRUFBd0I7QUFDdEIsU0FBSyxJQUFJNzRCLEdBQVQsSUFBZ0I2NEIsV0FBaEIsRUFBNkI7QUFDM0IvaEIsV0FBSyxDQUFDOVcsR0FBRCxDQUFMLEdBQWE0NEIsWUFBWSxDQUFDNTRCLEdBQUQsRUFBTTY0QixXQUFOLEVBQW1CekMsU0FBUyxJQUFJcE4sV0FBaEMsQ0FBekI7QUFDRDtBQUNGLEdBSkQsTUFJTztBQUNMLFFBQUlFLEtBQUssQ0FBQ3ByQixJQUFJLENBQUN3akMsS0FBTixDQUFULEVBQXVCO0FBQUU0TCxnQkFBVSxDQUFDcDJCLEtBQUQsRUFBUWhaLElBQUksQ0FBQ3dqQyxLQUFiLENBQVY7QUFBZ0M7O0FBQ3pELFFBQUlwWSxLQUFLLENBQUNwckIsSUFBSSxDQUFDZ1osS0FBTixDQUFULEVBQXVCO0FBQUVvMkIsZ0JBQVUsQ0FBQ3AyQixLQUFELEVBQVFoWixJQUFJLENBQUNnWixLQUFiLENBQVY7QUFBZ0M7QUFDMUQ7O0FBRUQsTUFBSXEyQixhQUFhLEdBQUcsSUFBSWQsdUJBQUosQ0FDbEJ2dUMsSUFEa0IsRUFFbEJnWixLQUZrQixFQUdsQnliLFFBSGtCLEVBSWxCZ2EsU0FKa0IsRUFLbEIzZCxJQUxrQixDQUFwQjtBQVFBLE1BQUltRixLQUFLLEdBQUdsWSxPQUFPLENBQUNpbkIsTUFBUixDQUFlOTRCLElBQWYsQ0FBb0IsSUFBcEIsRUFBMEJtakMsYUFBYSxDQUFDSixFQUF4QyxFQUE0Q0ksYUFBNUMsQ0FBWjs7QUFFQSxNQUFJcFosS0FBSyxZQUFZMUIsS0FBckIsRUFBNEI7QUFDMUIsV0FBTythLDRCQUE0QixDQUFDclosS0FBRCxFQUFRajJCLElBQVIsRUFBY3F2QyxhQUFhLENBQUNqOEIsTUFBNUIsRUFBb0MySyxPQUFwQyxFQUE2Q3N4QixhQUE3QyxDQUFuQztBQUNELEdBRkQsTUFFTyxJQUFJL3NDLEtBQUssQ0FBQ2llLE9BQU4sQ0FBYzBWLEtBQWQsQ0FBSixFQUEwQjtBQUMvQixRQUFJc1osTUFBTSxHQUFHekwsaUJBQWlCLENBQUM3TixLQUFELENBQWpCLElBQTRCLEVBQXpDO0FBQ0EsUUFBSWhXLEdBQUcsR0FBRyxJQUFJM2QsS0FBSixDQUFVaXRDLE1BQU0sQ0FBQzl0RCxNQUFqQixDQUFWOztBQUNBLFNBQUssSUFBSTRhLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdrekMsTUFBTSxDQUFDOXRELE1BQTNCLEVBQW1DNGEsQ0FBQyxFQUFwQyxFQUF3QztBQUN0QzRqQixTQUFHLENBQUM1akIsQ0FBRCxDQUFILEdBQVNpekMsNEJBQTRCLENBQUNDLE1BQU0sQ0FBQ2x6QyxDQUFELENBQVAsRUFBWTJELElBQVosRUFBa0JxdkMsYUFBYSxDQUFDajhCLE1BQWhDLEVBQXdDMkssT0FBeEMsRUFBaURzeEIsYUFBakQsQ0FBckM7QUFDRDs7QUFDRCxXQUFPcHZCLEdBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNxdkIsNEJBQVQsQ0FBdUNyWixLQUF2QyxFQUE4Q2oyQixJQUE5QyxFQUFvRHl1QyxTQUFwRCxFQUErRDF3QixPQUEvRCxFQUF3RXN4QixhQUF4RSxFQUF1RjtBQUNyRjtBQUNBO0FBQ0E7QUFDQSxNQUFJRyxLQUFLLEdBQUd4WixVQUFVLENBQUNDLEtBQUQsQ0FBdEI7QUFDQXVaLE9BQUssQ0FBQzFhLFNBQU4sR0FBa0IyWixTQUFsQjtBQUNBZSxPQUFLLENBQUN6YSxTQUFOLEdBQWtCaFgsT0FBbEI7O0FBQ0EsTUFBSThCLElBQUosRUFBMkM7QUFDekMsS0FBQzJ2QixLQUFLLENBQUNDLFlBQU4sR0FBcUJELEtBQUssQ0FBQ0MsWUFBTixJQUFzQixFQUE1QyxFQUFnREosYUFBaEQsR0FBZ0VBLGFBQWhFO0FBQ0Q7O0FBQ0QsTUFBSXJ2QyxJQUFJLENBQUM2cEMsSUFBVCxFQUFlO0FBQ2IsS0FBQzJGLEtBQUssQ0FBQ3h2QyxJQUFOLEtBQWV3dkMsS0FBSyxDQUFDeHZDLElBQU4sR0FBYSxFQUE1QixDQUFELEVBQWtDNnBDLElBQWxDLEdBQXlDN3BDLElBQUksQ0FBQzZwQyxJQUE5QztBQUNEOztBQUNELFNBQU8yRixLQUFQO0FBQ0Q7O0FBRUQsU0FBU0osVUFBVCxDQUFxQnpoQixFQUFyQixFQUF5QnJaLElBQXpCLEVBQStCO0FBQzdCLE9BQUssSUFBSXBTLEdBQVQsSUFBZ0JvUyxJQUFoQixFQUFzQjtBQUNwQnFaLE1BQUUsQ0FBQ1gsUUFBUSxDQUFDOXFCLEdBQUQsQ0FBVCxDQUFGLEdBQW9Cb1MsSUFBSSxDQUFDcFMsR0FBRCxDQUF4QjtBQUNEO0FBQ0Y7QUFFRDtBQUVBOzs7QUFDQSxJQUFJd3RDLG1CQUFtQixHQUFHO0FBQ3hCNWdDLE1BQUksRUFBRSxTQUFTQSxJQUFULENBQWVtbkIsS0FBZixFQUFzQjBaLFNBQXRCLEVBQWlDO0FBQ3JDLFFBQ0UxWixLQUFLLENBQUNoQixpQkFBTixJQUNBLENBQUNnQixLQUFLLENBQUNoQixpQkFBTixDQUF3QndMLFlBRHpCLElBRUF4SyxLQUFLLENBQUNqMkIsSUFBTixDQUFXNHZDLFNBSGIsRUFJRTtBQUNBO0FBQ0EsVUFBSUMsV0FBVyxHQUFHNVosS0FBbEIsQ0FGQSxDQUV5Qjs7QUFDekJ5Wix5QkFBbUIsQ0FBQ0ksUUFBcEIsQ0FBNkJELFdBQTdCLEVBQTBDQSxXQUExQztBQUNELEtBUkQsTUFRTztBQUNMLFVBQUlsYSxLQUFLLEdBQUdNLEtBQUssQ0FBQ2hCLGlCQUFOLEdBQTBCOGEsK0JBQStCLENBQ25FOVosS0FEbUUsRUFFbkUrWixjQUZtRSxDQUFyRTtBQUlBcmEsV0FBSyxDQUFDK1MsTUFBTixDQUFhaUgsU0FBUyxHQUFHMVosS0FBSyxDQUFDdkIsR0FBVCxHQUFldHhDLFNBQXJDLEVBQWdEdXNELFNBQWhEO0FBQ0Q7QUFDRixHQWpCdUI7QUFtQnhCRyxVQUFRLEVBQUUsU0FBU0EsUUFBVCxDQUFtQmoxQixRQUFuQixFQUE2Qm9iLEtBQTdCLEVBQW9DO0FBQzVDLFFBQUlsWSxPQUFPLEdBQUdrWSxLQUFLLENBQUN0QixnQkFBcEI7QUFDQSxRQUFJZ0IsS0FBSyxHQUFHTSxLQUFLLENBQUNoQixpQkFBTixHQUEwQnBhLFFBQVEsQ0FBQ29hLGlCQUEvQztBQUNBZ2Isd0JBQW9CLENBQ2xCdGEsS0FEa0IsRUFFbEI1WCxPQUFPLENBQUN1YSxTQUZVLEVBRUM7QUFDbkJ2YSxXQUFPLENBQUNwRSxTQUhVLEVBR0M7QUFDbkJzYyxTQUprQixFQUlYO0FBQ1BsWSxXQUFPLENBQUMwVyxRQUxVLENBS0Q7QUFMQyxLQUFwQjtBQU9ELEdBN0J1QjtBQStCeEJ5YixRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFpQmphLEtBQWpCLEVBQXdCO0FBQzlCLFFBQUlyYixPQUFPLEdBQUdxYixLQUFLLENBQUNyYixPQUFwQjtBQUNBLFFBQUlxYSxpQkFBaUIsR0FBR2dCLEtBQUssQ0FBQ2hCLGlCQUE5Qjs7QUFDQSxRQUFJLENBQUNBLGlCQUFpQixDQUFDdUwsVUFBdkIsRUFBbUM7QUFDakN2TCx1QkFBaUIsQ0FBQ3VMLFVBQWxCLEdBQStCLElBQS9CO0FBQ0FFLGNBQVEsQ0FBQ3pMLGlCQUFELEVBQW9CLFNBQXBCLENBQVI7QUFDRDs7QUFDRCxRQUFJZ0IsS0FBSyxDQUFDajJCLElBQU4sQ0FBVzR2QyxTQUFmLEVBQTBCO0FBQ3hCLFVBQUloMUIsT0FBTyxDQUFDNGxCLFVBQVosRUFBd0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRywrQkFBdUIsQ0FBQzFMLGlCQUFELENBQXZCO0FBQ0QsT0FQRCxNQU9PO0FBQ0w0TCw4QkFBc0IsQ0FBQzVMLGlCQUFELEVBQW9CO0FBQUs7QUFBekIsU0FBdEI7QUFDRDtBQUNGO0FBQ0YsR0FsRHVCO0FBb0R4QnFKLFNBQU8sRUFBRSxTQUFTQSxPQUFULENBQWtCckksS0FBbEIsRUFBeUI7QUFDaEMsUUFBSWhCLGlCQUFpQixHQUFHZ0IsS0FBSyxDQUFDaEIsaUJBQTlCOztBQUNBLFFBQUksQ0FBQ0EsaUJBQWlCLENBQUN3TCxZQUF2QixFQUFxQztBQUNuQyxVQUFJLENBQUN4SyxLQUFLLENBQUNqMkIsSUFBTixDQUFXNHZDLFNBQWhCLEVBQTJCO0FBQ3pCM2EseUJBQWlCLENBQUNrYixRQUFsQjtBQUNELE9BRkQsTUFFTztBQUNMQyxnQ0FBd0IsQ0FBQ25iLGlCQUFELEVBQW9CO0FBQUs7QUFBekIsU0FBeEI7QUFDRDtBQUNGO0FBQ0Y7QUE3RHVCLENBQTFCO0FBZ0VBLElBQUlvYixZQUFZLEdBQUd4dkQsTUFBTSxDQUFDMHpCLElBQVAsQ0FBWW03QixtQkFBWixDQUFuQjs7QUFFQSxTQUFTWSxlQUFULENBQ0V4ZixJQURGLEVBRUU5d0IsSUFGRixFQUdFNGEsT0FIRixFQUlFNlosUUFKRixFQUtFRCxHQUxGLEVBTUU7QUFDQSxNQUFJckosT0FBTyxDQUFDMkYsSUFBRCxDQUFYLEVBQW1CO0FBQ2pCO0FBQ0Q7O0FBRUQsTUFBSXlmLFFBQVEsR0FBRzMxQixPQUFPLENBQUN5WSxRQUFSLENBQWlCK0csS0FBaEMsQ0FMQSxDQU9BOztBQUNBLE1BQUk1TyxVQUFVLENBQUNzRixJQUFELENBQWQsRUFBc0I7QUFDcEJBLFFBQUksR0FBR3lmLFFBQVEsQ0FBQzdpQixNQUFULENBQWdCb0QsSUFBaEIsQ0FBUDtBQUNELEdBVkQsQ0FZQTtBQUNBOzs7QUFDQSxNQUFJLE9BQU9BLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUIsUUFBSWpSLElBQUosRUFBMkM7QUFDekNyRCxVQUFJLENBQUUsbUNBQW9DaGdCLE1BQU0sQ0FBQ3MwQixJQUFELENBQTVDLEVBQXNEbFcsT0FBdEQsQ0FBSjtBQUNEOztBQUNEO0FBQ0QsR0FuQkQsQ0FxQkE7OztBQUNBLE1BQUlnYSxZQUFKOztBQUNBLE1BQUl6SixPQUFPLENBQUMyRixJQUFJLENBQUNxQyxHQUFOLENBQVgsRUFBdUI7QUFDckJ5QixnQkFBWSxHQUFHOUQsSUFBZjtBQUNBQSxRQUFJLEdBQUcwZixxQkFBcUIsQ0FBQzViLFlBQUQsRUFBZTJiLFFBQWYsQ0FBNUI7O0FBQ0EsUUFBSXpmLElBQUksS0FBSzF0QyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGFBQU9xdEQsc0JBQXNCLENBQzNCN2IsWUFEMkIsRUFFM0I1MEIsSUFGMkIsRUFHM0I0YSxPQUgyQixFQUkzQjZaLFFBSjJCLEVBSzNCRCxHQUwyQixDQUE3QjtBQU9EO0FBQ0Y7O0FBRUR4MEIsTUFBSSxHQUFHQSxJQUFJLElBQUksRUFBZixDQXhDQSxDQTBDQTtBQUNBOztBQUNBcW9DLDJCQUF5QixDQUFDdlgsSUFBRCxDQUF6QixDQTVDQSxDQThDQTs7QUFDQSxNQUFJMUYsS0FBSyxDQUFDcHJCLElBQUksQ0FBQzZZLEtBQU4sQ0FBVCxFQUF1QjtBQUNyQjYzQixrQkFBYyxDQUFDNWYsSUFBSSxDQUFDL1MsT0FBTixFQUFlL2QsSUFBZixDQUFkO0FBQ0QsR0FqREQsQ0FtREE7OztBQUNBLE1BQUlzNEIsU0FBUyxHQUFHaUwseUJBQXlCLENBQUN2akMsSUFBRCxFQUFPOHdCLElBQVAsRUFBYTBELEdBQWIsQ0FBekMsQ0FwREEsQ0FzREE7O0FBQ0EsTUFBSW5KLE1BQU0sQ0FBQ3lGLElBQUksQ0FBQy9TLE9BQUwsQ0FBYTR5QixVQUFkLENBQVYsRUFBcUM7QUFDbkMsV0FBT3hCLHlCQUF5QixDQUFDcmUsSUFBRCxFQUFPd0gsU0FBUCxFQUFrQnQ0QixJQUFsQixFQUF3QjRhLE9BQXhCLEVBQWlDNlosUUFBakMsQ0FBaEM7QUFDRCxHQXpERCxDQTJEQTtBQUNBOzs7QUFDQSxNQUFJOWEsU0FBUyxHQUFHM1osSUFBSSxDQUFDOGlDLEVBQXJCLENBN0RBLENBOERBO0FBQ0E7O0FBQ0E5aUMsTUFBSSxDQUFDOGlDLEVBQUwsR0FBVTlpQyxJQUFJLENBQUM0d0MsUUFBZjs7QUFFQSxNQUFJdmxCLE1BQU0sQ0FBQ3lGLElBQUksQ0FBQy9TLE9BQUwsQ0FBYTh5QixRQUFkLENBQVYsRUFBbUM7QUFDakM7QUFDQTtBQUVBO0FBQ0EsUUFBSWhILElBQUksR0FBRzdwQyxJQUFJLENBQUM2cEMsSUFBaEI7QUFDQTdwQyxRQUFJLEdBQUcsRUFBUDs7QUFDQSxRQUFJNnBDLElBQUosRUFBVTtBQUNSN3BDLFVBQUksQ0FBQzZwQyxJQUFMLEdBQVlBLElBQVo7QUFDRDtBQUNGLEdBNUVELENBOEVBOzs7QUFDQWlILHVCQUFxQixDQUFDOXdDLElBQUQsQ0FBckIsQ0EvRUEsQ0FpRkE7O0FBQ0EsTUFBSTdaLElBQUksR0FBRzJxQyxJQUFJLENBQUMvUyxPQUFMLENBQWE1M0IsSUFBYixJQUFxQnF1QyxHQUFoQztBQUNBLE1BQUl5QixLQUFLLEdBQUcsSUFBSTFCLEtBQUosQ0FDVCxtQkFBb0J6RCxJQUFJLENBQUNxQyxHQUF6QixJQUFpQ2h0QyxJQUFJLEdBQUksTUFBTUEsSUFBVixHQUFrQixFQUF2RCxDQURTLEVBRVY2WixJQUZVLEVBRUo1YyxTQUZJLEVBRU9BLFNBRlAsRUFFa0JBLFNBRmxCLEVBRTZCdzNCLE9BRjdCLEVBR1Y7QUFBRWtXLFFBQUksRUFBRUEsSUFBUjtBQUFjd0gsYUFBUyxFQUFFQSxTQUF6QjtBQUFvQzNlLGFBQVMsRUFBRUEsU0FBL0M7QUFBMEQ2YSxPQUFHLEVBQUVBLEdBQS9EO0FBQW9FQyxZQUFRLEVBQUVBO0FBQTlFLEdBSFUsRUFJVkcsWUFKVSxDQUFaO0FBT0EsU0FBT3FCLEtBQVA7QUFDRDs7QUFFRCxTQUFTOFosK0JBQVQsQ0FDRTlaLEtBREYsRUFDUztBQUNQN2lCLE1BRkYsQ0FFUztBQUZULEVBR0U7QUFDQSxNQUFJMkssT0FBTyxHQUFHO0FBQ1pvcUIsZ0JBQVksRUFBRSxJQURGO0FBRVpTLGdCQUFZLEVBQUUzUyxLQUZGO0FBR1o3aUIsVUFBTSxFQUFFQTtBQUhJLEdBQWQsQ0FEQSxDQU1BOztBQUNBLE1BQUkyOUIsY0FBYyxHQUFHOWEsS0FBSyxDQUFDajJCLElBQU4sQ0FBVyt3QyxjQUFoQzs7QUFDQSxNQUFJM2xCLEtBQUssQ0FBQzJsQixjQUFELENBQVQsRUFBMkI7QUFDekJoekIsV0FBTyxDQUFDaW5CLE1BQVIsR0FBaUIrTCxjQUFjLENBQUMvTCxNQUFoQztBQUNBam5CLFdBQU8sQ0FBQ2lyQixlQUFSLEdBQTBCK0gsY0FBYyxDQUFDL0gsZUFBekM7QUFDRDs7QUFDRCxTQUFPLElBQUkvUyxLQUFLLENBQUN0QixnQkFBTixDQUF1QjdELElBQTNCLENBQWdDL1MsT0FBaEMsQ0FBUDtBQUNEOztBQUVELFNBQVMreUIscUJBQVQsQ0FBZ0M5d0MsSUFBaEMsRUFBc0M7QUFDcEMsTUFBSW81QixLQUFLLEdBQUdwNUIsSUFBSSxDQUFDcTVCLElBQUwsS0FBY3I1QixJQUFJLENBQUNxNUIsSUFBTCxHQUFZLEVBQTFCLENBQVo7O0FBQ0EsT0FBSyxJQUFJaDlCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdnMEMsWUFBWSxDQUFDNXVELE1BQWpDLEVBQXlDNGEsQ0FBQyxFQUExQyxFQUE4QztBQUM1QyxRQUFJNkYsR0FBRyxHQUFHbXVDLFlBQVksQ0FBQ2gwQyxDQUFELENBQXRCO0FBQ0EsUUFBSXd3QyxRQUFRLEdBQUd6VCxLQUFLLENBQUNsM0IsR0FBRCxDQUFwQjtBQUNBLFFBQUk4dUMsT0FBTyxHQUFHdEIsbUJBQW1CLENBQUN4dEMsR0FBRCxDQUFqQzs7QUFDQSxRQUFJMnFDLFFBQVEsS0FBS21FLE9BQWIsSUFBd0IsRUFBRW5FLFFBQVEsSUFBSUEsUUFBUSxDQUFDb0UsT0FBdkIsQ0FBNUIsRUFBNkQ7QUFDM0Q3WCxXQUFLLENBQUNsM0IsR0FBRCxDQUFMLEdBQWEycUMsUUFBUSxHQUFHcUUsV0FBVyxDQUFDRixPQUFELEVBQVVuRSxRQUFWLENBQWQsR0FBb0NtRSxPQUF6RDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTRSxXQUFULENBQXNCQyxFQUF0QixFQUEwQkMsRUFBMUIsRUFBOEI7QUFDNUIsTUFBSTlOLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVV4Z0QsQ0FBVixFQUFhSSxDQUFiLEVBQWdCO0FBQzNCO0FBQ0FpdUQsTUFBRSxDQUFDcnVELENBQUQsRUFBSUksQ0FBSixDQUFGO0FBQ0FrdUQsTUFBRSxDQUFDdHVELENBQUQsRUFBSUksQ0FBSixDQUFGO0FBQ0QsR0FKRDs7QUFLQW9nRCxRQUFNLENBQUMyTixPQUFQLEdBQWlCLElBQWpCO0FBQ0EsU0FBTzNOLE1BQVA7QUFDRCxDLENBRUQ7QUFDQTs7O0FBQ0EsU0FBU29OLGNBQVQsQ0FBeUIzeUIsT0FBekIsRUFBa0MvZCxJQUFsQyxFQUF3QztBQUN0QyxNQUFJOFksSUFBSSxHQUFJaUYsT0FBTyxDQUFDbEYsS0FBUixJQUFpQmtGLE9BQU8sQ0FBQ2xGLEtBQVIsQ0FBY0MsSUFBaEMsSUFBeUMsT0FBcEQ7QUFDQSxNQUFJQyxLQUFLLEdBQUlnRixPQUFPLENBQUNsRixLQUFSLElBQWlCa0YsT0FBTyxDQUFDbEYsS0FBUixDQUFjRSxLQUFoQyxJQUEwQyxPQUF0RDtBQUNDLEdBQUMvWSxJQUFJLENBQUN3akMsS0FBTCxLQUFleGpDLElBQUksQ0FBQ3dqQyxLQUFMLEdBQWEsRUFBNUIsQ0FBRCxFQUFrQzFxQixJQUFsQyxJQUEwQzlZLElBQUksQ0FBQzZZLEtBQUwsQ0FBVzczQixLQUFyRDtBQUNELE1BQUk4aEQsRUFBRSxHQUFHOWlDLElBQUksQ0FBQzhpQyxFQUFMLEtBQVk5aUMsSUFBSSxDQUFDOGlDLEVBQUwsR0FBVSxFQUF0QixDQUFUO0FBQ0EsTUFBSStKLFFBQVEsR0FBRy9KLEVBQUUsQ0FBQy9wQixLQUFELENBQWpCO0FBQ0EsTUFBSTVFLFFBQVEsR0FBR25VLElBQUksQ0FBQzZZLEtBQUwsQ0FBVzFFLFFBQTFCOztBQUNBLE1BQUlpWCxLQUFLLENBQUN5aEIsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFFBQ0V2cUMsS0FBSyxDQUFDaWUsT0FBTixDQUFjc3NCLFFBQWQsSUFDSUEsUUFBUSxDQUFDeG9ELE9BQVQsQ0FBaUI4dkIsUUFBakIsTUFBK0IsQ0FBQyxDQURwQyxHQUVJMDRCLFFBQVEsS0FBSzE0QixRQUhuQixFQUlFO0FBQ0EydUIsUUFBRSxDQUFDL3BCLEtBQUQsQ0FBRixHQUFZLENBQUM1RSxRQUFELEVBQVcxVSxNQUFYLENBQWtCb3RDLFFBQWxCLENBQVo7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNML0osTUFBRSxDQUFDL3BCLEtBQUQsQ0FBRixHQUFZNUUsUUFBWjtBQUNEO0FBQ0Y7QUFFRDs7O0FBRUEsSUFBSWs5QixnQkFBZ0IsR0FBRyxDQUF2QjtBQUNBLElBQUlDLGdCQUFnQixHQUFHLENBQXZCLEMsQ0FFQTtBQUNBOztBQUNBLFNBQVNwQyxhQUFULENBQ0V0MEIsT0FERixFQUVFNFosR0FGRixFQUdFeDBCLElBSEYsRUFJRXkwQixRQUpGLEVBS0U4YyxpQkFMRixFQU1FQyxlQU5GLEVBT0U7QUFDQSxNQUFJbHZDLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3ZnQixJQUFkLEtBQXVCdXJCLFdBQVcsQ0FBQ3ZyQixJQUFELENBQXRDLEVBQThDO0FBQzVDdXhDLHFCQUFpQixHQUFHOWMsUUFBcEI7QUFDQUEsWUFBUSxHQUFHejBCLElBQVg7QUFDQUEsUUFBSSxHQUFHNWMsU0FBUDtBQUNEOztBQUNELE1BQUlpb0MsTUFBTSxDQUFDbW1CLGVBQUQsQ0FBVixFQUE2QjtBQUMzQkQscUJBQWlCLEdBQUdELGdCQUFwQjtBQUNEOztBQUNELFNBQU9HLGNBQWMsQ0FBQzcyQixPQUFELEVBQVU0WixHQUFWLEVBQWV4MEIsSUFBZixFQUFxQnkwQixRQUFyQixFQUErQjhjLGlCQUEvQixDQUFyQjtBQUNEOztBQUVELFNBQVNFLGNBQVQsQ0FDRTcyQixPQURGLEVBRUU0WixHQUZGLEVBR0V4MEIsSUFIRixFQUlFeTBCLFFBSkYsRUFLRThjLGlCQUxGLEVBTUU7QUFDQSxNQUFJbm1CLEtBQUssQ0FBQ3ByQixJQUFELENBQUwsSUFBZW9yQixLQUFLLENBQUVwckIsSUFBRCxDQUFPMDJCLE1BQVIsQ0FBeEIsRUFBeUM7QUFDdkM3VyxTQUFBLElBQXlDckQsSUFBSSxDQUMzQyxxREFBc0QxYyxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsSUFBZixDQUF0RCxHQUE4RSxJQUE5RSxHQUNBLHdEQUYyQyxFQUczQzRhLE9BSDJDLENBQTdDO0FBS0EsV0FBT2liLGdCQUFnQixFQUF2QjtBQUNELEdBUkQsQ0FTQTs7O0FBQ0EsTUFBSXpLLEtBQUssQ0FBQ3ByQixJQUFELENBQUwsSUFBZW9yQixLQUFLLENBQUNwckIsSUFBSSxDQUFDMHhDLEVBQU4sQ0FBeEIsRUFBbUM7QUFDakNsZCxPQUFHLEdBQUd4MEIsSUFBSSxDQUFDMHhDLEVBQVg7QUFDRDs7QUFDRCxNQUFJLENBQUNsZCxHQUFMLEVBQVU7QUFDUjtBQUNBLFdBQU9xQixnQkFBZ0IsRUFBdkI7QUFDRCxHQWhCRCxDQWlCQTs7O0FBQ0EsTUFBSWhXLEtBQUEsSUFDRnVMLEtBQUssQ0FBQ3ByQixJQUFELENBREgsSUFDYW9yQixLQUFLLENBQUNwckIsSUFBSSxDQUFDa0MsR0FBTixDQURsQixJQUNnQyxDQUFDcXBCLFdBQVcsQ0FBQ3ZyQixJQUFJLENBQUNrQyxHQUFOLENBRGhELEVBRUU7QUFDQTtBQUNFc2EsVUFBSSxDQUNGLDZDQUNBLGtDQUZFLEVBR0Y1QixPQUhFLENBQUo7QUFLRDtBQUNGLEdBNUJELENBNkJBOzs7QUFDQSxNQUFJdFksS0FBSyxDQUFDaWUsT0FBTixDQUFja1UsUUFBZCxLQUNGLE9BQU9BLFFBQVEsQ0FBQyxDQUFELENBQWYsS0FBdUIsVUFEekIsRUFFRTtBQUNBejBCLFFBQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7QUFDQUEsUUFBSSxDQUFDK3VDLFdBQUwsR0FBbUI7QUFBRTcxQixhQUFPLEVBQUV1YixRQUFRLENBQUMsQ0FBRDtBQUFuQixLQUFuQjtBQUNBQSxZQUFRLENBQUNoekMsTUFBVCxHQUFrQixDQUFsQjtBQUNEOztBQUNELE1BQUk4dkQsaUJBQWlCLEtBQUtELGdCQUExQixFQUE0QztBQUMxQzdjLFlBQVEsR0FBR3FQLGlCQUFpQixDQUFDclAsUUFBRCxDQUE1QjtBQUNELEdBRkQsTUFFTyxJQUFJOGMsaUJBQWlCLEtBQUtGLGdCQUExQixFQUE0QztBQUNqRDVjLFlBQVEsR0FBR29QLHVCQUF1QixDQUFDcFAsUUFBRCxDQUFsQztBQUNEOztBQUNELE1BQUl3QixLQUFKLEVBQVdwQixFQUFYOztBQUNBLE1BQUksT0FBT0wsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCLFFBQUkxRCxJQUFKO0FBQ0ErRCxNQUFFLEdBQUlqYSxPQUFPLENBQUMrMkIsTUFBUixJQUFrQi8yQixPQUFPLENBQUMrMkIsTUFBUixDQUFlOWMsRUFBbEMsSUFBeUN0RCxNQUFNLENBQUNZLGVBQVAsQ0FBdUJxQyxHQUF2QixDQUE5Qzs7QUFDQSxRQUFJakQsTUFBTSxDQUFDUyxhQUFQLENBQXFCd0MsR0FBckIsQ0FBSixFQUErQjtBQUM3QjtBQUNBeUIsV0FBSyxHQUFHLElBQUkxQixLQUFKLENBQ05oRCxNQUFNLENBQUNhLG9CQUFQLENBQTRCb0MsR0FBNUIsQ0FETSxFQUM0QngwQixJQUQ1QixFQUNrQ3kwQixRQURsQyxFQUVOcnhDLFNBRk0sRUFFS0EsU0FGTCxFQUVnQnczQixPQUZoQixDQUFSO0FBSUQsS0FORCxNQU1PLElBQUksQ0FBQyxDQUFDNWEsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQzR4QyxHQUFoQixLQUF3QnhtQixLQUFLLENBQUMwRixJQUFJLEdBQUcySixZQUFZLENBQUM3ZixPQUFPLENBQUN5WSxRQUFULEVBQW1CLFlBQW5CLEVBQWlDbUIsR0FBakMsQ0FBcEIsQ0FBakMsRUFBNkY7QUFDbEc7QUFDQXlCLFdBQUssR0FBR3FhLGVBQWUsQ0FBQ3hmLElBQUQsRUFBTzl3QixJQUFQLEVBQWE0YSxPQUFiLEVBQXNCNlosUUFBdEIsRUFBZ0NELEdBQWhDLENBQXZCO0FBQ0QsS0FITSxNQUdBO0FBQ0w7QUFDQTtBQUNBO0FBQ0F5QixXQUFLLEdBQUcsSUFBSTFCLEtBQUosQ0FDTkMsR0FETSxFQUNEeDBCLElBREMsRUFDS3kwQixRQURMLEVBRU5yeEMsU0FGTSxFQUVLQSxTQUZMLEVBRWdCdzNCLE9BRmhCLENBQVI7QUFJRDtBQUNGLEdBckJELE1BcUJPO0FBQ0w7QUFDQXFiLFNBQUssR0FBR3FhLGVBQWUsQ0FBQzliLEdBQUQsRUFBTXgwQixJQUFOLEVBQVk0YSxPQUFaLEVBQXFCNlosUUFBckIsQ0FBdkI7QUFDRDs7QUFDRCxNQUFJbnlCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBYzBWLEtBQWQsQ0FBSixFQUEwQjtBQUN4QixXQUFPQSxLQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUk3SyxLQUFLLENBQUM2SyxLQUFELENBQVQsRUFBa0I7QUFDdkIsUUFBSTdLLEtBQUssQ0FBQ3lKLEVBQUQsQ0FBVCxFQUFlO0FBQUVnZCxhQUFPLENBQUM1YixLQUFELEVBQVFwQixFQUFSLENBQVA7QUFBcUI7O0FBQ3RDLFFBQUl6SixLQUFLLENBQUNwckIsSUFBRCxDQUFULEVBQWlCO0FBQUU4eEMsMEJBQW9CLENBQUM5eEMsSUFBRCxDQUFwQjtBQUE2Qjs7QUFDaEQsV0FBT2kyQixLQUFQO0FBQ0QsR0FKTSxNQUlBO0FBQ0wsV0FBT0osZ0JBQWdCLEVBQXZCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTZ2MsT0FBVCxDQUFrQjViLEtBQWxCLEVBQXlCcEIsRUFBekIsRUFBNkJrZCxLQUE3QixFQUFvQztBQUNsQzliLE9BQUssQ0FBQ3BCLEVBQU4sR0FBV0EsRUFBWDs7QUFDQSxNQUFJb0IsS0FBSyxDQUFDekIsR0FBTixLQUFjLGVBQWxCLEVBQW1DO0FBQ2pDO0FBQ0FLLE1BQUUsR0FBR3p4QyxTQUFMO0FBQ0EydUQsU0FBSyxHQUFHLElBQVI7QUFDRDs7QUFDRCxNQUFJM21CLEtBQUssQ0FBQzZLLEtBQUssQ0FBQ3hCLFFBQVAsQ0FBVCxFQUEyQjtBQUN6QixTQUFLLElBQUlwNEIsQ0FBQyxHQUFHLENBQVIsRUFBV2xYLENBQUMsR0FBRzh3QyxLQUFLLENBQUN4QixRQUFOLENBQWVoekMsTUFBbkMsRUFBMkM0YSxDQUFDLEdBQUdsWCxDQUEvQyxFQUFrRGtYLENBQUMsRUFBbkQsRUFBdUQ7QUFDckQsVUFBSXM1QixLQUFLLEdBQUdNLEtBQUssQ0FBQ3hCLFFBQU4sQ0FBZXA0QixDQUFmLENBQVo7O0FBQ0EsVUFBSSt1QixLQUFLLENBQUN1SyxLQUFLLENBQUNuQixHQUFQLENBQUwsS0FDRnJKLE9BQU8sQ0FBQ3dLLEtBQUssQ0FBQ2QsRUFBUCxDQUFQLElBQXNCeEosTUFBTSxDQUFDMG1CLEtBQUQsQ0FBTixJQUFpQnBjLEtBQUssQ0FBQ25CLEdBQU4sS0FBYyxLQURuRCxDQUFKLEVBQ2dFO0FBQzlEcWQsZUFBTyxDQUFDbGMsS0FBRCxFQUFRZCxFQUFSLEVBQVlrZCxLQUFaLENBQVA7QUFDRDtBQUNGO0FBQ0Y7QUFDRixDLENBRUQ7QUFDQTtBQUNBOzs7QUFDQSxTQUFTRCxvQkFBVCxDQUErQjl4QyxJQUEvQixFQUFxQztBQUNuQyxNQUFJd3JCLFVBQVUsQ0FBQ3hyQixJQUFJLENBQUN1RyxLQUFOLENBQWQsRUFBNEI7QUFDMUJvNEIsWUFBUSxDQUFDMytCLElBQUksQ0FBQ3VHLEtBQU4sQ0FBUjtBQUNEOztBQUNELE1BQUlpbEIsVUFBVSxDQUFDeHJCLElBQUksQ0FBQzJOLEtBQU4sQ0FBZCxFQUE0QjtBQUMxQmd4QixZQUFRLENBQUMzK0IsSUFBSSxDQUFDMk4sS0FBTixDQUFSO0FBQ0Q7QUFDRjtBQUVEOzs7QUFFQSxTQUFTODZCLFVBQVQsQ0FBcUIxVixFQUFyQixFQUF5QjtBQUN2QkEsSUFBRSxDQUFDaWYsTUFBSCxHQUFZLElBQVosQ0FEdUIsQ0FDTDs7QUFDbEJqZixJQUFFLENBQUN5WixZQUFILEdBQWtCLElBQWxCLENBRnVCLENBRUM7O0FBQ3hCLE1BQUl6dUIsT0FBTyxHQUFHZ1YsRUFBRSxDQUFDTSxRQUFqQjtBQUNBLE1BQUlzVixXQUFXLEdBQUc1VixFQUFFLENBQUM0ZSxNQUFILEdBQVk1ekIsT0FBTyxDQUFDNnFCLFlBQXRDLENBSnVCLENBSTZCOztBQUNwRCxNQUFJeUcsYUFBYSxHQUFHMUcsV0FBVyxJQUFJQSxXQUFXLENBQUMvdEIsT0FBL0M7QUFDQW1ZLElBQUUsQ0FBQ3FZLE1BQUgsR0FBWXpCLFlBQVksQ0FBQzVyQixPQUFPLENBQUNnckIsZUFBVCxFQUEwQnNHLGFBQTFCLENBQXhCO0FBQ0F0YyxJQUFFLENBQUNtWSxZQUFILEdBQWtCaGdCLFdBQWxCLENBUHVCLENBUXZCO0FBQ0E7QUFDQTtBQUNBOztBQUNBNkgsSUFBRSxDQUFDa2MsRUFBSCxHQUFRLFVBQVVuc0QsQ0FBVixFQUFhSSxDQUFiLEVBQWdCK3BDLENBQWhCLEVBQW1CNUQsQ0FBbkIsRUFBc0I7QUFBRSxXQUFPNmxCLGFBQWEsQ0FBQ25jLEVBQUQsRUFBS2p3QyxDQUFMLEVBQVFJLENBQVIsRUFBVytwQyxDQUFYLEVBQWM1RCxDQUFkLEVBQWlCLEtBQWpCLENBQXBCO0FBQThDLEdBQTlFLENBWnVCLENBYXZCO0FBQ0E7OztBQUNBMEosSUFBRSxDQUFDc1ksY0FBSCxHQUFvQixVQUFVdm9ELENBQVYsRUFBYUksQ0FBYixFQUFnQitwQyxDQUFoQixFQUFtQjVELENBQW5CLEVBQXNCO0FBQUUsV0FBTzZsQixhQUFhLENBQUNuYyxFQUFELEVBQUtqd0MsQ0FBTCxFQUFRSSxDQUFSLEVBQVcrcEMsQ0FBWCxFQUFjNUQsQ0FBZCxFQUFpQixJQUFqQixDQUFwQjtBQUE2QyxHQUF6RixDQWZ1QixDQWlCdkI7QUFDQTs7O0FBQ0EsTUFBSXhTLFVBQVUsR0FBRzh4QixXQUFXLElBQUlBLFdBQVcsQ0FBQzNvQyxJQUE1QztBQUVBOztBQUNBLE1BQUk2ZixJQUFKLEVBQTJDO0FBQ3pDd1gsa0JBQWMsQ0FBQ3RFLEVBQUQsRUFBSyxRQUFMLEVBQWVsYyxVQUFVLElBQUlBLFVBQVUsQ0FBQzJzQixLQUF6QixJQUFrQ3RZLFdBQWpELEVBQThELFlBQVk7QUFDdEYsT0FBQ2tiLHdCQUFELElBQTZCNXBCLElBQUksQ0FBQyxxQkFBRCxFQUF3QnVXLEVBQXhCLENBQWpDO0FBQ0QsS0FGYSxFQUVYLElBRlcsQ0FBZDtBQUdBc0Usa0JBQWMsQ0FBQ3RFLEVBQUQsRUFBSyxZQUFMLEVBQW1CaFYsT0FBTyxDQUFDK3FCLGdCQUFSLElBQTRCNWQsV0FBL0MsRUFBNEQsWUFBWTtBQUNwRixPQUFDa2Isd0JBQUQsSUFBNkI1cEIsSUFBSSxDQUFDLHlCQUFELEVBQTRCdVcsRUFBNUIsQ0FBakM7QUFDRCxLQUZhLEVBRVgsSUFGVyxDQUFkO0FBR0QsR0FQRCxNQU9PLEVBR047QUFDRjs7QUFFRCxJQUFJa2Ysd0JBQXdCLEdBQUcsSUFBL0I7O0FBRUEsU0FBU0MsV0FBVCxDQUFzQnQ1QixHQUF0QixFQUEyQjtBQUN6QjtBQUNBMDBCLHNCQUFvQixDQUFDMTBCLEdBQUcsQ0FBQ2wyQixTQUFMLENBQXBCOztBQUVBazJCLEtBQUcsQ0FBQ2wyQixTQUFKLENBQWN5dkQsU0FBZCxHQUEwQixVQUFVenhCLEVBQVYsRUFBYztBQUN0QyxXQUFPdWQsUUFBUSxDQUFDdmQsRUFBRCxFQUFLLElBQUwsQ0FBZjtBQUNELEdBRkQ7O0FBSUE5SCxLQUFHLENBQUNsMkIsU0FBSixDQUFjMHZELE9BQWQsR0FBd0IsWUFBWTtBQUNsQyxRQUFJcmYsRUFBRSxHQUFHLElBQVQ7QUFDQSxRQUFJcUwsR0FBRyxHQUFHckwsRUFBRSxDQUFDTSxRQUFiO0FBQ0EsUUFBSTJSLE1BQU0sR0FBRzVHLEdBQUcsQ0FBQzRHLE1BQWpCO0FBQ0EsUUFBSTRELFlBQVksR0FBR3hLLEdBQUcsQ0FBQ3dLLFlBQXZCOztBQUVBLFFBQUlBLFlBQUosRUFBa0I7QUFDaEI3VixRQUFFLENBQUNtWSxZQUFILEdBQWtCbEIsb0JBQW9CLENBQ3BDcEIsWUFBWSxDQUFDNW9DLElBQWIsQ0FBa0IrdUMsV0FEa0IsRUFFcENoYyxFQUFFLENBQUNxWSxNQUZpQyxFQUdwQ3JZLEVBQUUsQ0FBQ21ZLFlBSGlDLENBQXRDO0FBS0QsS0FaaUMsQ0FjbEM7QUFDQTs7O0FBQ0FuWSxNQUFFLENBQUM0ZSxNQUFILEdBQVkvSSxZQUFaLENBaEJrQyxDQWlCbEM7O0FBQ0EsUUFBSTNTLEtBQUo7O0FBQ0EsUUFBSTtBQUNGO0FBQ0E7QUFDQTtBQUNBZ2MsOEJBQXdCLEdBQUdsZixFQUEzQjtBQUNBa0QsV0FBSyxHQUFHK08sTUFBTSxDQUFDOTRCLElBQVAsQ0FBWTZtQixFQUFFLENBQUNtUyxZQUFmLEVBQTZCblMsRUFBRSxDQUFDc1ksY0FBaEMsQ0FBUjtBQUNELEtBTkQsQ0FNRSxPQUFPMXJCLENBQVAsRUFBVTtBQUNWZ2QsaUJBQVcsQ0FBQ2hkLENBQUQsRUFBSW9ULEVBQUosRUFBUSxRQUFSLENBQVgsQ0FEVSxDQUVWO0FBQ0E7O0FBQ0E7O0FBQ0EsVUFBSWxULEtBQUEsSUFBeUNrVCxFQUFFLENBQUNNLFFBQUgsQ0FBWWdmLFdBQXpELEVBQXNFO0FBQ3BFLFlBQUk7QUFDRnBjLGVBQUssR0FBR2xELEVBQUUsQ0FBQ00sUUFBSCxDQUFZZ2YsV0FBWixDQUF3Qm5tQyxJQUF4QixDQUE2QjZtQixFQUFFLENBQUNtUyxZQUFoQyxFQUE4Q25TLEVBQUUsQ0FBQ3NZLGNBQWpELEVBQWlFMXJCLENBQWpFLENBQVI7QUFDRCxTQUZELENBRUUsT0FBT0EsQ0FBUCxFQUFVO0FBQ1ZnZCxxQkFBVyxDQUFDaGQsQ0FBRCxFQUFJb1QsRUFBSixFQUFRLGFBQVIsQ0FBWDtBQUNBa0QsZUFBSyxHQUFHbEQsRUFBRSxDQUFDaWYsTUFBWDtBQUNEO0FBQ0YsT0FQRCxNQU9PO0FBQ0wvYixhQUFLLEdBQUdsRCxFQUFFLENBQUNpZixNQUFYO0FBQ0Q7QUFDRixLQXJCRCxTQXFCVTtBQUNSQyw4QkFBd0IsR0FBRyxJQUEzQjtBQUNELEtBMUNpQyxDQTJDbEM7OztBQUNBLFFBQUkzdkMsS0FBSyxDQUFDaWUsT0FBTixDQUFjMFYsS0FBZCxLQUF3QkEsS0FBSyxDQUFDeDBDLE1BQU4sS0FBaUIsQ0FBN0MsRUFBZ0Q7QUFDOUN3MEMsV0FBSyxHQUFHQSxLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0QsS0E5Q2lDLENBK0NsQzs7O0FBQ0EsUUFBSSxFQUFFQSxLQUFLLFlBQVkxQixLQUFuQixDQUFKLEVBQStCO0FBQzdCLFVBQUkxVSxLQUFBLElBQXlDdmQsS0FBSyxDQUFDaWUsT0FBTixDQUFjMFYsS0FBZCxDQUE3QyxFQUFtRTtBQUNqRXpaLFlBQUksQ0FDRix3RUFDQSxtQ0FGRSxFQUdGdVcsRUFIRSxDQUFKO0FBS0Q7O0FBQ0RrRCxXQUFLLEdBQUdKLGdCQUFnQixFQUF4QjtBQUNELEtBekRpQyxDQTBEbEM7OztBQUNBSSxTQUFLLENBQUM3aUIsTUFBTixHQUFldzFCLFlBQWY7QUFDQSxXQUFPM1MsS0FBUDtBQUNELEdBN0REO0FBOEREO0FBRUQ7OztBQUVBLFNBQVNxYyxVQUFULENBQXFCQyxJQUFyQixFQUEyQmxvQixJQUEzQixFQUFpQztBQUMvQixNQUNFa29CLElBQUksQ0FBQ0MsVUFBTCxJQUNDemhCLFNBQVMsSUFBSXdoQixJQUFJLENBQUN2aEIsTUFBTSxDQUFDeWhCLFdBQVIsQ0FBSixLQUE2QixRQUY3QyxFQUdFO0FBQ0FGLFFBQUksR0FBR0EsSUFBSSxDQUFDcjVCLE9BQVo7QUFDRDs7QUFDRCxTQUFPc1MsVUFBVSxDQUFDK21CLElBQUQsQ0FBVixHQUNIbG9CLElBQUksQ0FBQ3FELE1BQUwsQ0FBWTZrQixJQUFaLENBREcsR0FFSEEsSUFGSjtBQUdEOztBQUVELFNBQVM5QixzQkFBVCxDQUNFaUMsT0FERixFQUVFMXlDLElBRkYsRUFHRTRhLE9BSEYsRUFJRTZaLFFBSkYsRUFLRUQsR0FMRixFQU1FO0FBQ0EsTUFBSXNCLElBQUksR0FBR0QsZ0JBQWdCLEVBQTNCO0FBQ0FDLE1BQUksQ0FBQ2xCLFlBQUwsR0FBb0I4ZCxPQUFwQjtBQUNBNWMsTUFBSSxDQUFDTixTQUFMLEdBQWlCO0FBQUV4MUIsUUFBSSxFQUFFQSxJQUFSO0FBQWM0YSxXQUFPLEVBQUVBLE9BQXZCO0FBQWdDNlosWUFBUSxFQUFFQSxRQUExQztBQUFvREQsT0FBRyxFQUFFQTtBQUF6RCxHQUFqQjtBQUNBLFNBQU9zQixJQUFQO0FBQ0Q7O0FBRUQsU0FBUzBhLHFCQUFULENBQ0VrQyxPQURGLEVBRUVuQyxRQUZGLEVBR0U7QUFDQSxNQUFJbGxCLE1BQU0sQ0FBQ3FuQixPQUFPLENBQUNqMkIsS0FBVCxDQUFOLElBQXlCMk8sS0FBSyxDQUFDc25CLE9BQU8sQ0FBQ0MsU0FBVCxDQUFsQyxFQUF1RDtBQUNyRCxXQUFPRCxPQUFPLENBQUNDLFNBQWY7QUFDRDs7QUFFRCxNQUFJdm5CLEtBQUssQ0FBQ3NuQixPQUFPLENBQUNFLFFBQVQsQ0FBVCxFQUE2QjtBQUMzQixXQUFPRixPQUFPLENBQUNFLFFBQWY7QUFDRDs7QUFFRCxNQUFJcG5DLEtBQUssR0FBR3ltQyx3QkFBWjs7QUFDQSxNQUFJem1DLEtBQUssSUFBSTRmLEtBQUssQ0FBQ3NuQixPQUFPLENBQUNHLE1BQVQsQ0FBZCxJQUFrQ0gsT0FBTyxDQUFDRyxNQUFSLENBQWV4dUQsT0FBZixDQUF1Qm1uQixLQUF2QixNQUFrQyxDQUFDLENBQXpFLEVBQTRFO0FBQzFFO0FBQ0FrbkMsV0FBTyxDQUFDRyxNQUFSLENBQWUvOUMsSUFBZixDQUFvQjBXLEtBQXBCO0FBQ0Q7O0FBRUQsTUFBSTZmLE1BQU0sQ0FBQ3FuQixPQUFPLENBQUNJLE9BQVQsQ0FBTixJQUEyQjFuQixLQUFLLENBQUNzbkIsT0FBTyxDQUFDSyxXQUFULENBQXBDLEVBQTJEO0FBQ3pELFdBQU9MLE9BQU8sQ0FBQ0ssV0FBZjtBQUNEOztBQUVELE1BQUl2bkMsS0FBSyxJQUFJLENBQUM0ZixLQUFLLENBQUNzbkIsT0FBTyxDQUFDRyxNQUFULENBQW5CLEVBQXFDO0FBQ25DLFFBQUlBLE1BQU0sR0FBR0gsT0FBTyxDQUFDRyxNQUFSLEdBQWlCLENBQUNybkMsS0FBRCxDQUE5QjtBQUNBLFFBQUk2MUIsSUFBSSxHQUFHLElBQVg7QUFDQSxRQUFJMlIsWUFBWSxHQUFHLElBQW5CO0FBQ0EsUUFBSUMsWUFBWSxHQUFHLElBQW5CO0FBRUV6bkMsU0FBRCxDQUFRMG5DLEdBQVIsQ0FBWSxnQkFBWixFQUE4QixZQUFZO0FBQUUsYUFBTzFtQixNQUFNLENBQUNxbUIsTUFBRCxFQUFTcm5DLEtBQVQsQ0FBYjtBQUErQixLQUEzRTs7QUFFRCxRQUFJMm5DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVVDLGVBQVYsRUFBMkI7QUFDM0MsV0FBSyxJQUFJLzJDLENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUcwdEQsTUFBTSxDQUFDcHhELE1BQTNCLEVBQW1DNGEsQ0FBQyxHQUFHbFgsQ0FBdkMsRUFBMENrWCxDQUFDLEVBQTNDLEVBQStDO0FBQzVDdzJDLGNBQU0sQ0FBQ3gyQyxDQUFELENBQVAsQ0FBWWczQyxZQUFaO0FBQ0Q7O0FBRUQsVUFBSUQsZUFBSixFQUFxQjtBQUNuQlAsY0FBTSxDQUFDcHhELE1BQVAsR0FBZ0IsQ0FBaEI7O0FBQ0EsWUFBSXV4RCxZQUFZLEtBQUssSUFBckIsRUFBMkI7QUFDekJNLHNCQUFZLENBQUNOLFlBQUQsQ0FBWjtBQUNBQSxzQkFBWSxHQUFHLElBQWY7QUFDRDs7QUFDRCxZQUFJQyxZQUFZLEtBQUssSUFBckIsRUFBMkI7QUFDekJLLHNCQUFZLENBQUNMLFlBQUQsQ0FBWjtBQUNBQSxzQkFBWSxHQUFHLElBQWY7QUFDRDtBQUNGO0FBQ0YsS0FoQkQ7O0FBa0JBLFFBQUlwMEIsT0FBTyxHQUFHK1AsSUFBSSxDQUFDLFVBQVUzTyxHQUFWLEVBQWU7QUFDaEM7QUFDQXl5QixhQUFPLENBQUNFLFFBQVIsR0FBbUJOLFVBQVUsQ0FBQ3J5QixHQUFELEVBQU1zd0IsUUFBTixDQUE3QixDQUZnQyxDQUdoQztBQUNBOztBQUNBLFVBQUksQ0FBQ2xQLElBQUwsRUFBVztBQUNUOFIsbUJBQVcsQ0FBQyxJQUFELENBQVg7QUFDRCxPQUZELE1BRU87QUFDTE4sY0FBTSxDQUFDcHhELE1BQVAsR0FBZ0IsQ0FBaEI7QUFDRDtBQUNGLEtBVmlCLENBQWxCO0FBWUEsUUFBSXk5QixNQUFNLEdBQUcwUCxJQUFJLENBQUMsVUFBVTJrQixNQUFWLEVBQWtCO0FBQ2xDMXpCLFdBQUEsSUFBeUNyRCxJQUFJLENBQzNDLHdDQUF5Q2hnQixNQUFNLENBQUNrMkMsT0FBRCxDQUEvQyxJQUNDYSxNQUFNLEdBQUksZUFBZUEsTUFBbkIsR0FBNkIsRUFEcEMsQ0FEMkMsQ0FBN0M7O0FBSUEsVUFBSW5vQixLQUFLLENBQUNzbkIsT0FBTyxDQUFDQyxTQUFULENBQVQsRUFBOEI7QUFDNUJELGVBQU8sQ0FBQ2oyQixLQUFSLEdBQWdCLElBQWhCO0FBQ0EwMkIsbUJBQVcsQ0FBQyxJQUFELENBQVg7QUFDRDtBQUNGLEtBVGdCLENBQWpCO0FBV0EsUUFBSWx6QixHQUFHLEdBQUd5eUIsT0FBTyxDQUFDN3pCLE9BQUQsRUFBVUssTUFBVixDQUFqQjs7QUFFQSxRQUFJc00sVUFBVSxDQUFDdkwsR0FBRCxDQUFkLEVBQXFCO0FBQ25CLFVBQUk4TCxTQUFTLENBQUM5TCxHQUFELENBQWIsRUFBb0I7QUFDbEI7QUFDQSxZQUFJa0wsT0FBTyxDQUFDdW5CLE9BQU8sQ0FBQ0UsUUFBVCxDQUFYLEVBQStCO0FBQzdCM3lCLGFBQUcsQ0FBQ2hDLElBQUosQ0FBU1ksT0FBVCxFQUFrQkssTUFBbEI7QUFDRDtBQUNGLE9BTEQsTUFLTyxJQUFJNk0sU0FBUyxDQUFDOUwsR0FBRyxDQUFDbDhCLFNBQUwsQ0FBYixFQUE4QjtBQUNuQ2s4QixXQUFHLENBQUNsOEIsU0FBSixDQUFjazZCLElBQWQsQ0FBbUJZLE9BQW5CLEVBQTRCSyxNQUE1Qjs7QUFFQSxZQUFJa00sS0FBSyxDQUFDbkwsR0FBRyxDQUFDeEQsS0FBTCxDQUFULEVBQXNCO0FBQ3BCaTJCLGlCQUFPLENBQUNDLFNBQVIsR0FBb0JMLFVBQVUsQ0FBQ3J5QixHQUFHLENBQUN4RCxLQUFMLEVBQVk4ekIsUUFBWixDQUE5QjtBQUNEOztBQUVELFlBQUlubEIsS0FBSyxDQUFDbkwsR0FBRyxDQUFDNnlCLE9BQUwsQ0FBVCxFQUF3QjtBQUN0QkosaUJBQU8sQ0FBQ0ssV0FBUixHQUFzQlQsVUFBVSxDQUFDcnlCLEdBQUcsQ0FBQzZ5QixPQUFMLEVBQWN2QyxRQUFkLENBQWhDOztBQUNBLGNBQUl0d0IsR0FBRyxDQUFDdXpCLEtBQUosS0FBYyxDQUFsQixFQUFxQjtBQUNuQmQsbUJBQU8sQ0FBQ0ksT0FBUixHQUFrQixJQUFsQjtBQUNELFdBRkQsTUFFTztBQUNMRSx3QkFBWSxHQUFHeFYsVUFBVSxDQUFDLFlBQVk7QUFDcEN3ViwwQkFBWSxHQUFHLElBQWY7O0FBQ0Esa0JBQUk3bkIsT0FBTyxDQUFDdW5CLE9BQU8sQ0FBQ0UsUUFBVCxDQUFQLElBQTZCem5CLE9BQU8sQ0FBQ3VuQixPQUFPLENBQUNqMkIsS0FBVCxDQUF4QyxFQUF5RDtBQUN2RGkyQix1QkFBTyxDQUFDSSxPQUFSLEdBQWtCLElBQWxCO0FBQ0FLLDJCQUFXLENBQUMsS0FBRCxDQUFYO0FBQ0Q7QUFDRixhQU53QixFQU10Qmx6QixHQUFHLENBQUN1ekIsS0FBSixJQUFhLEdBTlMsQ0FBekI7QUFPRDtBQUNGOztBQUVELFlBQUlwb0IsS0FBSyxDQUFDbkwsR0FBRyxDQUFDd3pCLE9BQUwsQ0FBVCxFQUF3QjtBQUN0QlIsc0JBQVksR0FBR3pWLFVBQVUsQ0FBQyxZQUFZO0FBQ3BDeVYsd0JBQVksR0FBRyxJQUFmOztBQUNBLGdCQUFJOW5CLE9BQU8sQ0FBQ3VuQixPQUFPLENBQUNFLFFBQVQsQ0FBWCxFQUErQjtBQUM3QjF6QixvQkFBTSxDQUNKVyxLQUFBLEdBQ0ssY0FBZUksR0FBRyxDQUFDd3pCLE9BQW5CLEdBQThCLEtBRG5DLEdBRUksU0FIQSxDQUFOO0FBS0Q7QUFDRixXQVR3QixFQVN0Qnh6QixHQUFHLENBQUN3ekIsT0FUa0IsQ0FBekI7QUFVRDtBQUNGO0FBQ0Y7O0FBRURwUyxRQUFJLEdBQUcsS0FBUCxDQTlGbUMsQ0ErRm5DOztBQUNBLFdBQU9xUixPQUFPLENBQUNJLE9BQVIsR0FDSEosT0FBTyxDQUFDSyxXQURMLEdBRUhMLE9BQU8sQ0FBQ0UsUUFGWjtBQUdEO0FBQ0Y7QUFFRDs7O0FBRUEsU0FBU25kLGtCQUFULENBQTZCSyxJQUE3QixFQUFtQztBQUNqQyxTQUFPQSxJQUFJLENBQUNULFNBQUwsSUFBa0JTLElBQUksQ0FBQ2xCLFlBQTlCO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBUzhlLHNCQUFULENBQWlDamYsUUFBakMsRUFBMkM7QUFDekMsTUFBSW55QixLQUFLLENBQUNpZSxPQUFOLENBQWNrVSxRQUFkLENBQUosRUFBNkI7QUFDM0IsU0FBSyxJQUFJcDRCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdvNEIsUUFBUSxDQUFDaHpDLE1BQTdCLEVBQXFDNGEsQ0FBQyxFQUF0QyxFQUEwQztBQUN4QyxVQUFJNHdCLENBQUMsR0FBR3dILFFBQVEsQ0FBQ3A0QixDQUFELENBQWhCOztBQUNBLFVBQUkrdUIsS0FBSyxDQUFDNkIsQ0FBRCxDQUFMLEtBQWE3QixLQUFLLENBQUM2QixDQUFDLENBQUMwSCxnQkFBSCxDQUFMLElBQTZCYyxrQkFBa0IsQ0FBQ3hJLENBQUQsQ0FBNUQsQ0FBSixFQUFzRTtBQUNwRSxlQUFPQSxDQUFQO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFFRDs7QUFFQTs7O0FBRUEsU0FBU3ViLFVBQVQsQ0FBcUJ6VixFQUFyQixFQUF5QjtBQUN2QkEsSUFBRSxDQUFDNGdCLE9BQUgsR0FBYTl5RCxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FBYjtBQUNBMEcsSUFBRSxDQUFDNmdCLGFBQUgsR0FBbUIsS0FBbkIsQ0FGdUIsQ0FHdkI7O0FBQ0EsTUFBSWo2QixTQUFTLEdBQUdvWixFQUFFLENBQUNNLFFBQUgsQ0FBWXlWLGdCQUE1Qjs7QUFDQSxNQUFJbnZCLFNBQUosRUFBZTtBQUNiazZCLDRCQUF3QixDQUFDOWdCLEVBQUQsRUFBS3BaLFNBQUwsQ0FBeEI7QUFDRDtBQUNGOztBQUVELElBQUl6UixNQUFKOztBQUVBLFNBQVMraUIsR0FBVCxDQUFjbFMsS0FBZCxFQUFxQjJILEVBQXJCLEVBQXlCO0FBQ3ZCeFksUUFBTSxDQUFDZ3JDLEdBQVAsQ0FBV242QixLQUFYLEVBQWtCMkgsRUFBbEI7QUFDRDs7QUFFRCxTQUFTb3pCLFFBQVQsQ0FBbUIvNkIsS0FBbkIsRUFBMEIySCxFQUExQixFQUE4QjtBQUM1QnhZLFFBQU0sQ0FBQzZyQyxJQUFQLENBQVloN0IsS0FBWixFQUFtQjJILEVBQW5CO0FBQ0Q7O0FBRUQsU0FBU3NpQixpQkFBVCxDQUE0QmpxQixLQUE1QixFQUFtQzJILEVBQW5DLEVBQXVDO0FBQ3JDLE1BQUlzekIsT0FBTyxHQUFHOXJDLE1BQWQ7QUFDQSxTQUFPLFNBQVMrckMsV0FBVCxHQUF3QjtBQUM3QixRQUFJaDBCLEdBQUcsR0FBR1MsRUFBRSxDQUFDajdCLEtBQUgsQ0FBUyxJQUFULEVBQWVqRSxTQUFmLENBQVY7O0FBQ0EsUUFBSXkrQixHQUFHLEtBQUssSUFBWixFQUFrQjtBQUNoQit6QixhQUFPLENBQUNELElBQVIsQ0FBYWg3QixLQUFiLEVBQW9CazdCLFdBQXBCO0FBQ0Q7QUFDRixHQUxEO0FBTUQ7O0FBRUQsU0FBU0osd0JBQVQsQ0FDRTlnQixFQURGLEVBRUVwWixTQUZGLEVBR0V1NkIsWUFIRixFQUlFO0FBQ0Foc0MsUUFBTSxHQUFHNnFCLEVBQVQ7QUFDQThQLGlCQUFlLENBQUNscEIsU0FBRCxFQUFZdTZCLFlBQVksSUFBSSxFQUE1QixFQUFnQ2pwQixHQUFoQyxFQUFxQzZvQixRQUFyQyxFQUErQzlRLGlCQUEvQyxFQUFrRWpRLEVBQWxFLENBQWY7QUFDQTdxQixRQUFNLEdBQUc5a0IsU0FBVDtBQUNEOztBQUVELFNBQVMrd0QsV0FBVCxDQUFzQnY3QixHQUF0QixFQUEyQjtBQUN6QixNQUFJdzdCLE1BQU0sR0FBRyxRQUFiOztBQUNBeDdCLEtBQUcsQ0FBQ2wyQixTQUFKLENBQWN3d0QsR0FBZCxHQUFvQixVQUFVbjZCLEtBQVYsRUFBaUIySCxFQUFqQixFQUFxQjtBQUN2QyxRQUFJcVMsRUFBRSxHQUFHLElBQVQ7O0FBQ0EsUUFBSXp3QixLQUFLLENBQUNpZSxPQUFOLENBQWN4SCxLQUFkLENBQUosRUFBMEI7QUFDeEIsV0FBSyxJQUFJMWMsQ0FBQyxHQUFHLENBQVIsRUFBV2xYLENBQUMsR0FBRzR6QixLQUFLLENBQUN0M0IsTUFBMUIsRUFBa0M0YSxDQUFDLEdBQUdsWCxDQUF0QyxFQUF5Q2tYLENBQUMsRUFBMUMsRUFBOEM7QUFDNUMwMkIsVUFBRSxDQUFDbWdCLEdBQUgsQ0FBT242QixLQUFLLENBQUMxYyxDQUFELENBQVosRUFBaUJxa0IsRUFBakI7QUFDRDtBQUNGLEtBSkQsTUFJTztBQUNMLE9BQUNxUyxFQUFFLENBQUM0Z0IsT0FBSCxDQUFXNTZCLEtBQVgsTUFBc0JnYSxFQUFFLENBQUM0Z0IsT0FBSCxDQUFXNTZCLEtBQVgsSUFBb0IsRUFBMUMsQ0FBRCxFQUFnRGprQixJQUFoRCxDQUFxRDRyQixFQUFyRCxFQURLLENBRUw7QUFDQTs7QUFDQSxVQUFJMHpCLE1BQU0sQ0FBQzl4RCxJQUFQLENBQVl5MkIsS0FBWixDQUFKLEVBQXdCO0FBQ3RCZ2EsVUFBRSxDQUFDNmdCLGFBQUgsR0FBbUIsSUFBbkI7QUFDRDtBQUNGOztBQUNELFdBQU83Z0IsRUFBUDtBQUNELEdBZkQ7O0FBaUJBbmEsS0FBRyxDQUFDbDJCLFNBQUosQ0FBYzJ4RCxLQUFkLEdBQXNCLFVBQVV0N0IsS0FBVixFQUFpQjJILEVBQWpCLEVBQXFCO0FBQ3pDLFFBQUlxUyxFQUFFLEdBQUcsSUFBVDs7QUFDQSxhQUFTK1AsRUFBVCxHQUFlO0FBQ2IvUCxRQUFFLENBQUNnaEIsSUFBSCxDQUFRaDdCLEtBQVIsRUFBZStwQixFQUFmO0FBQ0FwaUIsUUFBRSxDQUFDajdCLEtBQUgsQ0FBU3N0QyxFQUFULEVBQWF2eEMsU0FBYjtBQUNEOztBQUNEc2hELE1BQUUsQ0FBQ3BpQixFQUFILEdBQVFBLEVBQVI7QUFDQXFTLE1BQUUsQ0FBQ21nQixHQUFILENBQU9uNkIsS0FBUCxFQUFjK3BCLEVBQWQ7QUFDQSxXQUFPL1AsRUFBUDtBQUNELEdBVEQ7O0FBV0FuYSxLQUFHLENBQUNsMkIsU0FBSixDQUFjcXhELElBQWQsR0FBcUIsVUFBVWg3QixLQUFWLEVBQWlCMkgsRUFBakIsRUFBcUI7QUFDeEMsUUFBSXFTLEVBQUUsR0FBRyxJQUFULENBRHdDLENBRXhDOztBQUNBLFFBQUksQ0FBQ3Z4QyxTQUFTLENBQUNDLE1BQWYsRUFBdUI7QUFDckJzeEMsUUFBRSxDQUFDNGdCLE9BQUgsR0FBYTl5RCxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FBYjtBQUNBLGFBQU8wRyxFQUFQO0FBQ0QsS0FOdUMsQ0FPeEM7OztBQUNBLFFBQUl6d0IsS0FBSyxDQUFDaWUsT0FBTixDQUFjeEgsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCLFdBQUssSUFBSXU3QixHQUFHLEdBQUcsQ0FBVixFQUFhbnZELENBQUMsR0FBRzR6QixLQUFLLENBQUN0M0IsTUFBNUIsRUFBb0M2eUQsR0FBRyxHQUFHbnZELENBQTFDLEVBQTZDbXZELEdBQUcsRUFBaEQsRUFBb0Q7QUFDbER2aEIsVUFBRSxDQUFDZ2hCLElBQUgsQ0FBUWg3QixLQUFLLENBQUN1N0IsR0FBRCxDQUFiLEVBQW9CNXpCLEVBQXBCO0FBQ0Q7O0FBQ0QsYUFBT3FTLEVBQVA7QUFDRCxLQWJ1QyxDQWN4Qzs7O0FBQ0EsUUFBSXdoQixHQUFHLEdBQUd4aEIsRUFBRSxDQUFDNGdCLE9BQUgsQ0FBVzU2QixLQUFYLENBQVY7O0FBQ0EsUUFBSSxDQUFDdzdCLEdBQUwsRUFBVTtBQUNSLGFBQU94aEIsRUFBUDtBQUNEOztBQUNELFFBQUksQ0FBQ3JTLEVBQUwsRUFBUztBQUNQcVMsUUFBRSxDQUFDNGdCLE9BQUgsQ0FBVzU2QixLQUFYLElBQW9CLElBQXBCO0FBQ0EsYUFBT2dhLEVBQVA7QUFDRCxLQXRCdUMsQ0F1QnhDOzs7QUFDQSxRQUFJbUwsRUFBSjtBQUNBLFFBQUk3aEMsQ0FBQyxHQUFHazRDLEdBQUcsQ0FBQzl5RCxNQUFaOztBQUNBLFdBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUNWNmhDLFFBQUUsR0FBR3FXLEdBQUcsQ0FBQ2w0QyxDQUFELENBQVI7O0FBQ0EsVUFBSTZoQyxFQUFFLEtBQUt4ZCxFQUFQLElBQWF3ZCxFQUFFLENBQUN4ZCxFQUFILEtBQVVBLEVBQTNCLEVBQStCO0FBQzdCNnpCLFdBQUcsQ0FBQzluQixNQUFKLENBQVdwd0IsQ0FBWCxFQUFjLENBQWQ7QUFDQTtBQUNEO0FBQ0Y7O0FBQ0QsV0FBTzAyQixFQUFQO0FBQ0QsR0FsQ0Q7O0FBb0NBbmEsS0FBRyxDQUFDbDJCLFNBQUosQ0FBYzA0QixLQUFkLEdBQXNCLFVBQVVyQyxLQUFWLEVBQWlCO0FBQ3JDLFFBQUlnYSxFQUFFLEdBQUcsSUFBVDs7QUFDQSxRQUFJbFQsSUFBSixFQUEyQztBQUN6QyxVQUFJMjBCLGNBQWMsR0FBR3o3QixLQUFLLENBQUMzMEIsV0FBTixFQUFyQjs7QUFDQSxVQUFJb3dELGNBQWMsS0FBS3o3QixLQUFuQixJQUE0QmdhLEVBQUUsQ0FBQzRnQixPQUFILENBQVdhLGNBQVgsQ0FBaEMsRUFBNEQ7QUFDMURoaUIsV0FBRyxDQUNELGFBQWFnaUIsY0FBYixHQUE4Qiw2QkFBOUIsR0FDQzloQixtQkFBbUIsQ0FBQ0ssRUFBRCxDQURwQixHQUM0Qix1Q0FENUIsR0FDc0VoYSxLQUR0RSxHQUM4RSxNQUQ5RSxHQUVBLG9FQUZBLEdBR0Esa0VBSEEsR0FJQSw0QkFKQSxHQUlnQ3FVLFNBQVMsQ0FBQ3JVLEtBQUQsQ0FKekMsR0FJb0Qsa0JBSnBELEdBSXlFQSxLQUp6RSxHQUlpRixLQUxoRixDQUFIO0FBT0Q7QUFDRjs7QUFDRCxRQUFJdzdCLEdBQUcsR0FBR3hoQixFQUFFLENBQUM0Z0IsT0FBSCxDQUFXNTZCLEtBQVgsQ0FBVjs7QUFDQSxRQUFJdzdCLEdBQUosRUFBUztBQUNQQSxTQUFHLEdBQUdBLEdBQUcsQ0FBQzl5RCxNQUFKLEdBQWEsQ0FBYixHQUFpQmdzQyxPQUFPLENBQUM4bUIsR0FBRCxDQUF4QixHQUFnQ0EsR0FBdEM7QUFDQSxVQUFJN3RDLElBQUksR0FBRyttQixPQUFPLENBQUNqc0MsU0FBRCxFQUFZLENBQVosQ0FBbEI7QUFDQSxVQUFJb2MsSUFBSSxHQUFHLHlCQUF5Qm1iLEtBQXpCLEdBQWlDLElBQTVDOztBQUNBLFdBQUssSUFBSTFjLENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUdvdkQsR0FBRyxDQUFDOXlELE1BQXhCLEVBQWdDNGEsQ0FBQyxHQUFHbFgsQ0FBcEMsRUFBdUNrWCxDQUFDLEVBQXhDLEVBQTRDO0FBQzFDMGdDLCtCQUF1QixDQUFDd1gsR0FBRyxDQUFDbDRDLENBQUQsQ0FBSixFQUFTMDJCLEVBQVQsRUFBYXJzQixJQUFiLEVBQW1CcXNCLEVBQW5CLEVBQXVCbjFCLElBQXZCLENBQXZCO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPbTFCLEVBQVA7QUFDRCxHQXhCRDtBQXlCRDtBQUVEOzs7QUFFQSxJQUFJaWQsY0FBYyxHQUFHLElBQXJCO0FBQ0EsSUFBSTVKLHdCQUF3QixHQUFHLEtBQS9COztBQUVBLFNBQVNxTyxpQkFBVCxDQUEyQjFoQixFQUEzQixFQUErQjtBQUM3QixNQUFJMmhCLGtCQUFrQixHQUFHMUUsY0FBekI7QUFDQUEsZ0JBQWMsR0FBR2pkLEVBQWpCO0FBQ0EsU0FBTyxZQUFZO0FBQ2pCaWQsa0JBQWMsR0FBRzBFLGtCQUFqQjtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTbk0sYUFBVCxDQUF3QnhWLEVBQXhCLEVBQTRCO0FBQzFCLE1BQUloVixPQUFPLEdBQUdnVixFQUFFLENBQUNNLFFBQWpCLENBRDBCLENBRzFCOztBQUNBLE1BQUlqZ0IsTUFBTSxHQUFHMkssT0FBTyxDQUFDM0ssTUFBckI7O0FBQ0EsTUFBSUEsTUFBTSxJQUFJLENBQUMySyxPQUFPLENBQUM4eUIsUUFBdkIsRUFBaUM7QUFDL0IsV0FBT3o5QixNQUFNLENBQUNpZ0IsUUFBUCxDQUFnQndkLFFBQWhCLElBQTRCejlCLE1BQU0sQ0FBQ29nQixPQUExQyxFQUFtRDtBQUNqRHBnQixZQUFNLEdBQUdBLE1BQU0sQ0FBQ29nQixPQUFoQjtBQUNEOztBQUNEcGdCLFVBQU0sQ0FBQ3VoQyxTQUFQLENBQWlCNy9DLElBQWpCLENBQXNCaStCLEVBQXRCO0FBQ0Q7O0FBRURBLElBQUUsQ0FBQ1MsT0FBSCxHQUFhcGdCLE1BQWI7QUFDQTJmLElBQUUsQ0FBQ0csS0FBSCxHQUFXOWYsTUFBTSxHQUFHQSxNQUFNLENBQUM4ZixLQUFWLEdBQWtCSCxFQUFuQztBQUVBQSxJQUFFLENBQUM0aEIsU0FBSCxHQUFlLEVBQWY7QUFDQTVoQixJQUFFLENBQUN4WixLQUFILEdBQVcsRUFBWDtBQUVBd1osSUFBRSxDQUFDd04sUUFBSCxHQUFjLElBQWQ7QUFDQXhOLElBQUUsQ0FBQzZOLFNBQUgsR0FBZSxJQUFmO0FBQ0E3TixJQUFFLENBQUM2aEIsZUFBSCxHQUFxQixLQUFyQjtBQUNBN2hCLElBQUUsQ0FBQ3lOLFVBQUgsR0FBZ0IsS0FBaEI7QUFDQXpOLElBQUUsQ0FBQzBOLFlBQUgsR0FBa0IsS0FBbEI7QUFDQTFOLElBQUUsQ0FBQ2lQLGlCQUFILEdBQXVCLEtBQXZCO0FBQ0Q7O0FBRUQsU0FBUzZTLGNBQVQsQ0FBeUJqOEIsR0FBekIsRUFBOEI7QUFDNUJBLEtBQUcsQ0FBQ2wyQixTQUFKLENBQWNveUQsT0FBZCxHQUF3QixVQUFVN2UsS0FBVixFQUFpQjBaLFNBQWpCLEVBQTRCO0FBQ2xELFFBQUk1YyxFQUFFLEdBQUcsSUFBVDtBQUNBLFFBQUlnaUIsTUFBTSxHQUFHaGlCLEVBQUUsQ0FBQ2lpQixHQUFoQjtBQUNBLFFBQUlDLFNBQVMsR0FBR2xpQixFQUFFLENBQUNpZixNQUFuQjtBQUNBLFFBQUlrRCxxQkFBcUIsR0FBR1QsaUJBQWlCLENBQUMxaEIsRUFBRCxDQUE3QztBQUNBQSxNQUFFLENBQUNpZixNQUFILEdBQVkvYixLQUFaLENBTGtELENBTWxEO0FBQ0E7O0FBQ0EsUUFBSSxDQUFDZ2YsU0FBTCxFQUFnQjtBQUNkO0FBQ0FsaUIsUUFBRSxDQUFDaWlCLEdBQUgsR0FBU2ppQixFQUFFLENBQUNvaUIsU0FBSCxDQUFhcGlCLEVBQUUsQ0FBQ2lpQixHQUFoQixFQUFxQi9lLEtBQXJCLEVBQTRCMFosU0FBNUIsRUFBdUM7QUFBTTtBQUE3QyxPQUFUO0FBQ0QsS0FIRCxNQUdPO0FBQ0w7QUFDQTVjLFFBQUUsQ0FBQ2lpQixHQUFILEdBQVNqaUIsRUFBRSxDQUFDb2lCLFNBQUgsQ0FBYUYsU0FBYixFQUF3QmhmLEtBQXhCLENBQVQ7QUFDRDs7QUFDRGlmLHlCQUFxQixHQWY2QixDQWdCbEQ7O0FBQ0EsUUFBSUgsTUFBSixFQUFZO0FBQ1ZBLFlBQU0sQ0FBQ0ssT0FBUCxHQUFpQixJQUFqQjtBQUNEOztBQUNELFFBQUlyaUIsRUFBRSxDQUFDaWlCLEdBQVAsRUFBWTtBQUNWamlCLFFBQUUsQ0FBQ2lpQixHQUFILENBQU9JLE9BQVAsR0FBaUJyaUIsRUFBakI7QUFDRCxLQXRCaUQsQ0F1QmxEOzs7QUFDQSxRQUFJQSxFQUFFLENBQUM0ZSxNQUFILElBQWE1ZSxFQUFFLENBQUNTLE9BQWhCLElBQTJCVCxFQUFFLENBQUM0ZSxNQUFILEtBQWM1ZSxFQUFFLENBQUNTLE9BQUgsQ0FBV3dlLE1BQXhELEVBQWdFO0FBQzlEamYsUUFBRSxDQUFDUyxPQUFILENBQVd3aEIsR0FBWCxHQUFpQmppQixFQUFFLENBQUNpaUIsR0FBcEI7QUFDRCxLQTFCaUQsQ0EyQmxEO0FBQ0E7O0FBQ0QsR0E3QkQ7O0FBK0JBcDhCLEtBQUcsQ0FBQ2wyQixTQUFKLENBQWMyd0QsWUFBZCxHQUE2QixZQUFZO0FBQ3ZDLFFBQUl0Z0IsRUFBRSxHQUFHLElBQVQ7O0FBQ0EsUUFBSUEsRUFBRSxDQUFDd04sUUFBUCxFQUFpQjtBQUNmeE4sUUFBRSxDQUFDd04sUUFBSCxDQUFZamlCLE1BQVo7QUFDRDtBQUNGLEdBTEQ7O0FBT0ExRixLQUFHLENBQUNsMkIsU0FBSixDQUFjeXRELFFBQWQsR0FBeUIsWUFBWTtBQUNuQyxRQUFJcGQsRUFBRSxHQUFHLElBQVQ7O0FBQ0EsUUFBSUEsRUFBRSxDQUFDaVAsaUJBQVAsRUFBMEI7QUFDeEI7QUFDRDs7QUFDRHRCLFlBQVEsQ0FBQzNOLEVBQUQsRUFBSyxlQUFMLENBQVI7QUFDQUEsTUFBRSxDQUFDaVAsaUJBQUgsR0FBdUIsSUFBdkIsQ0FObUMsQ0FPbkM7O0FBQ0EsUUFBSTV1QixNQUFNLEdBQUcyZixFQUFFLENBQUNTLE9BQWhCOztBQUNBLFFBQUlwZ0IsTUFBTSxJQUFJLENBQUNBLE1BQU0sQ0FBQzR1QixpQkFBbEIsSUFBdUMsQ0FBQ2pQLEVBQUUsQ0FBQ00sUUFBSCxDQUFZd2QsUUFBeEQsRUFBa0U7QUFDaEVya0IsWUFBTSxDQUFDcFosTUFBTSxDQUFDdWhDLFNBQVIsRUFBbUI1aEIsRUFBbkIsQ0FBTjtBQUNELEtBWGtDLENBWW5DOzs7QUFDQSxRQUFJQSxFQUFFLENBQUN3TixRQUFQLEVBQWlCO0FBQ2Z4TixRQUFFLENBQUN3TixRQUFILENBQVl3QixRQUFaO0FBQ0Q7O0FBQ0QsUUFBSTFsQyxDQUFDLEdBQUcwMkIsRUFBRSxDQUFDb08sU0FBSCxDQUFhMS9DLE1BQXJCOztBQUNBLFdBQU80YSxDQUFDLEVBQVIsRUFBWTtBQUNWMDJCLFFBQUUsQ0FBQ29PLFNBQUgsQ0FBYTlrQyxDQUFiLEVBQWdCMGxDLFFBQWhCO0FBQ0QsS0FuQmtDLENBb0JuQztBQUNBOzs7QUFDQSxRQUFJaFAsRUFBRSxDQUFDNlMsS0FBSCxDQUFTbFAsTUFBYixFQUFxQjtBQUNuQjNELFFBQUUsQ0FBQzZTLEtBQUgsQ0FBU2xQLE1BQVQsQ0FBZ0JRLE9BQWhCO0FBQ0QsS0F4QmtDLENBeUJuQzs7O0FBQ0FuRSxNQUFFLENBQUMwTixZQUFILEdBQWtCLElBQWxCLENBMUJtQyxDQTJCbkM7O0FBQ0ExTixNQUFFLENBQUNvaUIsU0FBSCxDQUFhcGlCLEVBQUUsQ0FBQ2lmLE1BQWhCLEVBQXdCLElBQXhCLEVBNUJtQyxDQTZCbkM7OztBQUNBdFIsWUFBUSxDQUFDM04sRUFBRCxFQUFLLFdBQUwsQ0FBUixDQTlCbUMsQ0ErQm5DOztBQUNBQSxNQUFFLENBQUNnaEIsSUFBSCxHQWhDbUMsQ0FpQ25DOztBQUNBLFFBQUloaEIsRUFBRSxDQUFDaWlCLEdBQVAsRUFBWTtBQUNWamlCLFFBQUUsQ0FBQ2lpQixHQUFILENBQU9JLE9BQVAsR0FBaUIsSUFBakI7QUFDRCxLQXBDa0MsQ0FxQ25DOzs7QUFDQSxRQUFJcmlCLEVBQUUsQ0FBQzRlLE1BQVAsRUFBZTtBQUNiNWUsUUFBRSxDQUFDNGUsTUFBSCxDQUFVditCLE1BQVYsR0FBbUIsSUFBbkI7QUFDRDtBQUNGLEdBekNEO0FBMENEOztBQUVELFNBQVNpaUMsY0FBVCxDQUNFdGlCLEVBREYsRUFFRXNGLEVBRkYsRUFHRXNYLFNBSEYsRUFJRTtBQUNBNWMsSUFBRSxDQUFDaWlCLEdBQUgsR0FBUzNjLEVBQVQ7O0FBQ0EsTUFBSSxDQUFDdEYsRUFBRSxDQUFDTSxRQUFILENBQVkyUixNQUFqQixFQUF5QjtBQUN2QmpTLE1BQUUsQ0FBQ00sUUFBSCxDQUFZMlIsTUFBWixHQUFxQm5QLGdCQUFyQjs7QUFDQSxRQUFJaFcsSUFBSixFQUEyQztBQUN6QztBQUNBLFVBQUtrVCxFQUFFLENBQUNNLFFBQUgsQ0FBWXBjLFFBQVosSUFBd0I4YixFQUFFLENBQUNNLFFBQUgsQ0FBWXBjLFFBQVosQ0FBcUI1ekIsTUFBckIsQ0FBNEIsQ0FBNUIsTUFBbUMsR0FBNUQsSUFDRjB2QyxFQUFFLENBQUNNLFFBQUgsQ0FBWWdGLEVBRFYsSUFDZ0JBLEVBRHBCLEVBQ3dCO0FBQ3RCN2IsWUFBSSxDQUNGLG9FQUNBLG1FQURBLEdBRUEsdURBSEUsRUFJRnVXLEVBSkUsQ0FBSjtBQU1ELE9BUkQsTUFRTztBQUNMdlcsWUFBSSxDQUNGLHFFQURFLEVBRUZ1VyxFQUZFLENBQUo7QUFJRDtBQUNGO0FBQ0Y7O0FBQ0QyTixVQUFRLENBQUMzTixFQUFELEVBQUssYUFBTCxDQUFSO0FBRUEsTUFBSXVpQixlQUFKO0FBQ0E7O0FBQ0EsTUFBSXoxQixLQUFBLElBQXlDMFIsTUFBTSxDQUFDSSxXQUFoRCxJQUErRHNRLElBQW5FLEVBQXlFO0FBQ3ZFcVQsbUJBQWUsR0FBRywyQkFBWTtBQUM1QixVQUFJbnZELElBQUksR0FBRzRzQyxFQUFFLENBQUMzd0MsS0FBZDtBQUNBLFVBQUk0YyxFQUFFLEdBQUcrekIsRUFBRSxDQUFDbVYsSUFBWjtBQUNBLFVBQUk3RixRQUFRLEdBQUcsb0JBQW9CcmpDLEVBQW5DO0FBQ0EsVUFBSXNqQyxNQUFNLEdBQUcsa0JBQWtCdGpDLEVBQS9CO0FBRUFpakMsVUFBSSxDQUFDSSxRQUFELENBQUo7O0FBQ0EsVUFBSXBNLEtBQUssR0FBR2xELEVBQUUsQ0FBQ3FmLE9BQUgsRUFBWjs7QUFDQW5RLFVBQUksQ0FBQ0ssTUFBRCxDQUFKO0FBQ0ExeEIsYUFBTyxDQUFFLFNBQVN6cUIsSUFBVCxHQUFnQixTQUFsQixFQUE4Qms4QyxRQUE5QixFQUF3Q0MsTUFBeEMsQ0FBUDtBQUVBTCxVQUFJLENBQUNJLFFBQUQsQ0FBSjs7QUFDQXRQLFFBQUUsQ0FBQytoQixPQUFILENBQVc3ZSxLQUFYLEVBQWtCMFosU0FBbEI7O0FBQ0ExTixVQUFJLENBQUNLLE1BQUQsQ0FBSjtBQUNBMXhCLGFBQU8sQ0FBRSxTQUFTenFCLElBQVQsR0FBZ0IsUUFBbEIsRUFBNkJrOEMsUUFBN0IsRUFBdUNDLE1BQXZDLENBQVA7QUFDRCxLQWZEO0FBZ0JELEdBakJELE1BaUJPO0FBQ0xnVCxtQkFBZSxHQUFHLDJCQUFZO0FBQzVCdmlCLFFBQUUsQ0FBQytoQixPQUFILENBQVcvaEIsRUFBRSxDQUFDcWYsT0FBSCxFQUFYLEVBQXlCekMsU0FBekI7QUFDRCxLQUZEO0FBR0QsR0EvQ0QsQ0FpREE7QUFDQTtBQUNBOzs7QUFDQSxNQUFJM08sT0FBSixDQUFZak8sRUFBWixFQUFnQnVpQixlQUFoQixFQUFpQ3huQixJQUFqQyxFQUF1QztBQUNyQ2lTLFVBQU0sRUFBRSxTQUFTQSxNQUFULEdBQW1CO0FBQ3pCLFVBQUloTixFQUFFLENBQUN5TixVQUFILElBQWlCLENBQUN6TixFQUFFLENBQUMwTixZQUF6QixFQUF1QztBQUNyQ0MsZ0JBQVEsQ0FBQzNOLEVBQUQsRUFBSyxjQUFMLENBQVI7QUFDRDtBQUNGO0FBTG9DLEdBQXZDLEVBTUc7QUFBSztBQU5SO0FBT0E0YyxXQUFTLEdBQUcsS0FBWixDQTNEQSxDQTZEQTtBQUNBOztBQUNBLE1BQUk1YyxFQUFFLENBQUM0ZSxNQUFILElBQWEsSUFBakIsRUFBdUI7QUFDckI1ZSxNQUFFLENBQUN5TixVQUFILEdBQWdCLElBQWhCO0FBQ0FFLFlBQVEsQ0FBQzNOLEVBQUQsRUFBSyxTQUFMLENBQVI7QUFDRDs7QUFDRCxTQUFPQSxFQUFQO0FBQ0Q7O0FBRUQsU0FBU2tkLG9CQUFULENBQ0VsZCxFQURGLEVBRUV1RixTQUZGLEVBR0UzZSxTQUhGLEVBSUVndkIsV0FKRixFQUtFNE0sY0FMRixFQU1FO0FBQ0EsTUFBSTExQixJQUFKLEVBQTJDO0FBQ3pDdW1CLDRCQUF3QixHQUFHLElBQTNCO0FBQ0QsR0FIRCxDQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUNBLE1BQUlvUCxjQUFjLEdBQUc3TSxXQUFXLENBQUMzb0MsSUFBWixDQUFpQit1QyxXQUF0QztBQUNBLE1BQUkwRyxjQUFjLEdBQUcxaUIsRUFBRSxDQUFDbVksWUFBeEI7QUFDQSxNQUFJd0ssb0JBQW9CLEdBQUcsQ0FBQyxFQUN6QkYsY0FBYyxJQUFJLENBQUNBLGNBQWMsQ0FBQ25MLE9BQW5DLElBQ0NvTCxjQUFjLEtBQUt2cUIsV0FBbkIsSUFBa0MsQ0FBQ3VxQixjQUFjLENBQUNwTCxPQURuRCxJQUVDbUwsY0FBYyxJQUFJemlCLEVBQUUsQ0FBQ21ZLFlBQUgsQ0FBZ0JaLElBQWhCLEtBQXlCa0wsY0FBYyxDQUFDbEwsSUFIakMsQ0FBNUIsQ0FiQSxDQW1CQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSXFMLGdCQUFnQixHQUFHLENBQUMsRUFDdEJKLGNBQWMsSUFBa0I7QUFDaEN4aUIsSUFBRSxDQUFDTSxRQUFILENBQVkwVixlQURaLElBQ2dDO0FBQ2hDMk0sc0JBSHNCLENBQXhCO0FBTUEzaUIsSUFBRSxDQUFDTSxRQUFILENBQVl1VixZQUFaLEdBQTJCRCxXQUEzQjtBQUNBNVYsSUFBRSxDQUFDNGUsTUFBSCxHQUFZaEosV0FBWixDQTdCQSxDQTZCeUI7O0FBRXpCLE1BQUk1VixFQUFFLENBQUNpZixNQUFQLEVBQWU7QUFBRTtBQUNmamYsTUFBRSxDQUFDaWYsTUFBSCxDQUFVNStCLE1BQVYsR0FBbUJ1MUIsV0FBbkI7QUFDRDs7QUFDRDVWLElBQUUsQ0FBQ00sUUFBSCxDQUFZMFYsZUFBWixHQUE4QndNLGNBQTlCLENBbENBLENBb0NBO0FBQ0E7QUFDQTs7QUFDQXhpQixJQUFFLENBQUM2aUIsTUFBSCxHQUFZak4sV0FBVyxDQUFDM29DLElBQVosQ0FBaUJ3akMsS0FBakIsSUFBMEJ0WSxXQUF0QztBQUNBNkgsSUFBRSxDQUFDbFosVUFBSCxHQUFnQkYsU0FBUyxJQUFJdVIsV0FBN0IsQ0F4Q0EsQ0EwQ0E7O0FBQ0EsTUFBSW9OLFNBQVMsSUFBSXZGLEVBQUUsQ0FBQ00sUUFBSCxDQUFZcmEsS0FBN0IsRUFBb0M7QUFDbENnZSxtQkFBZSxDQUFDLEtBQUQsQ0FBZjtBQUNBLFFBQUloZSxLQUFLLEdBQUcrWixFQUFFLENBQUN3SSxNQUFmO0FBQ0EsUUFBSXNhLFFBQVEsR0FBRzlpQixFQUFFLENBQUNNLFFBQUgsQ0FBWTJTLFNBQVosSUFBeUIsRUFBeEM7O0FBQ0EsU0FBSyxJQUFJM3BDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd3NUMsUUFBUSxDQUFDcDBELE1BQTdCLEVBQXFDNGEsQ0FBQyxFQUF0QyxFQUEwQztBQUN4QyxVQUFJNkYsR0FBRyxHQUFHMnpDLFFBQVEsQ0FBQ3g1QyxDQUFELENBQWxCO0FBQ0EsVUFBSTArQixXQUFXLEdBQUdoSSxFQUFFLENBQUNNLFFBQUgsQ0FBWXJhLEtBQTlCLENBRndDLENBRUg7O0FBQ3JDQSxXQUFLLENBQUM5VyxHQUFELENBQUwsR0FBYTQ0QixZQUFZLENBQUM1NEIsR0FBRCxFQUFNNjRCLFdBQU4sRUFBbUJ6QyxTQUFuQixFQUE4QnZGLEVBQTlCLENBQXpCO0FBQ0Q7O0FBQ0RpRSxtQkFBZSxDQUFDLElBQUQsQ0FBZixDQVRrQyxDQVVsQzs7QUFDQWpFLE1BQUUsQ0FBQ00sUUFBSCxDQUFZaUYsU0FBWixHQUF3QkEsU0FBeEI7QUFDRCxHQXZERCxDQXlEQTs7O0FBQ0EzZSxXQUFTLEdBQUdBLFNBQVMsSUFBSXVSLFdBQXpCO0FBQ0EsTUFBSWdwQixZQUFZLEdBQUduaEIsRUFBRSxDQUFDTSxRQUFILENBQVl5VixnQkFBL0I7QUFDQS9WLElBQUUsQ0FBQ00sUUFBSCxDQUFZeVYsZ0JBQVosR0FBK0JudkIsU0FBL0I7QUFDQWs2QiwwQkFBd0IsQ0FBQzlnQixFQUFELEVBQUtwWixTQUFMLEVBQWdCdTZCLFlBQWhCLENBQXhCLENBN0RBLENBK0RBOztBQUNBLE1BQUl5QixnQkFBSixFQUFzQjtBQUNwQjVpQixNQUFFLENBQUNxWSxNQUFILEdBQVl6QixZQUFZLENBQUM0TCxjQUFELEVBQWlCNU0sV0FBVyxDQUFDL3RCLE9BQTdCLENBQXhCO0FBQ0FtWSxNQUFFLENBQUNzZ0IsWUFBSDtBQUNEOztBQUVELE1BQUl4ekIsSUFBSixFQUEyQztBQUN6Q3VtQiw0QkFBd0IsR0FBRyxLQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzBQLGdCQUFULENBQTJCL2lCLEVBQTNCLEVBQStCO0FBQzdCLFNBQU9BLEVBQUUsS0FBS0EsRUFBRSxHQUFHQSxFQUFFLENBQUNTLE9BQWIsQ0FBVCxFQUFnQztBQUM5QixRQUFJVCxFQUFFLENBQUM2TixTQUFQLEVBQWtCO0FBQUUsYUFBTyxJQUFQO0FBQWE7QUFDbEM7O0FBQ0QsU0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msc0JBQVQsQ0FBaUM5TixFQUFqQyxFQUFxQ2dqQixNQUFyQyxFQUE2QztBQUMzQyxNQUFJQSxNQUFKLEVBQVk7QUFDVmhqQixNQUFFLENBQUM2aEIsZUFBSCxHQUFxQixLQUFyQjs7QUFDQSxRQUFJa0IsZ0JBQWdCLENBQUMvaUIsRUFBRCxDQUFwQixFQUEwQjtBQUN4QjtBQUNEO0FBQ0YsR0FMRCxNQUtPLElBQUlBLEVBQUUsQ0FBQzZoQixlQUFQLEVBQXdCO0FBQzdCO0FBQ0Q7O0FBQ0QsTUFBSTdoQixFQUFFLENBQUM2TixTQUFILElBQWdCN04sRUFBRSxDQUFDNk4sU0FBSCxLQUFpQixJQUFyQyxFQUEyQztBQUN6QzdOLE1BQUUsQ0FBQzZOLFNBQUgsR0FBZSxLQUFmOztBQUNBLFNBQUssSUFBSXZrQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMDJCLEVBQUUsQ0FBQzRoQixTQUFILENBQWFsekQsTUFBakMsRUFBeUM0YSxDQUFDLEVBQTFDLEVBQThDO0FBQzVDd2tDLDRCQUFzQixDQUFDOU4sRUFBRSxDQUFDNGhCLFNBQUgsQ0FBYXQ0QyxDQUFiLENBQUQsQ0FBdEI7QUFDRDs7QUFDRHFrQyxZQUFRLENBQUMzTixFQUFELEVBQUssV0FBTCxDQUFSO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTcWQsd0JBQVQsQ0FBbUNyZCxFQUFuQyxFQUF1Q2dqQixNQUF2QyxFQUErQztBQUM3QyxNQUFJQSxNQUFKLEVBQVk7QUFDVmhqQixNQUFFLENBQUM2aEIsZUFBSCxHQUFxQixJQUFyQjs7QUFDQSxRQUFJa0IsZ0JBQWdCLENBQUMvaUIsRUFBRCxDQUFwQixFQUEwQjtBQUN4QjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSSxDQUFDQSxFQUFFLENBQUM2TixTQUFSLEVBQW1CO0FBQ2pCN04sTUFBRSxDQUFDNk4sU0FBSCxHQUFlLElBQWY7O0FBQ0EsU0FBSyxJQUFJdmtDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcwMkIsRUFBRSxDQUFDNGhCLFNBQUgsQ0FBYWx6RCxNQUFqQyxFQUF5QzRhLENBQUMsRUFBMUMsRUFBOEM7QUFDNUMrekMsOEJBQXdCLENBQUNyZCxFQUFFLENBQUM0aEIsU0FBSCxDQUFhdDRDLENBQWIsQ0FBRCxDQUF4QjtBQUNEOztBQUNEcWtDLFlBQVEsQ0FBQzNOLEVBQUQsRUFBSyxhQUFMLENBQVI7QUFDRDtBQUNGOztBQUVELFNBQVMyTixRQUFULENBQW1CM04sRUFBbkIsRUFBdUJzRyxJQUF2QixFQUE2QjtBQUMzQjtBQUNBaEYsWUFBVTtBQUNWLE1BQUkwUSxRQUFRLEdBQUdoUyxFQUFFLENBQUNNLFFBQUgsQ0FBWWdHLElBQVosQ0FBZjtBQUNBLE1BQUl6N0IsSUFBSSxHQUFHeTdCLElBQUksR0FBRyxPQUFsQjs7QUFDQSxNQUFJMEwsUUFBSixFQUFjO0FBQ1osU0FBSyxJQUFJMW9DLENBQUMsR0FBRyxDQUFSLEVBQVcyNUMsQ0FBQyxHQUFHalIsUUFBUSxDQUFDdGpELE1BQTdCLEVBQXFDNGEsQ0FBQyxHQUFHMjVDLENBQXpDLEVBQTRDMzVDLENBQUMsRUFBN0MsRUFBaUQ7QUFDL0MwZ0MsNkJBQXVCLENBQUNnSSxRQUFRLENBQUMxb0MsQ0FBRCxDQUFULEVBQWMwMkIsRUFBZCxFQUFrQixJQUFsQixFQUF3QkEsRUFBeEIsRUFBNEJuMUIsSUFBNUIsQ0FBdkI7QUFDRDtBQUNGOztBQUNELE1BQUltMUIsRUFBRSxDQUFDNmdCLGFBQVAsRUFBc0I7QUFDcEI3Z0IsTUFBRSxDQUFDM1gsS0FBSCxDQUFTLFVBQVVpZSxJQUFuQjtBQUNEOztBQUNEL0UsV0FBUztBQUNWO0FBRUQ7OztBQUVBLElBQUkyaEIsU0FBUyxHQUFHOXBCLE9BQU8sQ0FDckIsK0NBQ0EsMkVBREEsR0FFQSxvRUFGQSxHQUdBLHdFQUhBLEdBSUEsNkVBSkEsR0FLQSwyREFMQSxHQU1BLGtEQU5BLEdBT0EseUVBUEEsR0FRQSxrQ0FSQSxHQVNBLHVDQVRBLEdBVUEseURBWHFCLENBQXZCLEMsQ0FjQTtBQUNBOztBQUNBLElBQUkrcEIsS0FBSyxHQUFHL3BCLE9BQU8sQ0FDakIsMkVBQ0EsMEVBREEsR0FFQSxrRUFIaUIsRUFJakIsSUFKaUIsQ0FBbkI7QUFPQSxJQUFJZ3FCLGVBQWUsR0FBR2hxQixPQUFPLENBQUMsMkNBQUQsQ0FBN0I7QUFFQTs7Ozs7Ozs7Ozs7O0FBWUEsSUFBSWlxQixTQUFTLEdBQUcsSUFBSTdoQixLQUFKLENBQVUsRUFBVixFQUFjLEVBQWQsRUFBa0IsRUFBbEIsQ0FBaEI7QUFFQSxJQUFJNkUsS0FBSyxHQUFHLENBQUMsUUFBRCxFQUFXLFVBQVgsRUFBdUIsUUFBdkIsRUFBaUMsUUFBakMsRUFBMkMsU0FBM0MsQ0FBWjs7QUFFQSxTQUFTaWQsU0FBVCxDQUFvQnZ6RCxDQUFwQixFQUF1QkksQ0FBdkIsRUFBMEI7QUFDeEIsU0FDRUosQ0FBQyxDQUFDb2YsR0FBRixLQUFVaGYsQ0FBQyxDQUFDZ2YsR0FBWixLQUVJcGYsQ0FBQyxDQUFDMHhDLEdBQUYsS0FBVXR4QyxDQUFDLENBQUNzeEMsR0FBWixJQUNBMXhDLENBQUMsQ0FBQ3V5QyxTQUFGLEtBQWdCbnlDLENBQUMsQ0FBQ215QyxTQURsQixJQUVBakssS0FBSyxDQUFDdG9DLENBQUMsQ0FBQ2tkLElBQUgsQ0FBTCxLQUFrQm9yQixLQUFLLENBQUNsb0MsQ0FBQyxDQUFDOGMsSUFBSCxDQUZ2QixJQUdBczJDLGFBQWEsQ0FBQ3h6RCxDQUFELEVBQUlJLENBQUosQ0FKZixJQU1FbW9DLE1BQU0sQ0FBQ3ZvQyxDQUFDLENBQUMyeUMsa0JBQUgsQ0FBTixJQUNBM3lDLENBQUMsQ0FBQzh4QyxZQUFGLEtBQW1CMXhDLENBQUMsQ0FBQzB4QyxZQURyQixJQUVBekosT0FBTyxDQUFDam9DLENBQUMsQ0FBQzB4QyxZQUFGLENBQWVuWSxLQUFoQixDQVRYLENBREY7QUFjRDs7QUFFRCxTQUFTNjVCLGFBQVQsQ0FBd0J4ekQsQ0FBeEIsRUFBMkJJLENBQTNCLEVBQThCO0FBQzVCLE1BQUlKLENBQUMsQ0FBQzB4QyxHQUFGLEtBQVUsT0FBZCxFQUF1QjtBQUFFLFdBQU8sSUFBUDtBQUFhOztBQUN0QyxNQUFJbjRCLENBQUo7QUFDQSxNQUFJazZDLEtBQUssR0FBR25yQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHdlosQ0FBQyxDQUFDa2QsSUFBUCxDQUFMLElBQXFCb3JCLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ21uQyxLQUFQLENBQTFCLElBQTJDbm5DLENBQUMsQ0FBQzlGLElBQXpEO0FBQ0EsTUFBSWlnRCxLQUFLLEdBQUdwckIsS0FBSyxDQUFDL3VCLENBQUMsR0FBR25aLENBQUMsQ0FBQzhjLElBQVAsQ0FBTCxJQUFxQm9yQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHQSxDQUFDLENBQUNtbkMsS0FBUCxDQUExQixJQUEyQ25uQyxDQUFDLENBQUM5RixJQUF6RDtBQUNBLFNBQU9nZ0QsS0FBSyxLQUFLQyxLQUFWLElBQW1CTCxlQUFlLENBQUNJLEtBQUQsQ0FBZixJQUEwQkosZUFBZSxDQUFDSyxLQUFELENBQW5FO0FBQ0Q7O0FBRUQsU0FBU0MsaUJBQVQsQ0FBNEJoaUIsUUFBNUIsRUFBc0NpaUIsUUFBdEMsRUFBZ0RDLE1BQWhELEVBQXdEO0FBQ3RELE1BQUl0NkMsQ0FBSixFQUFPNkYsR0FBUDtBQUNBLE1BQUkxRyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxPQUFLYSxDQUFDLEdBQUdxNkMsUUFBVCxFQUFtQnI2QyxDQUFDLElBQUlzNkMsTUFBeEIsRUFBZ0MsRUFBRXQ2QyxDQUFsQyxFQUFxQztBQUNuQzZGLE9BQUcsR0FBR3V5QixRQUFRLENBQUNwNEIsQ0FBRCxDQUFSLENBQVk2RixHQUFsQjs7QUFDQSxRQUFJa3BCLEtBQUssQ0FBQ2xwQixHQUFELENBQVQsRUFBZ0I7QUFBRTFHLFNBQUcsQ0FBQzBHLEdBQUQsQ0FBSCxHQUFXN0YsQ0FBWDtBQUFlO0FBQ2xDOztBQUNELFNBQU9iLEdBQVA7QUFDRDs7QUFFRCxTQUFTbzdDLG1CQUFULENBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJeDZDLENBQUosRUFBTzI1QyxDQUFQO0FBQ0EsTUFBSXpCLEdBQUcsR0FBRyxFQUFWO0FBRUEsTUFBSTExQyxPQUFPLEdBQUdnNEMsT0FBTyxDQUFDaDRDLE9BQXRCO0FBQ0EsTUFBSWk0QyxPQUFPLEdBQUdELE9BQU8sQ0FBQ0MsT0FBdEI7O0FBRUEsT0FBS3o2QyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUcrOEIsS0FBSyxDQUFDMzNDLE1BQXRCLEVBQThCLEVBQUU0YSxDQUFoQyxFQUFtQztBQUNqQ2s0QyxPQUFHLENBQUNuYixLQUFLLENBQUMvOEIsQ0FBRCxDQUFOLENBQUgsR0FBZ0IsRUFBaEI7O0FBQ0EsU0FBSzI1QyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUduM0MsT0FBTyxDQUFDcGQsTUFBeEIsRUFBZ0MsRUFBRXUwRCxDQUFsQyxFQUFxQztBQUNuQyxVQUFJNXFCLEtBQUssQ0FBQ3ZzQixPQUFPLENBQUNtM0MsQ0FBRCxDQUFQLENBQVc1YyxLQUFLLENBQUMvOEIsQ0FBRCxDQUFoQixDQUFELENBQVQsRUFBaUM7QUFDL0JrNEMsV0FBRyxDQUFDbmIsS0FBSyxDQUFDLzhCLENBQUQsQ0FBTixDQUFILENBQWN2SCxJQUFkLENBQW1CK0osT0FBTyxDQUFDbTNDLENBQUQsQ0FBUCxDQUFXNWMsS0FBSyxDQUFDLzhCLENBQUQsQ0FBaEIsQ0FBbkI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBUzA2QyxXQUFULENBQXNCcmlCLEdBQXRCLEVBQTJCO0FBQ3pCLFdBQU8sSUFBSUgsS0FBSixDQUFVdWlCLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQnRpQixHQUFoQixFQUFxQnR3QyxXQUFyQixFQUFWLEVBQThDLEVBQTlDLEVBQWtELEVBQWxELEVBQXNEaEIsU0FBdEQsRUFBaUVzeEMsR0FBakUsQ0FBUDtBQUNEOztBQUVELFdBQVN1aUIsVUFBVCxDQUFxQkMsUUFBckIsRUFBK0J2OUIsU0FBL0IsRUFBMEM7QUFDeEMsYUFBUzZTLE1BQVQsR0FBbUI7QUFDakIsVUFBSSxFQUFFQSxNQUFNLENBQUM3UyxTQUFULEtBQXVCLENBQTNCLEVBQThCO0FBQzVCdzlCLGtCQUFVLENBQUNELFFBQUQsQ0FBVjtBQUNEO0FBQ0Y7O0FBQ0QxcUIsVUFBTSxDQUFDN1MsU0FBUCxHQUFtQkEsU0FBbkI7QUFDQSxXQUFPNlMsTUFBUDtBQUNEOztBQUVELFdBQVMycUIsVUFBVCxDQUFxQjllLEVBQXJCLEVBQXlCO0FBQ3ZCLFFBQUlqbEIsTUFBTSxHQUFHMGpDLE9BQU8sQ0FBQ00sVUFBUixDQUFtQi9lLEVBQW5CLENBQWIsQ0FEdUIsQ0FFdkI7O0FBQ0EsUUFBSWpOLEtBQUssQ0FBQ2hZLE1BQUQsQ0FBVCxFQUFtQjtBQUNqQjBqQyxhQUFPLENBQUNPLFdBQVIsQ0FBb0Jqa0MsTUFBcEIsRUFBNEJpbEIsRUFBNUI7QUFDRDtBQUNGOztBQUVELFdBQVNuRyxnQkFBVCxDQUEyQitELEtBQTNCLEVBQWtDcWhCLE1BQWxDLEVBQTBDO0FBQ3hDLFdBQ0UsQ0FBQ0EsTUFBRCxJQUNBLENBQUNyaEIsS0FBSyxDQUFDcEIsRUFEUCxJQUVBLEVBQ0V0RCxNQUFNLENBQUNPLGVBQVAsQ0FBdUJyd0MsTUFBdkIsSUFDQTh2QyxNQUFNLENBQUNPLGVBQVAsQ0FBdUIySyxJQUF2QixDQUE0QixVQUFVOGEsTUFBVixFQUFrQjtBQUM1QyxhQUFPM3JCLFVBQVUsQ0FBQzJyQixNQUFELENBQVYsR0FDSEEsTUFBTSxDQUFDajFELElBQVAsQ0FBWTJ6QyxLQUFLLENBQUN6QixHQUFsQixDQURHLEdBRUgraUIsTUFBTSxLQUFLdGhCLEtBQUssQ0FBQ3pCLEdBRnJCO0FBR0QsS0FKRCxDQUZGLENBRkEsSUFVQWpELE1BQU0sQ0FBQ1csZ0JBQVAsQ0FBd0IrRCxLQUFLLENBQUN6QixHQUE5QixDQVhGO0FBYUQ7O0FBRUQsTUFBSWdqQixpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFQSxXQUFTQyxTQUFULENBQ0V4aEIsS0FERixFQUVFeWhCLGtCQUZGLEVBR0VDLFNBSEYsRUFJRUMsTUFKRixFQUtFQyxNQUxGLEVBTUVDLFVBTkYsRUFPRXZpRCxLQVBGLEVBUUU7QUFDQSxRQUFJNjFCLEtBQUssQ0FBQzZLLEtBQUssQ0FBQ3ZCLEdBQVAsQ0FBTCxJQUFvQnRKLEtBQUssQ0FBQzBzQixVQUFELENBQTdCLEVBQTJDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTdoQixXQUFLLEdBQUc2aEIsVUFBVSxDQUFDdmlELEtBQUQsQ0FBVixHQUFvQnlnQyxVQUFVLENBQUNDLEtBQUQsQ0FBdEM7QUFDRDs7QUFFREEsU0FBSyxDQUFDYixZQUFOLEdBQXFCLENBQUN5aUIsTUFBdEIsQ0FWQSxDQVU4Qjs7QUFDOUIsUUFBSXZILGVBQWUsQ0FBQ3JhLEtBQUQsRUFBUXloQixrQkFBUixFQUE0QkMsU0FBNUIsRUFBdUNDLE1BQXZDLENBQW5CLEVBQW1FO0FBQ2pFO0FBQ0Q7O0FBRUQsUUFBSTUzQyxJQUFJLEdBQUdpMkIsS0FBSyxDQUFDajJCLElBQWpCO0FBQ0EsUUFBSXkwQixRQUFRLEdBQUd3QixLQUFLLENBQUN4QixRQUFyQjtBQUNBLFFBQUlELEdBQUcsR0FBR3lCLEtBQUssQ0FBQ3pCLEdBQWhCOztBQUNBLFFBQUlwSixLQUFLLENBQUNvSixHQUFELENBQVQsRUFBZ0I7QUFDZCxVQUFJM1UsSUFBSixFQUEyQztBQUN6QyxZQUFJN2YsSUFBSSxJQUFJQSxJQUFJLENBQUM0eEMsR0FBakIsRUFBc0I7QUFDcEI0RiwyQkFBaUI7QUFDbEI7O0FBQ0QsWUFBSXRsQixnQkFBZ0IsQ0FBQytELEtBQUQsRUFBUXVoQixpQkFBUixDQUFwQixFQUFnRDtBQUM5Q2g3QixjQUFJLENBQ0YsOEJBQThCZ1ksR0FBOUIsR0FBb0MsY0FBcEMsR0FDQSw4REFEQSxHQUVBLHlDQUhFLEVBSUZ5QixLQUFLLENBQUNyYixPQUpKLENBQUo7QUFNRDtBQUNGOztBQUVEcWIsV0FBSyxDQUFDdkIsR0FBTixHQUFZdUIsS0FBSyxDQUFDcEIsRUFBTixHQUNSaWlCLE9BQU8sQ0FBQ2lCLGVBQVIsQ0FBd0I5aEIsS0FBSyxDQUFDcEIsRUFBOUIsRUFBa0NMLEdBQWxDLENBRFEsR0FFUnNpQixPQUFPLENBQUM1SCxhQUFSLENBQXNCMWEsR0FBdEIsRUFBMkJ5QixLQUEzQixDQUZKO0FBR0EraEIsY0FBUSxDQUFDL2hCLEtBQUQsQ0FBUjtBQUVBOztBQUNBO0FBQ0VnaUIsc0JBQWMsQ0FBQ2hpQixLQUFELEVBQVF4QixRQUFSLEVBQWtCaWpCLGtCQUFsQixDQUFkOztBQUNBLFlBQUl0c0IsS0FBSyxDQUFDcHJCLElBQUQsQ0FBVCxFQUFpQjtBQUNmazRDLDJCQUFpQixDQUFDamlCLEtBQUQsRUFBUXloQixrQkFBUixDQUFqQjtBQUNEOztBQUNEeEgsY0FBTSxDQUFDeUgsU0FBRCxFQUFZMWhCLEtBQUssQ0FBQ3ZCLEdBQWxCLEVBQXVCa2pCLE1BQXZCLENBQU47QUFDRDs7QUFFRCxVQUFJLzNCLEtBQUEsSUFBeUM3ZixJQUF6QyxJQUFpREEsSUFBSSxDQUFDNHhDLEdBQTFELEVBQStEO0FBQzdENEYseUJBQWlCO0FBQ2xCO0FBQ0YsS0FoQ0QsTUFnQ08sSUFBSW5zQixNQUFNLENBQUM0SyxLQUFLLENBQUNaLFNBQVAsQ0FBVixFQUE2QjtBQUNsQ1ksV0FBSyxDQUFDdkIsR0FBTixHQUFZb2lCLE9BQU8sQ0FBQ3FCLGFBQVIsQ0FBc0JsaUIsS0FBSyxDQUFDN21DLElBQTVCLENBQVo7QUFDQThnRCxZQUFNLENBQUN5SCxTQUFELEVBQVkxaEIsS0FBSyxDQUFDdkIsR0FBbEIsRUFBdUJrakIsTUFBdkIsQ0FBTjtBQUNELEtBSE0sTUFHQTtBQUNMM2hCLFdBQUssQ0FBQ3ZCLEdBQU4sR0FBWW9pQixPQUFPLENBQUNoWixjQUFSLENBQXVCN0gsS0FBSyxDQUFDN21DLElBQTdCLENBQVo7QUFDQThnRCxZQUFNLENBQUN5SCxTQUFELEVBQVkxaEIsS0FBSyxDQUFDdkIsR0FBbEIsRUFBdUJrakIsTUFBdkIsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsV0FBU3RILGVBQVQsQ0FBMEJyYSxLQUExQixFQUFpQ3loQixrQkFBakMsRUFBcURDLFNBQXJELEVBQWdFQyxNQUFoRSxFQUF3RTtBQUN0RSxRQUFJdjdDLENBQUMsR0FBRzQ1QixLQUFLLENBQUNqMkIsSUFBZDs7QUFDQSxRQUFJb3JCLEtBQUssQ0FBQy91QixDQUFELENBQVQsRUFBYztBQUNaLFVBQUkrN0MsYUFBYSxHQUFHaHRCLEtBQUssQ0FBQzZLLEtBQUssQ0FBQ2hCLGlCQUFQLENBQUwsSUFBa0M1NEIsQ0FBQyxDQUFDdXpDLFNBQXhEOztBQUNBLFVBQUl4a0IsS0FBSyxDQUFDL3VCLENBQUMsR0FBR0EsQ0FBQyxDQUFDZzlCLElBQVAsQ0FBTCxJQUFxQmpPLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ3lTLElBQVAsQ0FBOUIsRUFBNEM7QUFDMUN6UyxTQUFDLENBQUM0NUIsS0FBRCxFQUFRO0FBQU07QUFBZCxTQUFEO0FBQ0QsT0FKVyxDQUtaO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFJN0ssS0FBSyxDQUFDNkssS0FBSyxDQUFDaEIsaUJBQVAsQ0FBVCxFQUFvQztBQUNsQ29qQixxQkFBYSxDQUFDcGlCLEtBQUQsRUFBUXloQixrQkFBUixDQUFiO0FBQ0F4SCxjQUFNLENBQUN5SCxTQUFELEVBQVkxaEIsS0FBSyxDQUFDdkIsR0FBbEIsRUFBdUJrakIsTUFBdkIsQ0FBTjs7QUFDQSxZQUFJdnNCLE1BQU0sQ0FBQytzQixhQUFELENBQVYsRUFBMkI7QUFDekJFLDZCQUFtQixDQUFDcmlCLEtBQUQsRUFBUXloQixrQkFBUixFQUE0QkMsU0FBNUIsRUFBdUNDLE1BQXZDLENBQW5CO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQVNTLGFBQVQsQ0FBd0JwaUIsS0FBeEIsRUFBK0J5aEIsa0JBQS9CLEVBQW1EO0FBQ2pELFFBQUl0c0IsS0FBSyxDQUFDNkssS0FBSyxDQUFDajJCLElBQU4sQ0FBV3U0QyxhQUFaLENBQVQsRUFBcUM7QUFDbkNiLHdCQUFrQixDQUFDNWlELElBQW5CLENBQXdCclAsS0FBeEIsQ0FBOEJpeUQsa0JBQTlCLEVBQWtEemhCLEtBQUssQ0FBQ2oyQixJQUFOLENBQVd1NEMsYUFBN0Q7QUFDQXRpQixXQUFLLENBQUNqMkIsSUFBTixDQUFXdTRDLGFBQVgsR0FBMkIsSUFBM0I7QUFDRDs7QUFDRHRpQixTQUFLLENBQUN2QixHQUFOLEdBQVl1QixLQUFLLENBQUNoQixpQkFBTixDQUF3QitmLEdBQXBDOztBQUNBLFFBQUl3RCxXQUFXLENBQUN2aUIsS0FBRCxDQUFmLEVBQXdCO0FBQ3RCaWlCLHVCQUFpQixDQUFDamlCLEtBQUQsRUFBUXloQixrQkFBUixDQUFqQjtBQUNBTSxjQUFRLENBQUMvaEIsS0FBRCxDQUFSO0FBQ0QsS0FIRCxNQUdPO0FBQ0w7QUFDQTtBQUNBb0ksaUJBQVcsQ0FBQ3BJLEtBQUQsQ0FBWCxDQUhLLENBSUw7O0FBQ0F5aEIsd0JBQWtCLENBQUM1aUQsSUFBbkIsQ0FBd0JtaEMsS0FBeEI7QUFDRDtBQUNGOztBQUVELFdBQVNxaUIsbUJBQVQsQ0FBOEJyaUIsS0FBOUIsRUFBcUN5aEIsa0JBQXJDLEVBQXlEQyxTQUF6RCxFQUFvRUMsTUFBcEUsRUFBNEU7QUFDMUUsUUFBSXY3QyxDQUFKLENBRDBFLENBRTFFO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFFBQUlvOEMsU0FBUyxHQUFHeGlCLEtBQWhCOztBQUNBLFdBQU93aUIsU0FBUyxDQUFDeGpCLGlCQUFqQixFQUFvQztBQUNsQ3dqQixlQUFTLEdBQUdBLFNBQVMsQ0FBQ3hqQixpQkFBVixDQUE0QitjLE1BQXhDOztBQUNBLFVBQUk1bUIsS0FBSyxDQUFDL3VCLENBQUMsR0FBR284QyxTQUFTLENBQUN6NEMsSUFBZixDQUFMLElBQTZCb3JCLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ3E4QyxVQUFQLENBQXRDLEVBQTBEO0FBQ3hELGFBQUtyOEMsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHazRDLEdBQUcsQ0FBQ29FLFFBQUosQ0FBYWwzRCxNQUE3QixFQUFxQyxFQUFFNGEsQ0FBdkMsRUFBMEM7QUFDeENrNEMsYUFBRyxDQUFDb0UsUUFBSixDQUFhdDhDLENBQWIsRUFBZ0IrNUMsU0FBaEIsRUFBMkJxQyxTQUEzQjtBQUNEOztBQUNEZiwwQkFBa0IsQ0FBQzVpRCxJQUFuQixDQUF3QjJqRCxTQUF4QjtBQUNBO0FBQ0Q7QUFDRixLQWhCeUUsQ0FpQjFFO0FBQ0E7OztBQUNBdkksVUFBTSxDQUFDeUgsU0FBRCxFQUFZMWhCLEtBQUssQ0FBQ3ZCLEdBQWxCLEVBQXVCa2pCLE1BQXZCLENBQU47QUFDRDs7QUFFRCxXQUFTMUgsTUFBVCxDQUFpQjk4QixNQUFqQixFQUF5QnNoQixHQUF6QixFQUE4QjBKLEdBQTlCLEVBQW1DO0FBQ2pDLFFBQUloVCxLQUFLLENBQUNoWSxNQUFELENBQVQsRUFBbUI7QUFDakIsVUFBSWdZLEtBQUssQ0FBQ2dULEdBQUQsQ0FBVCxFQUFnQjtBQUNkLFlBQUkwWSxPQUFPLENBQUNNLFVBQVIsQ0FBbUJoWixHQUFuQixNQUE0QmhyQixNQUFoQyxFQUF3QztBQUN0QzBqQyxpQkFBTyxDQUFDOEIsWUFBUixDQUFxQnhsQyxNQUFyQixFQUE2QnNoQixHQUE3QixFQUFrQzBKLEdBQWxDO0FBQ0Q7QUFDRixPQUpELE1BSU87QUFDTDBZLGVBQU8sQ0FBQytCLFdBQVIsQ0FBb0J6bEMsTUFBcEIsRUFBNEJzaEIsR0FBNUI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBU3VqQixjQUFULENBQXlCaGlCLEtBQXpCLEVBQWdDeEIsUUFBaEMsRUFBMENpakIsa0JBQTFDLEVBQThEO0FBQzVELFFBQUlwMUMsS0FBSyxDQUFDaWUsT0FBTixDQUFja1UsUUFBZCxDQUFKLEVBQTZCO0FBQzNCLFVBQUk1VSxJQUFKLEVBQTJDO0FBQ3pDaTVCLDBCQUFrQixDQUFDcmtCLFFBQUQsQ0FBbEI7QUFDRDs7QUFDRCxXQUFLLElBQUlwNEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR280QixRQUFRLENBQUNoekMsTUFBN0IsRUFBcUMsRUFBRTRhLENBQXZDLEVBQTBDO0FBQ3hDbzdDLGlCQUFTLENBQUNoakIsUUFBUSxDQUFDcDRCLENBQUQsQ0FBVCxFQUFjcTdDLGtCQUFkLEVBQWtDemhCLEtBQUssQ0FBQ3ZCLEdBQXhDLEVBQTZDLElBQTdDLEVBQW1ELElBQW5ELEVBQXlERCxRQUF6RCxFQUFtRXA0QixDQUFuRSxDQUFUO0FBQ0Q7QUFDRixLQVBELE1BT08sSUFBSWt2QixXQUFXLENBQUMwSyxLQUFLLENBQUM3bUMsSUFBUCxDQUFmLEVBQTZCO0FBQ2xDMG5ELGFBQU8sQ0FBQytCLFdBQVIsQ0FBb0I1aUIsS0FBSyxDQUFDdkIsR0FBMUIsRUFBK0JvaUIsT0FBTyxDQUFDaFosY0FBUixDQUF1QnRoQyxNQUFNLENBQUN5NUIsS0FBSyxDQUFDN21DLElBQVAsQ0FBN0IsQ0FBL0I7QUFDRDtBQUNGOztBQUVELFdBQVNvcEQsV0FBVCxDQUFzQnZpQixLQUF0QixFQUE2QjtBQUMzQixXQUFPQSxLQUFLLENBQUNoQixpQkFBYixFQUFnQztBQUM5QmdCLFdBQUssR0FBR0EsS0FBSyxDQUFDaEIsaUJBQU4sQ0FBd0IrYyxNQUFoQztBQUNEOztBQUNELFdBQU81bUIsS0FBSyxDQUFDNkssS0FBSyxDQUFDekIsR0FBUCxDQUFaO0FBQ0Q7O0FBRUQsV0FBUzBqQixpQkFBVCxDQUE0QmppQixLQUE1QixFQUFtQ3loQixrQkFBbkMsRUFBdUQ7QUFDckQsU0FBSyxJQUFJcEQsR0FBRyxHQUFHLENBQWYsRUFBa0JBLEdBQUcsR0FBR0MsR0FBRyxDQUFDbG9CLE1BQUosQ0FBVzVxQyxNQUFuQyxFQUEyQyxFQUFFNnlELEdBQTdDLEVBQWtEO0FBQ2hEQyxTQUFHLENBQUNsb0IsTUFBSixDQUFXaW9CLEdBQVgsRUFBZ0I4QixTQUFoQixFQUEyQm5nQixLQUEzQjtBQUNEOztBQUNENTVCLEtBQUMsR0FBRzQ1QixLQUFLLENBQUNqMkIsSUFBTixDQUFXcTVCLElBQWYsQ0FKcUQsQ0FJaEM7O0FBQ3JCLFFBQUlqTyxLQUFLLENBQUMvdUIsQ0FBRCxDQUFULEVBQWM7QUFDWixVQUFJK3VCLEtBQUssQ0FBQy91QixDQUFDLENBQUNnd0IsTUFBSCxDQUFULEVBQXFCO0FBQUVod0IsU0FBQyxDQUFDZ3dCLE1BQUYsQ0FBUytwQixTQUFULEVBQW9CbmdCLEtBQXBCO0FBQTZCOztBQUNwRCxVQUFJN0ssS0FBSyxDQUFDL3VCLENBQUMsQ0FBQzZ6QyxNQUFILENBQVQsRUFBcUI7QUFBRXdILDBCQUFrQixDQUFDNWlELElBQW5CLENBQXdCbWhDLEtBQXhCO0FBQWlDO0FBQ3pEO0FBQ0YsR0FsT29DLENBb09yQztBQUNBO0FBQ0E7OztBQUNBLFdBQVMraEIsUUFBVCxDQUFtQi9oQixLQUFuQixFQUEwQjtBQUN4QixRQUFJNTVCLENBQUo7O0FBQ0EsUUFBSSt1QixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHNDVCLEtBQUssQ0FBQ2pCLFNBQVgsQ0FBVCxFQUFnQztBQUM5QjhoQixhQUFPLENBQUNpQyxhQUFSLENBQXNCOWlCLEtBQUssQ0FBQ3ZCLEdBQTVCLEVBQWlDcjRCLENBQWpDO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSTI4QyxRQUFRLEdBQUcvaUIsS0FBZjs7QUFDQSxhQUFPK2lCLFFBQVAsRUFBaUI7QUFDZixZQUFJNXRCLEtBQUssQ0FBQy91QixDQUFDLEdBQUcyOEMsUUFBUSxDQUFDcCtCLE9BQWQsQ0FBTCxJQUErQndRLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ2czQixRQUFGLENBQVcyYixRQUFoQixDQUF4QyxFQUFtRTtBQUNqRThILGlCQUFPLENBQUNpQyxhQUFSLENBQXNCOWlCLEtBQUssQ0FBQ3ZCLEdBQTVCLEVBQWlDcjRCLENBQWpDO0FBQ0Q7O0FBQ0QyOEMsZ0JBQVEsR0FBR0EsUUFBUSxDQUFDNWxDLE1BQXBCO0FBQ0Q7QUFDRixLQVp1QixDQWF4Qjs7O0FBQ0EsUUFBSWdZLEtBQUssQ0FBQy91QixDQUFDLEdBQUcyekMsY0FBTCxDQUFMLElBQ0YzekMsQ0FBQyxLQUFLNDVCLEtBQUssQ0FBQ3JiLE9BRFYsSUFFRnZlLENBQUMsS0FBSzQ1QixLQUFLLENBQUNuQixTQUZWLElBR0YxSixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHQSxDQUFDLENBQUNnM0IsUUFBRixDQUFXMmIsUUFBaEIsQ0FIUCxFQUlFO0FBQ0E4SCxhQUFPLENBQUNpQyxhQUFSLENBQXNCOWlCLEtBQUssQ0FBQ3ZCLEdBQTVCLEVBQWlDcjRCLENBQWpDO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTNDhDLFNBQVQsQ0FBb0J0QixTQUFwQixFQUErQkMsTUFBL0IsRUFBdUNySSxNQUF2QyxFQUErQzJKLFFBQS9DLEVBQXlEdkMsTUFBekQsRUFBaUVlLGtCQUFqRSxFQUFxRjtBQUNuRixXQUFPd0IsUUFBUSxJQUFJdkMsTUFBbkIsRUFBMkIsRUFBRXVDLFFBQTdCLEVBQXVDO0FBQ3JDekIsZUFBUyxDQUFDbEksTUFBTSxDQUFDMkosUUFBRCxDQUFQLEVBQW1CeEIsa0JBQW5CLEVBQXVDQyxTQUF2QyxFQUFrREMsTUFBbEQsRUFBMEQsS0FBMUQsRUFBaUVySSxNQUFqRSxFQUF5RTJKLFFBQXpFLENBQVQ7QUFDRDtBQUNGOztBQUVELFdBQVNDLGlCQUFULENBQTRCbGpCLEtBQTVCLEVBQW1DO0FBQ2pDLFFBQUk1NUIsQ0FBSixFQUFPMjVDLENBQVA7QUFDQSxRQUFJaDJDLElBQUksR0FBR2kyQixLQUFLLENBQUNqMkIsSUFBakI7O0FBQ0EsUUFBSW9yQixLQUFLLENBQUNwckIsSUFBRCxDQUFULEVBQWlCO0FBQ2YsVUFBSW9yQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHMkQsSUFBSSxDQUFDcTVCLElBQVYsQ0FBTCxJQUF3QmpPLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ2lpQyxPQUFQLENBQWpDLEVBQWtEO0FBQUVqaUMsU0FBQyxDQUFDNDVCLEtBQUQsQ0FBRDtBQUFXOztBQUMvRCxXQUFLNTVCLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR2s0QyxHQUFHLENBQUNqVyxPQUFKLENBQVk3OEMsTUFBNUIsRUFBb0MsRUFBRTRhLENBQXRDLEVBQXlDO0FBQUVrNEMsV0FBRyxDQUFDalcsT0FBSixDQUFZamlDLENBQVosRUFBZTQ1QixLQUFmO0FBQXdCO0FBQ3BFOztBQUNELFFBQUk3SyxLQUFLLENBQUMvdUIsQ0FBQyxHQUFHNDVCLEtBQUssQ0FBQ3hCLFFBQVgsQ0FBVCxFQUErQjtBQUM3QixXQUFLdWhCLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRy9mLEtBQUssQ0FBQ3hCLFFBQU4sQ0FBZWh6QyxNQUEvQixFQUF1QyxFQUFFdTBELENBQXpDLEVBQTRDO0FBQzFDbUQseUJBQWlCLENBQUNsakIsS0FBSyxDQUFDeEIsUUFBTixDQUFldWhCLENBQWYsQ0FBRCxDQUFqQjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTb0QsWUFBVCxDQUF1QnpCLFNBQXZCLEVBQWtDcEksTUFBbEMsRUFBMEMySixRQUExQyxFQUFvRHZDLE1BQXBELEVBQTREO0FBQzFELFdBQU91QyxRQUFRLElBQUl2QyxNQUFuQixFQUEyQixFQUFFdUMsUUFBN0IsRUFBdUM7QUFDckMsVUFBSUcsRUFBRSxHQUFHOUosTUFBTSxDQUFDMkosUUFBRCxDQUFmOztBQUNBLFVBQUk5dEIsS0FBSyxDQUFDaXVCLEVBQUQsQ0FBVCxFQUFlO0FBQ2IsWUFBSWp1QixLQUFLLENBQUNpdUIsRUFBRSxDQUFDN2tCLEdBQUosQ0FBVCxFQUFtQjtBQUNqQjhrQixtQ0FBeUIsQ0FBQ0QsRUFBRCxDQUF6QjtBQUNBRiwyQkFBaUIsQ0FBQ0UsRUFBRCxDQUFqQjtBQUNELFNBSEQsTUFHTztBQUFFO0FBQ1BsQyxvQkFBVSxDQUFDa0MsRUFBRSxDQUFDM2tCLEdBQUosQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELFdBQVM0a0IseUJBQVQsQ0FBb0NyakIsS0FBcEMsRUFBMkNzakIsRUFBM0MsRUFBK0M7QUFDN0MsUUFBSW51QixLQUFLLENBQUNtdUIsRUFBRCxDQUFMLElBQWFudUIsS0FBSyxDQUFDNkssS0FBSyxDQUFDajJCLElBQVAsQ0FBdEIsRUFBb0M7QUFDbEMsVUFBSTNELENBQUo7QUFDQSxVQUFJc2QsU0FBUyxHQUFHNDZCLEdBQUcsQ0FBQy9uQixNQUFKLENBQVcvcUMsTUFBWCxHQUFvQixDQUFwQzs7QUFDQSxVQUFJMnBDLEtBQUssQ0FBQ211QixFQUFELENBQVQsRUFBZTtBQUNiO0FBQ0E7QUFDQUEsVUFBRSxDQUFDNS9CLFNBQUgsSUFBZ0JBLFNBQWhCO0FBQ0QsT0FKRCxNQUlPO0FBQ0w7QUFDQTQvQixVQUFFLEdBQUd0QyxVQUFVLENBQUNoaEIsS0FBSyxDQUFDdkIsR0FBUCxFQUFZL2EsU0FBWixDQUFmO0FBQ0QsT0FWaUMsQ0FXbEM7OztBQUNBLFVBQUl5UixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHNDVCLEtBQUssQ0FBQ2hCLGlCQUFYLENBQUwsSUFBc0M3SixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHQSxDQUFDLENBQUMyMUMsTUFBUCxDQUEzQyxJQUE2RDVtQixLQUFLLENBQUMvdUIsQ0FBQyxDQUFDMkQsSUFBSCxDQUF0RSxFQUFnRjtBQUM5RXM1QyxpQ0FBeUIsQ0FBQ2o5QyxDQUFELEVBQUlrOUMsRUFBSixDQUF6QjtBQUNEOztBQUNELFdBQUtsOUMsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHazRDLEdBQUcsQ0FBQy9uQixNQUFKLENBQVcvcUMsTUFBM0IsRUFBbUMsRUFBRTRhLENBQXJDLEVBQXdDO0FBQ3RDazRDLFdBQUcsQ0FBQy9uQixNQUFKLENBQVdud0IsQ0FBWCxFQUFjNDVCLEtBQWQsRUFBcUJzakIsRUFBckI7QUFDRDs7QUFDRCxVQUFJbnVCLEtBQUssQ0FBQy91QixDQUFDLEdBQUc0NUIsS0FBSyxDQUFDajJCLElBQU4sQ0FBV3E1QixJQUFoQixDQUFMLElBQThCak8sS0FBSyxDQUFDL3VCLENBQUMsR0FBR0EsQ0FBQyxDQUFDbXdCLE1BQVAsQ0FBdkMsRUFBdUQ7QUFDckRud0IsU0FBQyxDQUFDNDVCLEtBQUQsRUFBUXNqQixFQUFSLENBQUQ7QUFDRCxPQUZELE1BRU87QUFDTEEsVUFBRTtBQUNIO0FBQ0YsS0F2QkQsTUF1Qk87QUFDTHBDLGdCQUFVLENBQUNsaEIsS0FBSyxDQUFDdkIsR0FBUCxDQUFWO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTOGtCLGNBQVQsQ0FBeUI3QixTQUF6QixFQUFvQzhCLEtBQXBDLEVBQTJDQyxLQUEzQyxFQUFrRGhDLGtCQUFsRCxFQUFzRWlDLFVBQXRFLEVBQWtGO0FBQ2hGLFFBQUlDLFdBQVcsR0FBRyxDQUFsQjtBQUNBLFFBQUlDLFdBQVcsR0FBRyxDQUFsQjtBQUNBLFFBQUlDLFNBQVMsR0FBR0wsS0FBSyxDQUFDaDRELE1BQU4sR0FBZSxDQUEvQjtBQUNBLFFBQUlzNEQsYUFBYSxHQUFHTixLQUFLLENBQUMsQ0FBRCxDQUF6QjtBQUNBLFFBQUlPLFdBQVcsR0FBR1AsS0FBSyxDQUFDSyxTQUFELENBQXZCO0FBQ0EsUUFBSUcsU0FBUyxHQUFHUCxLQUFLLENBQUNqNEQsTUFBTixHQUFlLENBQS9CO0FBQ0EsUUFBSXk0RCxhQUFhLEdBQUdSLEtBQUssQ0FBQyxDQUFELENBQXpCO0FBQ0EsUUFBSVMsV0FBVyxHQUFHVCxLQUFLLENBQUNPLFNBQUQsQ0FBdkI7QUFDQSxRQUFJRyxXQUFKLEVBQWlCQyxRQUFqQixFQUEyQkMsV0FBM0IsRUFBd0MxQyxNQUF4QyxDQVRnRixDQVdoRjtBQUNBO0FBQ0E7O0FBQ0EsUUFBSTJDLE9BQU8sR0FBRyxDQUFDWixVQUFmOztBQUVBLFFBQUk5NUIsSUFBSixFQUEyQztBQUN6Q2k1Qix3QkFBa0IsQ0FBQ1ksS0FBRCxDQUFsQjtBQUNEOztBQUVELFdBQU9FLFdBQVcsSUFBSUUsU0FBZixJQUE0QkQsV0FBVyxJQUFJSSxTQUFsRCxFQUE2RDtBQUMzRCxVQUFJOXVCLE9BQU8sQ0FBQzR1QixhQUFELENBQVgsRUFBNEI7QUFDMUJBLHFCQUFhLEdBQUdOLEtBQUssQ0FBQyxFQUFFRyxXQUFILENBQXJCLENBRDBCLENBQ1k7QUFDdkMsT0FGRCxNQUVPLElBQUl6dUIsT0FBTyxDQUFDNnVCLFdBQUQsQ0FBWCxFQUEwQjtBQUMvQkEsbUJBQVcsR0FBR1AsS0FBSyxDQUFDLEVBQUVLLFNBQUgsQ0FBbkI7QUFDRCxPQUZNLE1BRUEsSUFBSXpELFNBQVMsQ0FBQzBELGFBQUQsRUFBZ0JHLGFBQWhCLENBQWIsRUFBNkM7QUFDbERNLGtCQUFVLENBQUNULGFBQUQsRUFBZ0JHLGFBQWhCLEVBQStCeEMsa0JBQS9CLEVBQW1EZ0MsS0FBbkQsRUFBMERHLFdBQTFELENBQVY7QUFDQUUscUJBQWEsR0FBR04sS0FBSyxDQUFDLEVBQUVHLFdBQUgsQ0FBckI7QUFDQU0scUJBQWEsR0FBR1IsS0FBSyxDQUFDLEVBQUVHLFdBQUgsQ0FBckI7QUFDRCxPQUpNLE1BSUEsSUFBSXhELFNBQVMsQ0FBQzJELFdBQUQsRUFBY0csV0FBZCxDQUFiLEVBQXlDO0FBQzlDSyxrQkFBVSxDQUFDUixXQUFELEVBQWNHLFdBQWQsRUFBMkJ6QyxrQkFBM0IsRUFBK0NnQyxLQUEvQyxFQUFzRE8sU0FBdEQsQ0FBVjtBQUNBRCxtQkFBVyxHQUFHUCxLQUFLLENBQUMsRUFBRUssU0FBSCxDQUFuQjtBQUNBSyxtQkFBVyxHQUFHVCxLQUFLLENBQUMsRUFBRU8sU0FBSCxDQUFuQjtBQUNELE9BSk0sTUFJQSxJQUFJNUQsU0FBUyxDQUFDMEQsYUFBRCxFQUFnQkksV0FBaEIsQ0FBYixFQUEyQztBQUFFO0FBQ2xESyxrQkFBVSxDQUFDVCxhQUFELEVBQWdCSSxXQUFoQixFQUE2QnpDLGtCQUE3QixFQUFpRGdDLEtBQWpELEVBQXdETyxTQUF4RCxDQUFWO0FBQ0FNLGVBQU8sSUFBSXpELE9BQU8sQ0FBQzhCLFlBQVIsQ0FBcUJqQixTQUFyQixFQUFnQ29DLGFBQWEsQ0FBQ3JsQixHQUE5QyxFQUFtRG9pQixPQUFPLENBQUMyRCxXQUFSLENBQW9CVCxXQUFXLENBQUN0bEIsR0FBaEMsQ0FBbkQsQ0FBWDtBQUNBcWxCLHFCQUFhLEdBQUdOLEtBQUssQ0FBQyxFQUFFRyxXQUFILENBQXJCO0FBQ0FPLG1CQUFXLEdBQUdULEtBQUssQ0FBQyxFQUFFTyxTQUFILENBQW5CO0FBQ0QsT0FMTSxNQUtBLElBQUk1RCxTQUFTLENBQUMyRCxXQUFELEVBQWNFLGFBQWQsQ0FBYixFQUEyQztBQUFFO0FBQ2xETSxrQkFBVSxDQUFDUixXQUFELEVBQWNFLGFBQWQsRUFBNkJ4QyxrQkFBN0IsRUFBaURnQyxLQUFqRCxFQUF3REcsV0FBeEQsQ0FBVjtBQUNBVSxlQUFPLElBQUl6RCxPQUFPLENBQUM4QixZQUFSLENBQXFCakIsU0FBckIsRUFBZ0NxQyxXQUFXLENBQUN0bEIsR0FBNUMsRUFBaURxbEIsYUFBYSxDQUFDcmxCLEdBQS9ELENBQVg7QUFDQXNsQixtQkFBVyxHQUFHUCxLQUFLLENBQUMsRUFBRUssU0FBSCxDQUFuQjtBQUNBSSxxQkFBYSxHQUFHUixLQUFLLENBQUMsRUFBRUcsV0FBSCxDQUFyQjtBQUNELE9BTE0sTUFLQTtBQUNMLFlBQUkxdUIsT0FBTyxDQUFDaXZCLFdBQUQsQ0FBWCxFQUEwQjtBQUFFQSxxQkFBVyxHQUFHM0QsaUJBQWlCLENBQUNnRCxLQUFELEVBQVFHLFdBQVIsRUFBcUJFLFNBQXJCLENBQS9CO0FBQWlFOztBQUM3Rk8sZ0JBQVEsR0FBR2p2QixLQUFLLENBQUM4dUIsYUFBYSxDQUFDaDRDLEdBQWYsQ0FBTCxHQUNQazRDLFdBQVcsQ0FBQ0YsYUFBYSxDQUFDaDRDLEdBQWYsQ0FESixHQUVQdzRDLFlBQVksQ0FBQ1IsYUFBRCxFQUFnQlQsS0FBaEIsRUFBdUJHLFdBQXZCLEVBQW9DRSxTQUFwQyxDQUZoQjs7QUFHQSxZQUFJM3VCLE9BQU8sQ0FBQ2t2QixRQUFELENBQVgsRUFBdUI7QUFBRTtBQUN2QjVDLG1CQUFTLENBQUN5QyxhQUFELEVBQWdCeEMsa0JBQWhCLEVBQW9DQyxTQUFwQyxFQUErQ29DLGFBQWEsQ0FBQ3JsQixHQUE3RCxFQUFrRSxLQUFsRSxFQUF5RWdsQixLQUF6RSxFQUFnRkcsV0FBaEYsQ0FBVDtBQUNELFNBRkQsTUFFTztBQUNMUyxxQkFBVyxHQUFHYixLQUFLLENBQUNZLFFBQUQsQ0FBbkI7O0FBQ0EsY0FBSWhFLFNBQVMsQ0FBQ2lFLFdBQUQsRUFBY0osYUFBZCxDQUFiLEVBQTJDO0FBQ3pDTSxzQkFBVSxDQUFDRixXQUFELEVBQWNKLGFBQWQsRUFBNkJ4QyxrQkFBN0IsRUFBaURnQyxLQUFqRCxFQUF3REcsV0FBeEQsQ0FBVjtBQUNBSixpQkFBSyxDQUFDWSxRQUFELENBQUwsR0FBa0JqM0QsU0FBbEI7QUFDQW0zRCxtQkFBTyxJQUFJekQsT0FBTyxDQUFDOEIsWUFBUixDQUFxQmpCLFNBQXJCLEVBQWdDMkMsV0FBVyxDQUFDNWxCLEdBQTVDLEVBQWlEcWxCLGFBQWEsQ0FBQ3JsQixHQUEvRCxDQUFYO0FBQ0QsV0FKRCxNQUlPO0FBQ0w7QUFDQStpQixxQkFBUyxDQUFDeUMsYUFBRCxFQUFnQnhDLGtCQUFoQixFQUFvQ0MsU0FBcEMsRUFBK0NvQyxhQUFhLENBQUNybEIsR0FBN0QsRUFBa0UsS0FBbEUsRUFBeUVnbEIsS0FBekUsRUFBZ0ZHLFdBQWhGLENBQVQ7QUFDRDtBQUNGOztBQUNESyxxQkFBYSxHQUFHUixLQUFLLENBQUMsRUFBRUcsV0FBSCxDQUFyQjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSUQsV0FBVyxHQUFHRSxTQUFsQixFQUE2QjtBQUMzQmxDLFlBQU0sR0FBR3pzQixPQUFPLENBQUN1dUIsS0FBSyxDQUFDTyxTQUFTLEdBQUcsQ0FBYixDQUFOLENBQVAsR0FBZ0MsSUFBaEMsR0FBdUNQLEtBQUssQ0FBQ08sU0FBUyxHQUFHLENBQWIsQ0FBTCxDQUFxQnZsQixHQUFyRTtBQUNBdWtCLGVBQVMsQ0FBQ3RCLFNBQUQsRUFBWUMsTUFBWixFQUFvQjhCLEtBQXBCLEVBQTJCRyxXQUEzQixFQUF3Q0ksU0FBeEMsRUFBbUR2QyxrQkFBbkQsQ0FBVDtBQUNELEtBSEQsTUFHTyxJQUFJbUMsV0FBVyxHQUFHSSxTQUFsQixFQUE2QjtBQUNsQ2Isa0JBQVksQ0FBQ3pCLFNBQUQsRUFBWThCLEtBQVosRUFBbUJHLFdBQW5CLEVBQWdDRSxTQUFoQyxDQUFaO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTaEIsa0JBQVQsQ0FBNkJya0IsUUFBN0IsRUFBdUM7QUFDckMsUUFBSWttQixRQUFRLEdBQUcsRUFBZjs7QUFDQSxTQUFLLElBQUl0K0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR280QixRQUFRLENBQUNoekMsTUFBN0IsRUFBcUM0YSxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLFVBQUk0NUIsS0FBSyxHQUFHeEIsUUFBUSxDQUFDcDRCLENBQUQsQ0FBcEI7QUFDQSxVQUFJNkYsR0FBRyxHQUFHK3pCLEtBQUssQ0FBQy96QixHQUFoQjs7QUFDQSxVQUFJa3BCLEtBQUssQ0FBQ2xwQixHQUFELENBQVQsRUFBZ0I7QUFDZCxZQUFJeTRDLFFBQVEsQ0FBQ3o0QyxHQUFELENBQVosRUFBbUI7QUFDakJzYSxjQUFJLENBQ0QsK0JBQStCdGEsR0FBL0IsR0FBcUMsb0NBRHBDLEVBRUYrekIsS0FBSyxDQUFDcmIsT0FGSixDQUFKO0FBSUQsU0FMRCxNQUtPO0FBQ0wrL0Isa0JBQVEsQ0FBQ3o0QyxHQUFELENBQVIsR0FBZ0IsSUFBaEI7QUFDRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTdzRDLFlBQVQsQ0FBdUI1a0IsSUFBdkIsRUFBNkIyakIsS0FBN0IsRUFBb0NwcUQsS0FBcEMsRUFBMkNJLEdBQTNDLEVBQWdEO0FBQzlDLFNBQUssSUFBSTRNLENBQUMsR0FBR2hOLEtBQWIsRUFBb0JnTixDQUFDLEdBQUc1TSxHQUF4QixFQUE2QjRNLENBQUMsRUFBOUIsRUFBa0M7QUFDaEMsVUFBSTR3QixDQUFDLEdBQUd3c0IsS0FBSyxDQUFDcDlDLENBQUQsQ0FBYjs7QUFDQSxVQUFJK3VCLEtBQUssQ0FBQzZCLENBQUQsQ0FBTCxJQUFZb3BCLFNBQVMsQ0FBQ3ZnQixJQUFELEVBQU83SSxDQUFQLENBQXpCLEVBQW9DO0FBQUUsZUFBTzV3QixDQUFQO0FBQVU7QUFDakQ7QUFDRjs7QUFFRCxXQUFTbStDLFVBQVQsQ0FDRTMvQixRQURGLEVBRUVvYixLQUZGLEVBR0V5aEIsa0JBSEYsRUFJRUksVUFKRixFQUtFdmlELEtBTEYsRUFNRW9rRCxVQU5GLEVBT0U7QUFDQSxRQUFJOStCLFFBQVEsS0FBS29iLEtBQWpCLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBRUQsUUFBSTdLLEtBQUssQ0FBQzZLLEtBQUssQ0FBQ3ZCLEdBQVAsQ0FBTCxJQUFvQnRKLEtBQUssQ0FBQzBzQixVQUFELENBQTdCLEVBQTJDO0FBQ3pDO0FBQ0E3aEIsV0FBSyxHQUFHNmhCLFVBQVUsQ0FBQ3ZpRCxLQUFELENBQVYsR0FBb0J5Z0MsVUFBVSxDQUFDQyxLQUFELENBQXRDO0FBQ0Q7O0FBRUQsUUFBSXZCLEdBQUcsR0FBR3VCLEtBQUssQ0FBQ3ZCLEdBQU4sR0FBWTdaLFFBQVEsQ0FBQzZaLEdBQS9COztBQUVBLFFBQUlySixNQUFNLENBQUN4USxRQUFRLENBQUM0YSxrQkFBVixDQUFWLEVBQXlDO0FBQ3ZDLFVBQUlySyxLQUFLLENBQUM2SyxLQUFLLENBQUNyQixZQUFOLENBQW1CZ2UsUUFBcEIsQ0FBVCxFQUF3QztBQUN0Q2dJLGVBQU8sQ0FBQy8vQixRQUFRLENBQUM2WixHQUFWLEVBQWV1QixLQUFmLEVBQXNCeWhCLGtCQUF0QixDQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0x6aEIsYUFBSyxDQUFDUixrQkFBTixHQUEyQixJQUEzQjtBQUNEOztBQUNEO0FBQ0QsS0FuQkQsQ0FxQkE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFFBQUlwSyxNQUFNLENBQUM0SyxLQUFLLENBQUNkLFFBQVAsQ0FBTixJQUNGOUosTUFBTSxDQUFDeFEsUUFBUSxDQUFDc2EsUUFBVixDQURKLElBRUZjLEtBQUssQ0FBQy96QixHQUFOLEtBQWMyWSxRQUFRLENBQUMzWSxHQUZyQixLQUdEbXBCLE1BQU0sQ0FBQzRLLEtBQUssQ0FBQ1gsUUFBUCxDQUFOLElBQTBCakssTUFBTSxDQUFDNEssS0FBSyxDQUFDVixNQUFQLENBSC9CLENBQUosRUFJRTtBQUNBVSxXQUFLLENBQUNoQixpQkFBTixHQUEwQnBhLFFBQVEsQ0FBQ29hLGlCQUFuQztBQUNBO0FBQ0Q7O0FBRUQsUUFBSTU0QixDQUFKO0FBQ0EsUUFBSTJELElBQUksR0FBR2kyQixLQUFLLENBQUNqMkIsSUFBakI7O0FBQ0EsUUFBSW9yQixLQUFLLENBQUNwckIsSUFBRCxDQUFMLElBQWVvckIsS0FBSyxDQUFDL3VCLENBQUMsR0FBRzJELElBQUksQ0FBQ3E1QixJQUFWLENBQXBCLElBQXVDak8sS0FBSyxDQUFDL3VCLENBQUMsR0FBR0EsQ0FBQyxDQUFDeXpDLFFBQVAsQ0FBaEQsRUFBa0U7QUFDaEV6ekMsT0FBQyxDQUFDd2UsUUFBRCxFQUFXb2IsS0FBWCxDQUFEO0FBQ0Q7O0FBRUQsUUFBSXdqQixLQUFLLEdBQUc1K0IsUUFBUSxDQUFDNFosUUFBckI7QUFDQSxRQUFJNGtCLEVBQUUsR0FBR3BqQixLQUFLLENBQUN4QixRQUFmOztBQUNBLFFBQUlySixLQUFLLENBQUNwckIsSUFBRCxDQUFMLElBQWV3NEMsV0FBVyxDQUFDdmlCLEtBQUQsQ0FBOUIsRUFBdUM7QUFDckMsV0FBSzU1QixDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdrNEMsR0FBRyxDQUFDajJCLE1BQUosQ0FBVzc4QixNQUEzQixFQUFtQyxFQUFFNGEsQ0FBckMsRUFBd0M7QUFBRWs0QyxXQUFHLENBQUNqMkIsTUFBSixDQUFXamlCLENBQVgsRUFBY3dlLFFBQWQsRUFBd0JvYixLQUF4QjtBQUFpQzs7QUFDM0UsVUFBSTdLLEtBQUssQ0FBQy91QixDQUFDLEdBQUcyRCxJQUFJLENBQUNxNUIsSUFBVixDQUFMLElBQXdCak8sS0FBSyxDQUFDL3VCLENBQUMsR0FBR0EsQ0FBQyxDQUFDaWlCLE1BQVAsQ0FBakMsRUFBaUQ7QUFBRWppQixTQUFDLENBQUN3ZSxRQUFELEVBQVdvYixLQUFYLENBQUQ7QUFBcUI7QUFDekU7O0FBQ0QsUUFBSTlLLE9BQU8sQ0FBQzhLLEtBQUssQ0FBQzdtQyxJQUFQLENBQVgsRUFBeUI7QUFDdkIsVUFBSWc4QixLQUFLLENBQUNxdUIsS0FBRCxDQUFMLElBQWdCcnVCLEtBQUssQ0FBQ2l1QixFQUFELENBQXpCLEVBQStCO0FBQzdCLFlBQUlJLEtBQUssS0FBS0osRUFBZCxFQUFrQjtBQUFFRyx3QkFBYyxDQUFDOWtCLEdBQUQsRUFBTStrQixLQUFOLEVBQWFKLEVBQWIsRUFBaUIzQixrQkFBakIsRUFBcUNpQyxVQUFyQyxDQUFkO0FBQWlFO0FBQ3RGLE9BRkQsTUFFTyxJQUFJdnVCLEtBQUssQ0FBQ2l1QixFQUFELENBQVQsRUFBZTtBQUNwQixZQUFJeDVCLElBQUosRUFBMkM7QUFDekNpNUIsNEJBQWtCLENBQUNPLEVBQUQsQ0FBbEI7QUFDRDs7QUFDRCxZQUFJanVCLEtBQUssQ0FBQ3ZRLFFBQVEsQ0FBQ3pyQixJQUFWLENBQVQsRUFBMEI7QUFBRTBuRCxpQkFBTyxDQUFDK0QsY0FBUixDQUF1Qm5tQixHQUF2QixFQUE0QixFQUE1QjtBQUFrQzs7QUFDOUR1a0IsaUJBQVMsQ0FBQ3ZrQixHQUFELEVBQU0sSUFBTixFQUFZMmtCLEVBQVosRUFBZ0IsQ0FBaEIsRUFBbUJBLEVBQUUsQ0FBQzUzRCxNQUFILEdBQVksQ0FBL0IsRUFBa0NpMkQsa0JBQWxDLENBQVQ7QUFDRCxPQU5NLE1BTUEsSUFBSXRzQixLQUFLLENBQUNxdUIsS0FBRCxDQUFULEVBQWtCO0FBQ3ZCTCxvQkFBWSxDQUFDMWtCLEdBQUQsRUFBTStrQixLQUFOLEVBQWEsQ0FBYixFQUFnQkEsS0FBSyxDQUFDaDRELE1BQU4sR0FBZSxDQUEvQixDQUFaO0FBQ0QsT0FGTSxNQUVBLElBQUkycEMsS0FBSyxDQUFDdlEsUUFBUSxDQUFDenJCLElBQVYsQ0FBVCxFQUEwQjtBQUMvQjBuRCxlQUFPLENBQUMrRCxjQUFSLENBQXVCbm1CLEdBQXZCLEVBQTRCLEVBQTVCO0FBQ0Q7QUFDRixLQWRELE1BY08sSUFBSTdaLFFBQVEsQ0FBQ3pyQixJQUFULEtBQWtCNm1DLEtBQUssQ0FBQzdtQyxJQUE1QixFQUFrQztBQUN2QzBuRCxhQUFPLENBQUMrRCxjQUFSLENBQXVCbm1CLEdBQXZCLEVBQTRCdUIsS0FBSyxDQUFDN21DLElBQWxDO0FBQ0Q7O0FBQ0QsUUFBSWc4QixLQUFLLENBQUNwckIsSUFBRCxDQUFULEVBQWlCO0FBQ2YsVUFBSW9yQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHMkQsSUFBSSxDQUFDcTVCLElBQVYsQ0FBTCxJQUF3QmpPLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ3krQyxTQUFQLENBQWpDLEVBQW9EO0FBQUV6K0MsU0FBQyxDQUFDd2UsUUFBRCxFQUFXb2IsS0FBWCxDQUFEO0FBQXFCO0FBQzVFO0FBQ0Y7O0FBRUQsV0FBUzhrQixnQkFBVCxDQUEyQjlrQixLQUEzQixFQUFrQ2dKLEtBQWxDLEVBQXlDK2IsT0FBekMsRUFBa0Q7QUFDaEQ7QUFDQTtBQUNBLFFBQUkzdkIsTUFBTSxDQUFDMnZCLE9BQUQsQ0FBTixJQUFtQjV2QixLQUFLLENBQUM2SyxLQUFLLENBQUM3aUIsTUFBUCxDQUE1QixFQUE0QztBQUMxQzZpQixXQUFLLENBQUM3aUIsTUFBTixDQUFhcFQsSUFBYixDQUFrQnU0QyxhQUFsQixHQUFrQ3RaLEtBQWxDO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBSyxJQUFJNWlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc0aUMsS0FBSyxDQUFDeDlDLE1BQTFCLEVBQWtDLEVBQUU0YSxDQUFwQyxFQUF1QztBQUNyQzRpQyxhQUFLLENBQUM1aUMsQ0FBRCxDQUFMLENBQVMyRCxJQUFULENBQWNxNUIsSUFBZCxDQUFtQjZXLE1BQW5CLENBQTBCalIsS0FBSyxDQUFDNWlDLENBQUQsQ0FBL0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSTQrQyxlQUFlLEdBQUcsS0FBdEIsQ0FyZnFDLENBc2ZyQztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJQyxnQkFBZ0IsR0FBRy91QixPQUFPLENBQUMseUNBQUQsQ0FBOUIsQ0ExZnFDLENBNGZyQzs7QUFDQSxXQUFTeXVCLE9BQVQsQ0FBa0JsbUIsR0FBbEIsRUFBdUJ1QixLQUF2QixFQUE4QnloQixrQkFBOUIsRUFBa0RKLE1BQWxELEVBQTBEO0FBQ3hELFFBQUlqN0MsQ0FBSjtBQUNBLFFBQUltNEIsR0FBRyxHQUFHeUIsS0FBSyxDQUFDekIsR0FBaEI7QUFDQSxRQUFJeDBCLElBQUksR0FBR2kyQixLQUFLLENBQUNqMkIsSUFBakI7QUFDQSxRQUFJeTBCLFFBQVEsR0FBR3dCLEtBQUssQ0FBQ3hCLFFBQXJCO0FBQ0E2aUIsVUFBTSxHQUFHQSxNQUFNLElBQUt0M0MsSUFBSSxJQUFJQSxJQUFJLENBQUM0eEMsR0FBakM7QUFDQTNiLFNBQUssQ0FBQ3ZCLEdBQU4sR0FBWUEsR0FBWjs7QUFFQSxRQUFJckosTUFBTSxDQUFDNEssS0FBSyxDQUFDWixTQUFQLENBQU4sSUFBMkJqSyxLQUFLLENBQUM2SyxLQUFLLENBQUNyQixZQUFQLENBQXBDLEVBQTBEO0FBQ3hEcUIsV0FBSyxDQUFDUixrQkFBTixHQUEyQixJQUEzQjtBQUNBLGFBQU8sSUFBUDtBQUNELEtBWHVELENBWXhEOzs7QUFDQSxRQUFJNVYsSUFBSixFQUEyQztBQUN6QyxVQUFJLENBQUNzN0IsZUFBZSxDQUFDem1CLEdBQUQsRUFBTXVCLEtBQU4sRUFBYXFoQixNQUFiLENBQXBCLEVBQTBDO0FBQ3hDLGVBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSWxzQixLQUFLLENBQUNwckIsSUFBRCxDQUFULEVBQWlCO0FBQ2YsVUFBSW9yQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHMkQsSUFBSSxDQUFDcTVCLElBQVYsQ0FBTCxJQUF3QmpPLEtBQUssQ0FBQy91QixDQUFDLEdBQUdBLENBQUMsQ0FBQ3lTLElBQVAsQ0FBakMsRUFBK0M7QUFBRXpTLFNBQUMsQ0FBQzQ1QixLQUFELEVBQVE7QUFBSztBQUFiLFNBQUQ7QUFBaUM7O0FBQ2xGLFVBQUk3SyxLQUFLLENBQUMvdUIsQ0FBQyxHQUFHNDVCLEtBQUssQ0FBQ2hCLGlCQUFYLENBQVQsRUFBd0M7QUFDdEM7QUFDQW9qQixxQkFBYSxDQUFDcGlCLEtBQUQsRUFBUXloQixrQkFBUixDQUFiO0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJdHNCLEtBQUssQ0FBQ29KLEdBQUQsQ0FBVCxFQUFnQjtBQUNkLFVBQUlwSixLQUFLLENBQUNxSixRQUFELENBQVQsRUFBcUI7QUFDbkI7QUFDQSxZQUFJLENBQUNDLEdBQUcsQ0FBQzBtQixhQUFKLEVBQUwsRUFBMEI7QUFDeEJuRCx3QkFBYyxDQUFDaGlCLEtBQUQsRUFBUXhCLFFBQVIsRUFBa0JpakIsa0JBQWxCLENBQWQ7QUFDRCxTQUZELE1BRU87QUFDTDtBQUNBLGNBQUl0c0IsS0FBSyxDQUFDL3VCLENBQUMsR0FBRzJELElBQUwsQ0FBTCxJQUFtQm9yQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHQSxDQUFDLENBQUM4dkMsUUFBUCxDQUF4QixJQUE0Qy9nQixLQUFLLENBQUMvdUIsQ0FBQyxHQUFHQSxDQUFDLENBQUNnL0MsU0FBUCxDQUFyRCxFQUF3RTtBQUN0RSxnQkFBSWgvQyxDQUFDLEtBQUtxNEIsR0FBRyxDQUFDMm1CLFNBQWQsRUFBeUI7QUFDdkI7QUFDQSxrQkFBSXg3QixLQUFBLElBQ0YsT0FBT3RELE9BQVAsS0FBbUIsV0FEakIsSUFFRixDQUFDMCtCLGVBRkgsRUFHRTtBQUNBQSwrQkFBZSxHQUFHLElBQWxCO0FBQ0ExK0IsdUJBQU8sQ0FBQ0MsSUFBUixDQUFhLFVBQWIsRUFBeUJrWSxHQUF6QjtBQUNBblksdUJBQU8sQ0FBQ0MsSUFBUixDQUFhLG9CQUFiLEVBQW1DbmdCLENBQW5DO0FBQ0FrZ0IsdUJBQU8sQ0FBQ0MsSUFBUixDQUFhLG9CQUFiLEVBQW1Da1ksR0FBRyxDQUFDMm1CLFNBQXZDO0FBQ0Q7O0FBQ0QscUJBQU8sS0FBUDtBQUNEO0FBQ0YsV0FkRCxNQWNPO0FBQ0w7QUFDQSxnQkFBSUMsYUFBYSxHQUFHLElBQXBCO0FBQ0EsZ0JBQUlDLFNBQVMsR0FBRzdtQixHQUFHLENBQUM4bUIsVUFBcEI7O0FBQ0EsaUJBQUssSUFBSWxILEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUc3ZixRQUFRLENBQUNoekMsTUFBakMsRUFBeUM2eUQsR0FBRyxFQUE1QyxFQUFnRDtBQUM5QyxrQkFBSSxDQUFDaUgsU0FBRCxJQUFjLENBQUNYLE9BQU8sQ0FBQ1csU0FBRCxFQUFZOW1CLFFBQVEsQ0FBQzZmLEdBQUQsQ0FBcEIsRUFBMkJvRCxrQkFBM0IsRUFBK0NKLE1BQS9DLENBQTFCLEVBQWtGO0FBQ2hGZ0UsNkJBQWEsR0FBRyxLQUFoQjtBQUNBO0FBQ0Q7O0FBQ0RDLHVCQUFTLEdBQUdBLFNBQVMsQ0FBQ2QsV0FBdEI7QUFDRCxhQVZJLENBV0w7QUFDQTs7O0FBQ0EsZ0JBQUksQ0FBQ2EsYUFBRCxJQUFrQkMsU0FBdEIsRUFBaUM7QUFDL0I7QUFDQSxrQkFBSTE3QixLQUFBLElBQ0YsT0FBT3RELE9BQVAsS0FBbUIsV0FEakIsSUFFRixDQUFDMCtCLGVBRkgsRUFHRTtBQUNBQSwrQkFBZSxHQUFHLElBQWxCO0FBQ0ExK0IsdUJBQU8sQ0FBQ0MsSUFBUixDQUFhLFVBQWIsRUFBeUJrWSxHQUF6QjtBQUNBblksdUJBQU8sQ0FBQ0MsSUFBUixDQUFhLHFDQUFiLEVBQW9Ea1ksR0FBRyxDQUFDK21CLFVBQXhELEVBQW9FaG5CLFFBQXBFO0FBQ0Q7O0FBQ0QscUJBQU8sS0FBUDtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUNELFVBQUlySixLQUFLLENBQUNwckIsSUFBRCxDQUFULEVBQWlCO0FBQ2YsWUFBSTA3QyxVQUFVLEdBQUcsS0FBakI7O0FBQ0EsYUFBSyxJQUFJeDVDLEdBQVQsSUFBZ0JsQyxJQUFoQixFQUFzQjtBQUNwQixjQUFJLENBQUNrN0MsZ0JBQWdCLENBQUNoNUMsR0FBRCxDQUFyQixFQUE0QjtBQUMxQnc1QyxzQkFBVSxHQUFHLElBQWI7QUFDQXhELDZCQUFpQixDQUFDamlCLEtBQUQsRUFBUXloQixrQkFBUixDQUFqQjtBQUNBO0FBQ0Q7QUFDRjs7QUFDRCxZQUFJLENBQUNnRSxVQUFELElBQWUxN0MsSUFBSSxDQUFDLE9BQUQsQ0FBdkIsRUFBa0M7QUFDaEM7QUFDQTIrQixrQkFBUSxDQUFDMytCLElBQUksQ0FBQyxPQUFELENBQUwsQ0FBUjtBQUNEO0FBQ0Y7QUFDRixLQS9ERCxNQStETyxJQUFJMDBCLEdBQUcsQ0FBQzEwQixJQUFKLEtBQWFpMkIsS0FBSyxDQUFDN21DLElBQXZCLEVBQTZCO0FBQ2xDc2xDLFNBQUcsQ0FBQzEwQixJQUFKLEdBQVdpMkIsS0FBSyxDQUFDN21DLElBQWpCO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBUytyRCxlQUFULENBQTBCcmxCLElBQTFCLEVBQWdDRyxLQUFoQyxFQUF1Q3FoQixNQUF2QyxFQUErQztBQUM3QyxRQUFJbHNCLEtBQUssQ0FBQzZLLEtBQUssQ0FBQ3pCLEdBQVAsQ0FBVCxFQUFzQjtBQUNwQixhQUFPeUIsS0FBSyxDQUFDekIsR0FBTixDQUFVbndDLE9BQVYsQ0FBa0IsZUFBbEIsTUFBdUMsQ0FBdkMsSUFDTCxDQUFDNnRDLGdCQUFnQixDQUFDK0QsS0FBRCxFQUFRcWhCLE1BQVIsQ0FBakIsSUFDQXJoQixLQUFLLENBQUN6QixHQUFOLENBQVVwd0MsV0FBVixRQUE2QjB4QyxJQUFJLENBQUNraEIsT0FBTCxJQUFnQmxoQixJQUFJLENBQUNraEIsT0FBTCxDQUFhNXlELFdBQWIsRUFBN0MsQ0FGRjtBQUlELEtBTEQsTUFLTztBQUNMLGFBQU8weEMsSUFBSSxDQUFDbk8sUUFBTCxNQUFtQnNPLEtBQUssQ0FBQ1osU0FBTixHQUFrQixDQUFsQixHQUFzQixDQUF6QyxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLFNBQVNzbUIsS0FBVCxDQUFnQjlnQyxRQUFoQixFQUEwQm9iLEtBQTFCLEVBQWlDMFosU0FBakMsRUFBNENnSyxVQUE1QyxFQUF3RDtBQUM3RCxRQUFJeHVCLE9BQU8sQ0FBQzhLLEtBQUQsQ0FBWCxFQUFvQjtBQUNsQixVQUFJN0ssS0FBSyxDQUFDdlEsUUFBRCxDQUFULEVBQXFCO0FBQUVzK0IseUJBQWlCLENBQUN0K0IsUUFBRCxDQUFqQjtBQUE4Qjs7QUFDckQ7QUFDRDs7QUFFRCxRQUFJK2dDLGNBQWMsR0FBRyxLQUFyQjtBQUNBLFFBQUlsRSxrQkFBa0IsR0FBRyxFQUF6Qjs7QUFFQSxRQUFJdnNCLE9BQU8sQ0FBQ3RRLFFBQUQsQ0FBWCxFQUF1QjtBQUNyQjtBQUNBK2dDLG9CQUFjLEdBQUcsSUFBakI7QUFDQW5FLGVBQVMsQ0FBQ3hoQixLQUFELEVBQVF5aEIsa0JBQVIsQ0FBVDtBQUNELEtBSkQsTUFJTztBQUNMLFVBQUltRSxhQUFhLEdBQUd6d0IsS0FBSyxDQUFDdlEsUUFBUSxDQUFDOE0sUUFBVixDQUF6Qjs7QUFDQSxVQUFJLENBQUNrMEIsYUFBRCxJQUFrQnhGLFNBQVMsQ0FBQ3g3QixRQUFELEVBQVdvYixLQUFYLENBQS9CLEVBQWtEO0FBQ2hEO0FBQ0F1a0Isa0JBQVUsQ0FBQzMvQixRQUFELEVBQVdvYixLQUFYLEVBQWtCeWhCLGtCQUFsQixFQUFzQyxJQUF0QyxFQUE0QyxJQUE1QyxFQUFrRGlDLFVBQWxELENBQVY7QUFDRCxPQUhELE1BR087QUFDTCxZQUFJa0MsYUFBSixFQUFtQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxjQUFJaGhDLFFBQVEsQ0FBQzhNLFFBQVQsS0FBc0IsQ0FBdEIsSUFBMkI5TSxRQUFRLENBQUNpaEMsWUFBVCxDQUFzQjFxQixRQUF0QixDQUEvQixFQUFnRTtBQUM5RHZXLG9CQUFRLENBQUNraEMsZUFBVCxDQUF5QjNxQixRQUF6QjtBQUNBdWUscUJBQVMsR0FBRyxJQUFaO0FBQ0Q7O0FBQ0QsY0FBSXRrQixNQUFNLENBQUNza0IsU0FBRCxDQUFWLEVBQXVCO0FBQ3JCLGdCQUFJaUwsT0FBTyxDQUFDLy9CLFFBQUQsRUFBV29iLEtBQVgsRUFBa0J5aEIsa0JBQWxCLENBQVgsRUFBa0Q7QUFDaERxRCw4QkFBZ0IsQ0FBQzlrQixLQUFELEVBQVF5aEIsa0JBQVIsRUFBNEIsSUFBNUIsQ0FBaEI7QUFDQSxxQkFBTzc4QixRQUFQO0FBQ0QsYUFIRCxNQUdPLElBQUlnRixJQUFKLEVBQTJDO0FBQ2hEckQsa0JBQUksQ0FDRiwrREFDQSw4REFEQSxHQUVBLCtEQUZBLEdBR0EsNERBSEEsR0FJQSwwQkFMRSxDQUFKO0FBT0Q7QUFDRixXQXJCZ0IsQ0FzQmpCO0FBQ0E7OztBQUNBM0Isa0JBQVEsR0FBR2s4QixXQUFXLENBQUNsOEIsUUFBRCxDQUF0QjtBQUNELFNBMUJJLENBNEJMOzs7QUFDQSxZQUFJbWhDLE1BQU0sR0FBR25oQyxRQUFRLENBQUM2WixHQUF0QjtBQUNBLFlBQUlpakIsU0FBUyxHQUFHYixPQUFPLENBQUNNLFVBQVIsQ0FBbUI0RSxNQUFuQixDQUFoQixDQTlCSyxDQWdDTDs7QUFDQXZFLGlCQUFTLENBQ1B4aEIsS0FETyxFQUVQeWhCLGtCQUZPLEVBR1A7QUFDQTtBQUNBO0FBQ0FzRSxjQUFNLENBQUNDLFFBQVAsR0FBa0IsSUFBbEIsR0FBeUJ0RSxTQU5sQixFQU9QYixPQUFPLENBQUMyRCxXQUFSLENBQW9CdUIsTUFBcEIsQ0FQTyxDQUFULENBakNLLENBMkNMOztBQUNBLFlBQUk1d0IsS0FBSyxDQUFDNkssS0FBSyxDQUFDN2lCLE1BQVAsQ0FBVCxFQUF5QjtBQUN2QixjQUFJNGxDLFFBQVEsR0FBRy9pQixLQUFLLENBQUM3aUIsTUFBckI7QUFDQSxjQUFJOG9DLFNBQVMsR0FBRzFELFdBQVcsQ0FBQ3ZpQixLQUFELENBQTNCOztBQUNBLGlCQUFPK2lCLFFBQVAsRUFBaUI7QUFDZixpQkFBSyxJQUFJMzhDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdrNEMsR0FBRyxDQUFDalcsT0FBSixDQUFZNzhDLE1BQWhDLEVBQXdDLEVBQUU0YSxDQUExQyxFQUE2QztBQUMzQ2s0QyxpQkFBRyxDQUFDalcsT0FBSixDQUFZamlDLENBQVosRUFBZTI4QyxRQUFmO0FBQ0Q7O0FBQ0RBLG9CQUFRLENBQUN0a0IsR0FBVCxHQUFldUIsS0FBSyxDQUFDdkIsR0FBckI7O0FBQ0EsZ0JBQUl3bkIsU0FBSixFQUFlO0FBQ2IsbUJBQUssSUFBSTVILEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdDLEdBQUcsQ0FBQ2xvQixNQUFKLENBQVc1cUMsTUFBbkMsRUFBMkMsRUFBRTZ5RCxHQUE3QyxFQUFrRDtBQUNoREMsbUJBQUcsQ0FBQ2xvQixNQUFKLENBQVdpb0IsR0FBWCxFQUFnQjhCLFNBQWhCLEVBQTJCNEMsUUFBM0I7QUFDRCxlQUhZLENBSWI7QUFDQTtBQUNBOzs7QUFDQSxrQkFBSTlJLE1BQU0sR0FBRzhJLFFBQVEsQ0FBQ2g1QyxJQUFULENBQWNxNUIsSUFBZCxDQUFtQjZXLE1BQWhDOztBQUNBLGtCQUFJQSxNQUFNLENBQUM1TSxNQUFYLEVBQW1CO0FBQ2pCO0FBQ0EscUJBQUssSUFBSTZZLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdqTSxNQUFNLENBQUN4TixHQUFQLENBQVdqaEQsTUFBbkMsRUFBMkMwNkQsR0FBRyxFQUE5QyxFQUFrRDtBQUNoRGpNLHdCQUFNLENBQUN4TixHQUFQLENBQVd5WixHQUFYO0FBQ0Q7QUFDRjtBQUNGLGFBZEQsTUFjTztBQUNMOWQseUJBQVcsQ0FBQzJhLFFBQUQsQ0FBWDtBQUNEOztBQUNEQSxvQkFBUSxHQUFHQSxRQUFRLENBQUM1bEMsTUFBcEI7QUFDRDtBQUNGLFNBdkVJLENBeUVMOzs7QUFDQSxZQUFJZ1ksS0FBSyxDQUFDdXNCLFNBQUQsQ0FBVCxFQUFzQjtBQUNwQnlCLHNCQUFZLENBQUN6QixTQUFELEVBQVksQ0FBQzk4QixRQUFELENBQVosRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0IsQ0FBWjtBQUNELFNBRkQsTUFFTyxJQUFJdVEsS0FBSyxDQUFDdlEsUUFBUSxDQUFDMlosR0FBVixDQUFULEVBQXlCO0FBQzlCMmtCLDJCQUFpQixDQUFDdCtCLFFBQUQsQ0FBakI7QUFDRDtBQUNGO0FBQ0Y7O0FBRURrZ0Msb0JBQWdCLENBQUM5a0IsS0FBRCxFQUFReWhCLGtCQUFSLEVBQTRCa0UsY0FBNUIsQ0FBaEI7QUFDQSxXQUFPM2xCLEtBQUssQ0FBQ3ZCLEdBQWI7QUFDRCxHQXRHRDtBQXVHRDtBQUVEOzs7QUFFQSxJQUFJd0YsVUFBVSxHQUFHO0FBQ2Y3TixRQUFNLEVBQUUrdkIsZ0JBRE87QUFFZjk5QixRQUFNLEVBQUU4OUIsZ0JBRk87QUFHZjlkLFNBQU8sRUFBRSxTQUFTK2QsZ0JBQVQsQ0FBMkJwbUIsS0FBM0IsRUFBa0M7QUFDekNtbUIsb0JBQWdCLENBQUNubUIsS0FBRCxFQUFRbWdCLFNBQVIsQ0FBaEI7QUFDRDtBQUxjLENBQWpCOztBQVFBLFNBQVNnRyxnQkFBVCxDQUEyQnZoQyxRQUEzQixFQUFxQ29iLEtBQXJDLEVBQTRDO0FBQzFDLE1BQUlwYixRQUFRLENBQUM3YSxJQUFULENBQWNrNkIsVUFBZCxJQUE0QmpFLEtBQUssQ0FBQ2oyQixJQUFOLENBQVdrNkIsVUFBM0MsRUFBdUQ7QUFDckQ0YSxXQUFPLENBQUNqNkIsUUFBRCxFQUFXb2IsS0FBWCxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTNmUsT0FBVCxDQUFrQmo2QixRQUFsQixFQUE0Qm9iLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUlxbUIsUUFBUSxHQUFHemhDLFFBQVEsS0FBS3U3QixTQUE1QjtBQUNBLE1BQUltRyxTQUFTLEdBQUd0bUIsS0FBSyxLQUFLbWdCLFNBQTFCO0FBQ0EsTUFBSW9HLE9BQU8sR0FBR0MscUJBQXFCLENBQUM1aEMsUUFBUSxDQUFDN2EsSUFBVCxDQUFjazZCLFVBQWYsRUFBMkJyZixRQUFRLENBQUNELE9BQXBDLENBQW5DO0FBQ0EsTUFBSThoQyxPQUFPLEdBQUdELHFCQUFxQixDQUFDeG1CLEtBQUssQ0FBQ2oyQixJQUFOLENBQVdrNkIsVUFBWixFQUF3QmpFLEtBQUssQ0FBQ3JiLE9BQTlCLENBQW5DO0FBRUEsTUFBSStoQyxjQUFjLEdBQUcsRUFBckI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxFQUF4QjtBQUVBLE1BQUkxNkMsR0FBSixFQUFTMjZDLE1BQVQsRUFBaUJDLEdBQWpCOztBQUNBLE9BQUs1NkMsR0FBTCxJQUFZdzZDLE9BQVosRUFBcUI7QUFDbkJHLFVBQU0sR0FBR0wsT0FBTyxDQUFDdDZDLEdBQUQsQ0FBaEI7QUFDQTQ2QyxPQUFHLEdBQUdKLE9BQU8sQ0FBQ3g2QyxHQUFELENBQWI7O0FBQ0EsUUFBSSxDQUFDMjZDLE1BQUwsRUFBYTtBQUNYO0FBQ0FFLGdCQUFVLENBQUNELEdBQUQsRUFBTSxNQUFOLEVBQWM3bUIsS0FBZCxFQUFxQnBiLFFBQXJCLENBQVY7O0FBQ0EsVUFBSWlpQyxHQUFHLENBQUM5dEIsR0FBSixJQUFXOHRCLEdBQUcsQ0FBQzl0QixHQUFKLENBQVEySCxRQUF2QixFQUFpQztBQUMvQmdtQixzQkFBYyxDQUFDN25ELElBQWYsQ0FBb0Jnb0QsR0FBcEI7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMO0FBQ0FBLFNBQUcsQ0FBQ2wzQyxRQUFKLEdBQWVpM0MsTUFBTSxDQUFDNzdELEtBQXRCO0FBQ0E4N0QsU0FBRyxDQUFDRSxNQUFKLEdBQWFILE1BQU0sQ0FBQ243RCxHQUFwQjtBQUNBcTdELGdCQUFVLENBQUNELEdBQUQsRUFBTSxRQUFOLEVBQWdCN21CLEtBQWhCLEVBQXVCcGIsUUFBdkIsQ0FBVjs7QUFDQSxVQUFJaWlDLEdBQUcsQ0FBQzl0QixHQUFKLElBQVc4dEIsR0FBRyxDQUFDOXRCLEdBQUosQ0FBUWl1QixnQkFBdkIsRUFBeUM7QUFDdkNMLHlCQUFpQixDQUFDOW5ELElBQWxCLENBQXVCZ29ELEdBQXZCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELE1BQUlILGNBQWMsQ0FBQ2w3RCxNQUFuQixFQUEyQjtBQUN6QixRQUFJeTdELFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVk7QUFDM0IsV0FBSyxJQUFJN2dELENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdzZ0QsY0FBYyxDQUFDbDdELE1BQW5DLEVBQTJDNGEsQ0FBQyxFQUE1QyxFQUFnRDtBQUM5QzBnRCxrQkFBVSxDQUFDSixjQUFjLENBQUN0Z0QsQ0FBRCxDQUFmLEVBQW9CLFVBQXBCLEVBQWdDNDVCLEtBQWhDLEVBQXVDcGIsUUFBdkMsQ0FBVjtBQUNEO0FBQ0YsS0FKRDs7QUFLQSxRQUFJeWhDLFFBQUosRUFBYztBQUNacFosb0JBQWMsQ0FBQ2pOLEtBQUQsRUFBUSxRQUFSLEVBQWtCaW5CLFVBQWxCLENBQWQ7QUFDRCxLQUZELE1BRU87QUFDTEEsZ0JBQVU7QUFDWDtBQUNGOztBQUVELE1BQUlOLGlCQUFpQixDQUFDbjdELE1BQXRCLEVBQThCO0FBQzVCeWhELGtCQUFjLENBQUNqTixLQUFELEVBQVEsV0FBUixFQUFxQixZQUFZO0FBQzdDLFdBQUssSUFBSTU1QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdWdELGlCQUFpQixDQUFDbjdELE1BQXRDLEVBQThDNGEsQ0FBQyxFQUEvQyxFQUFtRDtBQUNqRDBnRCxrQkFBVSxDQUFDSCxpQkFBaUIsQ0FBQ3ZnRCxDQUFELENBQWxCLEVBQXVCLGtCQUF2QixFQUEyQzQ1QixLQUEzQyxFQUFrRHBiLFFBQWxELENBQVY7QUFDRDtBQUNGLEtBSmEsQ0FBZDtBQUtEOztBQUVELE1BQUksQ0FBQ3loQyxRQUFMLEVBQWU7QUFDYixTQUFLcDZDLEdBQUwsSUFBWXM2QyxPQUFaLEVBQXFCO0FBQ25CLFVBQUksQ0FBQ0UsT0FBTyxDQUFDeDZDLEdBQUQsQ0FBWixFQUFtQjtBQUNqQjtBQUNBNjZDLGtCQUFVLENBQUNQLE9BQU8sQ0FBQ3Q2QyxHQUFELENBQVIsRUFBZSxRQUFmLEVBQXlCMlksUUFBekIsRUFBbUNBLFFBQW5DLEVBQTZDMGhDLFNBQTdDLENBQVY7QUFDRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxJQUFJWSxjQUFjLEdBQUd0OEQsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYyxJQUFkLENBQXJCOztBQUVBLFNBQVNvd0IscUJBQVQsQ0FDRXhpQixJQURGLEVBRUVsSCxFQUZGLEVBR0U7QUFDQSxNQUFJOVMsR0FBRyxHQUFHcC9CLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWMsSUFBZCxDQUFWOztBQUNBLE1BQUksQ0FBQzROLElBQUwsRUFBVztBQUNUO0FBQ0EsV0FBT2hhLEdBQVA7QUFDRDs7QUFDRCxNQUFJNWpCLENBQUosRUFBT3lnRCxHQUFQOztBQUNBLE9BQUt6Z0QsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHNDlCLElBQUksQ0FBQ3g0QyxNQUFyQixFQUE2QjRhLENBQUMsRUFBOUIsRUFBa0M7QUFDaEN5Z0QsT0FBRyxHQUFHN2lCLElBQUksQ0FBQzU5QixDQUFELENBQVY7O0FBQ0EsUUFBSSxDQUFDeWdELEdBQUcsQ0FBQ00sU0FBVCxFQUFvQjtBQUNsQjtBQUNBTixTQUFHLENBQUNNLFNBQUosR0FBZ0JELGNBQWhCO0FBQ0Q7O0FBQ0RsOUIsT0FBRyxDQUFDbzlCLGFBQWEsQ0FBQ1AsR0FBRCxDQUFkLENBQUgsR0FBMEJBLEdBQTFCO0FBQ0FBLE9BQUcsQ0FBQzl0QixHQUFKLEdBQVV5TCxZQUFZLENBQUMxSCxFQUFFLENBQUNNLFFBQUosRUFBYyxZQUFkLEVBQTRCeXBCLEdBQUcsQ0FBQzMyRCxJQUFoQyxFQUFzQyxJQUF0QyxDQUF0QjtBQUNELEdBZkQsQ0FnQkE7OztBQUNBLFNBQU84NUIsR0FBUDtBQUNEOztBQUVELFNBQVNvOUIsYUFBVCxDQUF3QlAsR0FBeEIsRUFBNkI7QUFDM0IsU0FBT0EsR0FBRyxDQUFDUSxPQUFKLElBQWlCUixHQUFHLENBQUMzMkQsSUFBTCxHQUFhLEdBQWIsR0FBb0J0RixNQUFNLENBQUMwekIsSUFBUCxDQUFZdW9DLEdBQUcsQ0FBQ00sU0FBSixJQUFpQixFQUE3QixFQUFpQ3RoRCxJQUFqQyxDQUFzQyxHQUF0QyxDQUEzQztBQUNEOztBQUVELFNBQVNpaEQsVUFBVCxDQUFxQkQsR0FBckIsRUFBMEJ6akIsSUFBMUIsRUFBZ0NwRCxLQUFoQyxFQUF1Q3BiLFFBQXZDLEVBQWlEMGhDLFNBQWpELEVBQTREO0FBQzFELE1BQUk3N0IsRUFBRSxHQUFHbzhCLEdBQUcsQ0FBQzl0QixHQUFKLElBQVc4dEIsR0FBRyxDQUFDOXRCLEdBQUosQ0FBUXFLLElBQVIsQ0FBcEI7O0FBQ0EsTUFBSTNZLEVBQUosRUFBUTtBQUNOLFFBQUk7QUFDRkEsUUFBRSxDQUFDdVYsS0FBSyxDQUFDdkIsR0FBUCxFQUFZb29CLEdBQVosRUFBaUI3bUIsS0FBakIsRUFBd0JwYixRQUF4QixFQUFrQzBoQyxTQUFsQyxDQUFGO0FBQ0QsS0FGRCxDQUVFLE9BQU81OEIsQ0FBUCxFQUFVO0FBQ1ZnZCxpQkFBVyxDQUFDaGQsQ0FBRCxFQUFJc1csS0FBSyxDQUFDcmIsT0FBVixFQUFvQixlQUFnQmtpQyxHQUFHLENBQUMzMkQsSUFBcEIsR0FBNEIsR0FBNUIsR0FBa0NrekMsSUFBbEMsR0FBeUMsT0FBN0QsQ0FBWDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxJQUFJa2tCLFdBQVcsR0FBRyxDQUNoQm5mLEdBRGdCLEVBRWhCbEUsVUFGZ0IsQ0FBbEI7O0FBS0EsU0FBU3NqQixXQUFULENBQXFCM2lDLFFBQXJCLEVBQStCb2IsS0FBL0IsRUFBc0M7QUFDcEMsTUFBSSxDQUFDcGIsUUFBUSxDQUFDN2EsSUFBVCxDQUFjd2pDLEtBQWYsSUFBd0IsQ0FBQ3ZOLEtBQUssQ0FBQ2oyQixJQUFOLENBQVd3akMsS0FBeEMsRUFBK0M7QUFDN0M7QUFDRDs7QUFDRCxNQUFJdGhDLEdBQUosRUFBUzZvQixHQUFULEVBQWMxVixHQUFkO0FBQ0EsTUFBSXFmLEdBQUcsR0FBR3VCLEtBQUssQ0FBQ3ZCLEdBQWhCO0FBQ0EsTUFBSStvQixRQUFRLEdBQUc1aUMsUUFBUSxDQUFDN2EsSUFBVCxDQUFjd2pDLEtBQWQsSUFBdUIsRUFBdEM7QUFDQSxNQUFJQSxLQUFLLEdBQUd2TixLQUFLLENBQUNqMkIsSUFBTixDQUFXd2pDLEtBQVgsSUFBb0IsRUFBaEMsQ0FQb0MsQ0FRcEM7O0FBQ0EsTUFBSUEsS0FBSyxDQUFDOU0sTUFBVixFQUFrQjtBQUNoQjhNLFNBQUssR0FBR3ZOLEtBQUssQ0FBQ2oyQixJQUFOLENBQVd3akMsS0FBWCxHQUFtQjlWLE1BQU0sQ0FBQyxFQUFELEVBQUs4VixLQUFMLENBQWpDO0FBQ0Q7O0FBRUQsT0FBS3RoQyxHQUFMLElBQVlzaEMsS0FBWixFQUFtQjtBQUNqQnpZLE9BQUcsR0FBR3lZLEtBQUssQ0FBQ3RoQyxHQUFELENBQVg7QUFDQW1ULE9BQUcsR0FBR29vQyxRQUFRLENBQUN2N0MsR0FBRCxDQUFkOztBQUNBLFFBQUltVCxHQUFHLEtBQUswVixHQUFaLEVBQWlCO0FBQ2YySixTQUFHLENBQUNsYixZQUFKLENBQWlCdFgsR0FBakIsRUFBc0I2b0IsR0FBdEI7QUFDRDtBQUNGOztBQUNELE9BQUs3b0IsR0FBTCxJQUFZdTdDLFFBQVosRUFBc0I7QUFDcEIsUUFBSWphLEtBQUssQ0FBQ3RoQyxHQUFELENBQUwsSUFBYyxJQUFsQixFQUF3QjtBQUN0Qnd5QixTQUFHLENBQUNsYixZQUFKLENBQWlCdFgsR0FBakI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsSUFBSXNoQyxLQUFLLEdBQUc7QUFDVm5YLFFBQU0sRUFBRW14QixXQURFO0FBRVZsL0IsUUFBTSxFQUFFay9CO0FBRkUsQ0FBWjtBQUtBO0FBRUE7QUFDQTs7QUFDQSxJQUFJdnJCLGNBQWMsR0FBRzlGLE9BQU8sQ0FBQyxhQUFELENBQTVCLEMsQ0FFQTs7QUFDQSxJQUFJdXhCLFdBQVcsR0FBR3Z4QixPQUFPLENBQUMsdUNBQUQsQ0FBekI7QUFFQSxJQUFJd3hCLGdCQUFnQixHQUFHeHhCLE9BQU8sQ0FBQyxzQ0FBRCxDQUE5QjtBQUVBLElBQUl5eEIsMkJBQTJCLEdBQUd6eEIsT0FBTyxDQUFDLG9DQUFELENBQXpDO0FBRUEsSUFBSTB4QixhQUFhLEdBQUcxeEIsT0FBTyxDQUN6QiwrRUFDQSxxRUFEQSxHQUVBLGtGQUZBLEdBR0EsNEVBSEEsR0FJQSxnRUFKQSxHQUtBLGlDQU55QixDQUEzQjtBQVNBOztBQUVBLFNBQVMyeEIsZ0JBQVQsQ0FBMkI3bkIsS0FBM0IsRUFBa0M7QUFDaEMsTUFBSWoyQixJQUFJLEdBQUdpMkIsS0FBSyxDQUFDajJCLElBQWpCO0FBQ0EsTUFBSW8zQyxVQUFVLEdBQUduaEIsS0FBakI7QUFDQSxNQUFJc2xCLFNBQVMsR0FBR3RsQixLQUFoQjs7QUFDQSxTQUFPN0ssS0FBSyxDQUFDbXdCLFNBQVMsQ0FBQ3RtQixpQkFBWCxDQUFaLEVBQTJDO0FBQ3pDc21CLGFBQVMsR0FBR0EsU0FBUyxDQUFDdG1CLGlCQUFWLENBQTRCK2MsTUFBeEM7O0FBQ0EsUUFBSXVKLFNBQVMsSUFBSUEsU0FBUyxDQUFDdjdDLElBQTNCLEVBQWlDO0FBQy9CQSxVQUFJLEdBQUcrOUMsY0FBYyxDQUFDeEMsU0FBUyxDQUFDdjdDLElBQVgsRUFBaUJBLElBQWpCLENBQXJCO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPb3JCLEtBQUssQ0FBQ2dzQixVQUFVLEdBQUdBLFVBQVUsQ0FBQ2hrQyxNQUF6QixDQUFaLEVBQThDO0FBQzVDLFFBQUlna0MsVUFBVSxJQUFJQSxVQUFVLENBQUNwM0MsSUFBN0IsRUFBbUM7QUFDakNBLFVBQUksR0FBRys5QyxjQUFjLENBQUMvOUMsSUFBRCxFQUFPbzNDLFVBQVUsQ0FBQ3AzQyxJQUFsQixDQUFyQjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT2crQyxXQUFXLENBQUNoK0MsSUFBSSxDQUFDaStDLFdBQU4sRUFBbUJqK0MsSUFBSSxDQUFDMk4sS0FBeEIsQ0FBbEI7QUFDRDs7QUFFRCxTQUFTb3dDLGNBQVQsQ0FBeUJwb0IsS0FBekIsRUFBZ0N2aUIsTUFBaEMsRUFBd0M7QUFDdEMsU0FBTztBQUNMNnFDLGVBQVcsRUFBRXgrQyxNQUFNLENBQUNrMkIsS0FBSyxDQUFDc29CLFdBQVAsRUFBb0I3cUMsTUFBTSxDQUFDNnFDLFdBQTNCLENBRGQ7QUFFTHR3QyxTQUFLLEVBQUV5ZCxLQUFLLENBQUN1SyxLQUFLLENBQUNob0IsS0FBUCxDQUFMLEdBQ0gsQ0FBQ2dvQixLQUFLLENBQUNob0IsS0FBUCxFQUFjeUYsTUFBTSxDQUFDekYsS0FBckIsQ0FERyxHQUVIeUYsTUFBTSxDQUFDekY7QUFKTixHQUFQO0FBTUQ7O0FBRUQsU0FBU3F3QyxXQUFULENBQ0VDLFdBREYsRUFFRUMsWUFGRixFQUdFO0FBQ0EsTUFBSTl5QixLQUFLLENBQUM2eUIsV0FBRCxDQUFMLElBQXNCN3lCLEtBQUssQ0FBQzh5QixZQUFELENBQS9CLEVBQStDO0FBQzdDLFdBQU96K0MsTUFBTSxDQUFDdytDLFdBQUQsRUFBY0UsY0FBYyxDQUFDRCxZQUFELENBQTVCLENBQWI7QUFDRDtBQUNEOzs7QUFDQSxTQUFPLEVBQVA7QUFDRDs7QUFFRCxTQUFTeitDLE1BQVQsQ0FBaUIzYyxDQUFqQixFQUFvQkksQ0FBcEIsRUFBdUI7QUFDckIsU0FBT0osQ0FBQyxHQUFHSSxDQUFDLEdBQUlKLENBQUMsR0FBRyxHQUFKLEdBQVVJLENBQWQsR0FBbUJKLENBQXZCLEdBQTRCSSxDQUFDLElBQUksRUFBekM7QUFDRDs7QUFFRCxTQUFTaTdELGNBQVQsQ0FBeUJuOUQsS0FBekIsRUFBZ0M7QUFDOUIsTUFBSXNoQixLQUFLLENBQUNpZSxPQUFOLENBQWN2L0IsS0FBZCxDQUFKLEVBQTBCO0FBQ3hCLFdBQU9vOUQsY0FBYyxDQUFDcDlELEtBQUQsQ0FBckI7QUFDRDs7QUFDRCxNQUFJd3FDLFVBQVUsQ0FBQ3hxQyxLQUFELENBQWQsRUFBdUI7QUFDckIsV0FBT3E5RCxlQUFlLENBQUNyOUQsS0FBRCxDQUF0QjtBQUNEOztBQUNELE1BQUksT0FBT0EsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QixXQUFPQSxLQUFQO0FBQ0Q7QUFDRDs7O0FBQ0EsU0FBTyxFQUFQO0FBQ0Q7O0FBRUQsU0FBU285RCxjQUFULENBQXlCcDlELEtBQXpCLEVBQWdDO0FBQzlCLE1BQUlpL0IsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFJcStCLFdBQUo7O0FBQ0EsT0FBSyxJQUFJamlELENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUduRSxLQUFLLENBQUNTLE1BQTFCLEVBQWtDNGEsQ0FBQyxHQUFHbFgsQ0FBdEMsRUFBeUNrWCxDQUFDLEVBQTFDLEVBQThDO0FBQzVDLFFBQUkrdUIsS0FBSyxDQUFDa3pCLFdBQVcsR0FBR0gsY0FBYyxDQUFDbjlELEtBQUssQ0FBQ3FiLENBQUQsQ0FBTixDQUE3QixDQUFMLElBQWlEaWlELFdBQVcsS0FBSyxFQUFyRSxFQUF5RTtBQUN2RSxVQUFJcitCLEdBQUosRUFBUztBQUFFQSxXQUFHLElBQUksR0FBUDtBQUFhOztBQUN4QkEsU0FBRyxJQUFJcStCLFdBQVA7QUFDRDtBQUNGOztBQUNELFNBQU9yK0IsR0FBUDtBQUNEOztBQUVELFNBQVNvK0IsZUFBVCxDQUEwQnI5RCxLQUExQixFQUFpQztBQUMvQixNQUFJaS9CLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSS9kLEdBQVQsSUFBZ0JsaEIsS0FBaEIsRUFBdUI7QUFDckIsUUFBSUEsS0FBSyxDQUFDa2hCLEdBQUQsQ0FBVCxFQUFnQjtBQUNkLFVBQUkrZCxHQUFKLEVBQVM7QUFBRUEsV0FBRyxJQUFJLEdBQVA7QUFBYTs7QUFDeEJBLFNBQUcsSUFBSS9kLEdBQVA7QUFDRDtBQUNGOztBQUNELFNBQU8rZCxHQUFQO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBU3MrQixXQUFULENBQXFCMWpDLFFBQXJCLEVBQStCb2IsS0FBL0IsRUFBc0M7QUFDcEMsTUFBSW9DLEVBQUUsR0FBR3BDLEtBQUssQ0FBQ3ZCLEdBQWY7QUFDQSxNQUFJMTBCLElBQUksR0FBR2kyQixLQUFLLENBQUNqMkIsSUFBakI7QUFDQSxNQUFJdytDLE9BQU8sR0FBRzNqQyxRQUFRLENBQUM3YSxJQUF2Qjs7QUFDQSxNQUNFLENBQUNBLElBQUksQ0FBQ2krQyxXQUFOLElBQ0EsQ0FBQ2orQyxJQUFJLENBQUMyTixLQUROLEtBRUMsQ0FBQzZ3QyxPQUFELElBQWEsQ0FBQ0EsT0FBTyxDQUFDUCxXQUFULElBQXdCLENBQUNPLE9BQU8sQ0FBQzd3QyxLQUYvQyxDQURGLEVBSUU7QUFDQTtBQUNEOztBQUVELE1BQUk4d0MsR0FBRyxHQUFHWCxnQkFBZ0IsQ0FBQzduQixLQUFELENBQTFCLENBWm9DLENBY3BDOztBQUNBLE1BQUl5b0IsZUFBZSxHQUFHcm1CLEVBQUUsQ0FBQ3NtQixrQkFBekI7O0FBQ0EsTUFBSUQsZUFBSixFQUFxQjtBQUNuQkQsT0FBRyxHQUFHaC9DLE1BQU0sQ0FBQ2cvQyxHQUFELEVBQU1OLGNBQWMsQ0FBQ08sZUFBRCxDQUFwQixDQUFaO0FBQ0QsR0FsQm1DLENBb0JwQzs7O0FBQ0EsTUFBSUQsR0FBRyxLQUFLcG1CLEVBQUUsQ0FBQ3VtQixVQUFmLEVBQTJCO0FBQ3pCdm1CLE1BQUUsQ0FBQzdlLFlBQUgsQ0FBZ0IsT0FBaEIsRUFBeUJpbEMsR0FBekI7QUFDQXBtQixNQUFFLENBQUN1bUIsVUFBSCxHQUFnQkgsR0FBaEI7QUFDRDtBQUNGOztBQUVELElBQUlJLE1BQU0sR0FBRztBQUNYeHlCLFFBQU0sRUFBRWt5QixXQURHO0FBRVhqZ0MsUUFBTSxFQUFFaWdDO0FBRkcsQ0FBYjtBQUtBLElBQUlPLFFBQUo7O0FBRUEsU0FBU0MsS0FBVCxDQUFlaG1DLEtBQWYsRUFBc0JNLE9BQXRCLEVBQStCdVYsSUFBL0IsRUFBcUNpTyxPQUFyQyxFQUE4QztBQUM1QyxNQUFJQSxPQUFKLEVBQWE7QUFDWHRnQixXQUFPLENBQUNGLEdBQVIsQ0FBWSw0QkFBWjtBQUNBO0FBQ0Q7O0FBQ0QsTUFBSXVTLElBQUosRUFBVTtBQUNSLFFBQUlvd0IsVUFBVSxHQUFHM2xDLE9BQWpCOztBQUNBQSxXQUFPLEdBQUcsbUJBQVk7QUFDcEIsVUFBSTNTLElBQUksR0FBRyxFQUFYO0FBQUEsVUFBZTh2QixHQUFHLEdBQUdoMUMsU0FBUyxDQUFDQyxNQUEvQjs7QUFDQSxhQUFRKzBDLEdBQUcsRUFBWDtBQUFnQjl2QixZQUFJLENBQUU4dkIsR0FBRixDQUFKLEdBQWNoMUMsU0FBUyxDQUFFZzFDLEdBQUYsQ0FBdkI7QUFBaEI7O0FBRUEsVUFBSXZXLEdBQUcsR0FBRysrQixVQUFVLENBQUM5eUMsSUFBWCxDQUFnQnptQixLQUFoQixDQUFzQnU1RCxVQUF0QixFQUFrQyxDQUFFLElBQUYsRUFBU3YvQyxNQUFULENBQWlCaUgsSUFBakIsQ0FBbEMsQ0FBVjs7QUFDQSxVQUFJdVosR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJnL0IsZ0JBQVEsQ0FBQ2xtQyxLQUFELEVBQVEsSUFBUixFQUFjLElBQWQsRUFBb0IrbEMsUUFBcEIsQ0FBUjtBQUNEO0FBQ0YsS0FSRDtBQVNEOztBQUNEQSxVQUFRLENBQUN2dUIsZ0JBQVQsQ0FBMEJ4WCxLQUExQixFQUFpQ00sT0FBakM7QUFDRDs7QUFFRCxTQUFTNGxDLFFBQVQsQ0FBa0JsbUMsS0FBbEIsRUFBeUJNLE9BQXpCLEVBQWtDd2pCLE9BQWxDLEVBQTJDbVgsT0FBM0MsRUFBb0Q7QUFDbEQsTUFBS0EsT0FBTyxLQUFLLEtBQUssQ0FBdEIsRUFBMEJBLE9BQU8sR0FBRzhLLFFBQVY7O0FBRTFCOUssU0FBTyxDQUFDa0wsbUJBQVIsQ0FBNEJubUMsS0FBNUI7QUFDRDs7QUFFRCxTQUFTb21DLGtCQUFULENBQTRCdGtDLFFBQTVCLEVBQXNDb2IsS0FBdEMsRUFBNkM7QUFDM0MsTUFBSSxDQUFDcGIsUUFBUSxDQUFDN2EsSUFBVCxDQUFjOGlDLEVBQWYsSUFBcUIsQ0FBQzdNLEtBQUssQ0FBQ2oyQixJQUFOLENBQVc4aUMsRUFBckMsRUFBeUM7QUFDdkM7QUFDRDs7QUFDRCxNQUFJQSxFQUFFLEdBQUc3TSxLQUFLLENBQUNqMkIsSUFBTixDQUFXOGlDLEVBQVgsSUFBaUIsRUFBMUI7QUFDQSxNQUFJQyxLQUFLLEdBQUdsb0IsUUFBUSxDQUFDN2EsSUFBVCxDQUFjOGlDLEVBQWQsSUFBb0IsRUFBaEM7QUFDQWdjLFVBQVEsR0FBRzdvQixLQUFLLENBQUN2QixHQUFqQjtBQUNBbU8saUJBQWUsQ0FBQ0MsRUFBRCxFQUFLQyxLQUFMLEVBQVlnYyxLQUFaLEVBQW1CRSxRQUFuQixFQUE2QmhwQixLQUFLLENBQUNyYixPQUFuQyxDQUFmO0FBQ0Q7O0FBRUQsSUFBSXdrQyxNQUFNLEdBQUc7QUFDWC95QixRQUFNLEVBQUU4eUIsa0JBREc7QUFFWDdnQyxRQUFNLEVBQUU2Z0M7QUFGRyxDQUFiO0FBS0EsSUFBSUUsU0FBUyxHQUFHMXlCLE1BQU0sQ0FBQ0ssUUFBRCxDQUF0Qjs7QUFFQSxTQUFTc3lCLFdBQVQsQ0FBcUJ6a0MsUUFBckIsRUFBK0JvYixLQUEvQixFQUFzQztBQUNwQztBQUNBLE1BQUksQ0FBQ0EsS0FBSyxDQUFDajJCLElBQU4sQ0FBV3UvQyxXQUFoQixFQUE2QjtBQUMzQkMsZUFBVyxDQUFDM2tDLFFBQUQsRUFBV29iLEtBQVgsQ0FBWDtBQUNBO0FBQ0Q7O0FBQ0QsTUFBSXZCLEdBQUcsR0FBR3VCLEtBQUssQ0FBQ3ZCLEdBQWhCO0FBQ0EsTUFBSTZxQixXQUFXLEdBQUd0cEIsS0FBSyxDQUFDajJCLElBQU4sQ0FBV3UvQyxXQUE3Qjs7QUFDQSxPQUFLLElBQUlwNUQsSUFBVCxJQUFpQm81RCxXQUFqQixFQUE4QjtBQUM1QixRQUFJQSxXQUFXLENBQUNwNUQsSUFBRCxDQUFmLEVBQXVCO0FBQ3JCdXVDLFNBQUcsQ0FBQytxQixRQUFKLENBQWFKLFNBQVMsQ0FBQ2w1RCxJQUFELENBQXRCLEVBQThCbzVELFdBQVcsQ0FBQ3A1RCxJQUFELENBQXpDO0FBQ0Q7QUFDRjs7QUFDRHE1RCxhQUFXLENBQUMza0MsUUFBRCxFQUFXb2IsS0FBWCxDQUFYO0FBQ0Q7O0FBRUQsU0FBU3VwQixXQUFULENBQXFCM2tDLFFBQXJCLEVBQStCb2IsS0FBL0IsRUFBc0M7QUFDcEMsTUFBSSxDQUFDcGIsUUFBUSxDQUFDN2EsSUFBVCxDQUFjdUcsS0FBZixJQUF3QixDQUFDMHZCLEtBQUssQ0FBQ2oyQixJQUFOLENBQVd1RyxLQUF4QyxFQUErQztBQUM3QztBQUNEOztBQUNELE1BQUl3a0IsR0FBSixFQUFTNWtDLElBQVQ7QUFDQSxNQUFJdXVDLEdBQUcsR0FBR3VCLEtBQUssQ0FBQ3ZCLEdBQWhCO0FBQ0EsTUFBSWdyQixRQUFRLEdBQUc3a0MsUUFBUSxDQUFDN2EsSUFBVCxDQUFjdUcsS0FBZCxJQUF1QixFQUF0QztBQUNBLE1BQUlBLEtBQUssR0FBRzB2QixLQUFLLENBQUNqMkIsSUFBTixDQUFXdUcsS0FBWCxJQUFvQixFQUFoQztBQUVBLE1BQUlvNUMsU0FBUyxHQUFHcDVDLEtBQUssQ0FBQ213QixNQUF0QixDQVRvQyxDQVdwQzs7QUFDQSxNQUFJcDBCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY2hhLEtBQWQsQ0FBSixFQUEwQjtBQUN4QkEsU0FBSyxHQUFHMHZCLEtBQUssQ0FBQ2oyQixJQUFOLENBQVd1RyxLQUFYLEdBQW1CcTVDLFVBQVUsQ0FBQ3I1QyxLQUFELENBQXJDO0FBQ0QsR0FkbUMsQ0FnQnBDO0FBQ0E7OztBQUNBLE1BQUlvNUMsU0FBSixFQUFlO0FBQ2JwNUMsU0FBSyxHQUFHMHZCLEtBQUssQ0FBQ2oyQixJQUFOLENBQVd1RyxLQUFYLEdBQW1CbW5CLE1BQU0sQ0FBQyxFQUFELEVBQUtubkIsS0FBTCxDQUFqQztBQUNEOztBQUVELE9BQUtwZ0IsSUFBTCxJQUFhdTVELFFBQWIsRUFBdUI7QUFDckIsUUFBSSxDQUFDbjVDLEtBQUssQ0FBQ3BnQixJQUFELENBQVYsRUFBa0I7QUFDaEJ1dUMsU0FBRyxDQUFDK3FCLFFBQUosQ0FBYUosU0FBUyxDQUFDbDVELElBQUQsQ0FBdEIsRUFBOEIsRUFBOUI7QUFDRDtBQUNGOztBQUNELE9BQUtBLElBQUwsSUFBYW9nQixLQUFiLEVBQW9CO0FBQ2xCd2tCLE9BQUcsR0FBR3hrQixLQUFLLENBQUNwZ0IsSUFBRCxDQUFYO0FBQ0F1dUMsT0FBRyxDQUFDK3FCLFFBQUosQ0FBYUosU0FBUyxDQUFDbDVELElBQUQsQ0FBdEIsRUFBOEI0a0MsR0FBOUI7QUFDRDtBQUNGOztBQUVELFNBQVM2MEIsVUFBVCxDQUFvQnYvQixHQUFwQixFQUF5QjtBQUN2QixNQUFJSixHQUFHLEdBQUcsRUFBVjs7QUFDQSxPQUFLLElBQUk1akIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2drQixHQUFHLENBQUM1K0IsTUFBeEIsRUFBZ0M0YSxDQUFDLEVBQWpDLEVBQXFDO0FBQ25DLFFBQUlna0IsR0FBRyxDQUFDaGtCLENBQUQsQ0FBUCxFQUFZO0FBQ1ZxeEIsWUFBTSxDQUFDek4sR0FBRCxFQUFNSSxHQUFHLENBQUNoa0IsQ0FBRCxDQUFULENBQU47QUFDRDtBQUNGOztBQUNELFNBQU80akIsR0FBUDtBQUNEOztBQUVELElBQUkxWixLQUFLLEdBQUc7QUFDVjhsQixRQUFNLEVBQUVpekIsV0FERTtBQUVWaGhDLFFBQU0sRUFBRWtoQztBQUZFLENBQVo7QUFLQTs7QUFFQSxJQUFJSyxZQUFZLEdBQUcsS0FBbkI7QUFFQTs7Ozs7QUFJQSxTQUFTQyxRQUFULENBQW1Cem5CLEVBQW5CLEVBQXVCb21CLEdBQXZCLEVBQTRCO0FBQzFCO0FBQ0EsTUFBSSxDQUFDQSxHQUFELElBQVEsRUFBRUEsR0FBRyxHQUFHQSxHQUFHLENBQUNoNkQsSUFBSixFQUFSLENBQVosRUFBaUM7QUFDL0I7QUFDRDtBQUVEOzs7QUFDQSxNQUFJNHpDLEVBQUUsQ0FBQzBuQixTQUFQLEVBQWtCO0FBQ2hCLFFBQUl0QixHQUFHLENBQUNwNkQsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBQyxDQUF4QixFQUEyQjtBQUN6Qm82RCxTQUFHLENBQUMvNUQsS0FBSixDQUFVbTdELFlBQVYsRUFBd0J0akQsT0FBeEIsQ0FBZ0MsVUFBVTB3QixDQUFWLEVBQWE7QUFBRSxlQUFPb0wsRUFBRSxDQUFDMG5CLFNBQUgsQ0FBYTkwQixHQUFiLENBQWlCZ0MsQ0FBakIsQ0FBUDtBQUE2QixPQUE1RTtBQUNELEtBRkQsTUFFTztBQUNMb0wsUUFBRSxDQUFDMG5CLFNBQUgsQ0FBYTkwQixHQUFiLENBQWlCd3pCLEdBQWpCO0FBQ0Q7QUFDRixHQU5ELE1BTU87QUFDTCxRQUFJMXpCLEdBQUcsR0FBRyxPQUFPc04sRUFBRSxDQUFDbGQsWUFBSCxDQUFnQixPQUFoQixLQUE0QixFQUFuQyxJQUF5QyxHQUFuRDs7QUFDQSxRQUFJNFAsR0FBRyxDQUFDMW1DLE9BQUosQ0FBWSxNQUFNbzZELEdBQU4sR0FBWSxHQUF4QixJQUErQixDQUFuQyxFQUFzQztBQUNwQ3BtQixRQUFFLENBQUM3ZSxZQUFILENBQWdCLE9BQWhCLEVBQXlCLENBQUN1UixHQUFHLEdBQUcwekIsR0FBUCxFQUFZaDZELElBQVosRUFBekI7QUFDRDtBQUNGO0FBQ0Y7QUFFRDs7Ozs7O0FBSUEsU0FBU3U3RCxXQUFULENBQXNCM25CLEVBQXRCLEVBQTBCb21CLEdBQTFCLEVBQStCO0FBQzdCO0FBQ0EsTUFBSSxDQUFDQSxHQUFELElBQVEsRUFBRUEsR0FBRyxHQUFHQSxHQUFHLENBQUNoNkQsSUFBSixFQUFSLENBQVosRUFBaUM7QUFDL0I7QUFDRDtBQUVEOzs7QUFDQSxNQUFJNHpDLEVBQUUsQ0FBQzBuQixTQUFQLEVBQWtCO0FBQ2hCLFFBQUl0QixHQUFHLENBQUNwNkQsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBQyxDQUF4QixFQUEyQjtBQUN6Qm82RCxTQUFHLENBQUMvNUQsS0FBSixDQUFVbTdELFlBQVYsRUFBd0J0akQsT0FBeEIsQ0FBZ0MsVUFBVTB3QixDQUFWLEVBQWE7QUFBRSxlQUFPb0wsRUFBRSxDQUFDMG5CLFNBQUgsQ0FBYXZ6QixNQUFiLENBQW9CUyxDQUFwQixDQUFQO0FBQWdDLE9BQS9FO0FBQ0QsS0FGRCxNQUVPO0FBQ0xvTCxRQUFFLENBQUMwbkIsU0FBSCxDQUFhdnpCLE1BQWIsQ0FBb0JpeUIsR0FBcEI7QUFDRDs7QUFDRCxRQUFJLENBQUNwbUIsRUFBRSxDQUFDMG5CLFNBQUgsQ0FBYXQrRCxNQUFsQixFQUEwQjtBQUN4QjQyQyxRQUFFLENBQUMwakIsZUFBSCxDQUFtQixPQUFuQjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0wsUUFBSWh4QixHQUFHLEdBQUcsT0FBT3NOLEVBQUUsQ0FBQ2xkLFlBQUgsQ0FBZ0IsT0FBaEIsS0FBNEIsRUFBbkMsSUFBeUMsR0FBbkQ7QUFDQSxRQUFJOGtDLEdBQUcsR0FBRyxNQUFNeEIsR0FBTixHQUFZLEdBQXRCOztBQUNBLFdBQU8xekIsR0FBRyxDQUFDMW1DLE9BQUosQ0FBWTQ3RCxHQUFaLEtBQW9CLENBQTNCLEVBQThCO0FBQzVCbDFCLFNBQUcsR0FBR0EsR0FBRyxDQUFDdm1DLE9BQUosQ0FBWXk3RCxHQUFaLEVBQWlCLEdBQWpCLENBQU47QUFDRDs7QUFDRGwxQixPQUFHLEdBQUdBLEdBQUcsQ0FBQ3RtQyxJQUFKLEVBQU47O0FBQ0EsUUFBSXNtQyxHQUFKLEVBQVM7QUFDUHNOLFFBQUUsQ0FBQzdlLFlBQUgsQ0FBZ0IsT0FBaEIsRUFBeUJ1UixHQUF6QjtBQUNELEtBRkQsTUFFTztBQUNMc04sUUFBRSxDQUFDMGpCLGVBQUgsQ0FBbUIsT0FBbkI7QUFDRDtBQUNGO0FBQ0Y7QUFFRDs7O0FBRUEsU0FBU21FLGlCQUFULENBQTRCbHhCLEdBQTVCLEVBQWlDO0FBQy9CLE1BQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ1I7QUFDRDtBQUNEOzs7QUFDQSxNQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQixRQUFJL08sR0FBRyxHQUFHLEVBQVY7O0FBQ0EsUUFBSStPLEdBQUcsQ0FBQ214QixHQUFKLEtBQVksS0FBaEIsRUFBdUI7QUFDckJ6eUIsWUFBTSxDQUFDek4sR0FBRCxFQUFNbWdDLGlCQUFpQixDQUFDcHhCLEdBQUcsQ0FBQzdvQyxJQUFKLElBQVksR0FBYixDQUF2QixDQUFOO0FBQ0Q7O0FBQ0R1bkMsVUFBTSxDQUFDek4sR0FBRCxFQUFNK08sR0FBTixDQUFOO0FBQ0EsV0FBTy9PLEdBQVA7QUFDRCxHQVBELE1BT08sSUFBSSxPQUFPK08sR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ2xDLFdBQU9veEIsaUJBQWlCLENBQUNweEIsR0FBRCxDQUF4QjtBQUNEO0FBQ0Y7O0FBRUQsSUFBSW94QixpQkFBaUIsR0FBR3p6QixNQUFNLENBQUMsVUFBVXhtQyxJQUFWLEVBQWdCO0FBQzdDLFNBQU87QUFDTGs2RCxjQUFVLEVBQUdsNkQsSUFBSSxHQUFHLFFBRGY7QUFFTG02RCxnQkFBWSxFQUFHbjZELElBQUksR0FBRyxXQUZqQjtBQUdMbzZELG9CQUFnQixFQUFHcDZELElBQUksR0FBRyxlQUhyQjtBQUlMcTZELGNBQVUsRUFBR3I2RCxJQUFJLEdBQUcsUUFKZjtBQUtMczZELGdCQUFZLEVBQUd0NkQsSUFBSSxHQUFHLFdBTGpCO0FBTUx1NkQsb0JBQWdCLEVBQUd2NkQsSUFBSSxHQUFHO0FBTnJCLEdBQVA7QUFRRCxDQVQ2QixDQUE5QjtBQVdBLElBQUl3NkQsYUFBYSxHQUFHcHhCLFNBQVMsSUFBSSxDQUFDUyxLQUFsQzs7QUFDQSxJQUFJMndCLGFBQUosRUFBbUI7QUFDakI7QUFDQSxNQUFJL2dDLE1BQU0sQ0FBQ2doQyxlQUFQLEtBQTJCeDlELFNBQTNCLElBQ0Z3OEIsTUFBTSxDQUFDaWhDLHFCQUFQLEtBQWlDejlELFNBRG5DLEVBRUU7QUFDRixNQUFJdzhCLE1BQU0sQ0FBQ2toQyxjQUFQLEtBQTBCMTlELFNBQTFCLElBQ0Z3OEIsTUFBTSxDQUFDbWhDLG9CQUFQLEtBQWdDMzlELFNBRGxDLEVBRUU7QUFDSCxDLENBRUQ7OztBQUNBLElBQUk0OUQsR0FBRyxHQUFHenhCLFNBQVMsR0FDZjNQLE1BQU0sQ0FBQ3FoQyxxQkFBUCxHQUNFcmhDLE1BQU0sQ0FBQ3FoQyxxQkFBUCxDQUE2QjU5QyxJQUE3QixDQUFrQ3VjLE1BQWxDLENBREYsR0FFRTRkLFVBSGE7QUFJZjtBQUEyQixVQUFVOWMsRUFBVixFQUFjO0FBQUUsU0FBT0EsRUFBRSxFQUFUO0FBQWMsQ0FKN0Q7O0FBTUEsU0FBU3dnQyxTQUFULENBQW9CeGdDLEVBQXBCLEVBQXdCO0FBQ3RCc2dDLEtBQUcsQ0FBQyxZQUFZO0FBQ2RBLE9BQUcsQ0FBQ3RnQyxFQUFELENBQUg7QUFDRCxHQUZFLENBQUg7QUFHRDs7QUFFRCxTQUFTeWdDLGtCQUFULENBQTZCOW9CLEVBQTdCLEVBQWlDb21CLEdBQWpDLEVBQXNDO0FBQ3BDLE1BQUkyQyxpQkFBaUIsR0FBRy9vQixFQUFFLENBQUNzbUIsa0JBQUgsS0FBMEJ0bUIsRUFBRSxDQUFDc21CLGtCQUFILEdBQXdCLEVBQWxELENBQXhCOztBQUNBLE1BQUl5QyxpQkFBaUIsQ0FBQy84RCxPQUFsQixDQUEwQm82RCxHQUExQixJQUFpQyxDQUFyQyxFQUF3QztBQUN0QzJDLHFCQUFpQixDQUFDdHNELElBQWxCLENBQXVCMnBELEdBQXZCO0FBQ0FxQixZQUFRLENBQUN6bkIsRUFBRCxFQUFLb21CLEdBQUwsQ0FBUjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzRDLHFCQUFULENBQWdDaHBCLEVBQWhDLEVBQW9Db21CLEdBQXBDLEVBQXlDO0FBQ3ZDLE1BQUlwbUIsRUFBRSxDQUFDc21CLGtCQUFQLEVBQTJCO0FBQ3pCbnlCLFVBQU0sQ0FBQzZMLEVBQUUsQ0FBQ3NtQixrQkFBSixFQUF3QkYsR0FBeEIsQ0FBTjtBQUNEOztBQUNEdUIsYUFBVyxDQUFDM25CLEVBQUQsRUFBS29tQixHQUFMLENBQVg7QUFDRDs7QUFFRCxTQUFTNkMsS0FBVCxDQUFlcnJCLEtBQWYsRUFBc0JzckIsYUFBdEIsRUFBcUM7QUFDbkMsTUFBSWxwQixFQUFFLEdBQUdwQyxLQUFLLENBQUN2QixHQUFmLENBRG1DLENBR25DOztBQUNBLE1BQUl0SixLQUFLLENBQUNpTixFQUFFLENBQUM0akIsUUFBSixDQUFULEVBQXdCO0FBQ3RCNWpCLE1BQUUsQ0FBQzRqQixRQUFILENBQVl1RixTQUFaLEdBQXdCLElBQXhCOztBQUNBbnBCLE1BQUUsQ0FBQzRqQixRQUFIO0FBQ0Q7O0FBRUQsTUFBSWo4QyxJQUFJLEdBQUdrZ0QsaUJBQWlCLENBQUNqcUIsS0FBSyxDQUFDajJCLElBQU4sQ0FBVzA0QyxVQUFaLENBQTVCOztBQUVBLE1BQUl2dEIsT0FBTyxDQUFDbnJCLElBQUQsQ0FBWCxFQUFtQjtBQUNqQjtBQUNEO0FBRUQ7OztBQUNBLE1BQUlvckIsS0FBSyxDQUFDaU4sRUFBRSxDQUFDb3BCLFFBQUosQ0FBTCxJQUFzQnBwQixFQUFFLENBQUMxUSxRQUFILEtBQWdCLENBQTFDLEVBQTZDO0FBQzNDO0FBQ0Q7O0FBRUQsTUFBSXc0QixHQUFHLEdBQUduZ0QsSUFBSSxDQUFDbWdELEdBQWY7QUFDQSxNQUFJNXBELElBQUksR0FBR3lKLElBQUksQ0FBQ3pKLElBQWhCO0FBQ0EsTUFBSThwRCxVQUFVLEdBQUdyZ0QsSUFBSSxDQUFDcWdELFVBQXRCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHdGdELElBQUksQ0FBQ3NnRCxZQUF4QjtBQUNBLE1BQUlDLGdCQUFnQixHQUFHdmdELElBQUksQ0FBQ3VnRCxnQkFBNUI7QUFDQSxNQUFJbUIsV0FBVyxHQUFHMWhELElBQUksQ0FBQzBoRCxXQUF2QjtBQUNBLE1BQUlDLGFBQWEsR0FBRzNoRCxJQUFJLENBQUMyaEQsYUFBekI7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRzVoRCxJQUFJLENBQUM0aEQsaUJBQTdCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHN2hELElBQUksQ0FBQzZoRCxXQUF2QjtBQUNBLE1BQUlQLEtBQUssR0FBR3RoRCxJQUFJLENBQUNzaEQsS0FBakI7QUFDQSxNQUFJUSxVQUFVLEdBQUc5aEQsSUFBSSxDQUFDOGhELFVBQXRCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHL2hELElBQUksQ0FBQytoRCxjQUExQjtBQUNBLE1BQUlDLFlBQVksR0FBR2hpRCxJQUFJLENBQUNnaUQsWUFBeEI7QUFDQSxNQUFJQyxNQUFNLEdBQUdqaUQsSUFBSSxDQUFDaWlELE1BQWxCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHbGlELElBQUksQ0FBQ2tpRCxXQUF2QjtBQUNBLE1BQUlDLGVBQWUsR0FBR25pRCxJQUFJLENBQUNtaUQsZUFBM0I7QUFDQSxNQUFJQyxRQUFRLEdBQUdwaUQsSUFBSSxDQUFDb2lELFFBQXBCLENBcENtQyxDQXNDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSXhuQyxPQUFPLEdBQUdvMUIsY0FBZDtBQUNBLE1BQUlxUyxjQUFjLEdBQUdyUyxjQUFjLENBQUMyQixNQUFwQzs7QUFDQSxTQUFPMFEsY0FBYyxJQUFJQSxjQUFjLENBQUNqdkMsTUFBeEMsRUFBZ0Q7QUFDOUNpdkMsa0JBQWMsR0FBR0EsY0FBYyxDQUFDanZDLE1BQWhDO0FBQ0F3SCxXQUFPLEdBQUd5bkMsY0FBYyxDQUFDem5DLE9BQXpCO0FBQ0Q7O0FBRUQsTUFBSTBuQyxRQUFRLEdBQUcsQ0FBQzFuQyxPQUFPLENBQUM0bEIsVUFBVCxJQUF1QixDQUFDdkssS0FBSyxDQUFDYixZQUE3Qzs7QUFFQSxNQUFJa3RCLFFBQVEsSUFBSSxDQUFDTCxNQUFiLElBQXVCQSxNQUFNLEtBQUssRUFBdEMsRUFBMEM7QUFDeEM7QUFDRDs7QUFFRCxNQUFJTSxVQUFVLEdBQUdELFFBQVEsSUFBSVosV0FBWixHQUEwQkEsV0FBMUIsR0FBd0NyQixVQUF6RDtBQUNBLE1BQUltQyxXQUFXLEdBQ2JGLFFBQVEsSUFBSVYsaUJBQVosR0FBZ0NBLGlCQUFoQyxHQUFvRHJCLGdCQUR0RDtBQUVBLE1BQUlrQyxPQUFPLEdBQUdILFFBQVEsSUFBSVgsYUFBWixHQUE0QkEsYUFBNUIsR0FBNENyQixZQUExRDtBQUVBLE1BQUlvQyxlQUFlLEdBQUdKLFFBQVEsR0FBR04sWUFBWSxJQUFJSCxXQUFuQixHQUFpQ0EsV0FBL0Q7QUFDQSxNQUFJYyxTQUFTLEdBQUdMLFFBQVEsR0FDcEIsT0FBT0wsTUFBUCxLQUFrQixVQUFsQixHQUNFQSxNQURGLEdBRUVYLEtBSGtCLEdBSXBCQSxLQUpKO0FBS0EsTUFBSXNCLGNBQWMsR0FBR04sUUFBUSxHQUFHSixXQUFXLElBQUlKLFVBQWxCLEdBQStCQSxVQUE1RDtBQUNBLE1BQUllLGtCQUFrQixHQUFHUCxRQUFRLEdBQzdCSCxlQUFlLElBQUlKLGNBRFUsR0FFN0JBLGNBRko7QUFJQSxNQUFJZSxxQkFBcUIsR0FBRzcyQixRQUFRLENBQ2xDVCxVQUFVLENBQUM0MkIsUUFBRCxDQUFWLEdBQXVCQSxRQUFRLENBQUNkLEtBQWhDLEdBQXdDYyxRQUROLENBQXBDOztBQUlBLE1BQUl2aUMsS0FBQSxJQUF5Q2lqQyxxQkFBcUIsSUFBSSxJQUF0RSxFQUE0RTtBQUMxRUMsaUJBQWEsQ0FBQ0QscUJBQUQsRUFBd0IsT0FBeEIsRUFBaUM3c0IsS0FBakMsQ0FBYjtBQUNEOztBQUVELE1BQUkrc0IsVUFBVSxHQUFHN0MsR0FBRyxLQUFLLEtBQXpCO0FBQ0EsTUFBSThDLGdCQUFnQixHQUFHQyxzQkFBc0IsQ0FBQ1AsU0FBRCxDQUE3QztBQUVBLE1BQUl6a0IsRUFBRSxHQUFJN0YsRUFBRSxDQUFDb3BCLFFBQUgsR0FBYzd5QixJQUFJLENBQUMsWUFBWTtBQUN2QyxRQUFJbzBCLFVBQUosRUFBZ0I7QUFDZDNCLDJCQUFxQixDQUFDaHBCLEVBQUQsRUFBS29xQixPQUFMLENBQXJCO0FBQ0FwQiwyQkFBcUIsQ0FBQ2hwQixFQUFELEVBQUttcUIsV0FBTCxDQUFyQjtBQUNEOztBQUNELFFBQUl0a0IsRUFBRSxDQUFDc2pCLFNBQVAsRUFBa0I7QUFDaEIsVUFBSXdCLFVBQUosRUFBZ0I7QUFDZDNCLDZCQUFxQixDQUFDaHBCLEVBQUQsRUFBS2txQixVQUFMLENBQXJCO0FBQ0Q7O0FBQ0RNLHdCQUFrQixJQUFJQSxrQkFBa0IsQ0FBQ3hxQixFQUFELENBQXhDO0FBQ0QsS0FMRCxNQUtPO0FBQ0x1cUIsb0JBQWMsSUFBSUEsY0FBYyxDQUFDdnFCLEVBQUQsQ0FBaEM7QUFDRDs7QUFDREEsTUFBRSxDQUFDb3BCLFFBQUgsR0FBYyxJQUFkO0FBQ0QsR0FkMkIsQ0FBNUI7O0FBZ0JBLE1BQUksQ0FBQ3hyQixLQUFLLENBQUNqMkIsSUFBTixDQUFXbWpELElBQWhCLEVBQXNCO0FBQ3BCO0FBQ0FqZ0Isa0JBQWMsQ0FBQ2pOLEtBQUQsRUFBUSxRQUFSLEVBQWtCLFlBQVk7QUFDMUMsVUFBSTdpQixNQUFNLEdBQUdpbEIsRUFBRSxDQUFDK2UsVUFBaEI7QUFDQSxVQUFJZ00sV0FBVyxHQUNiaHdDLE1BQU0sSUFBSUEsTUFBTSxDQUFDaXdDLFFBQWpCLElBQTZCandDLE1BQU0sQ0FBQ2l3QyxRQUFQLENBQWdCcHRCLEtBQUssQ0FBQy96QixHQUF0QixDQUQvQjs7QUFFQSxVQUNFa2hELFdBQVcsSUFDWEEsV0FBVyxDQUFDNXVCLEdBQVosS0FBb0J5QixLQUFLLENBQUN6QixHQUQxQixJQUVBNHVCLFdBQVcsQ0FBQzF1QixHQUFaLENBQWdCdW5CLFFBSGxCLEVBSUU7QUFDQW1ILG1CQUFXLENBQUMxdUIsR0FBWixDQUFnQnVuQixRQUFoQjtBQUNEOztBQUNEMEcsZUFBUyxJQUFJQSxTQUFTLENBQUN0cUIsRUFBRCxFQUFLNkYsRUFBTCxDQUF0QjtBQUNELEtBWmEsQ0FBZDtBQWFELEdBakhrQyxDQW1IbkM7OztBQUNBd2tCLGlCQUFlLElBQUlBLGVBQWUsQ0FBQ3JxQixFQUFELENBQWxDOztBQUNBLE1BQUkycUIsVUFBSixFQUFnQjtBQUNkN0Isc0JBQWtCLENBQUM5b0IsRUFBRCxFQUFLa3FCLFVBQUwsQ0FBbEI7QUFDQXBCLHNCQUFrQixDQUFDOW9CLEVBQUQsRUFBS21xQixXQUFMLENBQWxCO0FBQ0F0QixhQUFTLENBQUMsWUFBWTtBQUNwQkcsMkJBQXFCLENBQUNocEIsRUFBRCxFQUFLa3FCLFVBQUwsQ0FBckI7O0FBQ0EsVUFBSSxDQUFDcmtCLEVBQUUsQ0FBQ3NqQixTQUFSLEVBQW1CO0FBQ2pCTCwwQkFBa0IsQ0FBQzlvQixFQUFELEVBQUtvcUIsT0FBTCxDQUFsQjs7QUFDQSxZQUFJLENBQUNRLGdCQUFMLEVBQXVCO0FBQ3JCLGNBQUlLLGVBQWUsQ0FBQ1IscUJBQUQsQ0FBbkIsRUFBNEM7QUFDMUN0bEIsc0JBQVUsQ0FBQ1UsRUFBRCxFQUFLNGtCLHFCQUFMLENBQVY7QUFDRDtBQUNGO0FBQ0Y7QUFDRixLQVZRLENBQVQ7QUFXRDs7QUFFRCxNQUFJN3NCLEtBQUssQ0FBQ2oyQixJQUFOLENBQVdtakQsSUFBZixFQUFxQjtBQUNuQjVCLGlCQUFhLElBQUlBLGFBQWEsRUFBOUI7QUFDQW9CLGFBQVMsSUFBSUEsU0FBUyxDQUFDdHFCLEVBQUQsRUFBSzZGLEVBQUwsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJLENBQUM4a0IsVUFBRCxJQUFlLENBQUNDLGdCQUFwQixFQUFzQztBQUNwQy9rQixNQUFFO0FBQ0g7QUFDRjs7QUFFRCxTQUFTcWxCLEtBQVQsQ0FBZXR0QixLQUFmLEVBQXNCc2pCLEVBQXRCLEVBQTBCO0FBQ3hCLE1BQUlsaEIsRUFBRSxHQUFHcEMsS0FBSyxDQUFDdkIsR0FBZixDQUR3QixDQUd4Qjs7QUFDQSxNQUFJdEosS0FBSyxDQUFDaU4sRUFBRSxDQUFDb3BCLFFBQUosQ0FBVCxFQUF3QjtBQUN0QnBwQixNQUFFLENBQUNvcEIsUUFBSCxDQUFZRCxTQUFaLEdBQXdCLElBQXhCOztBQUNBbnBCLE1BQUUsQ0FBQ29wQixRQUFIO0FBQ0Q7O0FBRUQsTUFBSXpoRCxJQUFJLEdBQUdrZ0QsaUJBQWlCLENBQUNqcUIsS0FBSyxDQUFDajJCLElBQU4sQ0FBVzA0QyxVQUFaLENBQTVCOztBQUNBLE1BQUl2dEIsT0FBTyxDQUFDbnJCLElBQUQsQ0FBUCxJQUFpQnE0QixFQUFFLENBQUMxUSxRQUFILEtBQWdCLENBQXJDLEVBQXdDO0FBQ3RDLFdBQU80eEIsRUFBRSxFQUFUO0FBQ0Q7QUFFRDs7O0FBQ0EsTUFBSW51QixLQUFLLENBQUNpTixFQUFFLENBQUM0akIsUUFBSixDQUFULEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBRUQsTUFBSWtFLEdBQUcsR0FBR25nRCxJQUFJLENBQUNtZ0QsR0FBZjtBQUNBLE1BQUk1cEQsSUFBSSxHQUFHeUosSUFBSSxDQUFDekosSUFBaEI7QUFDQSxNQUFJaXFELFVBQVUsR0FBR3hnRCxJQUFJLENBQUN3Z0QsVUFBdEI7QUFDQSxNQUFJQyxZQUFZLEdBQUd6Z0QsSUFBSSxDQUFDeWdELFlBQXhCO0FBQ0EsTUFBSUMsZ0JBQWdCLEdBQUcxZ0QsSUFBSSxDQUFDMGdELGdCQUE1QjtBQUNBLE1BQUk4QyxXQUFXLEdBQUd4akQsSUFBSSxDQUFDd2pELFdBQXZCO0FBQ0EsTUFBSUQsS0FBSyxHQUFHdmpELElBQUksQ0FBQ3VqRCxLQUFqQjtBQUNBLE1BQUlFLFVBQVUsR0FBR3pqRCxJQUFJLENBQUN5akQsVUFBdEI7QUFDQSxNQUFJQyxjQUFjLEdBQUcxakQsSUFBSSxDQUFDMGpELGNBQTFCO0FBQ0EsTUFBSUMsVUFBVSxHQUFHM2pELElBQUksQ0FBQzJqRCxVQUF0QjtBQUNBLE1BQUl2QixRQUFRLEdBQUdwaUQsSUFBSSxDQUFDb2lELFFBQXBCO0FBRUEsTUFBSVksVUFBVSxHQUFHN0MsR0FBRyxLQUFLLEtBQXpCO0FBQ0EsTUFBSThDLGdCQUFnQixHQUFHQyxzQkFBc0IsQ0FBQ0ssS0FBRCxDQUE3QztBQUVBLE1BQUlLLHFCQUFxQixHQUFHMzNCLFFBQVEsQ0FDbENULFVBQVUsQ0FBQzQyQixRQUFELENBQVYsR0FBdUJBLFFBQVEsQ0FBQ21CLEtBQWhDLEdBQXdDbkIsUUFETixDQUFwQzs7QUFJQSxNQUFJdmlDLEtBQUEsSUFBeUN1TCxLQUFLLENBQUN3NEIscUJBQUQsQ0FBbEQsRUFBMkU7QUFDekViLGlCQUFhLENBQUNhLHFCQUFELEVBQXdCLE9BQXhCLEVBQWlDM3RCLEtBQWpDLENBQWI7QUFDRDs7QUFFRCxNQUFJaUksRUFBRSxHQUFJN0YsRUFBRSxDQUFDNGpCLFFBQUgsR0FBY3J0QixJQUFJLENBQUMsWUFBWTtBQUN2QyxRQUFJeUosRUFBRSxDQUFDK2UsVUFBSCxJQUFpQi9lLEVBQUUsQ0FBQytlLFVBQUgsQ0FBY2lNLFFBQW5DLEVBQTZDO0FBQzNDaHJCLFFBQUUsQ0FBQytlLFVBQUgsQ0FBY2lNLFFBQWQsQ0FBdUJwdEIsS0FBSyxDQUFDL3pCLEdBQTdCLElBQW9DLElBQXBDO0FBQ0Q7O0FBQ0QsUUFBSThnRCxVQUFKLEVBQWdCO0FBQ2QzQiwyQkFBcUIsQ0FBQ2hwQixFQUFELEVBQUtvb0IsWUFBTCxDQUFyQjtBQUNBWSwyQkFBcUIsQ0FBQ2hwQixFQUFELEVBQUtxb0IsZ0JBQUwsQ0FBckI7QUFDRDs7QUFDRCxRQUFJeGlCLEVBQUUsQ0FBQ3NqQixTQUFQLEVBQWtCO0FBQ2hCLFVBQUl3QixVQUFKLEVBQWdCO0FBQ2QzQiw2QkFBcUIsQ0FBQ2hwQixFQUFELEVBQUttb0IsVUFBTCxDQUFyQjtBQUNEOztBQUNEa0Qsb0JBQWMsSUFBSUEsY0FBYyxDQUFDcnJCLEVBQUQsQ0FBaEM7QUFDRCxLQUxELE1BS087QUFDTGtoQixRQUFFO0FBQ0ZrSyxnQkFBVSxJQUFJQSxVQUFVLENBQUNwckIsRUFBRCxDQUF4QjtBQUNEOztBQUNEQSxNQUFFLENBQUM0akIsUUFBSCxHQUFjLElBQWQ7QUFDRCxHQWxCMkIsQ0FBNUI7O0FBb0JBLE1BQUkwSCxVQUFKLEVBQWdCO0FBQ2RBLGNBQVUsQ0FBQ0UsWUFBRCxDQUFWO0FBQ0QsR0FGRCxNQUVPO0FBQ0xBLGdCQUFZO0FBQ2I7O0FBRUQsV0FBU0EsWUFBVCxHQUF3QjtBQUN0QjtBQUNBLFFBQUkzbEIsRUFBRSxDQUFDc2pCLFNBQVAsRUFBa0I7QUFDaEI7QUFDRCxLQUpxQixDQUt0Qjs7O0FBQ0EsUUFBSSxDQUFDdnJCLEtBQUssQ0FBQ2oyQixJQUFOLENBQVdtakQsSUFBaEIsRUFBc0I7QUFDMUIsT0FBQzlxQixFQUFFLENBQUMrZSxVQUFILENBQWNpTSxRQUFkLEtBQTJCaHJCLEVBQUUsQ0FBQytlLFVBQUgsQ0FBY2lNLFFBQWQsR0FBeUIsRUFBcEQsQ0FBRCxFQUNRcHRCLEtBQUssQ0FBQy96QixHQURkLElBRVUrekIsS0FGVjtBQUdLOztBQUNEdXRCLGVBQVcsSUFBSUEsV0FBVyxDQUFDbnJCLEVBQUQsQ0FBMUI7O0FBQ0EsUUFBSTJxQixVQUFKLEVBQWdCO0FBQ2Q3Qix3QkFBa0IsQ0FBQzlvQixFQUFELEVBQUttb0IsVUFBTCxDQUFsQjtBQUNBVyx3QkFBa0IsQ0FBQzlvQixFQUFELEVBQUtxb0IsZ0JBQUwsQ0FBbEI7QUFDQVEsZUFBUyxDQUFDLFlBQVk7QUFDcEJHLDZCQUFxQixDQUFDaHBCLEVBQUQsRUFBS21vQixVQUFMLENBQXJCOztBQUNBLFlBQUksQ0FBQ3RpQixFQUFFLENBQUNzakIsU0FBUixFQUFtQjtBQUNqQkwsNEJBQWtCLENBQUM5b0IsRUFBRCxFQUFLb29CLFlBQUwsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDd0MsZ0JBQUwsRUFBdUI7QUFDckIsZ0JBQUlLLGVBQWUsQ0FBQ00scUJBQUQsQ0FBbkIsRUFBNEM7QUFDMUNwbUIsd0JBQVUsQ0FBQ1UsRUFBRCxFQUFLMGxCLHFCQUFMLENBQVY7QUFDRDtBQUNGO0FBQ0Y7QUFDRixPQVZRLENBQVQ7QUFXRDs7QUFDREwsU0FBSyxJQUFJQSxLQUFLLENBQUNsckIsRUFBRCxFQUFLNkYsRUFBTCxDQUFkOztBQUNBLFFBQUksQ0FBQzhrQixVQUFELElBQWUsQ0FBQ0MsZ0JBQXBCLEVBQXNDO0FBQ3BDL2tCLFFBQUU7QUFDSDtBQUNGO0FBQ0YsQyxDQUVEOzs7QUFDQSxTQUFTNmtCLGFBQVQsQ0FBdUJqN0IsR0FBdkIsRUFBNEIzaEMsSUFBNUIsRUFBa0M4dkMsS0FBbEMsRUFBeUM7QUFDdkMsTUFBSSxPQUFPbk8sR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCdEwsUUFBSSxDQUNGLDJCQUEyQnIyQixJQUEzQixHQUFrQyxvQ0FBbEMsR0FDRSxNQURGLEdBQ1kyWixJQUFJLENBQUNDLFNBQUwsQ0FBZStuQixHQUFmLENBRFosR0FDbUMsR0FGakMsRUFHRm1PLEtBQUssQ0FBQ3JiLE9BSEosQ0FBSjtBQUtELEdBTkQsTUFNTyxJQUFJc1IsS0FBSyxDQUFDcEUsR0FBRCxDQUFULEVBQWdCO0FBQ3JCdEwsUUFBSSxDQUNGLDJCQUEyQnIyQixJQUEzQixHQUFrQyxxQkFBbEMsR0FDRSw2Q0FGQSxFQUdGOHZDLEtBQUssQ0FBQ3JiLE9BSEosQ0FBSjtBQUtEO0FBQ0Y7O0FBRUQsU0FBUzBvQyxlQUFULENBQXlCeDdCLEdBQXpCLEVBQThCO0FBQzVCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkIsQ0FBQ29FLEtBQUssQ0FBQ3BFLEdBQUQsQ0FBeEM7QUFDRDtBQUVEOzs7Ozs7OztBQU1BLFNBQVNvN0Isc0JBQVQsQ0FBZ0N4aUMsRUFBaEMsRUFBb0M7QUFDbEMsTUFBSXlLLE9BQU8sQ0FBQ3pLLEVBQUQsQ0FBWCxFQUFpQjtBQUNmLFdBQU8sS0FBUDtBQUNEOztBQUNELE1BQUlvakMsVUFBVSxHQUFHcGpDLEVBQUUsQ0FBQ2dpQixHQUFwQjs7QUFDQSxNQUFJdFgsS0FBSyxDQUFDMDRCLFVBQUQsQ0FBVCxFQUF1QjtBQUNyQjtBQUNBLFdBQU9aLHNCQUFzQixDQUMzQjVnRCxLQUFLLENBQUNpZSxPQUFOLENBQWN1akMsVUFBZCxJQUE0QkEsVUFBVSxDQUFDLENBQUQsQ0FBdEMsR0FBNENBLFVBRGpCLENBQTdCO0FBR0QsR0FMRCxNQUtPO0FBQ0wsV0FBTyxDQUFDcGpDLEVBQUUsQ0FBQzZNLE9BQUgsSUFBYzdNLEVBQUUsQ0FBQ2ovQixNQUFsQixJQUE0QixDQUFuQztBQUNEO0FBQ0Y7O0FBRUQsU0FBU3NpRSxNQUFULENBQWdCdHhELENBQWhCLEVBQW1Cd2pDLEtBQW5CLEVBQTBCO0FBQ3hCLE1BQUlBLEtBQUssQ0FBQ2oyQixJQUFOLENBQVdtakQsSUFBWCxLQUFvQixJQUF4QixFQUE4QjtBQUM1QjdCLFNBQUssQ0FBQ3JyQixLQUFELENBQUw7QUFDRDtBQUNGOztBQUVELElBQUl5aUIsVUFBVSxHQUFHO0FBQ2Zyc0IsUUFBTSxFQUFFMDNCLE1BRE87QUFFZnBMLFVBQVEsRUFBRW9MLE1BRks7QUFHZnYzQixRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQnlKLEtBQWhCLEVBQXVCc2pCLEVBQXZCLEVBQTJCO0FBQ2pDO0FBQ0EsUUFBSXRqQixLQUFLLENBQUNqMkIsSUFBTixDQUFXbWpELElBQVgsS0FBb0IsSUFBeEIsRUFBOEI7QUFDNUJJLFdBQUssQ0FBQ3R0QixLQUFELEVBQVFzakIsRUFBUixDQUFMO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLFFBQUU7QUFDSDtBQUNGO0FBVmMsQ0FBakI7QUFhQSxJQUFJeUssZUFBZSxHQUFHLENBQUN4Z0IsS0FBRCxFQUFRcWIsTUFBUixFQUFnQk8sTUFBaEIsRUFBd0I3NEMsS0FBeEIsRUFBK0JteUMsVUFBL0IsQ0FBdEI7QUFFQSxJQUFJdUwsU0FBUyxHQUFHO0FBQ2RodEMsVUFBUSxFQUFFO0FBREksQ0FBaEI7QUFJQSxJQUFJbkwsT0FBTyxHQUFHO0FBQ1o2a0MsWUFBVSxFQUFFLElBREE7QUFFWjNMLFFBQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCOS9DLENBQWhCLEVBQW1CazVDLEdBQW5CLEVBQXdCO0FBQzlCLFFBQUkzSixRQUFRLEdBQUcySixHQUFHLENBQUMzSixRQUFuQjs7QUFFQSxRQUFJdnpDLG1CQUFPLENBQUMsMkJBQUQsQ0FBUCxDQUFxQ2d2QyxTQUF6QyxFQUFvRDtBQUNsRCxhQUFPdUUsUUFBUDtBQUNEO0FBQ0Y7QUFSVyxDQUFkO0FBV0EsSUFBSXl2QixNQUFNLEdBQUcsSUFBSS9tRCxHQUFKLEVBQWI7O0FBRUEsU0FBU2duRCxRQUFULENBQWtCbmxELEVBQWxCLEVBQXNCb2xELEtBQXRCLEVBQTZCO0FBQzNCLFNBQU9GLE1BQU0sQ0FBQ3htRCxHQUFQLENBQVdzQixFQUFYLEVBQWVvbEQsS0FBZixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQnJsRCxFQUFsQixFQUFzQjtBQUNwQixTQUFPa2xELE1BQU0sQ0FBQ3ZoRSxHQUFQLENBQVdxYyxFQUFYLENBQVA7QUFDRDs7QUFFRCxTQUFTc2xELFdBQVQsQ0FBcUJ0bEQsRUFBckIsRUFBeUI7QUFDdkIsU0FBT2tsRCxNQUFNLENBQUNqd0MsTUFBUCxDQUFjalYsRUFBZCxDQUFQO0FBQ0Q7O0FBRUQsSUFBSXVsRCxTQUFTLEdBQUcsQ0FBaEI7QUFFQSxJQUFJSCxLQUFLLEdBQUc7QUFDVnByQyxPQUFLLEVBQUU7QUFDTGhhLE1BQUUsRUFBRTtBQUNGa2EsYUFBTyxFQUFFO0FBRFAsS0FEQztBQUlMdy9CLGNBQVUsRUFBRTtBQUNWbmlELFVBQUksRUFBRSxDQUFDaUcsTUFBRCxFQUFTM2IsTUFBVCxDQURJO0FBRVZvNEIsY0FBUSxFQUFFLEtBRkE7QUFHVkMsYUFBTyxFQUFFO0FBSEMsS0FKUDtBQVNMLHNCQUFrQjtBQUNoQjNpQixVQUFJLEVBQUUsQ0FBQ2lHLE1BQUQsRUFBUzNiLE1BQVQsQ0FEVTtBQUVoQm80QixjQUFRLEVBQUUsS0FGTTtBQUdoQkMsYUFBTyxFQUFFO0FBSE8sS0FUYjtBQWNMLDBCQUFzQjtBQUNwQjNpQixVQUFJLEVBQUUsQ0FBQ2lHLE1BQUQsRUFBUzNiLE1BQVQsQ0FEYztBQUVwQm80QixjQUFRLEVBQUUsS0FGVTtBQUdwQkMsYUFBTyxFQUFFO0FBSFcsS0FkakI7QUFtQkxzckMsZ0JBQVksRUFBRTtBQUNaanVELFVBQUksRUFBRW9HLE9BRE07QUFFWnNjLGNBQVEsRUFBRSxLQUZFO0FBR1pDLGFBQU8sRUFBRTtBQUhHLEtBbkJUO0FBd0JMdXJDLG9CQUFnQixFQUFFO0FBQ2hCbHVELFVBQUksRUFBRW9HLE9BRFU7QUFFaEJzYyxjQUFRLEVBQUUsS0FGTTtBQUdoQkMsYUFBTyxFQUFFO0FBSE8sS0F4QmI7QUE2Qkw7QUFDQXdyQyxpQkFBYSxFQUFFO0FBQ2J4ckMsYUFBTyxFQUFFO0FBREk7QUE5QlYsR0FERztBQW1DVmxaLE1BQUksRUFBRSxTQUFTQSxJQUFULEdBQWdCO0FBQ3BCLFdBQU87QUFDTHFtQixnQkFBVSxFQUFFO0FBRFAsS0FBUDtBQUdELEdBdkNTO0FBd0NWcytCLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFFBQUl0K0IsVUFBVSxHQUFHLEVBQWpCOztBQUVBLFFBQUlnK0IsUUFBUSxDQUFDLEtBQUtucUMsTUFBTCxDQUFZbGIsRUFBYixDQUFaLEVBQThCO0FBQzVCcW5CLGdCQUFVLENBQUNybkIsRUFBWCxHQUFnQixLQUFLa2IsTUFBTCxDQUFZbGIsRUFBWixHQUFpQnVsRCxTQUFTLEVBQTFDO0FBQ0Q7O0FBRUQsU0FBS2wrQixVQUFMLEdBQWtCeGxDLE1BQU0sQ0FBQys0QixNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLZzhCLE1BQXZCLEVBQStCLEtBQUsxN0IsTUFBcEMsRUFBNENtTSxVQUE1QyxDQUFsQjtBQUVBODlCLFlBQVEsQ0FBQyxLQUFLOTlCLFVBQUwsQ0FBZ0JybkIsRUFBakIsRUFBcUIsSUFBckIsQ0FBUjtBQUNELEdBbERTO0FBbURWNGxELFdBQVMsRUFBRSxTQUFTQSxTQUFULEdBQXFCO0FBQzlCTixlQUFXLENBQUMsS0FBS2orQixVQUFMLENBQWdCcm5CLEVBQWpCLENBQVg7QUFDRCxHQXJEUztBQXNEVmdtQyxRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjkvQyxDQUFoQixFQUFtQjtBQUN6QixXQUFPQSxDQUFDLENBQ04sYUFETSxFQUVOO0FBQ0VzK0MsV0FBSyxFQUFFLEtBQUtuZCxVQURkO0FBRUV5YyxRQUFFLEVBQUUsS0FBS2pwQjtBQUZYLEtBRk0sRUFNTixLQUFLdXhCLE1BQUwsQ0FBWWx5QixPQU5OLENBQVI7QUFRRCxHQS9EUztBQWdFVnVCLFNBQU8sRUFBRTtBQUNQb3FDLGFBQVMsRUFBRSxTQUFTQSxTQUFULEdBQXFCO0FBQzlCLGFBQU8sS0FBSzdQLEdBQUwsQ0FBU3ZwQyxVQUFoQjtBQUNELEtBSE07QUFLUHE1QywyQkFBdUIsRUFBRSxTQUFTQSx1QkFBVCxDQUFpQ3BNLFVBQWpDLEVBQTZDO0FBQ3BFLFVBQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUNsQyxlQUFPO0FBQUV2eUQsY0FBSSxFQUFFdXlEO0FBQVIsU0FBUDtBQUNEOztBQUNELGFBQU9BLFVBQVA7QUFDRCxLQVZNO0FBWVBxTSxzQkFBa0IsRUFBRSxTQUFTQSxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBbUM7QUFDckQsVUFBSTkwQixTQUFTLEdBQUdodkMsbUJBQU8sQ0FBQywyQkFBRCxDQUFQLENBQXFDZ3ZDLFNBQXJEOztBQUNBLFVBQUkrMEIsaUJBQWlCLEdBQUcsZ0JBQWdCLzBCLFNBQVMsR0FBRyxTQUFILEdBQWUsS0FBeEMsQ0FBeEI7QUFDQSxVQUFJZzFCLFNBQVMsR0FBR0YsS0FBSyxDQUFDQyxpQkFBRCxDQUFMLEdBQ1pBLGlCQURZLEdBRVosWUFGSjtBQUdBLFVBQUlFLFlBQVksR0FBRyxDQUFDajFCLFNBQVMsR0FBRyxTQUFILEdBQWUsS0FBekIsSUFBa0MsYUFBckQ7QUFDQSxVQUFJcFgsSUFBSSxHQUFHLEtBQUtxc0MsWUFBTCxJQUFxQkEsWUFBckIsR0FBb0MsWUFBL0M7O0FBRUEsVUFBSUgsS0FBSyxDQUFDRSxTQUFELENBQVQsRUFBc0I7QUFDcEJGLGFBQUssQ0FBQ0UsU0FBRCxDQUFMLEdBQW1CLEtBQUtKLHVCQUFMLENBQTZCRSxLQUFLLENBQUNFLFNBQUQsQ0FBbEMsQ0FBbkI7QUFDRCxPQUZELE1BRU8sSUFBSSxLQUFLcHNDLElBQUwsQ0FBSixFQUFnQjtBQUNyQmtzQyxhQUFLLENBQUNFLFNBQUQsQ0FBTCxHQUFtQixLQUFLSix1QkFBTCxDQUE2QixLQUFLaHNDLElBQUwsQ0FBN0IsQ0FBbkI7QUFDRDs7QUFFRCxhQUFPa3NDLEtBQVA7QUFDRCxLQTVCTTtBQThCUEkscUJBQWlCLEVBQUUsU0FBU0EsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DO0FBQ3BELFVBQUk3VyxNQUFNLEdBQUcsSUFBYjtBQUVBLFVBQUl6d0IsT0FBTyxHQUFHO0FBQ1owbUMsd0JBQWdCLEVBQUUsS0FBS0EsZ0JBRFg7QUFFWkQsb0JBQVksRUFBRSxLQUFLQSxZQUZQO0FBR1puNEIsY0FBTSxFQUFFLGtCQUFZO0FBQUUsaUJBQU9nNUIsTUFBTSxDQUFDclEsR0FBUCxDQUFXdnBDLFVBQWxCO0FBQStCO0FBSHpDLE9BQWQ7QUFNQSxXQUFLMG1DLFNBQUwsQ0FBZSxZQUFZO0FBQ3pCM0QsY0FBTSxDQUFDOFcsUUFBUCxDQUFnQnZuQyxPQUFoQjtBQUNELE9BRkQ7QUFHRCxLQTFDTTtBQTRDUHVuQyxZQUFRLEVBQUUsU0FBU0EsUUFBVCxDQUFrQk4sS0FBbEIsRUFBeUJPLElBQXpCLEVBQStCO0FBQ3ZDLFVBQUkvVyxNQUFNLEdBQUcsSUFBYjtBQUNBLFVBQUsrVyxJQUFJLEtBQUssS0FBSyxDQUFuQixFQUF1QkEsSUFBSSxHQUFHLEtBQVA7O0FBRXZCLFVBQUluQixLQUFLLEdBQUcsS0FBS1MsU0FBTCxFQUFaOztBQUVBLFVBQUlVLElBQUosRUFBVTtBQUNSLGVBQU9uQixLQUFLLENBQUNvQixNQUFOLENBQWFSLEtBQWIsQ0FBUDtBQUNELE9BUnNDLENBVXZDO0FBQ0E7OztBQUNBLFVBQUlTLElBQUksR0FBR1QsS0FBSyxDQUFDMzRCLE1BQU4sRUFBWDtBQUNBbzVCLFVBQUksQ0FBQzcyQixJQUFMLENBQVUsYUFBVixFQUF5QixZQUFZO0FBQ25DNGYsY0FBTSxDQUFDcHpCLEtBQVAsQ0FBYSxXQUFiLEVBQTBCNHBDLEtBQTFCO0FBQ0QsT0FGRDs7QUFJQSxVQUFJM3JDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVUzUyxJQUFWLEVBQWdCO0FBQzVCLFlBQUlBLElBQUksQ0FBQ2cvQyxnQkFBVCxFQUEyQjtBQUN6QkQsY0FBSSxDQUFDRSxHQUFMLENBQVMsZUFBVCxFQUEwQnRzQyxPQUExQjtBQUVBbTFCLGdCQUFNLENBQUNwekIsS0FBUCxDQUFhLGVBQWIsRUFBOEI0cEMsS0FBOUI7QUFDRDtBQUNGLE9BTkQ7O0FBT0FTLFVBQUksQ0FBQzNpQixFQUFMLENBQVEsZUFBUixFQUF5QnpwQixPQUF6Qjs7QUFFQTJyQyxXQUFLLENBQUMzNEIsTUFBTixHQUFlLFlBQVk7QUFBRSxlQUFPbzVCLElBQVA7QUFBYyxPQUEzQzs7QUFFQSxXQUFLVixrQkFBTCxDQUF3QkMsS0FBeEI7O0FBQ0FaLFdBQUssQ0FBQ2tCLFFBQU4sQ0FBZU4sS0FBZjtBQUNELEtBMUVNO0FBNEVQTyxRQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjSyxjQUFkLEVBQThCO0FBQ2xDLFVBQUtBLGNBQWMsS0FBSyxLQUFLLENBQTdCLEVBQWlDQSxjQUFjLEdBQUcsSUFBakI7QUFFakMsV0FBS04sUUFBTCxDQUFjTSxjQUFkLEVBQThCLElBQTlCO0FBQ0Q7QUFoRk07QUFoRUMsQ0FBWjtBQW9KQSxJQUFJdjZDLEdBQUcsR0FBRztBQUNSc2xDLFlBQVUsRUFBRSxJQURKO0FBRVIzTCxRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjkvQyxDQUFoQixFQUFtQms1QyxHQUFuQixFQUF3QjtBQUM5QixRQUFJM0osUUFBUSxHQUFHMkosR0FBRyxDQUFDM0osUUFBbkI7O0FBRUEsUUFBSXZ6QyxtQkFBTyxDQUFDLDJCQUFELENBQVAsQ0FBcUN5akIsS0FBekMsRUFBZ0Q7QUFDOUMsYUFBTzh2QixRQUFQO0FBQ0Q7QUFDRjtBQVJPLENBQVY7QUFXQSxJQUFJM1osUUFBUSxHQUFHLGlCQUFmO0FBRUEsSUFBSStxQyxHQUFHLEdBQUcsQ0FBVjtBQUNBLElBQUlDLFNBQVMsR0FBRztBQUNkOXNDLE9BQUssRUFBRTtBQUNMN3lCLFFBQUksRUFBRTtBQUNKb1EsVUFBSSxFQUFFaUc7QUFERixLQUREO0FBSUx1cEQsTUFBRSxFQUFFO0FBQ0Z4dkQsVUFBSSxFQUFFaUc7QUFESjtBQUpDLEdBRE87QUFVZHdkLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFFBQUksQ0FBQyxLQUFLa3hCLFlBQUwsQ0FBa0JoeUIsT0FBdkIsRUFBZ0M7QUFDOUI7QUFDRDs7QUFFRCxTQUFLbUIsVUFBTCxHQUFrQixLQUFLMjZCLEdBQUwsQ0FBU29DLFVBQVQsQ0FBb0IvOEIsVUFBcEIsR0FBaUMsS0FBS21aLE9BQUwsQ0FBYW5aLFVBQWIsR0FDakQsS0FBS21aLE9BQUwsQ0FBYW5aLFVBQWIsSUFBMkIsSUFBSTJyQyxXQUFKLEVBRDdCO0FBRUEsU0FBSzNyQyxVQUFMLENBQWdCNHJDLGdCQUFoQixDQUNFLEtBQUsvckMsTUFBTCxDQUFZL3pCLElBQVosS0FBcUIsS0FBSyt6QixNQUFMLENBQVk2ckMsRUFBWixHQUFrQixnQkFBaUJGLEdBQUcsRUFBdEMsR0FBNkMsU0FBbEUsQ0FERixFQUVFLEtBQUszckMsTUFBTCxDQUFZNnJDLEVBRmQsRUFHRSxLQUFLN2EsWUFBTCxDQUFrQmh5QixPQUhwQjtBQUtELEdBdEJhO0FBd0JkOHJCLFFBQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCOS9DLENBQWhCLEVBQW1CLENBQUU7QUF4QmYsQ0FBaEI7O0FBMkJBLElBQUk4Z0UsV0FBVyxHQUFHLFNBQVNBLFdBQVQsR0FBdUI7QUFDdkMsT0FBS3BxQyxZQUFMLEdBQW9CLElBQUl6ZSxHQUFKLEVBQXBCO0FBQ0QsQ0FGRDs7QUFJQSxJQUFJK29ELG9CQUFvQixHQUFHO0FBQUU5ckMsWUFBVSxFQUFFO0FBQUV2M0IsZ0JBQVksRUFBRTtBQUFoQjtBQUFkLENBQTNCOztBQUVBbWpFLFdBQVcsQ0FBQ3RqRSxTQUFaLENBQXNCdWpFLGdCQUF0QixHQUF5QyxTQUFTQSxnQkFBVCxDQUEyQjkvRCxJQUEzQixFQUFpQ2dnRSxTQUFqQyxFQUE0Q0MsUUFBNUMsRUFBc0Q7QUFDN0YsT0FBS3hxQyxZQUFMLENBQWtCbGUsR0FBbEIsQ0FBc0J2WCxJQUF0QixFQUE0QjtBQUMxQmlnRSxZQUFRLEVBQUVBLFFBRGdCO0FBRTFCcHFDLGVBQVcsRUFBRSxLQUFLcXFDLGNBQUwsQ0FBb0JGLFNBQXBCLENBRmE7QUFHMUJHLGlCQUFhLEVBQUUsSUFBSUMsZ0JBQUosQ0FBcUJwZ0UsSUFBckIsRUFBMkJpZ0UsUUFBM0I7QUFIVyxHQUE1QjtBQUtELENBTkQ7O0FBUUFGLG9CQUFvQixDQUFDOXJDLFVBQXJCLENBQWdDejNCLEdBQWhDLEdBQXNDLFlBQVk7QUFDaEQsTUFBSWdnQyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQU8sU0FBUzZqQyxrQkFBVCxDQUE0QjluRCxJQUE1QixFQUFrQztBQUN2QyxRQUFJbWQsUUFBUSxHQUFHOEcsSUFBSSxDQUFDL0csWUFBTCxDQUFrQkUsT0FBbEIsRUFBZjs7QUFDQSxRQUFJQyxJQUFKOztBQUNBLFdBQVFBLElBQUksR0FBR0YsUUFBUSxDQUFDdkcsSUFBVCxHQUFnQnQwQixLQUEvQixFQUF1QztBQUNyQyxVQUFJbUYsSUFBSSxHQUFHNDFCLElBQUksQ0FBQyxDQUFELENBQWY7QUFDRSxVQUFJQyxXQUFXLEdBQUdELElBQUksQ0FBQyxDQUFELENBQUosQ0FBUUMsV0FBMUI7O0FBQ0YsVUFBSTtBQUNGLFlBQUlBLFdBQVcsQ0FBQ3RkLElBQUQsQ0FBZixFQUF1QjtBQUNyQixpQkFBT3ZZLElBQVA7QUFDRDtBQUNGLE9BSkQsQ0FJRSxPQUFPODFCLEdBQVAsRUFBWSxDQUFFO0FBQ2pCOztBQUNELFdBQU8sU0FBUDtBQUNELEdBYkQ7QUFjRCxDQWhCRDs7QUFrQkErcEMsV0FBVyxDQUFDdGpFLFNBQVosQ0FBc0IyakUsY0FBdEIsR0FBdUMsU0FBU0EsY0FBVCxDQUF5QkYsU0FBekIsRUFBb0M7QUFDekUsU0FBTyxJQUFJandDLFFBQUosQ0FBYSxLQUFiLEVBQXFCLDJCQUEyQml3QyxTQUEzQixHQUF1QyxLQUE1RCxDQUFQO0FBQ0QsQ0FGRDs7QUFJQUgsV0FBVyxDQUFDdGpFLFNBQVosQ0FBc0IrakUsZ0JBQXRCLEdBQXlDLFNBQVNBLGdCQUFULENBQTJCdGdFLElBQTNCLEVBQWlDO0FBQ3hFLFNBQU8sS0FBS3kxQixZQUFMLENBQWtCajVCLEdBQWxCLENBQXNCd0QsSUFBdEIsRUFBNEJtZ0UsYUFBbkM7QUFDRCxDQUZEOztBQUlBTixXQUFXLENBQUN0akUsU0FBWixDQUFzQnE0QixhQUF0QixHQUFzQyxTQUFTQSxhQUFULENBQXdCNTBCLElBQXhCLEVBQThCeTBCLE9BQTlCLEVBQXVDQyxRQUF2QyxFQUFpRDtBQUNyRixNQUFJb2IsS0FBSyxHQUFHLEtBQUtyYSxZQUFMLENBQWtCajVCLEdBQWxCLENBQXNCd0QsSUFBdEIsRUFBNEJpZ0UsUUFBNUIsQ0FBcUN4ckMsT0FBckMsQ0FBWixDQURxRixDQUVyRjs7O0FBQ0EsTUFBSXRZLEtBQUssQ0FBQ2llLE9BQU4sQ0FBYzBWLEtBQWQsQ0FBSixFQUEwQjtBQUN4QkEsU0FBSyxHQUFHQSxLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0Q7O0FBRUQsTUFBSXhxQixVQUFVLEdBQUdrd0MsS0FBSyxDQUFDOWdDLFFBQUQsRUFBV29iLEtBQVgsQ0FBTCxDQUF1QnhxQixVQUF4QztBQUNBQSxZQUFVLENBQUNxUCxRQUFELENBQVYsR0FBdUJtYixLQUF2QjtBQUVBLFNBQU94cUIsVUFBUDtBQUNELENBWEQ7O0FBYUF1NkMsV0FBVyxDQUFDdGpFLFNBQVosQ0FBc0Jna0UsWUFBdEIsR0FBcUMsU0FBU0EsWUFBVCxHQUF5QjtBQUM1RCxTQUFPcGtELEtBQUssQ0FBQ2dTLElBQU4sQ0FBVyxLQUFLc0gsWUFBTCxDQUFrQnJILElBQWxCLEVBQVgsQ0FBUDtBQUNELENBRkQ7O0FBSUF5eEMsV0FBVyxDQUFDdGpFLFNBQVosQ0FBc0I0M0IsaUJBQXRCLEdBQTBDLFNBQVNBLGlCQUFULEdBQThCO0FBQ3RFLFNBQU9oWSxLQUFLLENBQUNnUyxJQUFOLENBQVcsS0FBS3NILFlBQUwsQ0FBa0I1Z0IsTUFBbEIsRUFBWCxFQUF1Q1EsR0FBdkMsQ0FDTCxVQUFVNGlDLEdBQVYsRUFBZTtBQUNYLFFBQUlrb0IsYUFBYSxHQUFHbG9CLEdBQUcsQ0FBQ2tvQixhQUF4QjtBQUVBLFdBQU9BLGFBQVA7QUFDSCxHQUxJLENBQVA7QUFPRCxDQVJEOztBQVVBemxFLE1BQU0sQ0FBQyswQyxnQkFBUCxDQUF5Qm93QixXQUFXLENBQUN0akUsU0FBckMsRUFBZ0R3akUsb0JBQWhEOztBQUVBLElBQUlLLGdCQUFnQixHQUFHLFNBQVNBLGdCQUFULENBQTBCcmtELEdBQTFCLEVBQStCa2tELFFBQS9CLEVBQXlDO0FBQzlELE9BQUtPLElBQUwsR0FBWXprRCxHQUFaO0FBQ0EsT0FBSzBrRCxTQUFMLEdBQWlCUixRQUFqQjtBQUNELENBSEQ7O0FBS0EsSUFBSVMsc0JBQXNCLEdBQUc7QUFBRTNrRCxLQUFHLEVBQUU7QUFBRXJmLGdCQUFZLEVBQUU7QUFBaEI7QUFBUCxDQUE3Qjs7QUFFQWdrRSxzQkFBc0IsQ0FBQzNrRCxHQUF2QixDQUEyQnZmLEdBQTNCLEdBQWlDLFlBQVk7QUFDM0MsU0FBTyxLQUFLZ2tFLElBQVo7QUFDRCxDQUZEOztBQUlBSixnQkFBZ0IsQ0FBQzdqRSxTQUFqQixDQUEyQnlmLFVBQTNCLEdBQXdDLFNBQVNBLFVBQVQsR0FBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FMRDs7QUFPQXRoQixNQUFNLENBQUMrMEMsZ0JBQVAsQ0FBeUIyd0IsZ0JBQWdCLENBQUM3akUsU0FBMUMsRUFBcURta0Usc0JBQXJEO0FBRUEsSUFBSUMsUUFBUSxHQUFHO0FBQ2I5dEMsT0FBSyxFQUFFO0FBQ0x0WSxTQUFLLEVBQUU7QUFDTG5LLFVBQUksRUFBRSxDQUFDK0wsS0FBRCxFQUFRemhCLE1BQVIsQ0FERDtBQUVMazdDLGVBQVMsRUFBRSxtQkFBVWpVLEdBQVYsRUFBZTtBQUN4QixZQUFJaGYsZUFBZSxHQUFHNW5CLG1CQUFPLENBQUMsd0NBQUQsQ0FBUCxDQUNuQjRuQixlQURIOztBQUVBLGVBQU94RyxLQUFLLENBQUNpZSxPQUFOLENBQWN1SCxHQUFkLEtBQXNCQSxHQUFHLFlBQVloZixlQUE1QztBQUNELE9BTkk7QUFPTG1RLGNBQVEsRUFBRTtBQVBMLEtBREY7QUFVTCxjQUFVO0FBQ1IxaUIsVUFBSSxFQUFFaUcsTUFERTtBQUVSMGMsYUFBTyxFQUFFO0FBRkQsS0FWTDtBQWNMLGNBQVU7QUFDUjNpQixVQUFJLEVBQUVpRztBQURFO0FBZEwsR0FETTtBQW9CYnlhLFVBQVEsRUFBRSxnUEFwQkc7QUFzQmJtQyxPQUFLLEVBQUU7QUFDTDFZLFNBQUssRUFBRTtBQUNMMlksYUFBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCO0FBQ2hDLGFBQUtDLEtBQUwsQ0FBV3V0QyxRQUFYLENBQW9CdHRDLFlBQXBCLENBQWlDLE9BQWpDLEVBQTBDRixNQUExQztBQUNBLGFBQUt4VCxPQUFMO0FBQ0QsT0FKSTtBQUtMMlQsVUFBSSxFQUFFO0FBTEQ7QUFERixHQXRCTTtBQWdDYmtyQyxTQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQjtBQUNBO0FBQ0EsUUFBSWhyQyxTQUFTLEdBQUcrVCxNQUFNLENBQUMsRUFBRCxFQUFLLEtBQUs3VCxVQUFWLENBQXRCO0FBQ0EsV0FBT0YsU0FBUyxDQUFDb3RDLE9BQWpCO0FBQ0EsU0FBS3B0QyxTQUFMLEdBQWlCQSxTQUFqQjtBQUVBLFNBQUtNLGNBQUwsR0FBc0JBLGNBQWMsQ0FBQzVXLElBQWYsQ0FBb0IsSUFBcEIsQ0FBdEI7QUFDRCxHQXhDWTtBQTBDYjJXLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFFBQUl3MEIsTUFBTSxHQUFHLElBQWI7O0FBRUEsUUFBSSxDQUFDLEtBQUtuMEIsVUFBVixFQUFzQjtBQUNwQjtBQUNEOztBQUVELFNBQUtkLEtBQUwsQ0FBV3V0QyxRQUFYLENBQW9CdHRDLFlBQXBCLENBQ0Usd0JBREYsRUFFRSxLQUFLYSxVQUFMLENBQWdCQyxpQkFBaEIsRUFGRjtBQUlBLFNBQUtmLEtBQUwsQ0FBV3V0QyxRQUFYLENBQW9CdHRDLFlBQXBCLENBQWlDLHVCQUFqQyxFQUEwRCxVQUFVOWEsSUFBVixFQUFnQm5KLEtBQWhCLEVBQXVCO0FBQy9FLGFBQU9pNUMsTUFBTSxDQUFDbjBCLFVBQVAsQ0FBa0JELFVBQWxCLENBQTZCbzBCLE1BQU0sQ0FBQ3YwQixjQUFQLENBQXNCdmIsSUFBdEIsRUFBNEJuSixLQUE1QixDQUE3QixDQUFQO0FBQ0QsS0FGRDtBQUdELEdBeERZO0FBMERia2xCLFNBQU8sRUFBRTtBQUNQdXNDLGFBQVMsRUFBRSxTQUFTQSxTQUFULENBQW1CdGdELElBQW5CLEVBQXlCO0FBQ2xDLFdBQUswVSxLQUFMLENBQVcsU0FBWCxFQUFzQnNTLE1BQU0sQ0FBQztBQUFFaHZCLFlBQUksRUFBRSxLQUFLbUcsT0FBTCxDQUFhNkIsSUFBSSxDQUFDblIsS0FBbEI7QUFBUixPQUFELEVBQXFDbVIsSUFBckMsQ0FBNUI7QUFDRCxLQUhNO0FBSVB1Z0QsaUJBQWEsRUFBRSxTQUFTQSxhQUFULENBQXVCdmdELElBQXZCLEVBQTZCO0FBQzFDLFVBQUksQ0FBQyxLQUFLMlQsVUFBVixFQUFzQjtBQUNwQjtBQUNEOztBQUVELFVBQUk5a0IsS0FBSyxHQUFHbVIsSUFBSSxDQUFDblIsS0FBakI7QUFDQSxVQUFJbUwsS0FBSyxHQUFHZ0csSUFBSSxDQUFDcEosTUFBTCxDQUFZb0QsS0FBeEI7QUFFQSxVQUFJaWEsV0FBVyxHQUFHLEtBQUs5VixPQUFMLENBQWF0UCxLQUFiLENBQWxCOztBQUVBLFVBQUlwUCxJQUFJLEdBQUd1Z0IsSUFBSSxDQUFDcEosTUFBTCxDQUFZNHBELHFCQUFaLENBQWtDdnNDLFdBQWxDLEVBQStDcGxCLEtBQS9DLEVBQXNEbUwsS0FBdEQsQ0FBWDs7QUFDQSxVQUFJa2EsT0FBTyxHQUFHLEtBQUtYLGNBQUwsQ0FBb0JVLFdBQXBCLEVBQWlDcGxCLEtBQWpDLENBQWQ7QUFDQSxVQUFJc2xCLFFBQVEsR0FBR25VLElBQUksQ0FBQ2dGLElBQUwsSUFBYWhGLElBQUksQ0FBQ2dGLElBQUwsQ0FBVW9QLFFBQVYsQ0FBNUI7QUFFQXBVLFVBQUksQ0FBQ2dGLElBQUwsR0FBWSxLQUFLMk8sVUFBTCxDQUFnQlUsYUFBaEIsQ0FBOEI1MEIsSUFBOUIsRUFBb0N5MEIsT0FBcEMsRUFBNkNDLFFBQTdDLENBQVo7QUFDRCxLQW5CTTtBQW9CUC9VLFdBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFdBQUt5VCxLQUFMLENBQVd1dEMsUUFBWCxDQUFvQnI3QyxVQUFwQixDQUErQjNGLE9BQS9CO0FBQ0QsS0F0Qk07QUF1QlBqQixXQUFPLEVBQUUsU0FBU0EsT0FBVCxDQUFpQjRrQixHQUFqQixFQUFzQjtBQUM3QixhQUFPLE9BQU8sS0FBSy9vQixLQUFMLENBQVdtRSxPQUFsQixLQUE4QixVQUE5QixHQUNILEtBQUtuRSxLQUFMLENBQVdtRSxPQUFYLENBQW1CNGtCLEdBQW5CLENBREcsR0FFSCxLQUFLL29CLEtBQUwsQ0FBVytvQixHQUFYLENBRko7QUFHRDtBQTNCTTtBQTFESSxDQUFmOztBQXlGQSxTQUFTeFAsY0FBVCxDQUNFdmIsSUFERixFQUVFbkosS0FGRixFQUdFOGxCLEtBSEYsRUFJRUMsV0FKRixFQUtFO0FBQ0EsTUFBSWhkLEdBQUo7QUFFQSxNQUFLK2MsS0FBSyxLQUFLLEtBQUssQ0FBcEIsRUFBd0JBLEtBQUssR0FBRyxLQUFLbkIsTUFBTCxDQUFZLFFBQVosQ0FBUjtBQUN4QixNQUFLb0IsV0FBVyxLQUFLLEtBQUssQ0FBMUIsRUFBOEJBLFdBQVcsR0FBRyxLQUFLcEIsTUFBTCxDQUFZLFFBQVosQ0FBZDtBQUM5QixTQUFTNWIsR0FBRyxHQUFHLEVBQU4sRUFBVUEsR0FBRyxDQUFDK2MsS0FBRCxDQUFILEdBQWEzYyxJQUF2QixFQUE2QkosR0FBRyxDQUFDZ2QsV0FBVyxJQUFJLFFBQWhCLENBQUgsR0FBK0IvbEIsS0FBNUQsRUFBbUUrSSxHQUFHLENBQUNpZCxLQUFKLEdBQVlobUIsS0FBSyxHQUFHLENBQVIsS0FBYyxDQUE3RixFQUFnRytJLEdBQUcsQ0FBQ2tkLElBQUosR0FBV2ptQixLQUFLLEdBQUcsQ0FBUixLQUFjLENBQXpILEVBQTRIK0ksR0FBckk7QUFDRDs7QUFFRCxJQUFJNm9ELFFBQVEsR0FBRyxnQkFBZjtBQUVBLElBQUkxQixJQUFJLEdBQUc7QUFDVHpnQixRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjkvQyxDQUFoQixFQUFtQjtBQUN6QixXQUFPQSxDQUFDLENBQ04sWUFETSxFQUVOO0FBQ0VzK0MsV0FBSyxFQUFFLEtBQUtvUyxNQURkO0FBRUU5UyxRQUFFLEVBQUUsS0FBS2pwQjtBQUZYLEtBRk0sRUFNTixLQUFLdXhCLE1BQUwsQ0FBWWx5QixPQU5OLENBQVI7QUFRRCxHQVZRO0FBV1RjLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFFBQUl3MEIsTUFBTSxHQUFHLElBQWI7QUFFQSxTQUFLd0csR0FBTCxDQUFTdnBDLFVBQVQsQ0FBb0IwN0MsUUFBcEIsSUFBZ0MsSUFBaEM7O0FBRUEsUUFBSS9DLEtBQUssR0FBRyxLQUFLZ0QsZ0JBQUwsRUFBWjs7QUFFQSxRQUFJaEQsS0FBSixFQUFXO0FBQ1RBLFdBQUssQ0FBQ2dCLGlCQUFOLENBQXdCLElBQXhCO0FBQ0Q7O0FBRUQsUUFBSS9yQyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVc0csQ0FBVixFQUFhO0FBQ3pCLFVBQUlBLENBQUMsQ0FBQytsQyxnQkFBTixFQUF3QjtBQUN0QmxYLGNBQU0sQ0FBQ3dHLEdBQVAsQ0FBV3ZwQyxVQUFYLENBQXNCazZDLEdBQXRCLENBQTBCLGVBQTFCLEVBQTJDdHNDLE9BQTNDO0FBQ0FtMUIsY0FBTSxDQUFDaGIsT0FBUCxDQUFlMmMsUUFBZjtBQUNEO0FBQ0YsS0FMRDs7QUFPQSxTQUFLNkUsR0FBTCxDQUFTdnBDLFVBQVQsQ0FBb0JxM0IsRUFBcEIsQ0FBdUIsZUFBdkIsRUFBd0N6cEIsT0FBeEMsRUFsQjBCLENBb0IxQjtBQUNBOztBQUNBLFFBQUlndUMsT0FBTyxHQUFHLEtBQUtyUyxHQUFMLENBQVN2cEMsVUFBVCxDQUFvQm9FLGlCQUFsQzs7QUFDQSxTQUFLbWxDLEdBQUwsQ0FBU3ZwQyxVQUFULENBQW9Cb0UsaUJBQXBCLEdBQXdDLFlBQVk7QUFDbEQsVUFBSW5KLElBQUksR0FBRyxFQUFYO0FBQUEsVUFBZTh2QixHQUFHLEdBQUdoMUMsU0FBUyxDQUFDQyxNQUEvQjs7QUFDQSxhQUFRKzBDLEdBQUcsRUFBWDtBQUFnQjl2QixZQUFJLENBQUU4dkIsR0FBRixDQUFKLEdBQWNoMUMsU0FBUyxDQUFFZzFDLEdBQUYsQ0FBdkI7QUFBaEI7O0FBRUFnWSxZQUFNLENBQUNoYixPQUFQLENBQWUyYyxRQUFmO0FBQ0FrWCxhQUFPLENBQUNuN0MsSUFBUixDQUFhc2lDLE1BQU0sQ0FBQ3dHLEdBQVAsQ0FBV3ZwQyxVQUF4QixFQUFvQy9FLElBQXBDO0FBQ0QsS0FORDtBQU9ELEdBekNRO0FBMENUK1QsU0FBTyxFQUFFO0FBQ1Ayc0Msb0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsR0FBNEI7QUFDNUMsVUFBSWhELEtBQUssR0FBRyxLQUFLNXdCLE9BQWpCOztBQUVBLGFBQU80d0IsS0FBSyxJQUFJQSxLQUFLLENBQUMvd0IsUUFBTixDQUFlbHRDLElBQWYsS0FBd0IsT0FBeEMsRUFBaUQ7QUFDL0NpK0QsYUFBSyxHQUFHQSxLQUFLLENBQUM1d0IsT0FBZDtBQUNEOztBQUVELGFBQU80d0IsS0FBUDtBQUNEO0FBVE07QUExQ0EsQ0FBWDtBQXVEQSxJQUFJa0QsT0FBTyxHQUFHO0FBQ1p6dUMsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxlQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGLEdBREs7QUFNWmlzQixRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjkvQyxDQUFoQixFQUFtQjtBQUN6QixXQUFPQSxDQUFDLENBQ04sZUFETSxFQUVOO0FBQ0U0OUMsUUFBRSxFQUFFLEtBQUtqcEIsVUFEWDtBQUVFMnBCLFdBQUssRUFBRSxLQUFLb1M7QUFGZCxLQUZNLEVBTU4sS0FBS3hLLE1BQUwsQ0FBWWx5QixPQU5OLENBQVI7QUFRRCxHQWZXO0FBaUJadUIsU0FBTyxFQUFFO0FBQ1A4c0MsZUFBVyxFQUFFLFNBQVNBLFdBQVQsQ0FBcUJELE9BQXJCLEVBQThCO0FBQ3pDLFVBQUk1bUQsS0FBSyxHQUFHLEtBQUtzMEMsR0FBTCxDQUFTdnBDLFVBQVQsQ0FBb0IvSyxLQUFwQixJQUE2QixFQUF6QztBQUVBLFdBQUtzMEMsR0FBTCxDQUFTeDdCLFlBQVQsQ0FBc0IsT0FBdEIsRUFBK0I5WSxLQUFLLENBQUNqQixNQUFOLENBQWEsQ0FBQzZuRCxPQUFELENBQWIsQ0FBL0I7QUFDRDtBQUxNO0FBakJHLENBQWQ7QUEwQkEsSUFBSUUsV0FBVyxHQUFHO0FBQ2hCdndDLFVBQVEsRUFBRSxpREFETTtBQUdoQitDLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFFBQUksS0FBS2c3QixHQUFMLENBQVN5RyxVQUFULENBQW9CaDZELE1BQXBCLEdBQTZCLENBQWpDLEVBQW9DO0FBQ2xDKzZCLFVBQUksQ0FBQyxnREFBRCxFQUFtRCxJQUFuRCxDQUFKO0FBQ0Q7O0FBRUQsUUFBSWlyQyxXQUFXLEdBQUcsS0FBS3pTLEdBQUwsQ0FBU3ZwQyxVQUEzQjtBQUNBZzhDLGVBQVcsQ0FBQy83QyxJQUFaLEdBQW1CLEtBQUtzcEMsR0FBTCxDQUFTeUcsVUFBVCxDQUFvQixDQUFwQixFQUF1Qmh3QyxVQUExQztBQUNBLFNBQUsrbkIsT0FBTCxDQUFhK3pCLFdBQWIsQ0FBeUJFLFdBQXpCO0FBQ0Q7QUFYZSxDQUFsQjtBQWNBLElBQUlDLGdCQUFnQixHQUFHO0FBQ3JCN3VDLE9BQUssRUFBRTtBQUNMQyxRQUFJLEVBQUUsZUFERDtBQUVMQyxTQUFLLEVBQUU7QUFGRixHQURjO0FBTXJCaXNCLFFBQU0sRUFBRSxTQUFTQSxNQUFULENBQWdCOS9DLENBQWhCLEVBQW1CO0FBQ3pCLFdBQU9BLENBQUMsQ0FDTix3QkFETSxFQUVOO0FBQ0U0OUMsUUFBRSxFQUFFLEtBQUtqcEIsVUFEWDtBQUVFMnBCLFdBQUssRUFBRSxLQUFLb1M7QUFGZCxLQUZNLEVBTU4sS0FBS3hLLE1BQUwsQ0FBWWx5QixPQU5OLENBQVI7QUFRRCxHQWZvQjtBQWlCckJ1QixTQUFPLEVBQUU7QUFDUGt0QyxvQkFBZ0IsRUFBRSxTQUFTQSxnQkFBVCxDQUEwQkMsUUFBMUIsRUFBb0M7QUFDcEQsV0FBSzVTLEdBQUwsQ0FBU3g3QixZQUFULENBQXNCLFVBQXRCLEVBQWtDb3VDLFFBQWxDO0FBQ0QsS0FITTtBQUlQQywwQkFBc0IsRUFBRSxTQUFTQSxzQkFBVCxDQUFnQ0MsY0FBaEMsRUFBZ0Q7QUFDdEUsVUFBSXBuRCxLQUFLLEdBQUcsS0FBS3MwQyxHQUFMLENBQVN2cEMsVUFBVCxDQUFvQi9LLEtBQXBCLElBQTZCLEVBQXpDO0FBRUEsV0FBS3MwQyxHQUFMLENBQVN4N0IsWUFBVCxDQUFzQixPQUF0QixFQUErQjlZLEtBQUssQ0FBQ2pCLE1BQU4sQ0FBYSxDQUFDcW9ELGNBQUQsQ0FBYixDQUEvQjtBQUNEO0FBUk07QUFqQlksQ0FBdkI7QUE2QkEsSUFBSUMsSUFBSSxHQUFHO0FBQ1RsdkMsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxlQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGLEdBREU7QUFNVGlzQixRQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQjkvQyxDQUFoQixFQUFtQjtBQUN6QixXQUFPQSxDQUFDLENBQ04sWUFETSxFQUVOO0FBQ0U0OUMsUUFBRSxFQUFFLEtBQUtqcEIsVUFEWDtBQUVFMnBCLFdBQUssRUFBRSxLQUFLb1M7QUFGZCxLQUZNLEVBTU4sS0FBS3hLLE1BQUwsQ0FBWWx5QixPQU5OLENBQVI7QUFRRCxHQWZRO0FBaUJUdUIsU0FBTyxFQUFFO0FBQ1BrdEMsb0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsQ0FBMEJDLFFBQTFCLEVBQW9DO0FBQ3BELFdBQUs1UyxHQUFMLENBQVN4N0IsWUFBVCxDQUFzQixVQUF0QixFQUFrQ291QyxRQUFsQztBQUNELEtBSE07QUFJUEMsMEJBQXNCLEVBQUUsU0FBU0Esc0JBQVQsQ0FBZ0NDLGNBQWhDLEVBQWdEO0FBQ3RFLFVBQUlwbkQsS0FBSyxHQUFHLEtBQUtzMEMsR0FBTCxDQUFTdnBDLFVBQVQsQ0FBb0IvSyxLQUFwQixJQUE2QixFQUF6QztBQUVBLFdBQUtzMEMsR0FBTCxDQUFTeDdCLFlBQVQsQ0FBc0IsT0FBdEIsRUFBK0I5WSxLQUFLLENBQUNqQixNQUFOLENBQWEsQ0FBQ3FvRCxjQUFELENBQWIsQ0FBL0I7QUFDRDtBQVJNO0FBakJBLENBQVg7QUE2QkEsSUFBSUYsUUFBUSxHQUFHO0FBQ2I1aUIsUUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0I5L0MsQ0FBaEIsRUFBbUI7QUFDekIsV0FBT0EsQ0FBQyxDQUNOLGdCQURNLEVBRU47QUFDRTQ5QyxRQUFFLEVBQUUsS0FBS2pwQixVQURYO0FBRUUycEIsV0FBSyxFQUFFLEtBQUtvUztBQUZkLEtBRk0sRUFNTixLQUFLeEssTUFBTCxDQUFZbHlCLE9BTk4sQ0FBUjtBQVFELEdBVlk7QUFZYmMsU0FBTyxFQUFFLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsUUFBSXl0QyxXQUFXLEdBQUcsS0FBS3pTLEdBQUwsQ0FBU3ZwQyxVQUEzQjtBQUNBLFNBQUsrbkIsT0FBTCxDQUFhbTBCLGdCQUFiLENBQThCRixXQUE5QjtBQUNELEdBZlk7QUFpQmJodEMsU0FBTyxFQUFFO0FBQ1B1dEMsd0JBQW9CLEVBQUUsU0FBU0Esb0JBQVQsQ0FBOEJDLFlBQTlCLEVBQTRDO0FBQ2hFLFVBQUl2bkQsS0FBSyxHQUFHLEtBQUtzMEMsR0FBTCxDQUFTdnBDLFVBQVQsQ0FBb0IvSyxLQUFwQixJQUE2QixFQUF6QztBQUVBLFdBQUtzMEMsR0FBTCxDQUFTeDdCLFlBQVQsQ0FBc0IsT0FBdEIsRUFBK0I5WSxLQUFLLENBQUNqQixNQUFOLENBQWEsQ0FBQ3dvRCxZQUFELENBQWIsQ0FBL0I7QUFDRDtBQUxNO0FBakJJLENBQWY7QUEwQkEsSUFBSUEsWUFBWSxHQUFHO0FBQ2pCaHhDLFVBQVEsRUFBRSxtREFETztBQUdqQitDLFNBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW1CO0FBQzFCLFFBQUl5dEMsV0FBVyxHQUFHLEtBQUt6UyxHQUFMLENBQVN2cEMsVUFBM0I7QUFDQSxTQUFLK25CLE9BQUwsQ0FBYXcwQixvQkFBYixDQUFrQ1AsV0FBbEM7QUFDRDtBQU5nQixDQUFuQjtBQVNBLElBQUlLLGNBQWMsR0FBRztBQUNuQjd3QyxVQUFRLEVBQUUsdURBRFM7QUFHbkIrQyxTQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixRQUFJLEtBQUtnN0IsR0FBTCxDQUFTeUcsVUFBVCxDQUFvQmg2RCxNQUFwQixHQUE2QixDQUFqQyxFQUFvQztBQUNsQys2QixVQUFJLENBQUMsbURBQUQsRUFBc0QsSUFBdEQsQ0FBSjtBQUNEOztBQUVELFFBQUlpckMsV0FBVyxHQUFHLEtBQUt6UyxHQUFMLENBQVN2cEMsVUFBM0I7QUFDQWc4QyxlQUFXLENBQUMvN0MsSUFBWixHQUFtQixLQUFLc3BDLEdBQUwsQ0FBU3lHLFVBQVQsQ0FBb0IsQ0FBcEIsRUFBdUJod0MsVUFBMUM7QUFDQSxTQUFLK25CLE9BQUwsQ0FBYXEwQixzQkFBYixDQUFvQ0osV0FBcEM7QUFDRDtBQVhrQixDQUFyQjtBQWNBOztBQUVBLElBQUlTLGVBQWUsR0FBRztBQUNwQi9oRSxNQUFJLEVBQUVxVyxNQURjO0FBRXBCeWxELFFBQU0sRUFBRXRsRCxPQUZZO0FBR3BCd2pELEtBQUcsRUFBRXhqRCxPQUhlO0FBSXBCd3JELE1BQUksRUFBRTNyRCxNQUpjO0FBS3BCakcsTUFBSSxFQUFFaUcsTUFMYztBQU1wQjZqRCxZQUFVLEVBQUU3akQsTUFOUTtBQU9wQmdrRCxZQUFVLEVBQUVoa0QsTUFQUTtBQVFwQjhqRCxjQUFZLEVBQUU5akQsTUFSTTtBQVNwQmlrRCxjQUFZLEVBQUVqa0QsTUFUTTtBQVVwQitqRCxrQkFBZ0IsRUFBRS9qRCxNQVZFO0FBV3BCa2tELGtCQUFnQixFQUFFbGtELE1BWEU7QUFZcEJrbEQsYUFBVyxFQUFFbGxELE1BWk87QUFhcEJvbEQsbUJBQWlCLEVBQUVwbEQsTUFiQztBQWNwQm1sRCxlQUFhLEVBQUVubEQsTUFkSztBQWVwQjRsRCxVQUFRLEVBQUUsQ0FBQzNsRCxNQUFELEVBQVNELE1BQVQsRUFBaUIzYixNQUFqQjtBQWZVLENBQXRCLEMsQ0FrQkE7QUFDQTs7QUFDQSxTQUFTdW5FLFlBQVQsQ0FBdUJueUIsS0FBdkIsRUFBOEI7QUFDNUIsTUFBSW95QixXQUFXLEdBQUdweUIsS0FBSyxJQUFJQSxLQUFLLENBQUN0QixnQkFBakM7O0FBQ0EsTUFBSTB6QixXQUFXLElBQUlBLFdBQVcsQ0FBQ3YzQixJQUFaLENBQWlCL1MsT0FBakIsQ0FBeUI4eUIsUUFBNUMsRUFBc0Q7QUFDcEQsV0FBT3VYLFlBQVksQ0FBQzFVLHNCQUFzQixDQUFDMlUsV0FBVyxDQUFDNXpCLFFBQWIsQ0FBdkIsQ0FBbkI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPd0IsS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU3F5QixxQkFBVCxDQUFnQy9WLElBQWhDLEVBQXNDO0FBQ3BDLE1BQUl2eUMsSUFBSSxHQUFHLEVBQVg7QUFDQSxNQUFJK2QsT0FBTyxHQUFHdzBCLElBQUksQ0FBQ2xmLFFBQW5CLENBRm9DLENBR3BDOztBQUNBLE9BQUssSUFBSW54QixHQUFULElBQWdCNmIsT0FBTyxDQUFDdWEsU0FBeEIsRUFBbUM7QUFDakN0NEIsUUFBSSxDQUFDa0MsR0FBRCxDQUFKLEdBQVlxd0MsSUFBSSxDQUFDcndDLEdBQUQsQ0FBaEI7QUFDRCxHQU5tQyxDQU9wQztBQUNBOzs7QUFDQSxNQUFJeVgsU0FBUyxHQUFHb0UsT0FBTyxDQUFDK3FCLGdCQUF4Qjs7QUFDQSxPQUFLLElBQUl0UCxLQUFULElBQWtCN2YsU0FBbEIsRUFBNkI7QUFDM0IzWixRQUFJLENBQUNndEIsUUFBUSxDQUFDd00sS0FBRCxDQUFULENBQUosR0FBd0I3ZixTQUFTLENBQUM2ZixLQUFELENBQWpDO0FBQ0Q7O0FBQ0QsU0FBT3g1QixJQUFQO0FBQ0Q7O0FBRUQsU0FBU3VvRCxXQUFULENBQXNCcmpFLENBQXRCLEVBQXlCc2pFLFFBQXpCLEVBQW1DO0FBQ2pDLE1BQUksaUJBQWlCbG1FLElBQWpCLENBQXNCa21FLFFBQVEsQ0FBQ2gwQixHQUEvQixDQUFKLEVBQXlDO0FBQ3ZDLFdBQU90dkMsQ0FBQyxDQUFDLFlBQUQsRUFBZTtBQUNyQjh6QixXQUFLLEVBQUV3dkMsUUFBUSxDQUFDN3pCLGdCQUFULENBQTBCMkQ7QUFEWixLQUFmLENBQVI7QUFHRDtBQUNGOztBQUVELFNBQVNtd0IsbUJBQVQsQ0FBOEJ4eUIsS0FBOUIsRUFBcUM7QUFDbkMsU0FBUUEsS0FBSyxHQUFHQSxLQUFLLENBQUM3aUIsTUFBdEIsRUFBK0I7QUFDN0IsUUFBSTZpQixLQUFLLENBQUNqMkIsSUFBTixDQUFXMDRDLFVBQWYsRUFBMkI7QUFDekIsYUFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVNnUSxXQUFULENBQXNCL3lCLEtBQXRCLEVBQTZCZ3pCLFFBQTdCLEVBQXVDO0FBQ3JDLFNBQU9BLFFBQVEsQ0FBQ3ptRCxHQUFULEtBQWlCeXpCLEtBQUssQ0FBQ3p6QixHQUF2QixJQUE4QnltRCxRQUFRLENBQUNuMEIsR0FBVCxLQUFpQm1CLEtBQUssQ0FBQ25CLEdBQTVEO0FBQ0Q7O0FBRUQsSUFBSW8wQixhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVUzN0IsQ0FBVixFQUFhO0FBQUUsU0FBT0EsQ0FBQyxDQUFDdUgsR0FBRixJQUFTaUIsa0JBQWtCLENBQUN4SSxDQUFELENBQWxDO0FBQXdDLENBQTNFOztBQUVBLElBQUk0N0IsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFVeC9CLENBQVYsRUFBYTtBQUFFLFNBQU9BLENBQUMsQ0FBQ2xqQyxJQUFGLEtBQVcsTUFBbEI7QUFBMkIsQ0FBakU7O0FBRUEsSUFBSTJpRSxVQUFVLEdBQUc7QUFDZjNpRSxNQUFJLEVBQUUsWUFEUztBQUVmNnlCLE9BQUssRUFBRWt2QyxlQUZRO0FBR2ZyWCxVQUFRLEVBQUUsSUFISztBQUtmN0wsUUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBaUI5L0MsQ0FBakIsRUFBb0I7QUFDMUIsUUFBSXNwRCxNQUFNLEdBQUcsSUFBYjtBQUVBLFFBQUkvWixRQUFRLEdBQUcsS0FBSzJXLE1BQUwsQ0FBWWx5QixPQUEzQjs7QUFDQSxRQUFJLENBQUN1YixRQUFMLEVBQWU7QUFDYjtBQUNELEtBTnlCLENBUTFCOzs7QUFDQUEsWUFBUSxHQUFHQSxRQUFRLENBQUNsYSxNQUFULENBQWdCcXVDLGFBQWhCLENBQVg7QUFDQTs7QUFDQSxRQUFJLENBQUNuMEIsUUFBUSxDQUFDaHpDLE1BQWQsRUFBc0I7QUFDcEI7QUFDRCxLQWJ5QixDQWUxQjs7O0FBQ0EsUUFBSW8rQixLQUFBLElBQXlDNFUsUUFBUSxDQUFDaHpDLE1BQVQsR0FBa0IsQ0FBL0QsRUFBa0U7QUFDaEUrNkIsVUFBSSxDQUNGLDREQUNBLCtCQUZFLEVBR0YsS0FBS2dYLE9BSEgsQ0FBSjtBQUtEOztBQUVELFFBQUkyMEIsSUFBSSxHQUFHLEtBQUtBLElBQWhCLENBeEIwQixDQTBCMUI7O0FBQ0EsUUFBSXRvQyxLQUFBLElBQ0Zzb0MsSUFERSxJQUNNQSxJQUFJLEtBQUssUUFEZixJQUMyQkEsSUFBSSxLQUFLLFFBRHhDLEVBRUU7QUFDQTNyQyxVQUFJLENBQ0YsZ0NBQWdDMnJDLElBRDlCLEVBRUYsS0FBSzMwQixPQUZILENBQUo7QUFJRDs7QUFFRCxRQUFJZzFCLFFBQVEsR0FBRy96QixRQUFRLENBQUMsQ0FBRCxDQUF2QixDQXBDMEIsQ0FzQzFCO0FBQ0E7O0FBQ0EsUUFBSWcwQixtQkFBbUIsQ0FBQyxLQUFLOVcsTUFBTixDQUF2QixFQUFzQztBQUNwQyxhQUFPNlcsUUFBUDtBQUNELEtBMUN5QixDQTRDMUI7QUFDQTs7O0FBQ0EsUUFBSTd5QixLQUFLLEdBQUd5eUIsWUFBWSxDQUFDSSxRQUFELENBQXhCO0FBQ0E7O0FBQ0EsUUFBSSxDQUFDN3lCLEtBQUwsRUFBWTtBQUNWLGFBQU82eUIsUUFBUDtBQUNEOztBQUVELFFBQUksS0FBS08sUUFBVCxFQUFtQjtBQUNqQixhQUFPUixXQUFXLENBQUNyakUsQ0FBRCxFQUFJc2pFLFFBQUosQ0FBbEI7QUFDRCxLQXREeUIsQ0F3RDFCO0FBQ0E7QUFDQTs7O0FBQ0EsUUFBSXhwRCxFQUFFLEdBQUcsa0JBQW1CLEtBQUtrcEMsSUFBeEIsR0FBZ0MsR0FBekM7QUFDQXZTLFNBQUssQ0FBQ3p6QixHQUFOLEdBQVl5ekIsS0FBSyxDQUFDenpCLEdBQU4sSUFBYSxJQUFiLEdBQ1J5ekIsS0FBSyxDQUFDTixTQUFOLEdBQ0VyMkIsRUFBRSxHQUFHLFNBRFAsR0FFRUEsRUFBRSxHQUFHMjJCLEtBQUssQ0FBQ25CLEdBSEwsR0FJUmpKLFdBQVcsQ0FBQ29LLEtBQUssQ0FBQ3p6QixHQUFQLENBQVgsR0FDRzFGLE1BQU0sQ0FBQ201QixLQUFLLENBQUN6ekIsR0FBUCxDQUFOLENBQWtCN2QsT0FBbEIsQ0FBMEIyYSxFQUExQixNQUFrQyxDQUFsQyxHQUFzQzIyQixLQUFLLENBQUN6ekIsR0FBNUMsR0FBa0RsRCxFQUFFLEdBQUcyMkIsS0FBSyxDQUFDenpCLEdBRGhFLEdBRUV5ekIsS0FBSyxDQUFDenpCLEdBTlo7QUFRQSxRQUFJbEMsSUFBSSxHQUFHLENBQUMyMUIsS0FBSyxDQUFDMzFCLElBQU4sS0FBZTIxQixLQUFLLENBQUMzMUIsSUFBTixHQUFhLEVBQTVCLENBQUQsRUFBa0MwNEMsVUFBbEMsR0FBK0M0UCxxQkFBcUIsQ0FBQyxJQUFELENBQS9FO0FBQ0EsUUFBSVUsV0FBVyxHQUFHLEtBQUtoWCxNQUF2QjtBQUNBLFFBQUkyVyxRQUFRLEdBQUdQLFlBQVksQ0FBQ1ksV0FBRCxDQUEzQixDQXRFMEIsQ0F3RTFCO0FBQ0E7O0FBQ0EsUUFBSXJ6QixLQUFLLENBQUMzMUIsSUFBTixDQUFXazZCLFVBQVgsSUFBeUJ2RSxLQUFLLENBQUMzMUIsSUFBTixDQUFXazZCLFVBQVgsQ0FBc0J1QyxJQUF0QixDQUEyQm9zQixnQkFBM0IsQ0FBN0IsRUFBMkU7QUFDekVsekIsV0FBSyxDQUFDMzFCLElBQU4sQ0FBV21qRCxJQUFYLEdBQWtCLElBQWxCO0FBQ0Q7O0FBRUQsUUFDRXdGLFFBQVEsSUFDUkEsUUFBUSxDQUFDM29ELElBRFQsSUFFQSxDQUFDMG9ELFdBQVcsQ0FBQy95QixLQUFELEVBQVFnekIsUUFBUixDQUZaLElBR0EsQ0FBQ2x6QixrQkFBa0IsQ0FBQ2t6QixRQUFELENBSG5CLElBSUE7QUFDQSxNQUFFQSxRQUFRLENBQUMxekIsaUJBQVQsSUFBOEIwekIsUUFBUSxDQUFDMXpCLGlCQUFULENBQTJCK2MsTUFBM0IsQ0FBa0MzYyxTQUFsRSxDQU5GLEVBT0U7QUFDQTtBQUNBO0FBQ0EsVUFBSW1wQixPQUFPLEdBQUdtSyxRQUFRLENBQUMzb0QsSUFBVCxDQUFjMDRDLFVBQWQsR0FBMkJockIsTUFBTSxDQUFDLEVBQUQsRUFBSzF0QixJQUFMLENBQS9DLENBSEEsQ0FJQTs7QUFDQSxVQUFJbW9ELElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQ3JCO0FBQ0EsYUFBS1ksUUFBTCxHQUFnQixJQUFoQjtBQUNBN2xCLHNCQUFjLENBQUNzYixPQUFELEVBQVUsWUFBVixFQUF3QixZQUFZO0FBQ2hEaFEsZ0JBQU0sQ0FBQ3VhLFFBQVAsR0FBa0IsS0FBbEI7QUFDQXZhLGdCQUFNLENBQUM2RSxZQUFQO0FBQ0QsU0FIYSxDQUFkO0FBSUEsZUFBT2tWLFdBQVcsQ0FBQ3JqRSxDQUFELEVBQUlzakUsUUFBSixDQUFsQjtBQUNELE9BUkQsTUFRTyxJQUFJTCxJQUFJLEtBQUssUUFBYixFQUF1QjtBQUM1QixZQUFJMXlCLGtCQUFrQixDQUFDRSxLQUFELENBQXRCLEVBQStCO0FBQzdCLGlCQUFPcXpCLFdBQVA7QUFDRDs7QUFDRCxZQUFJQyxZQUFKOztBQUNBLFlBQUlwRixZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFZO0FBQUVvRixzQkFBWTtBQUFLLFNBQWxEOztBQUNBL2xCLHNCQUFjLENBQUNsakMsSUFBRCxFQUFPLFlBQVAsRUFBcUI2akQsWUFBckIsQ0FBZDtBQUNBM2dCLHNCQUFjLENBQUNsakMsSUFBRCxFQUFPLGdCQUFQLEVBQXlCNmpELFlBQXpCLENBQWQ7QUFDQTNnQixzQkFBYyxDQUFDc2IsT0FBRCxFQUFVLFlBQVYsRUFBd0IsVUFBVStFLEtBQVYsRUFBaUI7QUFBRTBGLHNCQUFZLEdBQUcxRixLQUFmO0FBQXVCLFNBQWxFLENBQWQ7QUFDRDtBQUNGOztBQUVELFdBQU9pRixRQUFQO0FBQ0Q7QUFwSGMsQ0FBakI7QUF1SEEsSUFBSVUsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLFVBQW5CO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLElBQWpCO0FBRUEsSUFBSUMsZUFBZSxHQUFHO0FBQ3BCQyxjQUFZLEVBQUUsS0FETTtBQUVwQkMsWUFBVSxFQUFFLEtBRlE7QUFHcEJDLGNBQVksRUFBRSxFQUhNO0FBSXBCQyxrQkFBZ0IsRUFBRSxLQUpFO0FBS3BCNXdDLE9BQUssRUFBRSxJQUxhO0FBTXBCOTBCLFdBQVMsRUFBRTtBQU5TLENBQXRCOztBQVNBLFNBQVMybEUsb0JBQVQsQ0FBOEJDLFdBQTlCLEVBQTJDO0FBQ3pDLFNBQVEsV0FBWUEsV0FBVyxDQUM1Qm5sRSxPQURpQixDQUNUMmtFLFlBRFMsRUFDSyxFQURMLEVBRWpCM2tFLE9BRmlCLENBRVQ0a0UsVUFGUyxFQUVHLEVBRkgsRUFHakJobEUsV0FIaUIsRUFBcEI7QUFJRDs7QUFFRCxTQUFTKzNCLGVBQVQsQ0FBeUJ3dEMsV0FBekIsRUFBc0NDLFFBQXRDLEVBQWdEQyxJQUFoRCxFQUFzRDtBQUNwRCxNQUFJQyxjQUFjLEdBQUdKLG9CQUFvQixDQUFDQyxXQUFELENBQXpDO0FBRUFFLE1BQUksR0FBR2hwRSxNQUFNLENBQUMrNEIsTUFBUCxDQUFjLEVBQWQsRUFBa0J5dkMsZUFBbEIsRUFBbUNRLElBQW5DLENBQVA7O0FBRUEsTUFBSVgsVUFBVSxDQUFDWSxjQUFELENBQWQsRUFBZ0M7QUFDOUIsVUFBTSxJQUFJdG5FLEtBQUosQ0FBVyxpQkFBaUJtbkUsV0FBakIsR0FBK0Isc0JBQTFDLENBQU47QUFDRDs7QUFFRCxNQUFJLENBQUNFLElBQUksQ0FBQzlsRSxTQUFWLEVBQXFCO0FBQ25CO0FBQ0E7QUFDQThsRSxRQUFJLENBQUM5bEUsU0FBTCxHQUFpQjtBQUNmNHNELGdCQUFVLEVBQUUsSUFERztBQUVmOTNCLFdBQUssRUFBRWd4QyxJQUFJLENBQUNoeEMsS0FGRztBQUdmbXNCLFlBQU0sRUFBRSxnQkFBVTkvQyxDQUFWLEVBQWFrNUMsR0FBYixFQUFrQjtBQUN4QixZQUFJcCtCLElBQUksR0FBR28rQixHQUFHLENBQUNwK0IsSUFBZjtBQUNBLFlBQUl5MEIsUUFBUSxHQUFHMkosR0FBRyxDQUFDM0osUUFBbkI7QUFFQSxlQUFPdnZDLENBQUMsQ0FBQzRrRSxjQUFELEVBQWlCOXBELElBQWpCLEVBQXVCeTBCLFFBQXZCLENBQVI7QUFDRDtBQVJjLEtBQWpCO0FBVUQ7O0FBQ0RvMUIsTUFBSSxDQUFDOWxFLFNBQUwsQ0FBZW9DLElBQWYsR0FBc0J3akUsV0FBdEI7QUFFQSxNQUFJM0UsS0FBSyxHQUFHO0FBQ1Y0RSxZQUFRLEVBQUVBLFFBREE7QUFFVkMsUUFBSSxFQUFFQTtBQUZJLEdBQVo7QUFJQVgsWUFBVSxDQUFDWSxjQUFELENBQVYsR0FBNkI5RSxLQUE3QjtBQUNEOztBQUVELFNBQVMrRSxhQUFULEdBQXlCO0FBQ3ZCLFNBQU9iLFVBQVA7QUFDRDs7QUFFRCxTQUFTYyxZQUFULENBQXNCTCxXQUF0QixFQUFtQztBQUNqQyxNQUFJRyxjQUFjLEdBQUdKLG9CQUFvQixDQUFDQyxXQUFELENBQXpDO0FBQ0EsTUFBSTNFLEtBQUssR0FBR2tFLFVBQVUsQ0FBQ1ksY0FBRCxDQUF0Qjs7QUFFQSxNQUFJLENBQUM5RSxLQUFMLEVBQVk7QUFDVixVQUFNLElBQUkvbkQsU0FBSixDQUFlLG9DQUFvQzBzRCxXQUFwQyxHQUFrRCxHQUFqRSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFdBQU8zRSxLQUFLLENBQUM0RSxRQUFOLEVBQVA7QUFDRCxHQUZELENBRUUsT0FBT2pxQyxDQUFQLEVBQVU7QUFDVixVQUFNLElBQUkxaUIsU0FBSixDQUFlLDhCQUE4QjBzRCxXQUE5QixHQUE0QyxJQUE1QyxHQUFtRGhxQyxDQUFsRSxDQUFOO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTc3FDLFdBQVQsQ0FBcUJOLFdBQXJCLEVBQWtDO0FBQ2hDLE1BQUlHLGNBQWMsR0FBR0osb0JBQW9CLENBQUNDLFdBQUQsQ0FBekM7QUFFQSxNQUFJRSxJQUFJLEdBQUdSLGVBQVg7QUFDQSxNQUFJckUsS0FBSyxHQUFHa0UsVUFBVSxDQUFDWSxjQUFELENBQXRCOztBQUVBLE1BQUk5RSxLQUFLLElBQUlBLEtBQUssQ0FBQzZFLElBQW5CLEVBQXlCO0FBQ3ZCQSxRQUFJLEdBQUc3RSxLQUFLLENBQUM2RSxJQUFiO0FBQ0Q7O0FBRUQsU0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQVNLLFdBQVQsQ0FBcUJQLFdBQXJCLEVBQWtDO0FBQ2hDLFNBQU9ULFVBQVUsQ0FBQ1Esb0JBQW9CLENBQUNDLFdBQUQsQ0FBckIsQ0FBakI7QUFDRDs7QUFFRHh0QyxlQUFlLENBQ2IsV0FEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsZ0NBQUQsQ0FBUCxDQUEwQ2lwRSxTQUFqRDtBQUE2RCxDQUY5RCxFQUdiO0FBQ0U5UyxhQUFXLEVBQUUsU0FBU0EsV0FBVCxDQUFxQmprQyxNQUFyQixFQUE2QnVpQixLQUE3QixFQUFvQztBQUMvQyxRQUFJO0FBQ0Z2aUIsWUFBTSxDQUFDM0gsVUFBUCxDQUFrQnNJLFdBQWxCLENBQThCNGhCLEtBQUssQ0FBQ2xxQixVQUFwQztBQUNELEtBRkQsQ0FFRSxPQUFPa1UsQ0FBUCxFQUFVLENBQ1Y7QUFDQTtBQUNEO0FBQ0YsR0FSSDtBQVNFNTdCLFdBQVMsRUFBRWtnRTtBQVRiLENBSGEsQ0FBZjtBQWdCQTluQyxlQUFlLENBQ2IsWUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsZ0NBQUQsQ0FBUCxDQUEwQ2twRSxVQUFqRDtBQUE4RCxDQUYvRCxDQUFmO0FBS0FqdUMsZUFBZSxDQUFDLFNBQUQsRUFBWSxJQUFaLEVBQWtCO0FBQy9CcDRCLFdBQVMsRUFBRStuQjtBQURvQixDQUFsQixDQUFmO0FBSUFxUSxlQUFlLENBQUMsS0FBRCxFQUFRLElBQVIsRUFBYztBQUMzQnA0QixXQUFTLEVBQUVzbkI7QUFEZ0IsQ0FBZCxDQUFmO0FBSUE4USxlQUFlLENBQ2IsVUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsK0JBQUQsQ0FBUCxDQUF5Q21wRSxRQUFoRDtBQUEyRCxDQUY1RCxFQUdiO0FBQ0V0bUUsV0FBUyxFQUFFK2lFO0FBRGIsQ0FIYSxDQUFmO0FBUUEzcUMsZUFBZSxDQUNiLGtCQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxnQ0FBRCxDQUFQLENBQTBDb3BFLGdCQUFqRDtBQUFvRSxDQUZyRSxDQUFmO0FBS0FudUMsZUFBZSxDQUNiLFNBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDhCQUFELENBQVAsQ0FBd0NxcEUsT0FBL0M7QUFBeUQsQ0FGMUQsRUFHYjtBQUNFMXhDLE9BQUssRUFBRTtBQUNMQyxRQUFJLEVBQUUsZUFERDtBQUVMQyxTQUFLLEVBQUU7QUFGRixHQURUO0FBS0VoMUIsV0FBUyxFQUFFdWpFO0FBTGIsQ0FIYSxDQUFmO0FBWUFuckMsZUFBZSxDQUNiLGFBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDhCQUFELENBQVAsQ0FBd0NzcEUsV0FBL0M7QUFBNkQsQ0FGOUQsRUFHYjtBQUNFbEIsY0FBWSxFQUFFLElBRGhCO0FBRUV2bEUsV0FBUyxFQUFFeWpFO0FBRmIsQ0FIYSxDQUFmO0FBU0FyckMsZUFBZSxDQUNiLGtCQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyx1Q0FBRCxDQUFQLENBQWlEdXBFLGdCQUF4RDtBQUEyRSxDQUY1RSxFQUdiO0FBQ0U1eEMsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxlQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGLEdBRFQ7QUFLRWgxQixXQUFTLEVBQUUyakU7QUFMYixDQUhhLENBQWY7QUFZQXZyQyxlQUFlLENBQUMsTUFBRCxFQUFTLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsMEJBQUQsQ0FBUCxDQUFvQ3dwRSxJQUEzQztBQUFrRCxDQUF6RSxFQUEyRTtBQUN4Rjd4QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLGVBREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkYsR0FEaUY7QUFLeEZoMUIsV0FBUyxFQUFFZ2tFO0FBTDZFLENBQTNFLENBQWY7QUFRQTVyQyxlQUFlLENBQ2IsVUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsbURBQUQsQ0FBUCxDQUE2RHlwRSxRQUFwRTtBQUErRSxDQUZoRixFQUdiO0FBQ0VyQixjQUFZLEVBQUUsSUFEaEI7QUFFRXZsRSxXQUFTLEVBQUU2akU7QUFGYixDQUhhLENBQWY7QUFTQXpyQyxlQUFlLENBQ2IsY0FEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsd0RBQUQsQ0FBUCxDQUNoQjBwRSxZQURTO0FBQ00sQ0FIUCxFQUliO0FBQ0V0QixjQUFZLEVBQUUsSUFEaEI7QUFFRXZsRSxXQUFTLEVBQUVra0U7QUFGYixDQUphLENBQWY7QUFVQTlyQyxlQUFlLENBQ2IsZ0JBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDBEQUFELENBQVAsQ0FDaEIycEUsY0FEUztBQUNRLENBSFQsRUFJYjtBQUNFdkIsY0FBWSxFQUFFLElBRGhCO0FBRUV2bEUsV0FBUyxFQUFFK2pFO0FBRmIsQ0FKYSxDQUFmO0FBVUEzckMsZUFBZSxDQUFDLFlBQUQsRUFBZSxJQUFmLEVBQXFCO0FBQ2xDcDRCLFdBQVMsRUFBRStrRTtBQUR1QixDQUFyQixDQUFmO0FBSUEzc0MsZUFBZSxDQUFDLFlBQUQsRUFBZSxJQUFmLEVBQXFCO0FBQ2xDcDRCLFdBQVMsRUFBRStoRTtBQUR1QixDQUFyQixDQUFmLEMsQ0FJQTtBQUNBOztBQUVBM3BDLGVBQWUsQ0FBQyxPQUFELEVBQVUsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQywyQkFBRCxDQUFQLENBQXFDOGdCLEtBQTVDO0FBQW9ELENBQTVFLEVBQThFO0FBQzNGNlcsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxNQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGO0FBRG9GLENBQTlFLENBQWY7QUFPQW9ELGVBQWUsQ0FDYixZQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxpQ0FBRCxDQUFQLENBQTJDNHBFLFVBQWxEO0FBQStELENBRmhFLEVBR2I7QUFDRWp5QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLE1BREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkY7QUFEVCxDQUhhLENBQWY7QUFXQW9ELGVBQWUsQ0FDYixnQkFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsNkNBQUQsQ0FBUCxDQUF1RDZwRSxjQUE5RDtBQUErRSxDQUZoRixDQUFmO0FBSUE1dUMsZUFBZSxDQUNiLG1CQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyx3Q0FBRCxDQUFQLENBQWtEOHBFLGlCQUF6RDtBQUE2RSxDQUY5RSxDQUFmO0FBSUE3dUMsZUFBZSxDQUFDLFFBQUQsRUFBVyxZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDRCQUFELENBQVAsQ0FBc0MrcEUsTUFBN0M7QUFBc0QsQ0FBL0UsQ0FBZjtBQUNBOXVDLGVBQWUsQ0FBQyxRQUFELEVBQVcsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyw0QkFBRCxDQUFQLENBQXNDZ3FFLE1BQTdDO0FBQXNELENBQS9FLENBQWY7QUFDQS91QyxlQUFlLENBQ2IsYUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsa0NBQUQsQ0FBUCxDQUE0Q2lxRSxXQUFuRDtBQUFpRSxDQUZsRSxDQUFmO0FBSUFodkMsZUFBZSxDQUNiLFlBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLHlDQUFELENBQVAsQ0FBbURrcUUsVUFBMUQ7QUFBdUUsQ0FGeEUsQ0FBZjtBQUlBanZDLGVBQWUsQ0FDYixZQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyx5Q0FBRCxDQUFQLENBQW1EbXFFLFVBQTFEO0FBQXVFLENBRnhFLENBQWY7QUFJQWx2QyxlQUFlLENBQ2IsVUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsK0JBQUQsQ0FBUCxDQUF5Q29xRSxRQUFoRDtBQUEyRCxDQUY1RCxDQUFmO0FBSUFudkMsZUFBZSxDQUFDLE9BQUQsRUFBVSxZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDJCQUFELENBQVAsQ0FBcUNxcUUsS0FBNUM7QUFBb0QsQ0FBNUUsQ0FBZjtBQUNBcHZDLGVBQWUsQ0FBQyxLQUFELEVBQVEsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQywyQkFBRCxDQUFQLENBQXFDcXFFLEtBQTVDO0FBQW9ELENBQTFFLENBQWY7QUFDQXB2QyxlQUFlLENBQ2IsWUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsaUNBQUQsQ0FBUCxDQUEyQ3NxRSxVQUFsRDtBQUErRCxDQUZoRSxFQUdiO0FBQ0UzeUMsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxlQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGO0FBRFQsQ0FIYSxDQUFmO0FBVUFvRCxlQUFlLENBQUMsTUFBRCxFQUFTLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsMEJBQUQsQ0FBUCxDQUFvQ3VxRSxJQUEzQztBQUFrRCxDQUF6RSxFQUEyRTtBQUN4Rm5DLGNBQVksRUFBRSxJQUQwRTtBQUV4RnZsRSxXQUFTLEVBQUUwaEU7QUFGNkUsQ0FBM0UsQ0FBZjtBQUtBdHBDLGVBQWUsQ0FDYixhQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxpQ0FBRCxDQUFQLENBQTJDd3FFLFdBQWxEO0FBQWdFLENBRmpFLENBQWY7QUFJQXZ2QyxlQUFlLENBQ2IsVUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsOEJBQUQsQ0FBUCxDQUF3Q3lxRSxRQUEvQztBQUEwRCxDQUYzRCxFQUdiO0FBQ0U5eUMsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxPQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGO0FBRFQsQ0FIYSxDQUFmO0FBVUFvRCxlQUFlLENBQ2Isb0JBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDBDQUFELENBQVAsQ0FBb0Q0eEIsa0JBQTNEO0FBQWdGLENBRmpGLENBQWYsQyxDQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUNBcUosZUFBZSxDQUNiLFlBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLGlDQUFELENBQVAsQ0FBMkMwcUUsVUFBbEQ7QUFBK0QsQ0FGaEUsQ0FBZjtBQUlBenZDLGVBQWUsQ0FDYixXQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxnQ0FBRCxDQUFQLENBQTBDMnFFLFNBQWpEO0FBQTZELENBRjlELEVBR2I7QUFDRWh6QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLE1BREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkY7QUFEVCxDQUhhLENBQWY7QUFVQW9ELGVBQWUsQ0FDYixjQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxtQ0FBRCxDQUFQLENBQTZDNHFFLFlBQXBEO0FBQW1FLENBRnBFLEVBR2I7QUFDRWp6QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLGVBREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkY7QUFEVCxDQUhhLENBQWY7QUFVQW9ELGVBQWUsQ0FDYixrQkFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsbUNBQUQsQ0FBUCxDQUE2QzZxRSxnQkFBcEQ7QUFBdUUsQ0FGeEUsQ0FBZjtBQUlBNXZDLGVBQWUsQ0FBQyxRQUFELEVBQVcsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyw0QkFBRCxDQUFQLENBQXNDOHFFLE1BQTdDO0FBQXNELENBQS9FLEVBQWlGO0FBQzlGbnpDLE9BQUssRUFBRTtBQUNMQyxRQUFJLEVBQUUsT0FERDtBQUVMQyxTQUFLLEVBQUU7QUFGRjtBQUR1RixDQUFqRixDQUFmO0FBTUFvRCxlQUFlLENBQ2IsYUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsMENBQUQsQ0FBUCxDQUFvRDh4QixXQUEzRDtBQUF5RSxDQUYxRSxDQUFmO0FBSUFtSixlQUFlLENBQ2IsZUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsNENBQUQsQ0FBUCxDQUFzRCtxRSxhQUE3RDtBQUE2RSxDQUY5RSxDQUFmO0FBSUE5dkMsZUFBZSxDQUFDLFFBQUQsRUFBVyxZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDRCQUFELENBQVAsQ0FBc0NnckUsTUFBN0M7QUFBc0QsQ0FBL0UsRUFBaUY7QUFDOUZyekMsT0FBSyxFQUFFO0FBQ0xDLFFBQUksRUFBRSxTQUREO0FBRUxDLFNBQUssRUFBRTtBQUZGO0FBRHVGLENBQWpGLENBQWY7QUFPQW9ELGVBQWUsQ0FDYixXQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxnQ0FBRCxDQUFQLENBQTBDaXJFLFNBQWpEO0FBQTZELENBRjlELEVBR2I7QUFDRXR6QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLE1BREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkY7QUFEVCxDQUhhLENBQWY7QUFVQW9ELGVBQWUsQ0FDYixVQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQywrQkFBRCxDQUFQLENBQXlDa3JFLFFBQWhEO0FBQTJELENBRjVELEVBR2I7QUFDRXZ6QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLE1BREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkY7QUFEVCxDQUhhLENBQWY7QUFVQW9ELGVBQWUsQ0FDYixZQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxpQ0FBRCxDQUFQLENBQTJDbXJFLFVBQWxEO0FBQStELENBRmhFLEVBR2I7QUFDRXh6QyxPQUFLLEVBQUU7QUFDTEMsUUFBSSxFQUFFLE1BREQ7QUFFTEMsU0FBSyxFQUFFO0FBRkY7QUFEVCxDQUhhLENBQWY7QUFVQW9ELGVBQWUsQ0FDYixTQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyw4QkFBRCxDQUFQLENBQXdDb3JFLE9BQS9DO0FBQXlELENBRjFELENBQWY7QUFJQW53QyxlQUFlLENBQ2IsWUFEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMseUNBQUQsQ0FBUCxDQUFtRHFyRSxVQUExRDtBQUF1RSxDQUZ4RSxDQUFmO0FBSUFwd0MsZUFBZSxDQUNiLGlCQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyx3Q0FBRCxDQUFQLENBQWtEc3JFLGVBQXpEO0FBQTJFLENBRjVFLENBQWY7QUFJQXJ3QyxlQUFlLENBQUMsTUFBRCxFQUFTLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsNEJBQUQsQ0FBUCxDQUFzQ3VyRSxJQUE3QztBQUFvRCxDQUEzRSxDQUFmO0FBRUF0d0MsZUFBZSxDQUNiLG1CQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQywwQ0FBRCxDQUFQLENBQW9ENHhCLGtCQUEzRDtBQUFnRixDQUZqRixFQUdiO0FBQ0V3MkMsY0FBWSxFQUFFO0FBRGhCLENBSGEsQ0FBZjtBQU9BbnRDLGVBQWUsQ0FDYixjQURhLEVBRWIsWUFBWTtBQUFFLFNBQU9qN0IsbUJBQU8sQ0FBQyxpQ0FBRCxDQUFQLENBQTJDd3FFLFdBQWxEO0FBQWdFLENBRmpFLEVBR2I7QUFDRXBDLGNBQVksRUFBRTtBQURoQixDQUhhLENBQWY7QUFPQW50QyxlQUFlLENBQ2IsU0FEYSxFQUViLFlBQVk7QUFBRSxTQUFPajdCLG1CQUFPLENBQUMsaUNBQUQsQ0FBUCxDQUEyQ3dxRSxXQUFsRDtBQUFnRSxDQUZqRSxDQUFmO0FBS0F2dkMsZUFBZSxDQUNiLFVBRGEsRUFFYixZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDBDQUFELENBQVAsQ0FBb0Q0eEIsa0JBQTNEO0FBQWdGLENBRmpGLEVBR2I7QUFDRXcyQyxjQUFZLEVBQUU7QUFEaEIsQ0FIYSxDQUFmO0FBUUFudEMsZUFBZSxDQUFDLE9BQUQsRUFBVSxZQUFZO0FBQUUsU0FBT2o3QixtQkFBTyxDQUFDLDJCQUFELENBQVAsQ0FBcUN3ckUsS0FBNUM7QUFBb0QsQ0FBNUUsRUFBOEU7QUFDM0ZDLGFBQVcsRUFBRSxTQUFTQSxXQUFULENBQXFCdlYsVUFBckIsRUFBaUNtRSxTQUFqQyxFQUE0Q3FSLE9BQTVDLEVBQXFELENBQ2hFO0FBQ0E7QUFDQTtBQUNELEdBTDBGO0FBTTNGN29FLFdBQVMsRUFBRXFnRTtBQU5nRixDQUE5RSxDQUFmO0FBU0E7Ozs7Ozs7QUFPQSxJQUFJeUksUUFBUSxHQUFHLFNBQVNod0QsUUFBVCxDQUFrQmlyQixHQUFsQixFQUF1QjtBQUNwQyxTQUFPQSxHQUFHLElBQUksSUFBUCxJQUFlLE9BQU9BLEdBQVAsS0FBZSxRQUE5QixJQUEwQ3hsQixLQUFLLENBQUNpZSxPQUFOLENBQWN1SCxHQUFkLE1BQXVCLEtBQXhFO0FBQ0QsQ0FGRDs7QUFJQSxTQUFTZ2xDLGNBQVQsQ0FBd0J4akMsQ0FBeEIsRUFBMkI7QUFDekIsU0FBT3VqQyxRQUFRLENBQUN2akMsQ0FBRCxDQUFSLEtBQWdCLElBQWhCLElBQ0Z6b0MsTUFBTSxDQUFDNkIsU0FBUCxDQUFpQnNCLFFBQWpCLENBQTBCa29CLElBQTFCLENBQStCb2QsQ0FBL0IsTUFBc0MsaUJBRDNDO0FBRUQ7O0FBRUQsSUFBSXlqQyxlQUFlLEdBQUcsU0FBU3BoQyxhQUFULENBQXVCckMsQ0FBdkIsRUFBMEI7QUFDOUMsTUFBSW5ILElBQUosRUFBUzZxQyxJQUFUOztBQUVBLE1BQUlGLGNBQWMsQ0FBQ3hqQyxDQUFELENBQWQsS0FBc0IsS0FBMUIsRUFBaUM7QUFBRSxXQUFPLEtBQVA7QUFBZSxHQUhKLENBSzlDOzs7QUFDQW5ILE1BQUksR0FBR21ILENBQUMsQ0FBQzlyQixXQUFUOztBQUNBLE1BQUksT0FBTzJrQixJQUFQLEtBQWdCLFVBQXBCLEVBQWdDO0FBQUUsV0FBTyxLQUFQO0FBQWUsR0FQSCxDQVM5Qzs7O0FBQ0E2cUMsTUFBSSxHQUFHN3FDLElBQUksQ0FBQ3ovQixTQUFaOztBQUNBLE1BQUlvcUUsY0FBYyxDQUFDRSxJQUFELENBQWQsS0FBeUIsS0FBN0IsRUFBb0M7QUFBRSxXQUFPLEtBQVA7QUFBZSxHQVhQLENBYTlDOzs7QUFDQSxNQUFJQSxJQUFJLENBQUM3c0MsY0FBTCxDQUFvQixlQUFwQixNQUF5QyxLQUE3QyxFQUFvRDtBQUNsRCxXQUFPLEtBQVA7QUFDRCxHQWhCNkMsQ0FrQjlDOzs7QUFDQSxTQUFPLElBQVA7QUFDRCxDQXBCRDs7QUFzQkEsU0FBUzhzQyxLQUFULENBQWUva0QsTUFBZixFQUF1QmtuQixJQUF2QixFQUE2QnB1QyxLQUE3QixFQUFvQys4QixPQUFwQyxFQUE2QztBQUMzQyxNQUFJLENBQUNtdkMsVUFBVSxDQUFDaGxELE1BQUQsQ0FBZixFQUF5QjtBQUN2QixXQUFPQSxNQUFQO0FBQ0Q7O0FBRUQsTUFBSStmLElBQUksR0FBR2xLLE9BQU8sSUFBSSxFQUF0QjtBQUNBLE1BQUl3QyxPQUFPLEdBQUdqZSxLQUFLLENBQUNpZSxPQUFOLENBQWM2TyxJQUFkLENBQWQ7O0FBQ0EsTUFBSSxDQUFDN08sT0FBRCxJQUFZLE9BQU82TyxJQUFQLEtBQWdCLFFBQWhDLEVBQTBDO0FBQ3hDLFdBQU9sbkIsTUFBUDtBQUNEOztBQUVELE1BQUlpbEQsS0FBSyxHQUFHbGxDLElBQUksQ0FBQ2tsQyxLQUFqQjs7QUFDQSxNQUFJQSxLQUFLLElBQUksT0FBT0EsS0FBUCxLQUFpQixVQUE5QixFQUEwQztBQUN4Q0EsU0FBSyxHQUFHdHNFLE1BQU0sQ0FBQys0QixNQUFmO0FBQ0Q7O0FBRUQsTUFBSXJGLElBQUksR0FBR2dNLE9BQU8sR0FBRzZPLElBQUgsR0FBVTFxQyxLQUFLLENBQUMwcUMsSUFBRCxFQUFPbkgsSUFBUCxDQUFqQztBQUNBLE1BQUl1TyxHQUFHLEdBQUdqaUIsSUFBSSxDQUFDOXlCLE1BQWY7QUFDQSxNQUFJMnJFLElBQUksR0FBR2xsRCxNQUFYOztBQUVBLE1BQUksQ0FBQzZWLE9BQUQsSUFBWXhKLElBQUksQ0FBQzl5QixNQUFMLEtBQWdCLENBQWhDLEVBQW1DO0FBQ2pDOE4sVUFBTSxDQUFDMlksTUFBRCxFQUFTcU0sSUFBSSxDQUFDLENBQUQsQ0FBYixFQUFrQnZ6QixLQUFsQixFQUF5Qm1zRSxLQUF6QixDQUFOO0FBQ0EsV0FBT2psRCxNQUFQO0FBQ0Q7O0FBRUQsT0FBSyxJQUFJN0wsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR202QixHQUFwQixFQUF5Qm42QixDQUFDLEVBQTFCLEVBQThCO0FBQzVCLFFBQUl5YyxJQUFJLEdBQUd2RSxJQUFJLENBQUNsWSxDQUFELENBQWY7O0FBRUEsUUFBSSxDQUFDNndELFVBQVUsQ0FBQ2hsRCxNQUFNLENBQUM0USxJQUFELENBQVAsQ0FBZixFQUErQjtBQUM3QjVRLFlBQU0sQ0FBQzRRLElBQUQsQ0FBTixHQUFlLEVBQWY7QUFDRDs7QUFFRCxRQUFJemMsQ0FBQyxLQUFLbTZCLEdBQUcsR0FBRyxDQUFoQixFQUFtQjtBQUNqQmpuQyxZQUFNLENBQUMyWSxNQUFELEVBQVM0USxJQUFULEVBQWU5M0IsS0FBZixFQUFzQm1zRSxLQUF0QixDQUFOO0FBQ0E7QUFDRDs7QUFFRGpsRCxVQUFNLEdBQUdBLE1BQU0sQ0FBQzRRLElBQUQsQ0FBZjtBQUNEOztBQUVELFNBQU9zMEMsSUFBUDtBQUNEOztBQUVELFNBQVM3OUQsTUFBVCxDQUFnQjJZLE1BQWhCLEVBQXdCa25CLElBQXhCLEVBQThCcHVDLEtBQTlCLEVBQXFDbXNFLEtBQXJDLEVBQTRDO0FBQzFDLE1BQUlBLEtBQUssSUFBSUosZUFBZSxDQUFDN2tELE1BQU0sQ0FBQ2tuQixJQUFELENBQVAsQ0FBeEIsSUFBMEMyOUIsZUFBZSxDQUFDL3JFLEtBQUQsQ0FBN0QsRUFBc0U7QUFDcEVrbkIsVUFBTSxDQUFDa25CLElBQUQsQ0FBTixHQUFlKzlCLEtBQUssQ0FBQyxFQUFELEVBQUtqbEQsTUFBTSxDQUFDa25CLElBQUQsQ0FBWCxFQUFtQnB1QyxLQUFuQixDQUFwQjtBQUNELEdBRkQsTUFFTztBQUNMa25CLFVBQU0sQ0FBQ2tuQixJQUFELENBQU4sR0FBZXB1QyxLQUFmO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTMEQsS0FBVCxDQUFlMHFDLElBQWYsRUFBcUJyUixPQUFyQixFQUE4QjtBQUM1QixNQUFJL2UsRUFBRSxHQUFHcXVELFNBQVMsQ0FBQ2orQixJQUFELEVBQU9yUixPQUFQLENBQWxCOztBQUNBLE1BQUlrdkMsS0FBSyxDQUFDSyxJQUFOLENBQVd0dUQsRUFBWCxDQUFKLEVBQW9CO0FBQUUsV0FBT2l1RCxLQUFLLENBQUNLLElBQU4sQ0FBV3R1RCxFQUFYLENBQVA7QUFBd0I7O0FBRTlDLE1BQUl4RyxJQUFJLEdBQUl1bEIsT0FBTyxJQUFJQSxPQUFPLENBQUN3dkMsU0FBcEIsR0FBaUN4dkMsT0FBTyxDQUFDd3ZDLFNBQXpDLEdBQXFELEdBQWhFO0FBQ0EsTUFBSWg1QyxJQUFJLEdBQUcsRUFBWDtBQUNBLE1BQUkwTCxHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJbEMsT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ3I1QixLQUFmLEtBQXlCLFVBQXhDLEVBQW9EO0FBQ2xENnZCLFFBQUksR0FBR3dKLE9BQU8sQ0FBQ3I1QixLQUFSLENBQWMwcUMsSUFBZCxDQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0w3YSxRQUFJLEdBQUc2YSxJQUFJLENBQUMxcUMsS0FBTCxDQUFXOFQsSUFBWCxDQUFQO0FBQ0Q7O0FBRUQsT0FBSyxJQUFJNkQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2tZLElBQUksQ0FBQzl5QixNQUF6QixFQUFpQzRhLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsUUFBSXljLElBQUksR0FBR3ZFLElBQUksQ0FBQ2xZLENBQUQsQ0FBZjs7QUFDQSxXQUFPeWMsSUFBSSxJQUFJQSxJQUFJLENBQUMrTSxLQUFMLENBQVcsQ0FBQyxDQUFaLE1BQW1CLElBQTNCLElBQW1DdFIsSUFBSSxDQUFDbFksQ0FBQyxHQUFHLENBQUwsQ0FBOUMsRUFBdUQ7QUFDckR5YyxVQUFJLEdBQUdBLElBQUksQ0FBQytNLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLElBQW9CcnRCLElBQXBCLEdBQTJCK2IsSUFBSSxDQUFDLEVBQUVsWSxDQUFILENBQXRDO0FBQ0Q7O0FBQ0Q0akIsT0FBRyxDQUFDbnJCLElBQUosQ0FBU2drQixJQUFUO0FBQ0Q7O0FBQ0RtMEMsT0FBSyxDQUFDSyxJQUFOLENBQVd0dUQsRUFBWCxJQUFpQmloQixHQUFqQjtBQUNBLFNBQU9BLEdBQVA7QUFDRDs7QUFFRCxTQUFTb3RDLFNBQVQsQ0FBbUJHLE9BQW5CLEVBQTRCenZDLE9BQTVCLEVBQXFDO0FBQ25DLE1BQUkvZSxFQUFFLEdBQUd3dUQsT0FBVDs7QUFDQSxNQUFJLE9BQU96dkMsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxXQUFPL2UsRUFBRSxHQUFHLEVBQVo7QUFDRDs7QUFDRCxNQUFJdVYsSUFBSSxHQUFHMXpCLE1BQU0sQ0FBQzB6QixJQUFQLENBQVl3SixPQUFaLENBQVg7O0FBQ0EsT0FBSyxJQUFJMWhCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdrWSxJQUFJLENBQUM5eUIsTUFBekIsRUFBaUM0YSxDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDLFFBQUk2RixHQUFHLEdBQUdxUyxJQUFJLENBQUNsWSxDQUFELENBQWQ7QUFDQTJDLE1BQUUsSUFBSSxNQUFNa0QsR0FBTixHQUFZLEdBQVosR0FBa0IxRixNQUFNLENBQUN1aEIsT0FBTyxDQUFDN2IsR0FBRCxDQUFSLENBQTlCO0FBQ0Q7O0FBQ0QsU0FBT2xELEVBQVA7QUFDRDs7QUFFRCxTQUFTa3VELFVBQVQsQ0FBb0JwbEMsR0FBcEIsRUFBeUI7QUFDdkIsVUFBUSxPQUFPQSxHQUFmO0FBQ0UsU0FBSyxNQUFMO0FBQ0UsYUFBTyxLQUFQOztBQUNGLFNBQUssUUFBTDtBQUNFLGFBQU8sSUFBUDs7QUFDRixTQUFLLFVBQUw7QUFDRSxhQUFPLElBQVA7O0FBQ0Y7QUFBUztBQUNQLGVBQU8sS0FBUDtBQUNEO0FBVEg7QUFXRDs7QUFFRG1sQyxLQUFLLENBQUNLLElBQU4sR0FBYSxFQUFiO0FBQ0EsSUFBSUcsUUFBUSxHQUFHUixLQUFmOztBQUVBLFNBQVNTLE1BQVQsQ0FBZ0JoaUQsSUFBaEIsRUFBc0I7QUFDcEIsU0FBT0EsSUFBSSxZQUFZeHFCLG1CQUFPLENBQUMsK0JBQUQsQ0FBUCxDQUF5Q3N3QixJQUFoRTtBQUNEOztBQUVELFNBQVNtOEMsUUFBVCxDQUFrQmppRCxJQUFsQixFQUF3QjtBQUN0QixTQUNFQSxJQUFJLFlBQ0p4cUIsbUJBQU8sQ0FBQyx5Q0FBRCxDQUFQLENBQW1EMHNFLFVBRnJEO0FBSUQ7O0FBRUQsU0FBU0MsYUFBVCxDQUF1Qm5pRCxJQUF2QixFQUE2QjtBQUMzQixTQUFPQSxJQUFJLFlBQVl4cUIsbUJBQU8sQ0FBQyxrQ0FBRCxDQUFQLENBQTRDaXFFLFdBQW5FO0FBQ0Q7O0FBRUQsU0FBU3dCLFdBQVQsQ0FBcUJ2VixVQUFyQixFQUFpQ21FLFNBQWpDLEVBQTRDcVIsT0FBNUMsRUFBcUQ7QUFDbkQsTUFBS0EsT0FBTyxLQUFLLEtBQUssQ0FBdEIsRUFBMEJBLE9BQU8sR0FBRyxDQUFDLENBQVg7O0FBRTFCLE1BQUksQ0FBQ3hWLFVBQUwsRUFBaUI7QUFDZjtBQUNEOztBQUVELE1BQUlBLFVBQVUsQ0FBQ3lTLElBQVgsSUFBbUIsT0FBT3pTLFVBQVUsQ0FBQ3lTLElBQVgsQ0FBZ0I4QyxXQUF2QixLQUF1QyxVQUE5RCxFQUEwRTtBQUN4RSxXQUFPdlYsVUFBVSxDQUFDeVMsSUFBWCxDQUFnQjhDLFdBQWhCLENBQTRCdlYsVUFBNUIsRUFBd0NtRSxTQUF4QyxFQUFtRHFSLE9BQW5ELENBQVA7QUFDRDs7QUFFRCxNQUFJclIsU0FBUyxDQUFDc08sSUFBVixDQUFlUCxZQUFuQixFQUFpQztBQUMvQjtBQUNEOztBQUVELE1BQUl3RSxVQUFVLEdBQUcxVyxVQUFVLENBQUMzckMsVUFBNUI7QUFDQSxNQUFJeUYsU0FBUyxHQUFHcXFDLFNBQVMsQ0FBQzl2QyxVQUExQjs7QUFFQSxNQUFJa2lELFFBQVEsQ0FBQ0csVUFBRCxDQUFaLEVBQTBCO0FBQ3hCLFFBQUk1OEMsU0FBUyxDQUFDa0MsTUFBVixLQUFxQjA2QyxVQUF6QixFQUFxQztBQUNuQyxVQUFJdjRELEtBQUssR0FBR3U0RCxVQUFVLENBQUNDLGFBQVgsQ0FBeUI3OEMsU0FBekIsQ0FBWjs7QUFDQSxVQUFJM2IsS0FBSyxLQUFLLENBQUMsQ0FBZixFQUFrQjtBQUNoQnU0RCxrQkFBVSxDQUFDelcsV0FBWCxDQUF1Qm5tQyxTQUF2QjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSTA3QyxPQUFPLEtBQUssQ0FBQyxDQUFqQixFQUFvQjtBQUNsQmtCLGdCQUFVLENBQUNuQixXQUFYLENBQXVCejdDLFNBQXZCLEVBQWtDMDdDLE9BQWxDO0FBQ0QsS0FGRCxNQUVPO0FBQ0xrQixnQkFBVSxDQUFDNzZDLFFBQVgsQ0FBb0IvQixTQUFwQjtBQUNEO0FBQ0YsR0FaRCxNQVlPLElBQUkyOEMsYUFBYSxDQUFDQyxVQUFELENBQWpCLEVBQStCO0FBQ3BDLFFBQUl2UyxTQUFTLENBQUM1ekIsUUFBVixLQUF1QixDQUEzQixFQUE4QjtBQUM1Qm1tQyxnQkFBVSxDQUFDejZDLFFBQVgsQ0FBb0JuQyxTQUFwQixFQUErQjA3QyxPQUEvQjtBQUNELEtBRkQsTUFFTztBQUNMa0IsZ0JBQVUsQ0FBQ252RCxPQUFYLEdBQXFCdVMsU0FBckI7QUFDRDtBQUNGLEdBTk0sTUFNQSxJQUFJNDhDLFVBQVUsSUFBSUEsVUFBVSxDQUFDRSxvQkFBN0IsRUFBbUQ7QUFDeERGLGNBQVUsQ0FBQ0Usb0JBQVgsQ0FDRXpTLFNBQVMsQ0FBQ2tNLFdBQVYsQ0FBc0JqcUQsV0FBdEIsQ0FBa0NyWCxJQURwQyxFQUVFK3FCLFNBRkY7QUFJRDtBQUNGOztBQUVELFNBQVNtbUMsV0FBVCxDQUFxQkQsVUFBckIsRUFBaUNtRSxTQUFqQyxFQUE0QztBQUMxQyxNQUFJLENBQUNuRSxVQUFMLEVBQWlCO0FBQ2Y7QUFDRDs7QUFFRCxNQUFJQSxVQUFVLENBQUN5UyxJQUFYLElBQW1CLE9BQU96UyxVQUFVLENBQUN5UyxJQUFYLENBQWdCeFMsV0FBdkIsS0FBdUMsVUFBOUQsRUFBMEU7QUFDeEUsV0FBT0QsVUFBVSxDQUFDeVMsSUFBWCxDQUFnQnhTLFdBQWhCLENBQTRCRCxVQUE1QixFQUF3Q21FLFNBQXhDLENBQVA7QUFDRDs7QUFFRCxNQUFJQSxTQUFTLENBQUNzTyxJQUFWLENBQWVQLFlBQW5CLEVBQWlDO0FBQy9CO0FBQ0Q7O0FBRUQsTUFBSXdFLFVBQVUsR0FBRzFXLFVBQVUsQ0FBQzNyQyxVQUE1QjtBQUNBLE1BQUl5RixTQUFTLEdBQUdxcUMsU0FBUyxDQUFDOXZDLFVBQTFCOztBQUVBLE1BQUlraUQsUUFBUSxDQUFDRyxVQUFELENBQVosRUFBMEI7QUFDeEJBLGNBQVUsQ0FBQ3pXLFdBQVgsQ0FBdUJubUMsU0FBdkI7QUFDRCxHQUZELE1BRU8sSUFBSTI4QyxhQUFhLENBQUNDLFVBQUQsQ0FBakIsRUFBK0I7QUFDcEMsUUFBSUEsVUFBVSxDQUFDbnZELE9BQVgsS0FBdUJ1UyxTQUEzQixFQUFzQztBQUNwQzQ4QyxnQkFBVSxDQUFDbnZELE9BQVgsR0FBcUIsSUFBckI7QUFDRDs7QUFFRCxRQUFJNDhDLFNBQVMsQ0FBQzV6QixRQUFWLEtBQXVCLENBQTNCLEVBQThCO0FBQzVCbW1DLGdCQUFVLENBQUMvNUMsV0FBWCxDQUF1QjdDLFNBQXZCO0FBQ0Q7QUFDRixHQVJNLE1BUUEsSUFBSXc4QyxNQUFNLENBQUNJLFVBQUQsQ0FBVixFQUF3QjtBQUM3QkEsY0FBVSxDQUFDLzVDLFdBQVgsQ0FBdUI3QyxTQUF2QjtBQUNEO0FBQ0Y7O0FBRUQsSUFBSSs4QyxjQUFjLEdBQUdwdEUsTUFBTSxDQUFDdVMsTUFBUCxDQUFjLENBQ2pDLE9BRGlDLEVBRWpDLE1BRmlDLEVBR2pDLFNBSGlDLEVBSWpDLGdCQUppQyxDQUFkLENBQXJCOztBQU9BLElBQUk4NkQsUUFBUSxHQUFHLFNBQVNBLFFBQVQsR0FBb0I7QUFDakMsT0FBS3ZtQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsT0FBS3dtQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsT0FBSy9XLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxPQUFLcUUsVUFBTCxHQUFrQixFQUFsQjtBQUNBLE9BQUsyUyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsT0FBSzNULFdBQUwsR0FBbUIsSUFBbkI7QUFFQSxPQUFLNFQsY0FBTCxHQUFzQixJQUF0QjtBQUNBLE9BQUs1RyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsT0FBSzZHLEtBQUwsR0FBYSxJQUFiO0FBRUE7Ozs7QUFHQSxPQUFLeFMsWUFBTCxHQUFvQixLQUFLQyxlQUFMLEdBQXVCLFlBQVk7QUFBRSxXQUFPLEtBQVA7QUFBZSxHQUF4RTtBQUNELENBaEJEOztBQWtCQSxJQUFJd1Msb0JBQW9CLEdBQUc7QUFBRXZYLFNBQU8sRUFBRTtBQUFFbjBELGdCQUFZLEVBQUU7QUFBaEIsR0FBWDtBQUFrQzI0RCxZQUFVLEVBQUU7QUFBRTM0RCxnQkFBWSxFQUFFO0FBQWhCLEdBQTlDO0FBQXFFMnJFLFdBQVMsRUFBRTtBQUFFM3JFLGdCQUFZLEVBQUU7QUFBaEIsR0FBaEY7QUFBdUc0b0IsWUFBVSxFQUFFO0FBQUU1b0IsZ0JBQVksRUFBRTtBQUFoQixHQUFuSDtBQUEwSWduRSxNQUFJLEVBQUU7QUFBRWhuRSxnQkFBWSxFQUFFO0FBQWhCLEdBQWhKO0FBQXVLNHJFLGVBQWEsRUFBRTtBQUFFNXJFLGdCQUFZLEVBQUU7QUFBaEI7QUFBdEwsQ0FBM0I7QUFFQTs7QUFDQXFyRSxRQUFRLENBQUN4ckUsU0FBVCxDQUFtQnNCLFFBQW5CLEdBQThCLFNBQVNBLFFBQVQsR0FBcUI7QUFDakQsU0FBUyxLQUFLd1osV0FBTCxDQUFpQnJYLElBQWxCLEdBQTBCLEdBQTFCLEdBQWlDLEtBQUs2d0QsT0FBdEMsR0FBaUQsR0FBekQ7QUFDRCxDQUZEOztBQUlBdVgsb0JBQW9CLENBQUN2WCxPQUFyQixDQUE2QnQ1QyxHQUE3QixHQUFtQyxVQUFVdlgsSUFBVixFQUFnQjtBQUNqRCxPQUFLZ29FLFFBQUwsR0FBZ0J6RSxvQkFBb0IsQ0FBQ3ZqRSxJQUFELENBQXBDO0FBQ0QsQ0FGRDs7QUFJQW9vRSxvQkFBb0IsQ0FBQ3ZYLE9BQXJCLENBQTZCcjBELEdBQTdCLEdBQW1DLFlBQVk7QUFDN0MsU0FBTyxLQUFLd3JFLFFBQVo7QUFDRCxDQUZEOztBQUlBSSxvQkFBb0IsQ0FBQy9TLFVBQXJCLENBQWdDNzRELEdBQWhDLEdBQXNDLFlBQVk7QUFDaEQsU0FBTyxLQUFLODRELFVBQUwsQ0FBZ0JoNkQsTUFBaEIsR0FBeUIsS0FBS2c2RCxVQUFMLENBQWdCLENBQWhCLENBQXpCLEdBQThDLElBQXJEO0FBQ0QsQ0FGRDs7QUFJQThTLG9CQUFvQixDQUFDQyxTQUFyQixDQUErQjdyRSxHQUEvQixHQUFxQyxZQUFZO0FBQy9DLFNBQU8sS0FBSzg0RCxVQUFMLENBQWdCaDZELE1BQWhCLEdBQ0gsS0FBS2c2RCxVQUFMLENBQWdCLEtBQUtBLFVBQUwsQ0FBZ0JoNkQsTUFBaEIsR0FBeUIsQ0FBekMsQ0FERyxHQUVILElBRko7QUFHRCxDQUpEOztBQU1BOHNFLG9CQUFvQixDQUFDOWlELFVBQXJCLENBQWdDOW9CLEdBQWhDLEdBQXNDLFlBQVk7QUFDaEQsU0FBTyxLQUFLOGtFLFdBQVo7QUFDRCxDQUZEOztBQUlBOEcsb0JBQW9CLENBQUM5aUQsVUFBckIsQ0FBZ0MvTixHQUFoQyxHQUFzQyxVQUFVZ08sSUFBVixFQUFnQjtBQUNwRCxNQUFJLEtBQUsrN0MsV0FBVCxFQUFzQjtBQUNwQixVQUFNLElBQUlqbEUsS0FBSixDQUFVLDZCQUFWLENBQU47QUFDRDs7QUFFRCxPQUFLaWxFLFdBQUwsR0FBbUIvN0MsSUFBbkI7QUFDRCxDQU5EOztBQVFBNmlELG9CQUFvQixDQUFDMUUsSUFBckIsQ0FBMEJsbkUsR0FBMUIsR0FBZ0MsWUFBWTtBQUMxQyxNQUFJLEtBQUsyckUsS0FBVCxFQUFnQjtBQUNkLFdBQU8sS0FBS0EsS0FBWjtBQUNEOztBQUVELFNBQVEsS0FBS0EsS0FBTCxHQUFhckUsV0FBVyxDQUFDLEtBQUtqVCxPQUFOLENBQWhDO0FBQ0QsQ0FORDtBQVFBOzs7QUFDQXVYLG9CQUFvQixDQUFDRSxhQUFyQixDQUFtQzlyRSxHQUFuQyxHQUF5QyxZQUFZO0FBQ25ELE1BQUksS0FBSzByRSxjQUFULEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0EsY0FBWjtBQUNEOztBQUVELE1BQUloMkIsRUFBRSxHQUFHLElBQVQ7O0FBQ0EsU0FBTyxDQUFDQSxFQUFFLEdBQUdBLEVBQUUsQ0FBQytlLFVBQVQsRUFBcUJ6dkIsUUFBckIsS0FBa0MsQ0FBekMsRUFBNEMsQ0FDMUM7QUFDRDs7QUFFRCxTQUFRLEtBQUswbUMsY0FBTCxHQUFzQmgyQixFQUE5QjtBQUNELENBWEQ7O0FBYUE2MUIsUUFBUSxDQUFDeHJFLFNBQVQsQ0FBbUJ5NEIsWUFBbkIsR0FBa0MsU0FBU0EsWUFBVCxDQUF1QmpaLEdBQXZCLEVBQTRCO0FBQzVELFNBQU8sS0FBS3VKLFVBQUwsQ0FBZ0J2SixHQUFoQixDQUFQO0FBQ0QsQ0FGRDtBQUlBOzs7QUFDQWdzRCxRQUFRLENBQUN4ckUsU0FBVCxDQUFtQjgyQixZQUFuQixHQUFrQyxTQUFTQSxZQUFULENBQXVCdFgsR0FBdkIsRUFBNEJsaEIsS0FBNUIsRUFBbUM7QUFDbkUsTUFBSW85QyxHQUFHLEdBQUdsOUMsbUJBQU8sQ0FBQywyQkFBRCxDQUFqQjs7QUFDRSxNQUFJZ3ZDLFNBQVMsR0FBR2tPLEdBQUcsQ0FBQ2xPLFNBQXBCO0FBQ0EsTUFBSXZyQixLQUFLLEdBQUd5NUIsR0FBRyxDQUFDejVCLEtBQWhCO0FBQ0YsTUFBSStwRCxFQUFFLEdBQUcsS0FBS2pqRCxVQUFkOztBQUVBLE1BQUk7QUFDRixRQUFJd2lELGNBQWMsQ0FBQzVwRSxPQUFmLENBQXVCNmQsR0FBdkIsTUFBZ0MsQ0FBQyxDQUFyQyxFQUF3QztBQUN0Q3dzRCxRQUFFLENBQUN4c0QsR0FBRCxDQUFGLEdBQVVsaEIsS0FBVjtBQUNELEtBRkQsTUFFTztBQUNMO0FBQ0E7QUFDQSxVQUNFRSxtQkFBTyxDQUFDLDhCQUFELENBQVAsQ0FBd0N3YixTQUF4QyxDQUFrRGd5RCxFQUFFLENBQUN4c0QsR0FBRCxDQUFwRCxLQUNBbGhCLEtBQUssS0FBSyxFQUZaLEVBR0U7QUFDQUEsYUFBSyxHQUFHLElBQVI7QUFDRDs7QUFFRCxVQUFJa3ZDLFNBQVMsSUFBSWh1QixHQUFHLENBQUNzWSxVQUFKLENBQWUsVUFBZixDQUFqQixFQUE2QztBQUMzQ2l6QyxnQkFBUSxDQUFDaUIsRUFBRCxFQUFLeHNELEdBQUcsQ0FBQzVlLE1BQUosQ0FBVyxDQUFYLENBQUwsRUFBb0J0QyxLQUFwQixDQUFSO0FBQ0QsT0FGRCxNQUVPLElBQUkyakIsS0FBSyxJQUFJekMsR0FBRyxDQUFDc1ksVUFBSixDQUFlLE1BQWYsQ0FBYixFQUFxQztBQUMxQ2l6QyxnQkFBUSxDQUFDaUIsRUFBRCxFQUFLeHNELEdBQUcsQ0FBQzVlLE1BQUosQ0FBVyxDQUFYLENBQUwsRUFBb0J0QyxLQUFwQixDQUFSO0FBQ0QsT0FGTSxNQUVBLElBQUlraEIsR0FBRyxDQUFDeXNELFFBQUosQ0FBYSxTQUFiLENBQUosRUFBNkI7QUFDbENsQixnQkFBUSxDQUNOaUIsRUFETSxFQUVOeHNELEdBQUcsQ0FBQzJqQixLQUFKLENBQVUsQ0FBVixFQUFhLENBQUMsQ0FBZCxDQUZNLEVBR04za0MsbUJBQU8sQ0FBQyxzQkFBRCxDQUFQLENBQWdDMHRFLFNBQWhDLENBQTBDQyxvQkFBMUMsQ0FDRTd0RSxLQURGLENBSE0sQ0FBUjtBQU9ELE9BUk0sTUFRQTtBQUNMeXNFLGdCQUFRLENBQUNpQixFQUFELEVBQUt4c0QsR0FBTCxFQUFVbGhCLEtBQVYsQ0FBUjtBQUNEO0FBQ0Y7QUFDRixHQTdCRCxDQTZCRSxPQUFPMitCLENBQVAsRUFBVSxDQUNWO0FBQ0Q7QUFDRixDQXRDRDtBQXdDQTs7O0FBQ0F1dUMsUUFBUSxDQUFDeHJFLFNBQVQsQ0FBbUIrOEQsUUFBbkIsR0FBOEIsU0FBU0EsUUFBVCxDQUFtQjVvRCxRQUFuQixFQUE2QjdWLEtBQTdCLEVBQW9DO0FBQ2hFLE1BQUksQ0FBQyxDQUFDQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ3lELElBQU4sRUFBVCxFQUF1QmhELE1BQTVCLEVBQW9DO0FBQ2xDO0FBQ0Q7O0FBRUQsTUFBSW9WLFFBQVEsQ0FBQzgzRCxRQUFULENBQWtCLE9BQWxCLENBQUosRUFBZ0M7QUFDOUI7QUFDQTkzRCxZQUFRLElBQUksTUFBWjtBQUNEOztBQUNELE9BQUs0VSxVQUFMLENBQWdCbEYsS0FBaEIsQ0FBc0IxUCxRQUF0QixJQUFrQzdWLEtBQWxDO0FBQ0QsQ0FWRDtBQVlBOzs7QUFDQWt0RSxRQUFRLENBQUN4ckUsU0FBVCxDQUFtQm9zRSxPQUFuQixHQUE2QixTQUFTQSxPQUFULENBQWtCMS9ELElBQWxCLEVBQXdCO0FBQ25ELE1BQUksS0FBS3U0QixRQUFMLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCLFNBQUt5dkIsVUFBTCxDQUFnQjBYLE9BQWhCLENBQXdCMS9ELElBQXhCO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsU0FBS29xQixZQUFMLENBQWtCLE1BQWxCLEVBQTBCcHFCLElBQTFCO0FBQ0Q7QUFDRixDQU5EO0FBUUE7OztBQUNBOCtELFFBQVEsQ0FBQ3hyRSxTQUFULENBQW1CNnRDLGdCQUFuQixHQUFzQyxTQUFTQSxnQkFBVCxDQUEyQnhYLEtBQTNCLEVBQWtDTSxPQUFsQyxFQUEyQztBQUMvRSxPQUFLNU4sVUFBTCxDQUFnQnEzQixFQUFoQixDQUFtQi9wQixLQUFuQixFQUEwQk0sT0FBMUI7QUFDRCxDQUZEO0FBSUE7OztBQUNBNjBDLFFBQVEsQ0FBQ3hyRSxTQUFULENBQW1CdzhELG1CQUFuQixHQUF5QyxTQUFTQSxtQkFBVCxDQUE4Qm5tQyxLQUE5QixFQUFxQztBQUM1RSxPQUFLdE4sVUFBTCxDQUFnQms2QyxHQUFoQixDQUFvQjVzQyxLQUFwQjtBQUNELENBRkQ7O0FBSUFtMUMsUUFBUSxDQUFDeHJFLFNBQVQsQ0FBbUJrMkQsWUFBbkIsR0FBa0MsU0FBU0EsWUFBVCxDQUF1QjJDLFNBQXZCLEVBQWtDd1QsYUFBbEMsRUFBaUQ7QUFDakYsTUFBSSxDQUFDeFQsU0FBTCxFQUFnQjtBQUNkLFVBQU0sSUFBSS80RCxLQUFKLENBQVUscUJBQVYsQ0FBTjtBQUNELEdBSGdGLENBS2pGO0FBQ0E7OztBQUNBLE1BQUksQ0FBQ3VzRSxhQUFMLEVBQW9CO0FBQ2xCLFdBQU8sS0FBS2xXLFdBQUwsQ0FBaUIwQyxTQUFqQixDQUFQO0FBQ0Q7O0FBRUQsTUFBSXdULGFBQWEsQ0FBQzNYLFVBQWQsS0FBNkIsSUFBakMsRUFBdUM7QUFDckMsVUFBTSxJQUFJNTBELEtBQUosQ0FDSix3RUFESSxDQUFOO0FBR0Q7O0FBRUQsTUFBSSs0RCxTQUFTLENBQUNuRSxVQUFWLElBQXdCbUUsU0FBUyxDQUFDbkUsVUFBVixLQUF5QixJQUFyRCxFQUEyRDtBQUN6RCxVQUFNLElBQUk1MEQsS0FBSixDQUNKLGdFQURJLENBQU47QUFHRDs7QUFFRCxNQUFJKzRELFNBQVMsQ0FBQ25FLFVBQVYsS0FBeUIsSUFBN0IsRUFBbUM7QUFFbkMsTUFBSTdoRCxLQUFLLEdBQUcsS0FBS2ttRCxVQUFMLENBQWdCcDNELE9BQWhCLENBQXdCMHFFLGFBQXhCLENBQVo7QUFFQXhULFdBQVMsQ0FBQ25FLFVBQVYsR0FBdUIsSUFBdkI7QUFDQW1FLFdBQVMsQ0FBQ2QsV0FBVixHQUF3QnNVLGFBQXhCO0FBQ0F4VCxXQUFTLENBQUM2UyxXQUFWLEdBQXdCLEtBQUszUyxVQUFMLENBQWdCbG1ELEtBQUssR0FBRyxDQUF4QixDQUF4QjtBQUVBdzVELGVBQWEsQ0FBQ1gsV0FBZCxHQUE0QjdTLFNBQTVCO0FBQ0EsT0FBS0UsVUFBTCxDQUFnQmh2QixNQUFoQixDQUF1QmwzQixLQUF2QixFQUE4QixDQUE5QixFQUFpQ2dtRCxTQUFqQztBQUVBb1IsYUFBVyxDQUFDLElBQUQsRUFBT3BSLFNBQVAsRUFBa0JobUQsS0FBbEIsQ0FBWDtBQUNELENBbkNEOztBQXFDQTI0RCxRQUFRLENBQUN4ckUsU0FBVCxDQUFtQm0yRCxXQUFuQixHQUFpQyxTQUFTQSxXQUFULENBQXNCMEMsU0FBdEIsRUFBaUM7QUFDaEUsTUFBSSxDQUFDQSxTQUFMLEVBQWdCO0FBQ2QsVUFBTSxJQUFJLzRELEtBQUosQ0FBVSxxQkFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSs0RCxTQUFTLENBQUNuRSxVQUFWLElBQXdCbUUsU0FBUyxDQUFDbkUsVUFBVixLQUF5QixJQUFyRCxFQUEyRDtBQUN6RCxVQUFNLElBQUk1MEQsS0FBSixDQUNKLGdFQURJLENBQU47QUFHRDs7QUFFRCxNQUFJKzRELFNBQVMsQ0FBQ25FLFVBQVYsS0FBeUIsSUFBN0IsRUFBbUM7QUFFbkNtRSxXQUFTLENBQUNuRSxVQUFWLEdBQXVCLElBQXZCOztBQUVBLE1BQUksS0FBS29YLFNBQVQsRUFBb0I7QUFDbEJqVCxhQUFTLENBQUM2UyxXQUFWLEdBQXdCLEtBQUtJLFNBQTdCO0FBQ0EsU0FBS0EsU0FBTCxDQUFlL1QsV0FBZixHQUE2QmMsU0FBN0I7QUFDRDs7QUFFRCxPQUFLRSxVQUFMLENBQWdCM21ELElBQWhCLENBQXFCeW1ELFNBQXJCO0FBRUFvUixhQUFXLENBQUMsSUFBRCxFQUFPcFIsU0FBUCxFQUFrQixLQUFLRSxVQUFMLENBQWdCaDZELE1BQWhCLEdBQXlCLENBQTNDLENBQVg7QUFDRCxDQXZCRDs7QUF5QkF5c0UsUUFBUSxDQUFDeHJFLFNBQVQsQ0FBbUIyMEQsV0FBbkIsR0FBaUMsU0FBUzJYLGFBQVQsQ0FBd0J6VCxTQUF4QixFQUFtQztBQUNsRSxNQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDZCxVQUFNLElBQUkvNEQsS0FBSixDQUFVLHFCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJLENBQUMrNEQsU0FBUyxDQUFDbkUsVUFBZixFQUEyQjtBQUN6QixVQUFNLElBQUk1MEQsS0FBSixDQUFVLCtDQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJKzRELFNBQVMsQ0FBQ25FLFVBQVYsS0FBeUIsSUFBN0IsRUFBbUM7QUFDakMsVUFBTSxJQUFJNTBELEtBQUosQ0FBVSx3REFBVixDQUFOO0FBQ0Q7O0FBRUQrNEQsV0FBUyxDQUFDbkUsVUFBVixHQUF1QixJQUF2Qjs7QUFFQSxNQUFJbUUsU0FBUyxDQUFDNlMsV0FBZCxFQUEyQjtBQUN6QjdTLGFBQVMsQ0FBQzZTLFdBQVYsQ0FBc0IzVCxXQUF0QixHQUFvQ2MsU0FBUyxDQUFDZCxXQUE5QztBQUNEOztBQUVELE1BQUljLFNBQVMsQ0FBQ2QsV0FBZCxFQUEyQjtBQUN6QmMsYUFBUyxDQUFDZCxXQUFWLENBQXNCMlQsV0FBdEIsR0FBb0M3UyxTQUFTLENBQUM2UyxXQUE5QztBQUNELEdBckJpRSxDQXVCbEU7QUFDQTtBQUNBOzs7QUFDQTdTLFdBQVMsQ0FBQzZTLFdBQVYsR0FBd0IsSUFBeEI7QUFDQTdTLFdBQVMsQ0FBQ2QsV0FBVixHQUF3QixJQUF4QjtBQUVBLE9BQUtnQixVQUFMLEdBQWtCLEtBQUtBLFVBQUwsQ0FBZ0JsaEMsTUFBaEIsQ0FBdUIsVUFBVXViLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUt5bEIsU0FBaEI7QUFBNEIsR0FBckUsQ0FBbEI7QUFFQWxFLGFBQVcsQ0FBQyxJQUFELEVBQU9rRSxTQUFQLENBQVg7QUFDRCxDQWhDRDs7QUFrQ0ExNkQsTUFBTSxDQUFDKzBDLGdCQUFQLENBQXlCczRCLFFBQVEsQ0FBQ3hyRSxTQUFsQyxFQUE2QzZyRSxvQkFBN0M7QUFFQSxJQUFJVSxlQUFlLEdBQUcscUJBQXRCOztBQUVBLElBQUlDLFdBQVcsR0FBRyxhQUFjLFVBQVVoQixRQUFWLEVBQW9CO0FBQ2xELFdBQVNnQixXQUFULENBQXFCbFksT0FBckIsRUFBOEI7QUFDNUJrWCxZQUFRLENBQUNoaUQsSUFBVCxDQUFjLElBQWQ7QUFFQSxTQUFLeWIsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtxdkIsT0FBTCxHQUFlQSxPQUFmO0FBRUEsUUFBSW1ZLFNBQVMsR0FBR25GLFlBQVksQ0FBQ2hULE9BQUQsQ0FBNUI7QUFDQSxTQUFLeVEsV0FBTCxHQUFtQixJQUFJMEgsU0FBSixFQUFuQjtBQUNBLFNBQUsxSCxXQUFMLENBQWlCd0gsZUFBakIsSUFBb0MsSUFBcEM7QUFDRDs7QUFFRCxNQUFLZixRQUFMLEVBQWdCZ0IsV0FBVyxDQUFDOXdELFNBQVosR0FBd0I4dkQsUUFBeEI7QUFDaEJnQixhQUFXLENBQUN4c0UsU0FBWixHQUF3QjdCLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWU2aEMsUUFBUSxJQUFJQSxRQUFRLENBQUN4ckUsU0FBcEMsQ0FBeEI7QUFDQXdzRSxhQUFXLENBQUN4c0UsU0FBWixDQUFzQjhhLFdBQXRCLEdBQW9DMHhELFdBQXBDOztBQUVBQSxhQUFXLENBQUN4c0UsU0FBWixDQUFzQm0yRCxXQUF0QixHQUFvQyxTQUFTQSxXQUFULENBQXNCMEMsU0FBdEIsRUFBaUM7QUFDbkUyUyxZQUFRLENBQUN4ckUsU0FBVCxDQUFtQm0yRCxXQUFuQixDQUErQjNzQyxJQUEvQixDQUFvQyxJQUFwQyxFQUEwQ3F2QyxTQUExQzs7QUFFQSxRQUFJQSxTQUFTLENBQUM1ekIsUUFBVixLQUF1QixDQUEzQixFQUE4QjtBQUM1QixXQUFLbW5DLE9BQUwsQ0FBYXZULFNBQVMsQ0FBQ25zRCxJQUF2QjtBQUNEO0FBQ0YsR0FORDs7QUFRQTgvRCxhQUFXLENBQUN4c0UsU0FBWixDQUFzQmsyRCxZQUF0QixHQUFxQyxTQUFTQSxZQUFULENBQXVCMkMsU0FBdkIsRUFBa0N3VCxhQUFsQyxFQUFpRDtBQUNwRmIsWUFBUSxDQUFDeHJFLFNBQVQsQ0FBbUJrMkQsWUFBbkIsQ0FBZ0Mxc0MsSUFBaEMsQ0FBcUMsSUFBckMsRUFBMkNxdkMsU0FBM0MsRUFBc0R3VCxhQUF0RDs7QUFFQSxRQUFJeFQsU0FBUyxDQUFDNXpCLFFBQVYsS0FBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsV0FBS21uQyxPQUFMLENBQWF2VCxTQUFTLENBQUNuc0QsSUFBdkI7QUFDRDtBQUNGLEdBTkQ7O0FBUUE4L0QsYUFBVyxDQUFDeHNFLFNBQVosQ0FBc0IyMEQsV0FBdEIsR0FBb0MsU0FBU0EsV0FBVCxDQUFzQmtFLFNBQXRCLEVBQWlDO0FBQ25FMlMsWUFBUSxDQUFDeHJFLFNBQVQsQ0FBbUIyMEQsV0FBbkIsQ0FBK0JuckMsSUFBL0IsQ0FBb0MsSUFBcEMsRUFBMENxdkMsU0FBMUM7O0FBRUEsUUFBSUEsU0FBUyxDQUFDNXpCLFFBQVYsS0FBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsV0FBS21uQyxPQUFMLENBQWEsRUFBYjtBQUNEO0FBQ0YsR0FORDs7QUFRQSxTQUFPSSxXQUFQO0FBQ0QsQ0F6QytCLENBeUM5QmhCLFFBekM4QixDQUFoQzs7QUEyQ0EsSUFBSWtCLFdBQVcsR0FBRyxhQUFjLFVBQVVGLFdBQVYsRUFBdUI7QUFDckQsV0FBU0UsV0FBVCxDQUFxQmhnRSxJQUFyQixFQUEyQjtBQUN6QjgvRCxlQUFXLENBQUNoakQsSUFBWixDQUFpQixJQUFqQixFQUF1QixTQUF2QjtBQUVBLFNBQUt5YixRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS3Y0QixJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFRCxNQUFLOC9ELFdBQUwsRUFBbUJFLFdBQVcsQ0FBQ2h4RCxTQUFaLEdBQXdCOHdELFdBQXhCO0FBQ25CRSxhQUFXLENBQUMxc0UsU0FBWixHQUF3QjdCLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWU2aUMsV0FBVyxJQUFJQSxXQUFXLENBQUN4c0UsU0FBMUMsQ0FBeEI7QUFDQTBzRSxhQUFXLENBQUMxc0UsU0FBWixDQUFzQjhhLFdBQXRCLEdBQW9DNHhELFdBQXBDO0FBRUEsU0FBT0EsV0FBUDtBQUNELENBYitCLENBYTlCRixXQWI4QixDQUFoQzs7QUFlQSxJQUFJRyxRQUFRLEdBQUcsYUFBYyxVQUFVbkIsUUFBVixFQUFvQjtBQUMvQyxXQUFTbUIsUUFBVCxDQUFrQmpnRSxJQUFsQixFQUF3QjtBQUN0QjgrRCxZQUFRLENBQUNoaUQsSUFBVCxDQUFjLElBQWQ7QUFFQSxTQUFLeWIsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUt2NEIsSUFBTCxHQUFZQSxJQUFaO0FBRUEsU0FBS2svRCxLQUFMLEdBQWE7QUFDWGhGLGtCQUFZLEVBQUU7QUFESCxLQUFiO0FBR0Q7O0FBRUQsTUFBSzRFLFFBQUwsRUFBZ0JtQixRQUFRLENBQUNqeEQsU0FBVCxHQUFxQjh2RCxRQUFyQjtBQUNoQm1CLFVBQVEsQ0FBQzNzRSxTQUFULEdBQXFCN0IsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBZTZoQyxRQUFRLElBQUlBLFFBQVEsQ0FBQ3hyRSxTQUFwQyxDQUFyQjtBQUNBMnNFLFVBQVEsQ0FBQzNzRSxTQUFULENBQW1COGEsV0FBbkIsR0FBaUM2eEQsUUFBakM7O0FBRUFBLFVBQVEsQ0FBQzNzRSxTQUFULENBQW1Cb3NFLE9BQW5CLEdBQTZCLFNBQVNBLE9BQVQsQ0FBa0IxL0QsSUFBbEIsRUFBd0I7QUFDbkQsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS2dvRCxVQUFMLENBQWdCMFgsT0FBaEIsQ0FBd0IxL0QsSUFBeEI7QUFDRCxHQUhEOztBQUtBLFNBQU9pZ0UsUUFBUDtBQUNELENBdEI0QixDQXNCM0JuQixRQXRCMkIsQ0FBN0I7O0FBd0JBLElBQUlvQixZQUFZLEdBQUcsYUFBYyxVQUFVcEIsUUFBVixFQUFvQjtBQUNuRCxXQUFTb0IsWUFBVCxHQUF3QjtBQUN0QnBCLFlBQVEsQ0FBQ2hpRCxJQUFULENBQWMsSUFBZDtBQUVBLFNBQUt5YixRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBSzRuQyxlQUFMLEdBQXVCLElBQUlMLFdBQUosQ0FBZ0IsVUFBaEIsQ0FBdkIsQ0FKc0IsQ0FNdEI7O0FBQ0EsU0FBSy9XLGFBQUwsR0FBcUIsS0FBSzM2QyxXQUFMLENBQWlCMjZDLGFBQXRDO0FBQ0EsU0FBS2pKLGFBQUwsR0FBcUIsS0FBSzF4QyxXQUFMLENBQWlCMHhDLGFBQXRDO0FBQ0EsU0FBSzZJLGVBQUwsR0FBdUIsS0FBS3Y2QyxXQUFMLENBQWlCdTZDLGVBQXhDO0FBQ0EsU0FBS2phLGNBQUwsR0FBc0IsS0FBS3RnQyxXQUFMLENBQWlCc2dDLGNBQXZDO0FBQ0Q7O0FBRUQsTUFBS293QixRQUFMLEVBQWdCb0IsWUFBWSxDQUFDbHhELFNBQWIsR0FBeUI4dkQsUUFBekI7QUFDaEJvQixjQUFZLENBQUM1c0UsU0FBYixHQUF5QjdCLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWU2aEMsUUFBUSxJQUFJQSxRQUFRLENBQUN4ckUsU0FBcEMsQ0FBekI7QUFDQTRzRSxjQUFZLENBQUM1c0UsU0FBYixDQUF1QjhhLFdBQXZCLEdBQXFDOHhELFlBQXJDOztBQUVBQSxjQUFZLENBQUNuWCxhQUFiLEdBQTZCLFNBQVNBLGFBQVQsQ0FBd0Ivb0QsSUFBeEIsRUFBOEI7QUFDekQsV0FBTyxJQUFJZ2dFLFdBQUosQ0FBZ0JoZ0UsSUFBaEIsQ0FBUDtBQUNELEdBRkQ7O0FBSUFrZ0UsY0FBWSxDQUFDcGdCLGFBQWIsR0FBNkIsU0FBU0EsYUFBVCxDQUF3QjhILE9BQXhCLEVBQWlDO0FBQzVELFdBQU8sSUFBSWtZLFdBQUosQ0FBZ0JsWSxPQUFoQixDQUFQO0FBQ0QsR0FGRDs7QUFJQXNZLGNBQVksQ0FBQ3ZYLGVBQWIsR0FBK0IsU0FBU0EsZUFBVCxDQUEwQnlYLFNBQTFCLEVBQXFDeFksT0FBckMsRUFBOEM7QUFDM0UsV0FBTyxJQUFJa1ksV0FBSixDQUFnQk0sU0FBUyxHQUFHLEdBQVosR0FBa0J4WSxPQUFsQyxDQUFQO0FBQ0QsR0FGRDs7QUFJQXNZLGNBQVksQ0FBQ3h4QixjQUFiLEdBQThCLFNBQVNBLGNBQVQsQ0FBeUIxdUMsSUFBekIsRUFBK0I7QUFDM0QsV0FBTyxJQUFJaWdFLFFBQUosQ0FBYWpnRSxJQUFiLENBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9rZ0UsWUFBUDtBQUNELENBbkNnQyxDQW1DL0JwQixRQW5DK0IsQ0FBakM7O0FBcUNBLElBQUlsOEIsYUFBYSxHQUFHN0YsT0FBTyxDQUFDLFVBQUQsRUFBYSxJQUFiLENBQTNCOztBQUVBLElBQUlzakMsSUFBSjs7QUFFQSxTQUFTQyxNQUFULENBQWdCOTJDLEdBQWhCLEVBQXFCO0FBQ25CNjJDLE1BQUksR0FBRzcyQyxHQUFQO0FBQ0Q7O0FBRUQsSUFBSTZ3QyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQVNweEIsRUFBVCxFQUFhO0FBQ2xDLFNBQU80eEIsV0FBVyxDQUFDNXhCLEVBQUQsQ0FBWCxDQUFnQm94QixnQkFBdkI7QUFDRCxDQUZEOztBQUlBLElBQUlGLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNseEIsRUFBVCxFQUFhO0FBQzVCLFNBQU80eEIsV0FBVyxDQUFDNXhCLEVBQUQsQ0FBWCxDQUFnQmt4QixVQUF2QjtBQUNELENBRkQ7O0FBSUEsU0FBU2wzQixXQUFULEdBQXVCLENBQ3JCO0FBQ0Q7O0FBRUQsU0FBU0YsZUFBVCxDQUF5QmtHLEVBQXpCLEVBQTZCO0FBQzNCLFNBQU80eEIsV0FBVyxDQUFDNXhCLEVBQUQsQ0FBWCxDQUFnQm14QixZQUF2QjtBQUNEOztBQUVELFNBQVN0M0IsZ0JBQVQsQ0FBMEJtRyxFQUExQixFQUE4QjtBQUM1QixTQUFPLENBQUM2eEIsV0FBVyxDQUFDN3hCLEVBQUQsQ0FBbkI7QUFDRDs7QUFFRCxJQUFJczNCLFdBQVcsR0FBRzl2QyxjQUFPLENBQUNDLEdBQVIsQ0FBWTZ2QyxXQUFaLElBQTJCLFFBQTdDO0FBQ0EsSUFBSUMsY0FBYyxHQUFHL3ZDLGNBQU8sQ0FBQ0MsR0FBUixDQUFZOHZDLGNBQVosSUFBOEIsT0FBbkQ7QUFFQSxJQUFJQyxTQUFTLEdBQUdqaEMsSUFBSSxDQUFDLFlBQVk7QUFDL0JyUyxTQUFPLENBQUNGLEdBQVIsQ0FDRSw2RkFERjtBQUdELENBSm1CLENBQXBCOztBQU1BLFNBQVMyVyxLQUFULENBQWUxVyxPQUFmLEVBQXdCO0FBQ3RCLE1BQUltekMsSUFBSSxJQUFJQSxJQUFJLENBQUNsK0IsTUFBTCxDQUFZRSxNQUF4QixFQUFnQztBQUM5QixXQUFPbytCLFNBQVMsRUFBaEI7QUFDRDs7QUFFRHR6QyxTQUFPLENBQUNGLEdBQVIsQ0FDRyxrQkFBa0JzekMsV0FBbEIsR0FBZ0MsWUFBaEMsR0FBK0NDLGNBQS9DLEdBQWdFLFFBQWhFLEdBQTJFdHpDLE9BRDlFO0FBR0Q7O0FBRUQsSUFBSXd6QyxZQUFZLEdBQUcsRUFBbkI7O0FBRUEsU0FBU0MsZUFBVCxDQUF5Qi9ZLE9BQXpCLEVBQWtDL2dCLEtBQWxDLEVBQXlDO0FBQ3ZDakQsT0FBSyxDQUFFLG1CQUFtQmdrQixPQUFuQixHQUE2QixHQUEvQixDQUFMO0FBQ0EsU0FBT3NZLFlBQVksQ0FBQ3BnQixhQUFiLENBQTJCOEgsT0FBM0IsQ0FBUDtBQUNEOztBQUVELFNBQVNlLGVBQVQsQ0FBeUJ5WCxTQUF6QixFQUFvQ3hZLE9BQXBDLEVBQTZDO0FBQzNDaGtCLE9BQUssQ0FBRSxxQkFBcUJ3OEIsU0FBckIsR0FBaUMsR0FBakMsR0FBdUN4WSxPQUF2QyxHQUFpRCxHQUFuRCxDQUFMO0FBQ0EsU0FBT3NZLFlBQVksQ0FBQ3ZYLGVBQWIsQ0FBNkJ5WCxTQUE3QixFQUF3Q3hZLE9BQXhDLENBQVA7QUFDRDs7QUFFRCxTQUFTbFosY0FBVCxDQUF3QjF1QyxJQUF4QixFQUE4QjtBQUM1QjRqQyxPQUFLLENBQUUsb0JBQW9CNWpDLElBQXBCLEdBQTJCLEdBQTdCLENBQUw7QUFDQSxTQUFPa2dFLFlBQVksQ0FBQ3h4QixjQUFiLENBQTRCMXVDLElBQTVCLENBQVA7QUFDRDs7QUFFRCxTQUFTK29ELGFBQVQsQ0FBdUIvb0QsSUFBdkIsRUFBNkI7QUFDM0I0akMsT0FBSyxDQUFFLG1CQUFtQjVqQyxJQUFuQixHQUEwQixHQUE1QixDQUFMO0FBRUEsU0FBT2tnRSxZQUFZLENBQUNuWCxhQUFiLENBQTJCL29ELElBQTNCLENBQVA7QUFDRDs7QUFFRCxTQUFTd3BELFlBQVQsQ0FBc0J4QixVQUF0QixFQUFrQzRZLE9BQWxDLEVBQTJDakIsYUFBM0MsRUFBMEQ7QUFDeEQvN0IsT0FBSyxDQUFFLGtCQUFrQm9rQixVQUFsQixHQUErQixJQUEvQixHQUFzQzRZLE9BQXRDLEdBQWdELElBQWhELEdBQXVEakIsYUFBdkQsR0FBdUUsR0FBekUsQ0FBTDtBQUNBLFNBQU8zWCxVQUFVLENBQUN3QixZQUFYLENBQXdCb1gsT0FBeEIsRUFBaUNqQixhQUFqQyxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsYUFBVCxDQUF1Qmw1QixJQUF2QixFQUE2QkgsS0FBN0IsRUFBb0M7QUFDbEMzQyxPQUFLLENBQUUsaUJBQWlCOEMsSUFBakIsR0FBd0IsSUFBeEIsR0FBK0JILEtBQS9CLEdBQXVDLEdBQXpDLENBQUw7QUFDQSxTQUFPRyxJQUFJLENBQUN1aEIsV0FBTCxDQUFpQjFoQixLQUFqQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU2tqQixXQUFULENBQXFCL2lCLElBQXJCLEVBQTJCSCxLQUEzQixFQUFrQztBQUNoQzNDLE9BQUssQ0FBRSxpQkFBaUI4QyxJQUFqQixHQUF3QixJQUF4QixHQUErQkgsS0FBL0IsR0FBdUMsR0FBekMsQ0FBTDtBQUVBLFNBQU9HLElBQUksQ0FBQytpQixXQUFMLENBQWlCbGpCLEtBQWpCLENBQVA7QUFDRDs7QUFFRCxTQUFTeWhCLFVBQVQsQ0FBb0J0aEIsSUFBcEIsRUFBMEI7QUFDeEI5QyxPQUFLLENBQUUsZ0JBQWdCOEMsSUFBaEIsR0FBdUIsT0FBdkIsR0FBa0NBLElBQUksQ0FBQ3NoQixVQUF6QyxDQUFMO0FBRUEsU0FBT3RoQixJQUFJLENBQUNzaEIsVUFBWjtBQUNEOztBQUVELFNBQVNxRCxXQUFULENBQXFCM2tCLElBQXJCLEVBQTJCO0FBQ3pCOUMsT0FBSyxDQUFFLGlCQUFpQjhDLElBQWpCLEdBQXdCLE9BQXhCLEdBQW1DQSxJQUFJLENBQUMya0IsV0FBMUMsQ0FBTDtBQUVBLFNBQU8za0IsSUFBSSxDQUFDMmtCLFdBQVo7QUFDRDs7QUFFRCxTQUFTekQsT0FBVCxDQUFpQmlaLFdBQWpCLEVBQThCO0FBQzVCajlCLE9BQUssQ0FBRSxhQUFhaTlCLFdBQWIsR0FBMkIsT0FBM0IsR0FBc0NBLFdBQVcsQ0FBQ2paLE9BQXBELENBQUw7QUFFQSxTQUFPaVosV0FBVyxDQUFDalosT0FBbkI7QUFDRDs7QUFFRCxTQUFTNkQsY0FBVCxDQUF3Qi9rQixJQUF4QixFQUE4QjFtQyxJQUE5QixFQUFvQztBQUNsQzRqQyxPQUFLLENBQUUsb0JBQW9COEMsSUFBcEIsR0FBMkIsSUFBM0IsR0FBa0MxbUMsSUFBbEMsR0FBeUMsR0FBM0MsQ0FBTDtBQUVBMG1DLE1BQUksQ0FBQ2c1QixPQUFMLENBQWExL0QsSUFBYjtBQUNEOztBQUVELFNBQVNvcUIsWUFBVCxDQUFzQnNjLElBQXRCLEVBQTRCNXpCLEdBQTVCLEVBQWlDNGxCLEdBQWpDLEVBQXNDO0FBQ3BDa0wsT0FBSyxDQUFFLGtCQUFrQjhDLElBQWxCLEdBQXlCLElBQXpCLEdBQWdDNXpCLEdBQWhDLEdBQXNDLElBQXRDLEdBQTZDNGxCLEdBQTdDLEdBQW1ELEdBQXJELENBQUw7QUFFQWdPLE1BQUksQ0FBQ3RjLFlBQUwsQ0FBa0J0WCxHQUFsQixFQUF1QjRsQixHQUF2QjtBQUNEOztBQUVELFNBQVNpeEIsYUFBVCxDQUF1QmpqQixJQUF2QixFQUE2Qm82QixPQUE3QixFQUFzQztBQUNwQ3A2QixNQUFJLENBQUN0YyxZQUFMLENBQWtCMDJDLE9BQWxCLEVBQTJCLEVBQTNCO0FBQ0Q7O0FBRUQsSUFBSXBaLE9BQU8sR0FBRyxhQUFhajJELE1BQU0sQ0FBQ3VTLE1BQVAsQ0FBYztBQUNyQzA4RCxjQUFZLEVBQUVBLFlBRHVCO0FBRXJDNWdCLGVBQWEsRUFBRTZnQixlQUZzQjtBQUdyQ2hZLGlCQUFlLEVBQUVBLGVBSG9CO0FBSXJDamEsZ0JBQWMsRUFBRUEsY0FKcUI7QUFLckNxYSxlQUFhLEVBQUVBLGFBTHNCO0FBTXJDUyxjQUFZLEVBQUVBLFlBTnVCO0FBT3JDdkIsYUFBVyxFQUFFMlgsYUFQd0I7QUFRckNuVyxhQUFXLEVBQUVBLFdBUndCO0FBU3JDekIsWUFBVSxFQUFFQSxVQVR5QjtBQVVyQ3FELGFBQVcsRUFBRUEsV0FWd0I7QUFXckN6RCxTQUFPLEVBQUVBLE9BWDRCO0FBWXJDNkQsZ0JBQWMsRUFBRUEsY0FacUI7QUFhckNyaEMsY0FBWSxFQUFFQSxZQWJ1QjtBQWNyQ3UvQixlQUFhLEVBQUVBO0FBZHNCLENBQWQsQ0FBM0I7QUFpQkEsSUFBSWw2QyxPQUFPLEdBQUdtbEQsZUFBZSxDQUFDdmtELE1BQWhCLENBQXVCODlDLFdBQXZCLENBQWQ7QUFFQSxJQUFJNUIsS0FBSyxHQUFHL0UsbUJBQW1CLENBQUM7QUFDOUJFLFNBQU8sRUFBRUEsT0FEcUI7QUFFOUJqNEMsU0FBTyxFQUFFQTtBQUZxQixDQUFELENBQS9CO0FBS0EsSUFBSXN4RCxFQUFFLEdBQUc7QUFDUEMsUUFBTSxFQUFFQTtBQURELENBQVQ7O0FBSUEsU0FBU0EsTUFBVCxDQUFnQkMsSUFBaEIsRUFBc0I7QUFDcEI7QUFDQSxTQUFPQSxJQUFQO0FBQ0Q7QUFFRDs7O0FBRUEsSUFBSUMsWUFBWSxHQUFHbmtDLE9BQU8sQ0FDeEIsOERBQ0Esa0NBRndCLENBQTFCLEMsQ0FLQTtBQUNBOztBQUNBLElBQUlva0Msa0JBQWtCLEdBQUdwa0MsT0FBTyxDQUM5Qix5REFEOEIsQ0FBaEMsQyxDQUlBO0FBQ0E7O0FBQ0EsSUFBSXFrQyxnQkFBZ0IsR0FBR3JrQyxPQUFPLENBQzVCLHdFQUNBLGtFQURBLEdBRUEsdUVBRkEsR0FHQSwyRUFIQSxHQUlBLGdCQUw0QixDQUE5QjtBQVFBOzs7QUFJQTs7QUFDQSxJQUFJc2tDLFNBQVMsR0FBRywyRUFBaEI7QUFDQSxJQUFJQyxtQkFBbUIsR0FBRyx1R0FBMUI7QUFDQSxJQUFJQyxNQUFNLEdBQUcsK0JBQWdDN2hDLGFBQWEsQ0FBQ3Z2QixNQUE5QyxHQUF3RCxJQUFyRTtBQUNBLElBQUlxeEQsWUFBWSxHQUFHLFNBQVNELE1BQVQsR0FBa0IsT0FBbEIsR0FBNEJBLE1BQTVCLEdBQXFDLEdBQXhEO0FBQ0EsSUFBSUUsWUFBWSxHQUFHLElBQUl6dkMsTUFBSixDQUFZLE9BQU93dkMsWUFBbkIsQ0FBbkI7QUFDQSxJQUFJRSxhQUFhLEdBQUcsWUFBcEI7QUFDQSxJQUFJeHVCLE1BQU0sR0FBRyxJQUFJbGhCLE1BQUosQ0FBWSxVQUFVd3ZDLFlBQVYsR0FBeUIsUUFBckMsQ0FBYjtBQUNBLElBQUlHLE9BQU8sR0FBRyxvQkFBZCxDLENBQ0E7O0FBQ0EsSUFBSUMsT0FBTyxHQUFHLFFBQWQ7QUFDQSxJQUFJQyxrQkFBa0IsR0FBRyxPQUF6QixDLENBRUE7O0FBQ0EsSUFBSUMsa0JBQWtCLEdBQUcva0MsT0FBTyxDQUFDLHVCQUFELEVBQTBCLElBQTFCLENBQWhDO0FBQ0EsSUFBSWdsQyxPQUFPLEdBQUcsRUFBZDtBQUVBLElBQUlDLFdBQVcsR0FBRztBQUNoQixVQUFRLEdBRFE7QUFFaEIsVUFBUSxHQUZRO0FBR2hCLFlBQVUsR0FITTtBQUloQixXQUFTLEdBSk87QUFLaEIsV0FBUyxJQUxPO0FBTWhCLFVBQVEsSUFOUTtBQU9oQixXQUFTO0FBUE8sQ0FBbEI7QUFTQSxJQUFJQyxXQUFXLEdBQUcsMkJBQWxCO0FBQ0EsSUFBSUMsdUJBQXVCLEdBQUcsa0NBQTlCLEMsQ0FFQTs7QUFDQSxJQUFJQyxrQkFBa0IsR0FBR3BsQyxPQUFPLENBQUMsY0FBRCxFQUFpQixJQUFqQixDQUFoQzs7QUFDQSxJQUFJcWxDLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkIsQ0FBVWg5QixHQUFWLEVBQWU2N0IsSUFBZixFQUFxQjtBQUFFLFNBQU83N0IsR0FBRyxJQUFJKzhCLGtCQUFrQixDQUFDLzhCLEdBQUQsQ0FBekIsSUFBa0M2N0IsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFZLElBQXJEO0FBQTRELENBQWxIOztBQUVBLFNBQVNvQixVQUFULENBQXFCendFLEtBQXJCLEVBQTRCMHdFLG9CQUE1QixFQUFrRDtBQUNoRCxNQUFJem9DLEVBQUUsR0FBR3lvQyxvQkFBb0IsR0FBR0osdUJBQUgsR0FBNkJELFdBQTFEO0FBQ0EsU0FBT3J3RSxLQUFLLENBQUN3RCxPQUFOLENBQWN5a0MsRUFBZCxFQUFrQixVQUFVYyxLQUFWLEVBQWlCO0FBQUUsV0FBT3FuQyxXQUFXLENBQUNybkMsS0FBRCxDQUFsQjtBQUE0QixHQUFqRSxDQUFQO0FBQ0Q7O0FBRUQsU0FBUzRuQyxTQUFULENBQW9CdEIsSUFBcEIsRUFBMEJ0eUMsT0FBMUIsRUFBbUM7QUFDakMsTUFBSU0sS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJdXpDLFVBQVUsR0FBRzd6QyxPQUFPLENBQUM2ekMsVUFBekI7QUFDQSxNQUFJckksVUFBVSxHQUFHeHJDLE9BQU8sQ0FBQ3dyQyxVQUFSLElBQXNCeDdCLEVBQXZDO0FBQ0EsTUFBSTA3QixnQkFBZ0IsR0FBRzFyQyxPQUFPLENBQUMwckMsZ0JBQVIsSUFBNEIxN0IsRUFBbkQ7QUFDQSxNQUFJeDRCLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSXluQixJQUFKLEVBQVU2MEMsT0FBVjs7QUFDQSxTQUFPeEIsSUFBUCxFQUFhO0FBQ1hyekMsUUFBSSxHQUFHcXpDLElBQVAsQ0FEVyxDQUVYOztBQUNBLFFBQUksQ0FBQ3dCLE9BQUQsSUFBWSxDQUFDWCxrQkFBa0IsQ0FBQ1csT0FBRCxDQUFuQyxFQUE4QztBQUM1QyxVQUFJQyxPQUFPLEdBQUd6QixJQUFJLENBQUNoc0UsT0FBTCxDQUFhLEdBQWIsQ0FBZDs7QUFDQSxVQUFJeXRFLE9BQU8sS0FBSyxDQUFoQixFQUFtQjtBQUNqQjtBQUNBLFlBQUlkLE9BQU8sQ0FBQzF1RSxJQUFSLENBQWErdEUsSUFBYixDQUFKLEVBQXdCO0FBQ3RCLGNBQUkwQixVQUFVLEdBQUcxQixJQUFJLENBQUNoc0UsT0FBTCxDQUFhLEtBQWIsQ0FBakI7O0FBRUEsY0FBSTB0RSxVQUFVLElBQUksQ0FBbEIsRUFBcUI7QUFDbkIsZ0JBQUloMEMsT0FBTyxDQUFDaTBDLGlCQUFaLEVBQStCO0FBQzdCajBDLHFCQUFPLENBQUNpekMsT0FBUixDQUFnQlgsSUFBSSxDQUFDcjZELFNBQUwsQ0FBZSxDQUFmLEVBQWtCKzdELFVBQWxCLENBQWhCLEVBQStDeDhELEtBQS9DLEVBQXNEQSxLQUFLLEdBQUd3OEQsVUFBUixHQUFxQixDQUEzRTtBQUNEOztBQUNERSxtQkFBTyxDQUFDRixVQUFVLEdBQUcsQ0FBZCxDQUFQO0FBQ0E7QUFDRDtBQUNGLFNBWmdCLENBY2pCOzs7QUFDQSxZQUFJZCxrQkFBa0IsQ0FBQzN1RSxJQUFuQixDQUF3Qit0RSxJQUF4QixDQUFKLEVBQW1DO0FBQ2pDLGNBQUk2QixjQUFjLEdBQUc3QixJQUFJLENBQUNoc0UsT0FBTCxDQUFhLElBQWIsQ0FBckI7O0FBRUEsY0FBSTZ0RSxjQUFjLElBQUksQ0FBdEIsRUFBeUI7QUFDdkJELG1CQUFPLENBQUNDLGNBQWMsR0FBRyxDQUFsQixDQUFQO0FBQ0E7QUFDRDtBQUNGLFNBdEJnQixDQXdCakI7OztBQUNBLFlBQUlDLFlBQVksR0FBRzlCLElBQUksQ0FBQ3RtQyxLQUFMLENBQVdnbkMsT0FBWCxDQUFuQjs7QUFDQSxZQUFJb0IsWUFBSixFQUFrQjtBQUNoQkYsaUJBQU8sQ0FBQ0UsWUFBWSxDQUFDLENBQUQsQ0FBWixDQUFnQjF3RSxNQUFqQixDQUFQO0FBQ0E7QUFDRCxTQTdCZ0IsQ0ErQmpCOzs7QUFDQSxZQUFJMndFLFdBQVcsR0FBRy9CLElBQUksQ0FBQ3RtQyxLQUFMLENBQVd1WSxNQUFYLENBQWxCOztBQUNBLFlBQUk4dkIsV0FBSixFQUFpQjtBQUNmLGNBQUlDLFFBQVEsR0FBRzk4RCxLQUFmO0FBQ0EwOEQsaUJBQU8sQ0FBQ0csV0FBVyxDQUFDLENBQUQsQ0FBWCxDQUFlM3dFLE1BQWhCLENBQVA7QUFDQTZ3RSxxQkFBVyxDQUFDRixXQUFXLENBQUMsQ0FBRCxDQUFaLEVBQWlCQyxRQUFqQixFQUEyQjk4RCxLQUEzQixDQUFYO0FBQ0E7QUFDRCxTQXRDZ0IsQ0F3Q2pCOzs7QUFDQSxZQUFJZzlELGFBQWEsR0FBR0MsYUFBYSxFQUFqQzs7QUFDQSxZQUFJRCxhQUFKLEVBQW1CO0FBQ2pCRSx3QkFBYyxDQUFDRixhQUFELENBQWQ7O0FBQ0EsY0FBSWYsd0JBQXdCLENBQUNlLGFBQWEsQ0FBQ3ZiLE9BQWYsRUFBd0JxWixJQUF4QixDQUE1QixFQUEyRDtBQUN6RDRCLG1CQUFPLENBQUMsQ0FBRCxDQUFQO0FBQ0Q7O0FBQ0Q7QUFDRDtBQUNGOztBQUVELFVBQUk3aUUsSUFBSSxHQUFJLEtBQUssQ0FBakI7QUFBQSxVQUFxQnNqRSxJQUFJLEdBQUksS0FBSyxDQUFsQztBQUFBLFVBQXNDcDlDLElBQUksR0FBSSxLQUFLLENBQW5EOztBQUNBLFVBQUl3OEMsT0FBTyxJQUFJLENBQWYsRUFBa0I7QUFDaEJZLFlBQUksR0FBR3JDLElBQUksQ0FBQ3hxQyxLQUFMLENBQVdpc0MsT0FBWCxDQUFQOztBQUNBLGVBQ0UsQ0FBQ3h2QixNQUFNLENBQUNoZ0QsSUFBUCxDQUFZb3dFLElBQVosQ0FBRCxJQUNBLENBQUM3QixZQUFZLENBQUN2dUUsSUFBYixDQUFrQm93RSxJQUFsQixDQURELElBRUEsQ0FBQzFCLE9BQU8sQ0FBQzF1RSxJQUFSLENBQWFvd0UsSUFBYixDQUZELElBR0EsQ0FBQ3pCLGtCQUFrQixDQUFDM3VFLElBQW5CLENBQXdCb3dFLElBQXhCLENBSkgsRUFLRTtBQUNBO0FBQ0FwOUMsY0FBSSxHQUFHbzlDLElBQUksQ0FBQ3J1RSxPQUFMLENBQWEsR0FBYixFQUFrQixDQUFsQixDQUFQOztBQUNBLGNBQUlpeEIsSUFBSSxHQUFHLENBQVgsRUFBYztBQUFFO0FBQU87O0FBQ3ZCdzhDLGlCQUFPLElBQUl4OEMsSUFBWDtBQUNBbzlDLGNBQUksR0FBR3JDLElBQUksQ0FBQ3hxQyxLQUFMLENBQVdpc0MsT0FBWCxDQUFQO0FBQ0Q7O0FBQ0QxaUUsWUFBSSxHQUFHaWhFLElBQUksQ0FBQ3I2RCxTQUFMLENBQWUsQ0FBZixFQUFrQjg3RCxPQUFsQixDQUFQO0FBQ0Q7O0FBRUQsVUFBSUEsT0FBTyxHQUFHLENBQWQsRUFBaUI7QUFDZjFpRSxZQUFJLEdBQUdpaEUsSUFBUDtBQUNEOztBQUVELFVBQUlqaEUsSUFBSixFQUFVO0FBQ1I2aUUsZUFBTyxDQUFDN2lFLElBQUksQ0FBQzNOLE1BQU4sQ0FBUDtBQUNEOztBQUVELFVBQUlzOEIsT0FBTyxDQUFDNDBDLEtBQVIsSUFBaUJ2akUsSUFBckIsRUFBMkI7QUFDekIydUIsZUFBTyxDQUFDNDBDLEtBQVIsQ0FBY3ZqRSxJQUFkLEVBQW9CbUcsS0FBSyxHQUFHbkcsSUFBSSxDQUFDM04sTUFBakMsRUFBeUM4VCxLQUF6QztBQUNEO0FBQ0YsS0FsRkQsTUFrRk87QUFDTCxVQUFJcTlELFlBQVksR0FBRyxDQUFuQjtBQUNBLFVBQUlDLFVBQVUsR0FBR2hCLE9BQU8sQ0FBQ3p0RSxXQUFSLEVBQWpCO0FBQ0EsVUFBSTB1RSxZQUFZLEdBQUczQixPQUFPLENBQUMwQixVQUFELENBQVAsS0FBd0IxQixPQUFPLENBQUMwQixVQUFELENBQVAsR0FBc0IsSUFBSXp4QyxNQUFKLENBQVcsb0JBQW9CeXhDLFVBQXBCLEdBQWlDLFNBQTVDLEVBQXVELEdBQXZELENBQTlDLENBQW5CO0FBQ0EsVUFBSUUsTUFBTSxHQUFHMUMsSUFBSSxDQUFDN3JFLE9BQUwsQ0FBYXN1RSxZQUFiLEVBQTJCLFVBQVVFLEdBQVYsRUFBZTVqRSxJQUFmLEVBQXFCa3pDLE1BQXJCLEVBQTZCO0FBQ25Fc3dCLG9CQUFZLEdBQUd0d0IsTUFBTSxDQUFDN2dELE1BQXRCOztBQUNBLFlBQUksQ0FBQ3l2RSxrQkFBa0IsQ0FBQzJCLFVBQUQsQ0FBbkIsSUFBbUNBLFVBQVUsS0FBSyxVQUF0RCxFQUFrRTtBQUNoRXpqRSxjQUFJLEdBQUdBLElBQUksQ0FDUjVLLE9BREksQ0FDSSxxQkFESixFQUMyQixJQUQzQixFQUNpQztBQURqQyxXQUVKQSxPQUZJLENBRUksMkJBRkosRUFFaUMsSUFGakMsQ0FBUDtBQUdEOztBQUNELFlBQUlndEUsd0JBQXdCLENBQUNxQixVQUFELEVBQWF6akUsSUFBYixDQUE1QixFQUFnRDtBQUM5Q0EsY0FBSSxHQUFHQSxJQUFJLENBQUN5MkIsS0FBTCxDQUFXLENBQVgsQ0FBUDtBQUNEOztBQUNELFlBQUk5SCxPQUFPLENBQUM0MEMsS0FBWixFQUFtQjtBQUNqQjUwQyxpQkFBTyxDQUFDNDBDLEtBQVIsQ0FBY3ZqRSxJQUFkO0FBQ0Q7O0FBQ0QsZUFBTyxFQUFQO0FBQ0QsT0FkWSxDQUFiO0FBZUFtRyxXQUFLLElBQUk4NkQsSUFBSSxDQUFDNXVFLE1BQUwsR0FBY3N4RSxNQUFNLENBQUN0eEUsTUFBOUI7QUFDQTR1RSxVQUFJLEdBQUcwQyxNQUFQO0FBQ0FULGlCQUFXLENBQUNPLFVBQUQsRUFBYXQ5RCxLQUFLLEdBQUdxOUQsWUFBckIsRUFBbUNyOUQsS0FBbkMsQ0FBWDtBQUNEOztBQUVELFFBQUk4NkQsSUFBSSxLQUFLcnpDLElBQWIsRUFBbUI7QUFDakJlLGFBQU8sQ0FBQzQwQyxLQUFSLElBQWlCNTBDLE9BQU8sQ0FBQzQwQyxLQUFSLENBQWN0QyxJQUFkLENBQWpCOztBQUNBLFVBQUl4d0MsS0FBQSxJQUF5QyxDQUFDeEIsS0FBSyxDQUFDNThCLE1BQWhELElBQTBEczhCLE9BQU8sQ0FBQ3ZCLElBQXRFLEVBQTRFO0FBQzFFdUIsZUFBTyxDQUFDdkIsSUFBUixDQUFjLDZDQUE2QzZ6QyxJQUE3QyxHQUFvRCxJQUFsRSxFQUF5RTtBQUFFaGhFLGVBQUssRUFBRWtHLEtBQUssR0FBRzg2RCxJQUFJLENBQUM1dUU7QUFBdEIsU0FBekU7QUFDRDs7QUFDRDtBQUNEO0FBQ0YsR0EzSGdDLENBNkhqQzs7O0FBQ0E2d0UsYUFBVzs7QUFFWCxXQUFTTCxPQUFULENBQWtCMW5DLENBQWxCLEVBQXFCO0FBQ25CaDFCLFNBQUssSUFBSWcxQixDQUFUO0FBQ0E4bEMsUUFBSSxHQUFHQSxJQUFJLENBQUNyNkQsU0FBTCxDQUFldTBCLENBQWYsQ0FBUDtBQUNEOztBQUVELFdBQVNpb0MsYUFBVCxHQUEwQjtBQUN4QixRQUFJbmpFLEtBQUssR0FBR2doRSxJQUFJLENBQUN0bUMsS0FBTCxDQUFXOG1DLFlBQVgsQ0FBWjs7QUFDQSxRQUFJeGhFLEtBQUosRUFBVztBQUNULFVBQUkwNkIsS0FBSyxHQUFHO0FBQ1ZpdEIsZUFBTyxFQUFFM25ELEtBQUssQ0FBQyxDQUFELENBREo7QUFFVm0wQyxhQUFLLEVBQUUsRUFGRztBQUdWbjBDLGFBQUssRUFBRWtHO0FBSEcsT0FBWjtBQUtBMDhELGFBQU8sQ0FBQzVpRSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVM1TixNQUFWLENBQVA7QUFDQSxVQUFJZ08sR0FBSixFQUFTd2pFLElBQVQ7O0FBQ0EsYUFBTyxFQUFFeGpFLEdBQUcsR0FBRzRnRSxJQUFJLENBQUN0bUMsS0FBTCxDQUFXK21DLGFBQVgsQ0FBUixNQUF1Q21DLElBQUksR0FBRzVDLElBQUksQ0FBQ3RtQyxLQUFMLENBQVcybUMsbUJBQVgsS0FBbUNMLElBQUksQ0FBQ3RtQyxLQUFMLENBQVcwbUMsU0FBWCxDQUFqRixDQUFQLEVBQWdIO0FBQzlHd0MsWUFBSSxDQUFDNWpFLEtBQUwsR0FBYWtHLEtBQWI7QUFDQTA4RCxlQUFPLENBQUNnQixJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVF4eEUsTUFBVCxDQUFQO0FBQ0F3eEUsWUFBSSxDQUFDeGpFLEdBQUwsR0FBVzhGLEtBQVg7QUFDQXcwQixhQUFLLENBQUN5WixLQUFOLENBQVkxdUMsSUFBWixDQUFpQm0rRCxJQUFqQjtBQUNEOztBQUNELFVBQUl4akUsR0FBSixFQUFTO0FBQ1BzNkIsYUFBSyxDQUFDbXBDLFVBQU4sR0FBbUJ6akUsR0FBRyxDQUFDLENBQUQsQ0FBdEI7QUFDQXdpRSxlQUFPLENBQUN4aUUsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPaE8sTUFBUixDQUFQO0FBQ0Fzb0MsYUFBSyxDQUFDdDZCLEdBQU4sR0FBWThGLEtBQVo7QUFDQSxlQUFPdzBCLEtBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBUzBvQyxjQUFULENBQXlCMW9DLEtBQXpCLEVBQWdDO0FBQzlCLFFBQUlpdEIsT0FBTyxHQUFHanRCLEtBQUssQ0FBQ2l0QixPQUFwQjtBQUNBLFFBQUlrYyxVQUFVLEdBQUducEMsS0FBSyxDQUFDbXBDLFVBQXZCOztBQUVBLFFBQUl0QixVQUFKLEVBQWdCO0FBQ2QsVUFBSUMsT0FBTyxLQUFLLEdBQVosSUFBbUJyQixnQkFBZ0IsQ0FBQ3haLE9BQUQsQ0FBdkMsRUFBa0Q7QUFDaERzYixtQkFBVyxDQUFDVCxPQUFELENBQVg7QUFDRDs7QUFDRCxVQUFJcEksZ0JBQWdCLENBQUN6UyxPQUFELENBQWhCLElBQTZCNmEsT0FBTyxLQUFLN2EsT0FBN0MsRUFBc0Q7QUFDcERzYixtQkFBVyxDQUFDdGIsT0FBRCxDQUFYO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJbWMsS0FBSyxHQUFHNUosVUFBVSxDQUFDdlMsT0FBRCxDQUFWLElBQXVCLENBQUMsQ0FBQ2tjLFVBQXJDO0FBRUEsUUFBSS90RSxDQUFDLEdBQUc0a0MsS0FBSyxDQUFDeVosS0FBTixDQUFZL2hELE1BQXBCO0FBQ0EsUUFBSStoRCxLQUFLLEdBQUcsSUFBSWxoQyxLQUFKLENBQVVuZCxDQUFWLENBQVo7O0FBQ0EsU0FBSyxJQUFJa1gsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2xYLENBQXBCLEVBQXVCa1gsQ0FBQyxFQUF4QixFQUE0QjtBQUMxQixVQUFJcUssSUFBSSxHQUFHcWpCLEtBQUssQ0FBQ3laLEtBQU4sQ0FBWW5uQyxDQUFaLENBQVg7QUFDQSxVQUFJcmIsS0FBSyxHQUFHMGxCLElBQUksQ0FBQyxDQUFELENBQUosSUFBV0EsSUFBSSxDQUFDLENBQUQsQ0FBZixJQUFzQkEsSUFBSSxDQUFDLENBQUQsQ0FBMUIsSUFBaUMsRUFBN0M7QUFDQSxVQUFJZ3JELG9CQUFvQixHQUFHMWEsT0FBTyxLQUFLLEdBQVosSUFBbUJ0d0MsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFZLE1BQS9CLEdBQ3ZCcVgsT0FBTyxDQUFDcTFDLDJCQURlLEdBRXZCcjFDLE9BQU8sQ0FBQzJ6QyxvQkFGWjtBQUdBbHVCLFdBQUssQ0FBQ25uQyxDQUFELENBQUwsR0FBVztBQUNUbFcsWUFBSSxFQUFFdWdCLElBQUksQ0FBQyxDQUFELENBREQ7QUFFVDFsQixhQUFLLEVBQUV5d0UsVUFBVSxDQUFDendFLEtBQUQsRUFBUTB3RSxvQkFBUjtBQUZSLE9BQVg7O0FBSUEsVUFBSTd4QyxLQUFBLElBQXlDOUIsT0FBTyxDQUFDczFDLGlCQUFyRCxFQUF3RTtBQUN0RTd2QixhQUFLLENBQUNubkMsQ0FBRCxDQUFMLENBQVNoTixLQUFULEdBQWlCcVgsSUFBSSxDQUFDclgsS0FBTCxHQUFhcVgsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRcWpCLEtBQVIsQ0FBYyxNQUFkLEVBQXNCdG9DLE1BQXBEO0FBQ0EraEQsYUFBSyxDQUFDbm5DLENBQUQsQ0FBTCxDQUFTNU0sR0FBVCxHQUFlaVgsSUFBSSxDQUFDalgsR0FBcEI7QUFDRDtBQUNGOztBQUVELFFBQUksQ0FBQzBqRSxLQUFMLEVBQVk7QUFDVjkwQyxXQUFLLENBQUN2cEIsSUFBTixDQUFXO0FBQUUwL0IsV0FBRyxFQUFFd2lCLE9BQVA7QUFBZ0JzYyxxQkFBYSxFQUFFdGMsT0FBTyxDQUFDNXlELFdBQVIsRUFBL0I7QUFBc0RvL0MsYUFBSyxFQUFFQSxLQUE3RDtBQUFvRW4wQyxhQUFLLEVBQUUwNkIsS0FBSyxDQUFDMTZCLEtBQWpGO0FBQXdGSSxXQUFHLEVBQUVzNkIsS0FBSyxDQUFDdDZCO0FBQW5HLE9BQVg7QUFDQW9pRSxhQUFPLEdBQUc3YSxPQUFWO0FBQ0Q7O0FBRUQsUUFBSWo1QixPQUFPLENBQUMxdUIsS0FBWixFQUFtQjtBQUNqQjB1QixhQUFPLENBQUMxdUIsS0FBUixDQUFjMm5ELE9BQWQsRUFBdUJ4VCxLQUF2QixFQUE4QjJ2QixLQUE5QixFQUFxQ3BwQyxLQUFLLENBQUMxNkIsS0FBM0MsRUFBa0QwNkIsS0FBSyxDQUFDdDZCLEdBQXhEO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTNmlFLFdBQVQsQ0FBc0J0YixPQUF0QixFQUErQjNuRCxLQUEvQixFQUFzQ0ksR0FBdEMsRUFBMkM7QUFDekMsUUFBSThqRSxHQUFKLEVBQVNDLGlCQUFUOztBQUNBLFFBQUlua0UsS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFBRUEsV0FBSyxHQUFHa0csS0FBUjtBQUFnQjs7QUFDckMsUUFBSTlGLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQUVBLFNBQUcsR0FBRzhGLEtBQU47QUFBYyxLQUhRLENBS3pDOzs7QUFDQSxRQUFJeWhELE9BQUosRUFBYTtBQUNYd2MsdUJBQWlCLEdBQUd4YyxPQUFPLENBQUM1eUQsV0FBUixFQUFwQjs7QUFDQSxXQUFLbXZFLEdBQUcsR0FBR2wxQyxLQUFLLENBQUM1OEIsTUFBTixHQUFlLENBQTFCLEVBQTZCOHhFLEdBQUcsSUFBSSxDQUFwQyxFQUF1Q0EsR0FBRyxFQUExQyxFQUE4QztBQUM1QyxZQUFJbDFDLEtBQUssQ0FBQ2sxQyxHQUFELENBQUwsQ0FBV0QsYUFBWCxLQUE2QkUsaUJBQWpDLEVBQW9EO0FBQ2xEO0FBQ0Q7QUFDRjtBQUNGLEtBUEQsTUFPTztBQUNMO0FBQ0FELFNBQUcsR0FBRyxDQUFOO0FBQ0Q7O0FBRUQsUUFBSUEsR0FBRyxJQUFJLENBQVgsRUFBYztBQUNaO0FBQ0EsV0FBSyxJQUFJbDNELENBQUMsR0FBR2dpQixLQUFLLENBQUM1OEIsTUFBTixHQUFlLENBQTVCLEVBQStCNGEsQ0FBQyxJQUFJazNELEdBQXBDLEVBQXlDbDNELENBQUMsRUFBMUMsRUFBOEM7QUFDNUMsWUFBSXdqQixLQUFBLEtBQ0R4akIsQ0FBQyxHQUFHazNELEdBQUosSUFBVyxDQUFDdmMsT0FEWCxLQUVGajVCLE9BQU8sQ0FBQ3ZCLElBRlYsRUFHRTtBQUNBdUIsaUJBQU8sQ0FBQ3ZCLElBQVIsQ0FDRyxVQUFXNkIsS0FBSyxDQUFDaGlCLENBQUQsQ0FBTCxDQUFTbTRCLEdBQXBCLEdBQTJCLDRCQUQ5QixFQUVFO0FBQUVubEMsaUJBQUssRUFBRWd2QixLQUFLLENBQUNoaUIsQ0FBRCxDQUFMLENBQVNoTixLQUFsQjtBQUF5QkksZUFBRyxFQUFFNHVCLEtBQUssQ0FBQ2hpQixDQUFELENBQUwsQ0FBUzVNO0FBQXZDLFdBRkY7QUFJRDs7QUFDRCxZQUFJc3VCLE9BQU8sQ0FBQ3R1QixHQUFaLEVBQWlCO0FBQ2ZzdUIsaUJBQU8sQ0FBQ3R1QixHQUFSLENBQVk0dUIsS0FBSyxDQUFDaGlCLENBQUQsQ0FBTCxDQUFTbTRCLEdBQXJCLEVBQTBCbmxDLEtBQTFCLEVBQWlDSSxHQUFqQztBQUNEO0FBQ0YsT0FmVyxDQWlCWjs7O0FBQ0E0dUIsV0FBSyxDQUFDNThCLE1BQU4sR0FBZTh4RSxHQUFmO0FBQ0ExQixhQUFPLEdBQUcwQixHQUFHLElBQUlsMUMsS0FBSyxDQUFDazFDLEdBQUcsR0FBRyxDQUFQLENBQUwsQ0FBZS8rQixHQUFoQztBQUNELEtBcEJELE1Bb0JPLElBQUlnL0IsaUJBQWlCLEtBQUssSUFBMUIsRUFBZ0M7QUFDckMsVUFBSXoxQyxPQUFPLENBQUMxdUIsS0FBWixFQUFtQjtBQUNqQjB1QixlQUFPLENBQUMxdUIsS0FBUixDQUFjMm5ELE9BQWQsRUFBdUIsRUFBdkIsRUFBMkIsSUFBM0IsRUFBaUMzbkQsS0FBakMsRUFBd0NJLEdBQXhDO0FBQ0Q7QUFDRixLQUpNLE1BSUEsSUFBSStqRSxpQkFBaUIsS0FBSyxHQUExQixFQUErQjtBQUNwQyxVQUFJejFDLE9BQU8sQ0FBQzF1QixLQUFaLEVBQW1CO0FBQ2pCMHVCLGVBQU8sQ0FBQzF1QixLQUFSLENBQWMybkQsT0FBZCxFQUF1QixFQUF2QixFQUEyQixLQUEzQixFQUFrQzNuRCxLQUFsQyxFQUF5Q0ksR0FBekM7QUFDRDs7QUFDRCxVQUFJc3VCLE9BQU8sQ0FBQ3R1QixHQUFaLEVBQWlCO0FBQ2ZzdUIsZUFBTyxDQUFDdHVCLEdBQVIsQ0FBWXVuRCxPQUFaLEVBQXFCM25ELEtBQXJCLEVBQTRCSSxHQUE1QjtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBRUQ7OztBQUVBLElBQUlna0UsbUJBQW1CLEdBQUcsZUFBMUI7O0FBRUEsU0FBU0MsWUFBVCxDQUF1QkMsR0FBdkIsRUFBNEI7QUFDMUIsTUFBSUMsUUFBUSxHQUFHLEtBQWY7QUFDQSxNQUFJQyxRQUFRLEdBQUcsS0FBZjtBQUNBLE1BQUlDLGdCQUFnQixHQUFHLEtBQXZCO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLEtBQWQ7QUFDQSxNQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxDQUFiO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLENBQVo7QUFDQSxNQUFJQyxlQUFlLEdBQUcsQ0FBdEI7QUFDQSxNQUFJbG5DLENBQUosRUFBT25DLElBQVAsRUFBYXp1QixDQUFiLEVBQWdCbUgsVUFBaEIsRUFBNEI0d0QsT0FBNUI7O0FBRUEsT0FBSy8zRCxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdzM0QsR0FBRyxDQUFDbHlFLE1BQXBCLEVBQTRCNGEsQ0FBQyxFQUE3QixFQUFpQztBQUMvQnl1QixRQUFJLEdBQUdtQyxDQUFQO0FBQ0FBLEtBQUMsR0FBRzBtQyxHQUFHLENBQUN4dEMsVUFBSixDQUFlOXBCLENBQWYsQ0FBSjs7QUFDQSxRQUFJdTNELFFBQUosRUFBYztBQUNaLFVBQUkzbUMsQ0FBQyxLQUFLLElBQU4sSUFBY25DLElBQUksS0FBSyxJQUEzQixFQUFpQztBQUFFOG9DLGdCQUFRLEdBQUcsS0FBWDtBQUFtQjtBQUN2RCxLQUZELE1BRU8sSUFBSUMsUUFBSixFQUFjO0FBQ25CLFVBQUk1bUMsQ0FBQyxLQUFLLElBQU4sSUFBY25DLElBQUksS0FBSyxJQUEzQixFQUFpQztBQUFFK29DLGdCQUFRLEdBQUcsS0FBWDtBQUFtQjtBQUN2RCxLQUZNLE1BRUEsSUFBSUMsZ0JBQUosRUFBc0I7QUFDM0IsVUFBSTdtQyxDQUFDLEtBQUssSUFBTixJQUFjbkMsSUFBSSxLQUFLLElBQTNCLEVBQWlDO0FBQUVncEMsd0JBQWdCLEdBQUcsS0FBbkI7QUFBMkI7QUFDL0QsS0FGTSxNQUVBLElBQUlDLE9BQUosRUFBYTtBQUNsQixVQUFJOW1DLENBQUMsS0FBSyxJQUFOLElBQWNuQyxJQUFJLEtBQUssSUFBM0IsRUFBaUM7QUFBRWlwQyxlQUFPLEdBQUcsS0FBVjtBQUFrQjtBQUN0RCxLQUZNLE1BRUEsSUFDTDltQyxDQUFDLEtBQUssSUFBTixJQUFjO0FBQ2QwbUMsT0FBRyxDQUFDeHRDLFVBQUosQ0FBZTlwQixDQUFDLEdBQUcsQ0FBbkIsTUFBMEIsSUFEMUIsSUFFQXMzRCxHQUFHLENBQUN4dEMsVUFBSixDQUFlOXBCLENBQUMsR0FBRyxDQUFuQixNQUEwQixJQUYxQixJQUdBLENBQUMyM0QsS0FIRCxJQUdVLENBQUNDLE1BSFgsSUFHcUIsQ0FBQ0MsS0FKakIsRUFLTDtBQUNBLFVBQUkxd0QsVUFBVSxLQUFLcGdCLFNBQW5CLEVBQThCO0FBQzVCO0FBQ0Erd0UsdUJBQWUsR0FBRzkzRCxDQUFDLEdBQUcsQ0FBdEI7QUFDQW1ILGtCQUFVLEdBQUdtd0QsR0FBRyxDQUFDOXRDLEtBQUosQ0FBVSxDQUFWLEVBQWF4cEIsQ0FBYixFQUFnQjVYLElBQWhCLEVBQWI7QUFDRCxPQUpELE1BSU87QUFDTDR2RSxrQkFBVTtBQUNYO0FBQ0YsS0FiTSxNQWFBO0FBQ0wsY0FBUXBuQyxDQUFSO0FBQ0UsYUFBSyxJQUFMO0FBQVc0bUMsa0JBQVEsR0FBRyxJQUFYO0FBQWlCO0FBQWM7O0FBQzFDLGFBQUssSUFBTDtBQUFXRCxrQkFBUSxHQUFHLElBQVg7QUFBaUI7QUFBYzs7QUFDMUMsYUFBSyxJQUFMO0FBQVdFLDBCQUFnQixHQUFHLElBQW5CO0FBQXlCO0FBQU07O0FBQzFDLGFBQUssSUFBTDtBQUFXSSxlQUFLO0FBQUk7QUFBc0I7O0FBQzFDLGFBQUssSUFBTDtBQUFXQSxlQUFLO0FBQUk7QUFBc0I7O0FBQzFDLGFBQUssSUFBTDtBQUFXRCxnQkFBTTtBQUFJO0FBQXFCOztBQUMxQyxhQUFLLElBQUw7QUFBV0EsZ0JBQU07QUFBSTtBQUFxQjs7QUFDMUMsYUFBSyxJQUFMO0FBQVdELGVBQUs7QUFBSTtBQUFzQjs7QUFDMUMsYUFBSyxJQUFMO0FBQVdBLGVBQUs7QUFBSTtBQUFzQjtBQVQ1Qzs7QUFXQSxVQUFJL21DLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQUU7QUFDaEIsWUFBSStvQixDQUFDLEdBQUczNUMsQ0FBQyxHQUFHLENBQVo7QUFDQSxZQUFJa2hDLENBQUMsR0FBSSxLQUFLLENBQWQsQ0FGYyxDQUdkOztBQUNBLGVBQU95WSxDQUFDLElBQUksQ0FBWixFQUFlQSxDQUFDLEVBQWhCLEVBQW9CO0FBQ2xCelksV0FBQyxHQUFHbzJCLEdBQUcsQ0FBQ3R3RSxNQUFKLENBQVcyeUQsQ0FBWCxDQUFKOztBQUNBLGNBQUl6WSxDQUFDLEtBQUssR0FBVixFQUFlO0FBQUU7QUFBTztBQUN6Qjs7QUFDRCxZQUFJLENBQUNBLENBQUQsSUFBTSxDQUFDazJCLG1CQUFtQixDQUFDbnhFLElBQXBCLENBQXlCaTdDLENBQXpCLENBQVgsRUFBd0M7QUFDdEN3MkIsaUJBQU8sR0FBRyxJQUFWO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsTUFBSXZ3RCxVQUFVLEtBQUtwZ0IsU0FBbkIsRUFBOEI7QUFDNUJvZ0IsY0FBVSxHQUFHbXdELEdBQUcsQ0FBQzl0QyxLQUFKLENBQVUsQ0FBVixFQUFheHBCLENBQWIsRUFBZ0I1WCxJQUFoQixFQUFiO0FBQ0QsR0FGRCxNQUVPLElBQUkwdkUsZUFBZSxLQUFLLENBQXhCLEVBQTJCO0FBQ2hDRSxjQUFVO0FBQ1g7O0FBRUQsV0FBU0EsVUFBVCxHQUF1QjtBQUNyQixLQUFDRCxPQUFPLEtBQUtBLE9BQU8sR0FBRyxFQUFmLENBQVIsRUFBNEJ0L0QsSUFBNUIsQ0FBaUM2K0QsR0FBRyxDQUFDOXRDLEtBQUosQ0FBVXN1QyxlQUFWLEVBQTJCOTNELENBQTNCLEVBQThCNVgsSUFBOUIsRUFBakM7QUFDQTB2RSxtQkFBZSxHQUFHOTNELENBQUMsR0FBRyxDQUF0QjtBQUNEOztBQUVELE1BQUkrM0QsT0FBSixFQUFhO0FBQ1gsU0FBSy8zRCxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUcrM0QsT0FBTyxDQUFDM3lFLE1BQXhCLEVBQWdDNGEsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQ21ILGdCQUFVLEdBQUc4d0QsVUFBVSxDQUFDOXdELFVBQUQsRUFBYTR3RCxPQUFPLENBQUMvM0QsQ0FBRCxDQUFwQixDQUF2QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT21ILFVBQVA7QUFDRDs7QUFFRCxTQUFTOHdELFVBQVQsQ0FBcUJYLEdBQXJCLEVBQTBCcDVDLE1BQTFCLEVBQWtDO0FBQ2hDLE1BQUlsZSxDQUFDLEdBQUdrZSxNQUFNLENBQUNsMkIsT0FBUCxDQUFlLEdBQWYsQ0FBUjs7QUFDQSxNQUFJZ1ksQ0FBQyxHQUFHLENBQVIsRUFBVztBQUNUO0FBQ0EsV0FBUSxVQUFVa2UsTUFBVixHQUFtQixNQUFuQixHQUE0Qm81QyxHQUE1QixHQUFrQyxHQUExQztBQUNELEdBSEQsTUFHTztBQUNMLFFBQUl4dEUsSUFBSSxHQUFHbzBCLE1BQU0sQ0FBQ3NMLEtBQVAsQ0FBYSxDQUFiLEVBQWdCeHBCLENBQWhCLENBQVg7QUFDQSxRQUFJcUssSUFBSSxHQUFHNlQsTUFBTSxDQUFDc0wsS0FBUCxDQUFheHBCLENBQUMsR0FBRyxDQUFqQixDQUFYO0FBQ0EsV0FBUSxVQUFVbFcsSUFBVixHQUFpQixNQUFqQixHQUEwQnd0RSxHQUExQixJQUFpQ2p0RCxJQUFJLEtBQUssR0FBVCxHQUFlLE1BQU1BLElBQXJCLEdBQTRCQSxJQUE3RCxDQUFSO0FBQ0Q7QUFDRjtBQUVEOzs7QUFFQSxJQUFJNnRELFlBQVksR0FBRywwQkFBbkI7QUFDQSxJQUFJQyxhQUFhLEdBQUcsd0JBQXBCO0FBRUEsSUFBSUMsVUFBVSxHQUFHOW5DLE1BQU0sQ0FBQyxVQUFVK25DLFVBQVYsRUFBc0I7QUFDNUMsTUFBSUMsSUFBSSxHQUFHRCxVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNsd0UsT0FBZCxDQUFzQmd3RSxhQUF0QixFQUFxQyxNQUFyQyxDQUFYO0FBQ0EsTUFBSUksS0FBSyxHQUFHRixVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNsd0UsT0FBZCxDQUFzQmd3RSxhQUF0QixFQUFxQyxNQUFyQyxDQUFaO0FBQ0EsU0FBTyxJQUFJcHpDLE1BQUosQ0FBV3V6QyxJQUFJLEdBQUcsZUFBUCxHQUF5QkMsS0FBcEMsRUFBMkMsR0FBM0MsQ0FBUDtBQUNELENBSnNCLENBQXZCOztBQVFBLFNBQVNDLFNBQVQsQ0FDRXpsRSxJQURGLEVBRUVzbEUsVUFGRixFQUdFO0FBQ0EsTUFBSUksS0FBSyxHQUFHSixVQUFVLEdBQUdELFVBQVUsQ0FBQ0MsVUFBRCxDQUFiLEdBQTRCSCxZQUFsRDs7QUFDQSxNQUFJLENBQUNPLEtBQUssQ0FBQ3h5RSxJQUFOLENBQVc4TSxJQUFYLENBQUwsRUFBdUI7QUFDckI7QUFDRDs7QUFDRCxNQUFJZ0osTUFBTSxHQUFHLEVBQWI7QUFDQSxNQUFJMjhELFNBQVMsR0FBRyxFQUFoQjtBQUNBLE1BQUl6bEUsU0FBUyxHQUFHd2xFLEtBQUssQ0FBQ3hsRSxTQUFOLEdBQWtCLENBQWxDO0FBQ0EsTUFBSXk2QixLQUFKLEVBQVd4MEIsS0FBWCxFQUFrQnkvRCxVQUFsQjs7QUFDQSxTQUFRanJDLEtBQUssR0FBRytxQyxLQUFLLENBQUN0bEUsSUFBTixDQUFXSixJQUFYLENBQWhCLEVBQW1DO0FBQ2pDbUcsU0FBSyxHQUFHdzBCLEtBQUssQ0FBQ3gwQixLQUFkLENBRGlDLENBRWpDOztBQUNBLFFBQUlBLEtBQUssR0FBR2pHLFNBQVosRUFBdUI7QUFDckJ5bEUsZUFBUyxDQUFDamdFLElBQVYsQ0FBZWtnRSxVQUFVLEdBQUc1bEUsSUFBSSxDQUFDeTJCLEtBQUwsQ0FBV3YyQixTQUFYLEVBQXNCaUcsS0FBdEIsQ0FBNUI7QUFDQTZDLFlBQU0sQ0FBQ3RELElBQVAsQ0FBWWdMLElBQUksQ0FBQ0MsU0FBTCxDQUFlaTFELFVBQWYsQ0FBWjtBQUNELEtBTmdDLENBT2pDOzs7QUFDQSxRQUFJckIsR0FBRyxHQUFHRCxZQUFZLENBQUMzcEMsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTdGxDLElBQVQsRUFBRCxDQUF0QjtBQUNBMlQsVUFBTSxDQUFDdEQsSUFBUCxDQUFhLFFBQVE2K0QsR0FBUixHQUFjLEdBQTNCO0FBQ0FvQixhQUFTLENBQUNqZ0UsSUFBVixDQUFlO0FBQUUsa0JBQVk2K0Q7QUFBZCxLQUFmO0FBQ0Fya0UsYUFBUyxHQUFHaUcsS0FBSyxHQUFHdzBCLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU3RvQyxNQUE3QjtBQUNEOztBQUNELE1BQUk2TixTQUFTLEdBQUdGLElBQUksQ0FBQzNOLE1BQXJCLEVBQTZCO0FBQzNCc3pFLGFBQVMsQ0FBQ2pnRSxJQUFWLENBQWVrZ0UsVUFBVSxHQUFHNWxFLElBQUksQ0FBQ3kyQixLQUFMLENBQVd2MkIsU0FBWCxDQUE1QjtBQUNBOEksVUFBTSxDQUFDdEQsSUFBUCxDQUFZZ0wsSUFBSSxDQUFDQyxTQUFMLENBQWVpMUQsVUFBZixDQUFaO0FBQ0Q7O0FBQ0QsU0FBTztBQUNMeHhELGNBQVUsRUFBRXBMLE1BQU0sQ0FBQzBELElBQVAsQ0FBWSxHQUFaLENBRFA7QUFFTDFELFVBQU0sRUFBRTI4RDtBQUZILEdBQVA7QUFJRDtBQUVEOztBQUVBOzs7OztBQUdBLFNBQVNFLGlCQUFULENBQ0U1OEIsRUFERixFQUVFcjNDLEtBRkYsRUFHRW84RCxTQUhGLEVBSUU7QUFDQSxNQUFJaGYsR0FBRyxHQUFHZ2YsU0FBUyxJQUFJLEVBQXZCO0FBQ0EsTUFBSThYLE1BQU0sR0FBRzkyQixHQUFHLENBQUM4MkIsTUFBakI7QUFDQSxNQUFJendFLElBQUksR0FBRzI1QyxHQUFHLENBQUMzNUMsSUFBZjtBQUVBLE1BQUkwd0UsbUJBQW1CLEdBQUcsS0FBMUI7QUFDQSxNQUFJQyxlQUFlLEdBQUdELG1CQUF0Qjs7QUFDQSxNQUFJMXdFLElBQUosRUFBVTtBQUNSMndFLG1CQUFlLEdBQ2IsYUFBYUQsbUJBQWIsR0FBbUMsZUFBbkMsR0FDQSxJQURBLEdBQ09BLG1CQURQLEdBQzZCLFNBRDdCLEdBRUEsSUFGQSxHQUVPQSxtQkFGUCxHQUU2QixHQUgvQjtBQUlEOztBQUNELE1BQUlELE1BQUosRUFBWTtBQUNWRSxtQkFBZSxHQUFHLFFBQVFBLGVBQVIsR0FBMEIsR0FBNUM7QUFDRDs7QUFDRCxNQUFJQyxVQUFVLEdBQUdDLGlCQUFpQixDQUFDdDBFLEtBQUQsRUFBUW8wRSxlQUFSLENBQWxDO0FBRUEvOEIsSUFBRSxDQUFDeGYsS0FBSCxHQUFXO0FBQ1Q3M0IsU0FBSyxFQUFHLE1BQU1BLEtBQU4sR0FBYyxHQURiO0FBRVR3aUIsY0FBVSxFQUFFMUQsSUFBSSxDQUFDQyxTQUFMLENBQWUvZSxLQUFmLENBRkg7QUFHVG16QixZQUFRLEVBQUcsZUFBZWdoRCxtQkFBZixHQUFxQyxLQUFyQyxHQUE2Q0UsVUFBN0MsR0FBMEQ7QUFINUQsR0FBWDtBQUtEO0FBRUQ7Ozs7O0FBR0EsU0FBU0MsaUJBQVQsQ0FDRXQwRSxLQURGLEVBRUVxMEUsVUFGRixFQUdFO0FBQ0EsTUFBSXAxQyxHQUFHLEdBQUdzMUMsVUFBVSxDQUFDdjBFLEtBQUQsQ0FBcEI7O0FBQ0EsTUFBSWkvQixHQUFHLENBQUMvZCxHQUFKLEtBQVksSUFBaEIsRUFBc0I7QUFDcEIsV0FBUWxoQixLQUFLLEdBQUcsR0FBUixHQUFjcTBFLFVBQXRCO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBUSxVQUFXcDFDLEdBQUcsQ0FBQzB6QyxHQUFmLEdBQXNCLElBQXRCLEdBQThCMXpDLEdBQUcsQ0FBQy9kLEdBQWxDLEdBQXlDLElBQXpDLEdBQWdEbXpELFVBQWhELEdBQTZELEdBQXJFO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsSUFBSTcrQixHQUFKLEVBQVNoVixHQUFULEVBQWNnMEMsR0FBZCxFQUFtQkMsT0FBbkIsRUFBNEJDLGFBQTVCLEVBQTJDQyxnQkFBM0M7O0FBSUEsU0FBU0osVUFBVCxDQUFxQnp0QyxHQUFyQixFQUEwQjtBQUN4QjtBQUNBO0FBQ0FBLEtBQUcsR0FBR0EsR0FBRyxDQUFDcmpDLElBQUosRUFBTjtBQUNBK3hDLEtBQUcsR0FBRzFPLEdBQUcsQ0FBQ3JtQyxNQUFWOztBQUVBLE1BQUlxbUMsR0FBRyxDQUFDempDLE9BQUosQ0FBWSxHQUFaLElBQW1CLENBQW5CLElBQXdCeWpDLEdBQUcsQ0FBQzh0QyxXQUFKLENBQWdCLEdBQWhCLElBQXVCcC9CLEdBQUcsR0FBRyxDQUF6RCxFQUE0RDtBQUMxRGkvQixXQUFPLEdBQUczdEMsR0FBRyxDQUFDOHRDLFdBQUosQ0FBZ0IsR0FBaEIsQ0FBVjs7QUFDQSxRQUFJSCxPQUFPLEdBQUcsQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCLGFBQU87QUFDTDlCLFdBQUcsRUFBRTdyQyxHQUFHLENBQUNqQyxLQUFKLENBQVUsQ0FBVixFQUFhNHZDLE9BQWIsQ0FEQTtBQUVMdnpELFdBQUcsRUFBRSxNQUFNNGxCLEdBQUcsQ0FBQ2pDLEtBQUosQ0FBVTR2QyxPQUFPLEdBQUcsQ0FBcEIsQ0FBTixHQUErQjtBQUYvQixPQUFQO0FBSUQsS0FMRCxNQUtPO0FBQ0wsYUFBTztBQUNMOUIsV0FBRyxFQUFFN3JDLEdBREE7QUFFTDVsQixXQUFHLEVBQUU7QUFGQSxPQUFQO0FBSUQ7QUFDRjs7QUFFRHNmLEtBQUcsR0FBR3NHLEdBQU47QUFDQTJ0QyxTQUFPLEdBQUdDLGFBQWEsR0FBR0MsZ0JBQWdCLEdBQUcsQ0FBN0M7O0FBRUEsU0FBTyxDQUFDRSxHQUFHLEVBQVgsRUFBZTtBQUNiTCxPQUFHLEdBQUdsZ0QsSUFBSSxFQUFWO0FBQ0E7O0FBQ0EsUUFBSXdnRCxhQUFhLENBQUNOLEdBQUQsQ0FBakIsRUFBd0I7QUFDdEJPLGlCQUFXLENBQUNQLEdBQUQsQ0FBWDtBQUNELEtBRkQsTUFFTyxJQUFJQSxHQUFHLEtBQUssSUFBWixFQUFrQjtBQUN2QlEsa0JBQVksQ0FBQ1IsR0FBRCxDQUFaO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPO0FBQ0w3QixPQUFHLEVBQUU3ckMsR0FBRyxDQUFDakMsS0FBSixDQUFVLENBQVYsRUFBYTZ2QyxhQUFiLENBREE7QUFFTHh6RCxPQUFHLEVBQUU0bEIsR0FBRyxDQUFDakMsS0FBSixDQUFVNnZDLGFBQWEsR0FBRyxDQUExQixFQUE2QkMsZ0JBQTdCO0FBRkEsR0FBUDtBQUlEOztBQUVELFNBQVNyZ0QsSUFBVCxHQUFpQjtBQUNmLFNBQU9rTSxHQUFHLENBQUMyRSxVQUFKLENBQWUsRUFBRXN2QyxPQUFqQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksR0FBVCxHQUFnQjtBQUNkLFNBQU9KLE9BQU8sSUFBSWovQixHQUFsQjtBQUNEOztBQUVELFNBQVNzL0IsYUFBVCxDQUF3Qk4sR0FBeEIsRUFBNkI7QUFDM0IsU0FBT0EsR0FBRyxLQUFLLElBQVIsSUFBZ0JBLEdBQUcsS0FBSyxJQUEvQjtBQUNEOztBQUVELFNBQVNRLFlBQVQsQ0FBdUJSLEdBQXZCLEVBQTRCO0FBQzFCLE1BQUlTLFNBQVMsR0FBRyxDQUFoQjtBQUNBUCxlQUFhLEdBQUdELE9BQWhCOztBQUNBLFNBQU8sQ0FBQ0ksR0FBRyxFQUFYLEVBQWU7QUFDYkwsT0FBRyxHQUFHbGdELElBQUksRUFBVjs7QUFDQSxRQUFJd2dELGFBQWEsQ0FBQ04sR0FBRCxDQUFqQixFQUF3QjtBQUN0Qk8saUJBQVcsQ0FBQ1AsR0FBRCxDQUFYO0FBQ0E7QUFDRDs7QUFDRCxRQUFJQSxHQUFHLEtBQUssSUFBWixFQUFrQjtBQUFFUyxlQUFTO0FBQUs7O0FBQ2xDLFFBQUlULEdBQUcsS0FBSyxJQUFaLEVBQWtCO0FBQUVTLGVBQVM7QUFBSzs7QUFDbEMsUUFBSUEsU0FBUyxLQUFLLENBQWxCLEVBQXFCO0FBQ25CTixzQkFBZ0IsR0FBR0YsT0FBbkI7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTTSxXQUFULENBQXNCUCxHQUF0QixFQUEyQjtBQUN6QixNQUFJVSxXQUFXLEdBQUdWLEdBQWxCOztBQUNBLFNBQU8sQ0FBQ0ssR0FBRyxFQUFYLEVBQWU7QUFDYkwsT0FBRyxHQUFHbGdELElBQUksRUFBVjs7QUFDQSxRQUFJa2dELEdBQUcsS0FBS1UsV0FBWixFQUF5QjtBQUN2QjtBQUNEO0FBQ0Y7QUFDRjtBQUVEOztBQUlBOzs7QUFDQSxTQUFTQyxRQUFULENBQW1CcmpDLEdBQW5CLEVBQXdCc2pDLEtBQXhCLEVBQStCO0FBQzdCNzVDLFNBQU8sQ0FBQ0UsS0FBUixDQUFlLHFCQUFxQnFXLEdBQXBDO0FBQ0Q7QUFDRDs7O0FBRUEsU0FBU3VqQyxtQkFBVCxDQUNFeDNELE9BREYsRUFFRXFELEdBRkYsRUFHRTtBQUNBLFNBQU9yRCxPQUFPLEdBQ1ZBLE9BQU8sQ0FBQ3JELEdBQVIsQ0FBWSxVQUFVakwsQ0FBVixFQUFhO0FBQUUsV0FBT0EsQ0FBQyxDQUFDMlIsR0FBRCxDQUFSO0FBQWdCLEdBQTNDLEVBQTZDcVksTUFBN0MsQ0FBb0QsVUFBVTluQixDQUFWLEVBQWE7QUFBRSxXQUFPQSxDQUFQO0FBQVcsR0FBOUUsQ0FEVSxHQUVWLEVBRko7QUFHRDs7QUFFRCxTQUFTNmpFLE9BQVQsQ0FBa0JqK0IsRUFBbEIsRUFBc0JseUMsSUFBdEIsRUFBNEJuRixLQUE1QixFQUFtQ28xRSxLQUFuQyxFQUEwQ0csT0FBMUMsRUFBbUQ7QUFDakQsR0FBQ2wrQixFQUFFLENBQUNyZixLQUFILEtBQWFxZixFQUFFLENBQUNyZixLQUFILEdBQVcsRUFBeEIsQ0FBRCxFQUE4QmxrQixJQUE5QixDQUFtQzBoRSxZQUFZLENBQUM7QUFBRXJ3RSxRQUFJLEVBQUVBLElBQVI7QUFBY25GLFNBQUssRUFBRUEsS0FBckI7QUFBNEJ1MUUsV0FBTyxFQUFFQTtBQUFyQyxHQUFELEVBQWlESCxLQUFqRCxDQUEvQztBQUNBLzlCLElBQUUsQ0FBQ28rQixLQUFILEdBQVcsS0FBWDtBQUNEOztBQUVELFNBQVNDLE9BQVQsQ0FBa0JyK0IsRUFBbEIsRUFBc0JseUMsSUFBdEIsRUFBNEJuRixLQUE1QixFQUFtQ28xRSxLQUFuQyxFQUEwQ0csT0FBMUMsRUFBbUQ7QUFDakQsTUFBSS95QixLQUFLLEdBQUcreUIsT0FBTyxHQUNkbCtCLEVBQUUsQ0FBQ3MrQixZQUFILEtBQW9CdCtCLEVBQUUsQ0FBQ3MrQixZQUFILEdBQWtCLEVBQXRDLENBRGMsR0FFZHQrQixFQUFFLENBQUNtTCxLQUFILEtBQWFuTCxFQUFFLENBQUNtTCxLQUFILEdBQVcsRUFBeEIsQ0FGTDtBQUdBQSxPQUFLLENBQUMxdUMsSUFBTixDQUFXMGhFLFlBQVksQ0FBQztBQUFFcndFLFFBQUksRUFBRUEsSUFBUjtBQUFjbkYsU0FBSyxFQUFFQSxLQUFyQjtBQUE0QnUxRSxXQUFPLEVBQUVBO0FBQXJDLEdBQUQsRUFBaURILEtBQWpELENBQXZCO0FBQ0EvOUIsSUFBRSxDQUFDbytCLEtBQUgsR0FBVyxLQUFYO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTRyxVQUFULENBQXFCditCLEVBQXJCLEVBQXlCbHlDLElBQXpCLEVBQStCbkYsS0FBL0IsRUFBc0NvMUUsS0FBdEMsRUFBNkM7QUFDM0MvOUIsSUFBRSxDQUFDdytCLFFBQUgsQ0FBWTF3RSxJQUFaLElBQW9CbkYsS0FBcEI7QUFDQXEzQyxJQUFFLENBQUN5K0IsU0FBSCxDQUFhaGlFLElBQWIsQ0FBa0IwaEUsWUFBWSxDQUFDO0FBQUVyd0UsUUFBSSxFQUFFQSxJQUFSO0FBQWNuRixTQUFLLEVBQUVBO0FBQXJCLEdBQUQsRUFBK0JvMUUsS0FBL0IsQ0FBOUI7QUFDRDs7QUFFRCxTQUFTVyxZQUFULENBQ0UxK0IsRUFERixFQUVFbHlDLElBRkYsRUFHRW0zRCxPQUhGLEVBSUV0OEQsS0FKRixFQUtFVSxHQUxGLEVBTUVzMUUsWUFORixFQU9FNVosU0FQRixFQVFFZ1osS0FSRixFQVNFO0FBQ0EsR0FBQy85QixFQUFFLENBQUM2QixVQUFILEtBQWtCN0IsRUFBRSxDQUFDNkIsVUFBSCxHQUFnQixFQUFsQyxDQUFELEVBQXdDcGxDLElBQXhDLENBQTZDMGhFLFlBQVksQ0FBQztBQUN4RHJ3RSxRQUFJLEVBQUVBLElBRGtEO0FBRXhEbTNELFdBQU8sRUFBRUEsT0FGK0M7QUFHeER0OEQsU0FBSyxFQUFFQSxLQUhpRDtBQUl4RFUsT0FBRyxFQUFFQSxHQUptRDtBQUt4RHMxRSxnQkFBWSxFQUFFQSxZQUwwQztBQU14RDVaLGFBQVMsRUFBRUE7QUFONkMsR0FBRCxFQU90RGdaLEtBUHNELENBQXpEO0FBUUEvOUIsSUFBRSxDQUFDbytCLEtBQUgsR0FBVyxLQUFYO0FBQ0Q7O0FBRUQsU0FBU1EscUJBQVQsQ0FBZ0M1cEIsTUFBaEMsRUFBd0NsbkQsSUFBeEMsRUFBOENvd0UsT0FBOUMsRUFBdUQ7QUFDckQsU0FBT0EsT0FBTyxHQUNULFFBQVFwd0UsSUFBUixHQUFlLEtBQWYsR0FBdUJrbkQsTUFBdkIsR0FBZ0MsS0FEdkIsR0FFVkEsTUFBTSxHQUFHbG5ELElBRmIsQ0FEcUQsQ0FHbkM7QUFDbkI7O0FBRUQsU0FBUyt3RSxVQUFULENBQ0U3K0IsRUFERixFQUVFbHlDLElBRkYsRUFHRW5GLEtBSEYsRUFJRW84RCxTQUpGLEVBS0UrWixTQUxGLEVBTUUzNkMsSUFORixFQU9FNDVDLEtBUEYsRUFRRUcsT0FSRixFQVNFO0FBQ0FuWixXQUFTLEdBQUdBLFNBQVMsSUFBSWx5QixXQUF6QixDQURBLENBRUE7O0FBQ0E7O0FBQ0EsTUFDRXJMLEtBQUEsSUFBeUNyRCxJQUF6QyxJQUNBNGdDLFNBQVMsQ0FBQ2dhLE9BRFYsSUFDcUJoYSxTQUFTLENBQUM1YSxPQUZqQyxFQUdFO0FBQ0FobUIsUUFBSSxDQUNGLGtEQUNBLCtDQUZFLEVBR0Y0NUMsS0FIRSxDQUFKO0FBS0QsR0FiRCxDQWVBO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBSWhaLFNBQVMsQ0FBQ25wRCxLQUFkLEVBQXFCO0FBQ25CLFFBQUlzaUUsT0FBSixFQUFhO0FBQ1hwd0UsVUFBSSxHQUFHLE1BQU1BLElBQU4sR0FBYSw2QkFBYixHQUE2Q0EsSUFBN0MsR0FBb0QsR0FBM0Q7QUFDRCxLQUZELE1BRU8sSUFBSUEsSUFBSSxLQUFLLE9BQWIsRUFBc0I7QUFDM0JBLFVBQUksR0FBRyxhQUFQO0FBQ0EsYUFBT2kzRCxTQUFTLENBQUNucEQsS0FBakI7QUFDRDtBQUNGLEdBUEQsTUFPTyxJQUFJbXBELFNBQVMsQ0FBQ2lhLE1BQWQsRUFBc0I7QUFDM0IsUUFBSWQsT0FBSixFQUFhO0FBQ1hwd0UsVUFBSSxHQUFHLE1BQU1BLElBQU4sR0FBYSx5QkFBYixHQUF5Q0EsSUFBekMsR0FBZ0QsR0FBdkQ7QUFDRCxLQUZELE1BRU8sSUFBSUEsSUFBSSxLQUFLLE9BQWIsRUFBc0I7QUFDM0JBLFVBQUksR0FBRyxTQUFQO0FBQ0Q7QUFDRixHQS9CRCxDQWlDQTs7O0FBQ0EsTUFBSWkzRCxTQUFTLENBQUN2Z0IsT0FBZCxFQUF1QjtBQUNyQixXQUFPdWdCLFNBQVMsQ0FBQ3ZnQixPQUFqQjtBQUNBMTJDLFFBQUksR0FBRzh3RSxxQkFBcUIsQ0FBQyxHQUFELEVBQU05d0UsSUFBTixFQUFZb3dFLE9BQVosQ0FBNUI7QUFDRDs7QUFDRCxNQUFJblosU0FBUyxDQUFDeHVCLElBQWQsRUFBb0I7QUFDbEIsV0FBT3d1QixTQUFTLENBQUN4dUIsSUFBakI7QUFDQXpvQyxRQUFJLEdBQUc4d0UscUJBQXFCLENBQUMsR0FBRCxFQUFNOXdFLElBQU4sRUFBWW93RSxPQUFaLENBQTVCO0FBQ0Q7QUFDRDs7O0FBQ0EsTUFBSW5aLFNBQVMsQ0FBQzVhLE9BQWQsRUFBdUI7QUFDckIsV0FBTzRhLFNBQVMsQ0FBQzVhLE9BQWpCO0FBQ0FyOEMsUUFBSSxHQUFHOHdFLHFCQUFxQixDQUFDLEdBQUQsRUFBTTl3RSxJQUFOLEVBQVlvd0UsT0FBWixDQUE1QjtBQUNEOztBQUVELE1BQUluWCxNQUFKOztBQUNBLE1BQUloQyxTQUFTLENBQUNrYSxNQUFkLEVBQXNCO0FBQ3BCLFdBQU9sYSxTQUFTLENBQUNrYSxNQUFqQjtBQUNBbFksVUFBTSxHQUFHL21CLEVBQUUsQ0FBQ2svQixZQUFILEtBQW9CbC9CLEVBQUUsQ0FBQ2svQixZQUFILEdBQWtCLEVBQXRDLENBQVQ7QUFDRCxHQUhELE1BR087QUFDTG5ZLFVBQU0sR0FBRy9tQixFQUFFLENBQUMrbUIsTUFBSCxLQUFjL21CLEVBQUUsQ0FBQyttQixNQUFILEdBQVksRUFBMUIsQ0FBVDtBQUNEOztBQUVELE1BQUlvWSxVQUFVLEdBQUdoQixZQUFZLENBQUM7QUFBRXgxRSxTQUFLLEVBQUVBLEtBQUssQ0FBQ3lELElBQU4sRUFBVDtBQUF1Qjh4RSxXQUFPLEVBQUVBO0FBQWhDLEdBQUQsRUFBNENILEtBQTVDLENBQTdCOztBQUNBLE1BQUloWixTQUFTLEtBQUtseUIsV0FBbEIsRUFBK0I7QUFDN0Jzc0MsY0FBVSxDQUFDcGEsU0FBWCxHQUF1QkEsU0FBdkI7QUFDRDs7QUFFRCxNQUFJclksUUFBUSxHQUFHcWEsTUFBTSxDQUFDajVELElBQUQsQ0FBckI7QUFDQTs7QUFDQSxNQUFJbWMsS0FBSyxDQUFDaWUsT0FBTixDQUFjd2tCLFFBQWQsQ0FBSixFQUE2QjtBQUMzQm95QixhQUFTLEdBQUdweUIsUUFBUSxDQUFDMHlCLE9BQVQsQ0FBaUJELFVBQWpCLENBQUgsR0FBa0N6eUIsUUFBUSxDQUFDandDLElBQVQsQ0FBYzBpRSxVQUFkLENBQTNDO0FBQ0QsR0FGRCxNQUVPLElBQUl6eUIsUUFBSixFQUFjO0FBQ25CcWEsVUFBTSxDQUFDajVELElBQUQsQ0FBTixHQUFlZ3hFLFNBQVMsR0FBRyxDQUFDSyxVQUFELEVBQWF6eUIsUUFBYixDQUFILEdBQTRCLENBQUNBLFFBQUQsRUFBV3l5QixVQUFYLENBQXBEO0FBQ0QsR0FGTSxNQUVBO0FBQ0xwWSxVQUFNLENBQUNqNUQsSUFBRCxDQUFOLEdBQWVxeEUsVUFBZjtBQUNEOztBQUVEbi9CLElBQUUsQ0FBQ28rQixLQUFILEdBQVcsS0FBWDtBQUNEOztBQUVELFNBQVNpQixpQkFBVCxDQUNFci9CLEVBREYsRUFFRWx5QyxJQUZGLEVBR0U7QUFDQSxTQUFPa3lDLEVBQUUsQ0FBQ3MvQixXQUFILENBQWUsTUFBTXh4RSxJQUFyQixLQUNMa3lDLEVBQUUsQ0FBQ3MvQixXQUFILENBQWUsWUFBWXh4RSxJQUEzQixDQURLLElBRUxreUMsRUFBRSxDQUFDcy9CLFdBQUgsQ0FBZXh4RSxJQUFmLENBRkY7QUFHRDs7QUFFRCxTQUFTeXhFLGNBQVQsQ0FDRXYvQixFQURGLEVBRUVseUMsSUFGRixFQUdFMHhFLFNBSEYsRUFJRTtBQUNBLE1BQUlDLFlBQVksR0FDZEMsZ0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLLE1BQU1seUMsSUFBWCxDQUFoQixJQUNBNHhFLGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBSyxZQUFZbHlDLElBQWpCLENBRmxCOztBQUdBLE1BQUkyeEUsWUFBWSxJQUFJLElBQXBCLEVBQTBCO0FBQ3hCLFdBQU9wRSxZQUFZLENBQUNvRSxZQUFELENBQW5CO0FBQ0QsR0FGRCxNQUVPLElBQUlELFNBQVMsS0FBSyxLQUFsQixFQUF5QjtBQUM5QixRQUFJRyxXQUFXLEdBQUdELGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBS2x5QyxJQUFMLENBQWxDOztBQUNBLFFBQUk2eEUsV0FBVyxJQUFJLElBQW5CLEVBQXlCO0FBQ3ZCLGFBQU9sNEQsSUFBSSxDQUFDQyxTQUFMLENBQWVpNEQsV0FBZixDQUFQO0FBQ0Q7QUFDRjtBQUNGLEMsQ0FFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0QsZ0JBQVQsQ0FDRTEvQixFQURGLEVBRUVseUMsSUFGRixFQUdFOHhFLGFBSEYsRUFJRTtBQUNBLE1BQUlud0MsR0FBSjs7QUFDQSxNQUFJLENBQUNBLEdBQUcsR0FBR3VRLEVBQUUsQ0FBQ3crQixRQUFILENBQVkxd0UsSUFBWixDQUFQLEtBQTZCLElBQWpDLEVBQXVDO0FBQ3JDLFFBQUlzWSxJQUFJLEdBQUc0NUIsRUFBRSxDQUFDeStCLFNBQWQ7O0FBQ0EsU0FBSyxJQUFJejZELENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUdzWixJQUFJLENBQUNoZCxNQUF6QixFQUFpQzRhLENBQUMsR0FBR2xYLENBQXJDLEVBQXdDa1gsQ0FBQyxFQUF6QyxFQUE2QztBQUMzQyxVQUFJb0MsSUFBSSxDQUFDcEMsQ0FBRCxDQUFKLENBQVFsVyxJQUFSLEtBQWlCQSxJQUFyQixFQUEyQjtBQUN6QnNZLFlBQUksQ0FBQ2d1QixNQUFMLENBQVlwd0IsQ0FBWixFQUFlLENBQWY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxNQUFJNDdELGFBQUosRUFBbUI7QUFDakIsV0FBTzUvQixFQUFFLENBQUN3K0IsUUFBSCxDQUFZMXdFLElBQVosQ0FBUDtBQUNEOztBQUNELFNBQU8yaEMsR0FBUDtBQUNEOztBQUVELFNBQVNvd0MsdUJBQVQsQ0FDRTcvQixFQURGLEVBRUVseUMsSUFGRixFQUdFO0FBQ0EsTUFBSXNZLElBQUksR0FBRzQ1QixFQUFFLENBQUN5K0IsU0FBZDs7QUFDQSxPQUFLLElBQUl6NkQsQ0FBQyxHQUFHLENBQVIsRUFBV2xYLENBQUMsR0FBR3NaLElBQUksQ0FBQ2hkLE1BQXpCLEVBQWlDNGEsQ0FBQyxHQUFHbFgsQ0FBckMsRUFBd0NrWCxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDLFFBQUk0MkQsSUFBSSxHQUFHeDBELElBQUksQ0FBQ3BDLENBQUQsQ0FBZjs7QUFDQSxRQUFJbFcsSUFBSSxDQUFDN0QsSUFBTCxDQUFVMndFLElBQUksQ0FBQzlzRSxJQUFmLENBQUosRUFBMEI7QUFDeEJzWSxVQUFJLENBQUNndUIsTUFBTCxDQUFZcHdCLENBQVosRUFBZSxDQUFmO0FBQ0EsYUFBTzQyRCxJQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVN1RCxZQUFULENBQ0U5M0QsSUFERixFQUVFMDNELEtBRkYsRUFHRTtBQUNBLE1BQUlBLEtBQUosRUFBVztBQUNULFFBQUlBLEtBQUssQ0FBQy9tRSxLQUFOLElBQWUsSUFBbkIsRUFBeUI7QUFDdkJxUCxVQUFJLENBQUNyUCxLQUFMLEdBQWErbUUsS0FBSyxDQUFDL21FLEtBQW5CO0FBQ0Q7O0FBQ0QsUUFBSSttRSxLQUFLLENBQUMzbUUsR0FBTixJQUFhLElBQWpCLEVBQXVCO0FBQ3JCaVAsVUFBSSxDQUFDalAsR0FBTCxHQUFXMm1FLEtBQUssQ0FBQzNtRSxHQUFqQjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT2lQLElBQVA7QUFDRDtBQUVEOzs7QUFFQSxJQUFJeTVELElBQUksR0FBRyxXQUFYO0FBQ0EsSUFBSUMsS0FBSyxHQUFHLFdBQVo7QUFDQSxJQUFJQyxVQUFVLEdBQUcsb0NBQWpCO0FBQ0EsSUFBSUMsYUFBYSxHQUFHLGdDQUFwQjtBQUNBLElBQUlDLGFBQWEsR0FBRyxVQUFwQjtBQUNBLElBQUlDLFlBQVksR0FBRyxVQUFuQjtBQUVBLElBQUlDLEtBQUssR0FBRyxRQUFaO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLGlCQUFiO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLHVCQUFqQjtBQUVBLElBQUlDLE1BQU0sR0FBRyxpQkFBYjtBQUVBLElBQUlDLFdBQVcsR0FBRyxRQUFsQjtBQUNBLElBQUlDLGNBQWMsR0FBRyxNQUFyQjtBQUVBLElBQUlDLGtCQUFrQixHQUFHLGFBQXpCO0FBRUEsSUFBSUMsZ0JBQWdCLEdBQUdyc0MsTUFBTSxDQUFDd2pDLEVBQUUsQ0FBQ0MsTUFBSixDQUE3QjtBQUVBLElBQUk2SSxtQkFBbUIsR0FBRyxTQUExQixDLENBRUE7O0FBQ0EsSUFBSUMsTUFBSjtBQUNBLElBQUl4RSxVQUFKO0FBQ0EsSUFBSXlFLFVBQUo7QUFDQSxJQUFJQyxhQUFKO0FBQ0EsSUFBSUMsY0FBSjtBQUNBLElBQUlDLGdCQUFKO0FBQ0EsSUFBSUMsbUJBQUo7QUFDQSxJQUFJQyx1QkFBSjtBQUNBLElBQUlDLGNBQUo7O0FBRUEsU0FBU0MsZ0JBQVQsQ0FDRWxsQyxHQURGLEVBRUVnUCxLQUZGLEVBR0Vwd0IsTUFIRixFQUlFO0FBQ0EsU0FBTztBQUNMN2MsUUFBSSxFQUFFLENBREQ7QUFFTGkrQixPQUFHLEVBQUVBLEdBRkE7QUFHTHNpQyxhQUFTLEVBQUV0ekIsS0FITjtBQUlMcXpCLFlBQVEsRUFBRThDLFlBQVksQ0FBQ24yQixLQUFELENBSmpCO0FBS0xtMEIsZUFBVyxFQUFFLEVBTFI7QUFNTHZrRCxVQUFNLEVBQUVBLE1BTkg7QUFPTHFoQixZQUFRLEVBQUU7QUFQTCxHQUFQO0FBU0Q7QUFFRDs7Ozs7QUFHQSxTQUFTcnlCLEtBQVQsQ0FDRTZVLFFBREYsRUFFRThHLE9BRkYsRUFHRTtBQUNBbTdDLFFBQU0sR0FBR243QyxPQUFPLENBQUN2QixJQUFSLElBQWdCMjVDLFFBQXpCO0FBRUFtRCxrQkFBZ0IsR0FBR3Y3QyxPQUFPLENBQUM2N0MsUUFBUixJQUFvQjdyQyxFQUF2QztBQUNBd3JDLHFCQUFtQixHQUFHeDdDLE9BQU8sQ0FBQ3NVLFdBQVIsSUFBdUJ0RSxFQUE3QztBQUNBeXJDLHlCQUF1QixHQUFHejdDLE9BQU8sQ0FBQ29VLGVBQVIsSUFBMkJwRSxFQUFyRDtBQUNBLE1BQUlpRSxhQUFhLEdBQUdqVSxPQUFPLENBQUNpVSxhQUFSLElBQXlCakUsRUFBN0M7O0FBQ0EwckMsZ0JBQWMsR0FBRyx3QkFBVXBoQyxFQUFWLEVBQWM7QUFBRSxXQUFPLENBQUMsQ0FBQ0EsRUFBRSxDQUFDdDBDLFNBQUwsSUFBa0IsQ0FBQ2l1QyxhQUFhLENBQUNxRyxFQUFFLENBQUM3RCxHQUFKLENBQXZDO0FBQWtELEdBQW5GOztBQUVBMmtDLFlBQVUsR0FBRzlDLG1CQUFtQixDQUFDdDRDLE9BQU8sQ0FBQ2xmLE9BQVQsRUFBa0IsZUFBbEIsQ0FBaEM7QUFDQXU2RCxlQUFhLEdBQUcvQyxtQkFBbUIsQ0FBQ3Q0QyxPQUFPLENBQUNsZixPQUFULEVBQWtCLGtCQUFsQixDQUFuQztBQUNBdzZELGdCQUFjLEdBQUdoRCxtQkFBbUIsQ0FBQ3Q0QyxPQUFPLENBQUNsZixPQUFULEVBQWtCLG1CQUFsQixDQUFwQztBQUVBNjFELFlBQVUsR0FBRzMyQyxPQUFPLENBQUMyMkMsVUFBckI7QUFFQSxNQUFJcjJDLEtBQUssR0FBRyxFQUFaO0FBQ0EsTUFBSXc3QyxrQkFBa0IsR0FBRzk3QyxPQUFPLENBQUM4N0Msa0JBQVIsS0FBK0IsS0FBeEQ7QUFDQSxNQUFJQyxnQkFBZ0IsR0FBRy83QyxPQUFPLENBQUN1SSxVQUEvQjtBQUNBLE1BQUl4RCxJQUFKO0FBQ0EsTUFBSWkzQyxhQUFKO0FBQ0EsTUFBSXppQixNQUFNLEdBQUcsS0FBYjtBQUNBLE1BQUkwaUIsS0FBSyxHQUFHLEtBQVo7QUFDQSxNQUFJQyxNQUFNLEdBQUcsS0FBYjs7QUFFQSxXQUFTQyxRQUFULENBQW1CcG5DLEdBQW5CLEVBQXdCc2pDLEtBQXhCLEVBQStCO0FBQzdCLFFBQUksQ0FBQzZELE1BQUwsRUFBYTtBQUNYQSxZQUFNLEdBQUcsSUFBVDtBQUNBZixZQUFNLENBQUNwbUMsR0FBRCxFQUFNc2pDLEtBQU4sQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsV0FBUytELFlBQVQsQ0FBdUJwekMsT0FBdkIsRUFBZ0M7QUFDOUJxekMsd0JBQW9CLENBQUNyekMsT0FBRCxDQUFwQjs7QUFDQSxRQUFJLENBQUN1d0IsTUFBRCxJQUFXLENBQUN2d0IsT0FBTyxDQUFDc3pDLFNBQXhCLEVBQW1DO0FBQ2pDdHpDLGFBQU8sR0FBR3V6QyxjQUFjLENBQUN2ekMsT0FBRCxFQUFVaEosT0FBVixDQUF4QjtBQUNELEtBSjZCLENBSzlCOzs7QUFDQSxRQUFJLENBQUNNLEtBQUssQ0FBQzU4QixNQUFQLElBQWlCc2xDLE9BQU8sS0FBS2pFLElBQWpDLEVBQXVDO0FBQ3JDO0FBQ0EsVUFBSUEsSUFBSSxDQUFDaWpDLEVBQUwsS0FBWWgvQixPQUFPLENBQUN3ekMsTUFBUixJQUFrQnh6QyxPQUFPLENBQUN5ekMsSUFBdEMsQ0FBSixFQUFpRDtBQUMvQyxZQUFJMzZDLElBQUosRUFBMkM7QUFDekM0NkMsOEJBQW9CLENBQUMxekMsT0FBRCxDQUFwQjtBQUNEOztBQUNEMnpDLHNCQUFjLENBQUM1M0MsSUFBRCxFQUFPO0FBQ25CNndDLGFBQUcsRUFBRTVzQyxPQUFPLENBQUN3ekMsTUFETTtBQUVuQi8vRCxlQUFLLEVBQUV1c0I7QUFGWSxTQUFQLENBQWQ7QUFJRCxPQVJELE1BUU8sSUFBSWxILElBQUosRUFBMkM7QUFDaERxNkMsZ0JBQVEsQ0FDTixpRUFDQSw4Q0FEQSxHQUVBLHNDQUhNLEVBSU47QUFBRTdxRSxlQUFLLEVBQUUwM0IsT0FBTyxDQUFDMTNCO0FBQWpCLFNBSk0sQ0FBUjtBQU1EO0FBQ0Y7O0FBQ0QsUUFBSTBxRSxhQUFhLElBQUksQ0FBQ2h6QyxPQUFPLENBQUM0ekMsU0FBOUIsRUFBeUM7QUFDdkMsVUFBSTV6QyxPQUFPLENBQUN3ekMsTUFBUixJQUFrQnh6QyxPQUFPLENBQUN5ekMsSUFBOUIsRUFBb0M7QUFDbENJLDJCQUFtQixDQUFDN3pDLE9BQUQsRUFBVWd6QyxhQUFWLENBQW5CO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBSWh6QyxPQUFPLENBQUM4ekMsU0FBWixFQUF1QjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxjQUFJMTBFLElBQUksR0FBRzRnQyxPQUFPLENBQUMrekMsVUFBUixJQUFzQixXQUFqQztBQUNDLFdBQUNmLGFBQWEsQ0FBQ2hyQixXQUFkLEtBQThCZ3JCLGFBQWEsQ0FBQ2hyQixXQUFkLEdBQTRCLEVBQTFELENBQUQsRUFBZ0U1b0QsSUFBaEUsSUFBd0U0Z0MsT0FBeEU7QUFDRjs7QUFDRGd6QyxxQkFBYSxDQUFDdGxDLFFBQWQsQ0FBdUIzL0IsSUFBdkIsQ0FBNEJpeUIsT0FBNUI7QUFDQUEsZUFBTyxDQUFDM1QsTUFBUixHQUFpQjJtRCxhQUFqQjtBQUNEO0FBQ0YsS0F2QzZCLENBeUM5QjtBQUNBOzs7QUFDQWh6QyxXQUFPLENBQUMwTixRQUFSLEdBQW1CMU4sT0FBTyxDQUFDME4sUUFBUixDQUFpQmxhLE1BQWpCLENBQXdCLFVBQVUwUyxDQUFWLEVBQWE7QUFBRSxhQUFPLENBQUVBLENBQUQsQ0FBSTR0QyxTQUFaO0FBQXdCLEtBQS9ELENBQW5CLENBM0M4QixDQTRDOUI7O0FBQ0FULHdCQUFvQixDQUFDcnpDLE9BQUQsQ0FBcEIsQ0E3QzhCLENBK0M5Qjs7QUFDQSxRQUFJQSxPQUFPLENBQUM2cUIsR0FBWixFQUFpQjtBQUNmMEYsWUFBTSxHQUFHLEtBQVQ7QUFDRDs7QUFDRCxRQUFJZ2lCLGdCQUFnQixDQUFDdnlDLE9BQU8sQ0FBQ3lOLEdBQVQsQ0FBcEIsRUFBbUM7QUFDakN3bEMsV0FBSyxHQUFHLEtBQVI7QUFDRCxLQXJENkIsQ0FzRDlCOzs7QUFDQSxTQUFLLElBQUkzOUQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2c5RCxjQUFjLENBQUM1M0UsTUFBbkMsRUFBMkM0YSxDQUFDLEVBQTVDLEVBQWdEO0FBQzlDZzlELG9CQUFjLENBQUNoOUQsQ0FBRCxDQUFkLENBQWtCMHFCLE9BQWxCLEVBQTJCaEosT0FBM0I7QUFDRDtBQUNGOztBQUVELFdBQVNxOEMsb0JBQVQsQ0FBK0IvaEMsRUFBL0IsRUFBbUM7QUFDakM7QUFDQSxRQUFJLENBQUMyaEMsS0FBTCxFQUFZO0FBQ1YsVUFBSWUsUUFBSjs7QUFDQSxhQUNFLENBQUNBLFFBQVEsR0FBRzFpQyxFQUFFLENBQUM1RCxRQUFILENBQVk0RCxFQUFFLENBQUM1RCxRQUFILENBQVloekMsTUFBWixHQUFxQixDQUFqQyxDQUFaLEtBQ0FzNUUsUUFBUSxDQUFDeGtFLElBQVQsS0FBa0IsQ0FEbEIsSUFFQXdrRSxRQUFRLENBQUMzckUsSUFBVCxLQUFrQixHQUhwQixFQUlFO0FBQ0FpcEMsVUFBRSxDQUFDNUQsUUFBSCxDQUFZeFgsR0FBWjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTdzlDLG9CQUFULENBQStCcGlDLEVBQS9CLEVBQW1DO0FBQ2pDLFFBQUlBLEVBQUUsQ0FBQzdELEdBQUgsS0FBVyxNQUFYLElBQXFCNkQsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLFVBQXBDLEVBQWdEO0FBQzlDMGxDLGNBQVEsQ0FDTixpQkFBa0I3aEMsRUFBRSxDQUFDN0QsR0FBckIsR0FBNEIsNkNBQTVCLEdBQ0EseUJBRk0sRUFHTjtBQUFFbmxDLGFBQUssRUFBRWdwQyxFQUFFLENBQUNocEM7QUFBWixPQUhNLENBQVI7QUFLRDs7QUFDRCxRQUFJZ3BDLEVBQUUsQ0FBQ3crQixRQUFILENBQVkxMkMsY0FBWixDQUEyQixPQUEzQixDQUFKLEVBQXlDO0FBQ3ZDKzVDLGNBQVEsQ0FDTixpRUFDQSwrQkFGTSxFQUdON2hDLEVBQUUsQ0FBQ3MvQixXQUFILENBQWUsT0FBZixDQUhNLENBQVI7QUFLRDtBQUNGOztBQUVEaEcsV0FBUyxDQUFDMTZDLFFBQUQsRUFBVztBQUNsQnVGLFFBQUksRUFBRTA4QyxNQURZO0FBRWxCdEgsY0FBVSxFQUFFN3pDLE9BQU8sQ0FBQzZ6QyxVQUZGO0FBR2xCckksY0FBVSxFQUFFeHJDLE9BQU8sQ0FBQ3dyQyxVQUhGO0FBSWxCRSxvQkFBZ0IsRUFBRTFyQyxPQUFPLENBQUMwckMsZ0JBSlI7QUFLbEJpSSx3QkFBb0IsRUFBRTN6QyxPQUFPLENBQUMyekMsb0JBTFo7QUFNbEIwQiwrQkFBMkIsRUFBRXIxQyxPQUFPLENBQUNxMUMsMkJBTm5CO0FBT2xCcEIscUJBQWlCLEVBQUVqMEMsT0FBTyxDQUFDaTlDLFFBUFQ7QUFRbEIzSCxxQkFBaUIsRUFBRXQxQyxPQUFPLENBQUNzMUMsaUJBUlQ7QUFTbEJoa0UsU0FBSyxFQUFFLFNBQVNBLEtBQVQsQ0FBZ0JtbEMsR0FBaEIsRUFBcUJnUCxLQUFyQixFQUE0QjJ2QixLQUE1QixFQUFtQzhILE9BQW5DLEVBQTRDeHJFLEdBQTVDLEVBQWlEO0FBQ3REO0FBQ0E7QUFDQSxVQUFJb2xDLEVBQUUsR0FBSWtsQyxhQUFhLElBQUlBLGFBQWEsQ0FBQ2xsQyxFQUFoQyxJQUF1QzJrQyx1QkFBdUIsQ0FBQ2hsQyxHQUFELENBQXZFLENBSHNELENBS3REOztBQUNBOztBQUNBLFVBQUl6RSxJQUFJLElBQUk4RSxFQUFFLEtBQUssS0FBbkIsRUFBMEI7QUFDeEIyTyxhQUFLLEdBQUcwM0IsYUFBYSxDQUFDMTNCLEtBQUQsQ0FBckI7QUFDRDs7QUFFRCxVQUFJemMsT0FBTyxHQUFHMnlDLGdCQUFnQixDQUFDbGxDLEdBQUQsRUFBTWdQLEtBQU4sRUFBYXUyQixhQUFiLENBQTlCOztBQUNBLFVBQUlsbEMsRUFBSixFQUFRO0FBQ045TixlQUFPLENBQUM4TixFQUFSLEdBQWFBLEVBQWI7QUFDRDs7QUFFRCxVQUFJaFYsSUFBSixFQUEyQztBQUN6QyxZQUFJOUIsT0FBTyxDQUFDczFDLGlCQUFaLEVBQStCO0FBQzdCdHNDLGlCQUFPLENBQUMxM0IsS0FBUixHQUFnQjRyRSxPQUFoQjtBQUNBbDBDLGlCQUFPLENBQUN0M0IsR0FBUixHQUFjQSxHQUFkO0FBQ0FzM0IsaUJBQU8sQ0FBQzR3QyxXQUFSLEdBQXNCNXdDLE9BQU8sQ0FBQyt2QyxTQUFSLENBQWtCNzFDLE1BQWxCLENBQXlCLFVBQVVrNkMsU0FBVixFQUFxQmxJLElBQXJCLEVBQTJCO0FBQ3hFa0kscUJBQVMsQ0FBQ2xJLElBQUksQ0FBQzlzRSxJQUFOLENBQVQsR0FBdUI4c0UsSUFBdkI7QUFDQSxtQkFBT2tJLFNBQVA7QUFDRCxXQUhxQixFQUduQixFQUhtQixDQUF0QjtBQUlEOztBQUNEMzNCLGFBQUssQ0FBQ2puQyxPQUFOLENBQWMsVUFBVTAyRCxJQUFWLEVBQWdCO0FBQzVCLGNBQUk4RixrQkFBa0IsQ0FBQ3oyRSxJQUFuQixDQUF3QjJ3RSxJQUFJLENBQUM5c0UsSUFBN0IsQ0FBSixFQUF3QztBQUN0Qyt5RSxrQkFBTSxDQUNKLHlFQUNBLCtCQUZJLEVBR0o7QUFDRTdwRSxtQkFBSyxFQUFFNGpFLElBQUksQ0FBQzVqRSxLQUFMLEdBQWE0akUsSUFBSSxDQUFDOXNFLElBQUwsQ0FBVTlCLE9BQVYsQ0FBa0IsR0FBbEIsQ0FEdEI7QUFFRW9MLGlCQUFHLEVBQUV3akUsSUFBSSxDQUFDNWpFLEtBQUwsR0FBYTRqRSxJQUFJLENBQUM5c0UsSUFBTCxDQUFVMUU7QUFGOUIsYUFISSxDQUFOO0FBUUQ7QUFDRixTQVhEO0FBWUQ7O0FBRUQsVUFBSTI1RSxjQUFjLENBQUNyMEMsT0FBRCxDQUFkLElBQTJCLENBQUMwSixpQkFBaUIsRUFBakQsRUFBcUQ7QUFDbkQxSixlQUFPLENBQUM0ekMsU0FBUixHQUFvQixJQUFwQjtBQUNBOTZDLGFBQUEsSUFBeUNxNUMsTUFBTSxDQUM3Qyx1RUFDQSxzRUFEQSxHQUVBLEdBRkEsR0FFTTFrQyxHQUZOLEdBRVksR0FGWixHQUVrQiwrQkFIMkIsRUFJN0M7QUFBRW5sQyxlQUFLLEVBQUUwM0IsT0FBTyxDQUFDMTNCO0FBQWpCLFNBSjZDLENBQS9DO0FBTUQsT0EvQ3FELENBaUR0RDs7O0FBQ0EsV0FBSyxJQUFJZ04sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRys4RCxhQUFhLENBQUMzM0UsTUFBbEMsRUFBMEM0YSxDQUFDLEVBQTNDLEVBQStDO0FBQzdDMHFCLGVBQU8sR0FBR3F5QyxhQUFhLENBQUMvOEQsQ0FBRCxDQUFiLENBQWlCMHFCLE9BQWpCLEVBQTBCaEosT0FBMUIsS0FBc0NnSixPQUFoRDtBQUNEOztBQUVELFVBQUksQ0FBQ3V3QixNQUFMLEVBQWE7QUFDWCtqQixrQkFBVSxDQUFDdDBDLE9BQUQsQ0FBVjs7QUFDQSxZQUFJQSxPQUFPLENBQUM2cUIsR0FBWixFQUFpQjtBQUNmMEYsZ0JBQU0sR0FBRyxJQUFUO0FBQ0Q7QUFDRjs7QUFDRCxVQUFJZ2lCLGdCQUFnQixDQUFDdnlDLE9BQU8sQ0FBQ3lOLEdBQVQsQ0FBcEIsRUFBbUM7QUFDakN3bEMsYUFBSyxHQUFHLElBQVI7QUFDRDs7QUFDRCxVQUFJMWlCLE1BQUosRUFBWTtBQUNWZ2tCLHVCQUFlLENBQUN2MEMsT0FBRCxDQUFmO0FBQ0QsT0FGRCxNQUVPLElBQUksQ0FBQ0EsT0FBTyxDQUFDc3pDLFNBQWIsRUFBd0I7QUFDN0I7QUFDQWtCLGtCQUFVLENBQUN4MEMsT0FBRCxDQUFWO0FBQ0F5MEMsaUJBQVMsQ0FBQ3owQyxPQUFELENBQVQ7QUFDQTAwQyxtQkFBVyxDQUFDMTBDLE9BQUQsQ0FBWDtBQUNEOztBQUVELFVBQUksQ0FBQ2pFLElBQUwsRUFBVztBQUNUQSxZQUFJLEdBQUdpRSxPQUFQOztBQUNBLFlBQUlsSCxJQUFKLEVBQTJDO0FBQ3pDNDZDLDhCQUFvQixDQUFDMzNDLElBQUQsQ0FBcEI7QUFDRDtBQUNGOztBQUVELFVBQUksQ0FBQ3F3QyxLQUFMLEVBQVk7QUFDVjRHLHFCQUFhLEdBQUdoekMsT0FBaEI7QUFDQTFJLGFBQUssQ0FBQ3ZwQixJQUFOLENBQVdpeUIsT0FBWDtBQUNELE9BSEQsTUFHTztBQUNMb3pDLG9CQUFZLENBQUNwekMsT0FBRCxDQUFaO0FBQ0Q7QUFDRixLQTlGaUI7QUFnR2xCdDNCLE9BQUcsRUFBRSxTQUFTQSxHQUFULENBQWMra0MsR0FBZCxFQUFtQm5sQyxLQUFuQixFQUEwQnFzRSxLQUExQixFQUFpQztBQUNwQyxVQUFJMzBDLE9BQU8sR0FBRzFJLEtBQUssQ0FBQ0EsS0FBSyxDQUFDNThCLE1BQU4sR0FBZSxDQUFoQixDQUFuQixDQURvQyxDQUVwQzs7QUFDQTQ4QixXQUFLLENBQUM1OEIsTUFBTixJQUFnQixDQUFoQjtBQUNBczRFLG1CQUFhLEdBQUcxN0MsS0FBSyxDQUFDQSxLQUFLLENBQUM1OEIsTUFBTixHQUFlLENBQWhCLENBQXJCOztBQUNBLFVBQUlvK0IsS0FBQSxJQUF5QzlCLE9BQU8sQ0FBQ3MxQyxpQkFBckQsRUFBd0U7QUFDdEV0c0MsZUFBTyxDQUFDdDNCLEdBQVIsR0FBY2lzRSxLQUFkO0FBQ0Q7O0FBQ0R2QixrQkFBWSxDQUFDcHpDLE9BQUQsQ0FBWjtBQUNELEtBekdpQjtBQTJHbEI0ckMsU0FBSyxFQUFFLFNBQVNBLEtBQVQsQ0FBZ0J2akUsSUFBaEIsRUFBc0JDLEtBQXRCLEVBQTZCSSxHQUE3QixFQUFrQztBQUN2QyxVQUFJLENBQUNzcUUsYUFBTCxFQUFvQjtBQUNsQixZQUFJbDZDLElBQUosRUFBMkM7QUFDekMsY0FBSXp3QixJQUFJLEtBQUs2bkIsUUFBYixFQUF1QjtBQUNyQmlqRCxvQkFBUSxDQUNOLG9FQURNLEVBRU47QUFBRTdxRSxtQkFBSyxFQUFFQTtBQUFULGFBRk0sQ0FBUjtBQUlELFdBTEQsTUFLTyxJQUFLRCxJQUFJLEdBQUdBLElBQUksQ0FBQzNLLElBQUwsRUFBWixFQUEwQjtBQUMvQnkxRSxvQkFBUSxDQUNMLFlBQVk5cUUsSUFBWixHQUFtQiwwQ0FEZCxFQUVOO0FBQUVDLG1CQUFLLEVBQUVBO0FBQVQsYUFGTSxDQUFSO0FBSUQ7QUFDRjs7QUFDRDtBQUNELE9BaEJzQyxDQWlCdkM7O0FBQ0E7OztBQUNBLFVBQUkwZ0MsSUFBSSxJQUNOZ3FDLGFBQWEsQ0FBQ3ZsQyxHQUFkLEtBQXNCLFVBRHBCLElBRUZ1bEMsYUFBYSxDQUFDbEQsUUFBZCxDQUF1QnRPLFdBQXZCLEtBQXVDbjVELElBRnpDLEVBR0U7QUFDQTtBQUNEOztBQUNELFVBQUlxbEMsUUFBUSxHQUFHc2xDLGFBQWEsQ0FBQ3RsQyxRQUE3Qjs7QUFDQSxVQUFJdWxDLEtBQUssSUFBSTVxRSxJQUFJLENBQUMzSyxJQUFMLEVBQWIsRUFBMEI7QUFDeEIySyxZQUFJLEdBQUd1c0UsU0FBUyxDQUFDNUIsYUFBRCxDQUFULEdBQTJCM3FFLElBQTNCLEdBQWtDNHBFLGdCQUFnQixDQUFDNXBFLElBQUQsQ0FBekQ7QUFDRCxPQUZELE1BRU8sSUFBSSxDQUFDcWxDLFFBQVEsQ0FBQ2h6QyxNQUFkLEVBQXNCO0FBQzNCO0FBQ0EyTixZQUFJLEdBQUcsRUFBUDtBQUNELE9BSE0sTUFHQSxJQUFJMHFFLGdCQUFKLEVBQXNCO0FBQzNCLFlBQUlBLGdCQUFnQixLQUFLLFVBQXpCLEVBQXFDO0FBQ25DO0FBQ0E7QUFDQTFxRSxjQUFJLEdBQUd5cEUsV0FBVyxDQUFDdjJFLElBQVosQ0FBaUI4TSxJQUFqQixJQUF5QixFQUF6QixHQUE4QixHQUFyQztBQUNELFNBSkQsTUFJTztBQUNMQSxjQUFJLEdBQUcsR0FBUDtBQUNEO0FBQ0YsT0FSTSxNQVFBO0FBQ0xBLFlBQUksR0FBR3lxRSxrQkFBa0IsR0FBRyxHQUFILEdBQVMsRUFBbEM7QUFDRDs7QUFDRCxVQUFJenFFLElBQUosRUFBVTtBQUNSLFlBQUksQ0FBQzRxRSxLQUFELElBQVVGLGdCQUFnQixLQUFLLFVBQW5DLEVBQStDO0FBQzdDO0FBQ0ExcUUsY0FBSSxHQUFHQSxJQUFJLENBQUM1SyxPQUFMLENBQWFzMEUsY0FBYixFQUE2QixHQUE3QixDQUFQO0FBQ0Q7O0FBQ0QsWUFBSTc0QyxHQUFKO0FBQ0EsWUFBSTBWLEtBQUo7O0FBQ0EsWUFBSSxDQUFDMmhCLE1BQUQsSUFBV2xvRCxJQUFJLEtBQUssR0FBcEIsS0FBNEI2d0IsR0FBRyxHQUFHNDBDLFNBQVMsQ0FBQ3psRSxJQUFELEVBQU9zbEUsVUFBUCxDQUEzQyxDQUFKLEVBQW9FO0FBQ2xFLytCLGVBQUssR0FBRztBQUNOcC9CLGdCQUFJLEVBQUUsQ0FEQTtBQUVOaU4sc0JBQVUsRUFBRXljLEdBQUcsQ0FBQ3pjLFVBRlY7QUFHTnBMLGtCQUFNLEVBQUU2bkIsR0FBRyxDQUFDN25CLE1BSE47QUFJTmhKLGdCQUFJLEVBQUVBO0FBSkEsV0FBUjtBQU1ELFNBUEQsTUFPTyxJQUFJQSxJQUFJLEtBQUssR0FBVCxJQUFnQixDQUFDcWxDLFFBQVEsQ0FBQ2h6QyxNQUExQixJQUFvQ2d6QyxRQUFRLENBQUNBLFFBQVEsQ0FBQ2h6QyxNQUFULEdBQWtCLENBQW5CLENBQVIsQ0FBOEIyTixJQUE5QixLQUF1QyxHQUEvRSxFQUFvRjtBQUN6RnVtQyxlQUFLLEdBQUc7QUFDTnAvQixnQkFBSSxFQUFFLENBREE7QUFFTm5ILGdCQUFJLEVBQUVBO0FBRkEsV0FBUjtBQUlEOztBQUNELFlBQUl1bUMsS0FBSixFQUFXO0FBQ1QsY0FBSTlWLEtBQUEsSUFBeUM5QixPQUFPLENBQUNzMUMsaUJBQXJELEVBQXdFO0FBQ3RFMTlCLGlCQUFLLENBQUN0bUMsS0FBTixHQUFjQSxLQUFkO0FBQ0FzbUMsaUJBQUssQ0FBQ2xtQyxHQUFOLEdBQVlBLEdBQVo7QUFDRDs7QUFDRGdsQyxrQkFBUSxDQUFDMy9CLElBQVQsQ0FBYzZnQyxLQUFkO0FBQ0Q7QUFDRjtBQUNGLEtBakxpQjtBQWtMbEJxN0IsV0FBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBa0I1aEUsSUFBbEIsRUFBd0JDLEtBQXhCLEVBQStCSSxHQUEvQixFQUFvQztBQUMzQztBQUNBO0FBQ0EsVUFBSXNxRSxhQUFKLEVBQW1CO0FBQ2pCLFlBQUlwa0MsS0FBSyxHQUFHO0FBQ1ZwL0IsY0FBSSxFQUFFLENBREk7QUFFVm5ILGNBQUksRUFBRUEsSUFGSTtBQUdWaW1DLG1CQUFTLEVBQUU7QUFIRCxTQUFaOztBQUtBLFlBQUl4VixLQUFBLElBQXlDOUIsT0FBTyxDQUFDczFDLGlCQUFyRCxFQUF3RTtBQUN0RTE5QixlQUFLLENBQUN0bUMsS0FBTixHQUFjQSxLQUFkO0FBQ0FzbUMsZUFBSyxDQUFDbG1DLEdBQU4sR0FBWUEsR0FBWjtBQUNEOztBQUNEc3FFLHFCQUFhLENBQUN0bEMsUUFBZCxDQUF1QjMvQixJQUF2QixDQUE0QjZnQyxLQUE1QjtBQUNEO0FBQ0Y7QUFqTWlCLEdBQVgsQ0FBVDtBQW1NQSxTQUFPN1MsSUFBUDtBQUNEOztBQUVELFNBQVN1NEMsVUFBVCxDQUFxQmhqQyxFQUFyQixFQUF5QjtBQUN2QixNQUFJMC9CLGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBSyxPQUFMLENBQWhCLElBQWlDLElBQXJDLEVBQTJDO0FBQ3pDQSxNQUFFLENBQUN1WixHQUFILEdBQVMsSUFBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzBwQixlQUFULENBQTBCampDLEVBQTFCLEVBQThCO0FBQzVCLE1BQUk1NUIsSUFBSSxHQUFHNDVCLEVBQUUsQ0FBQ3krQixTQUFkO0FBQ0EsTUFBSXRnQyxHQUFHLEdBQUcvM0IsSUFBSSxDQUFDaGQsTUFBZjs7QUFDQSxNQUFJKzBDLEdBQUosRUFBUztBQUNQLFFBQUlnTixLQUFLLEdBQUduTCxFQUFFLENBQUNtTCxLQUFILEdBQVcsSUFBSWxoQyxLQUFKLENBQVVrMEIsR0FBVixDQUF2Qjs7QUFDQSxTQUFLLElBQUluNkIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR202QixHQUFwQixFQUF5Qm42QixDQUFDLEVBQTFCLEVBQThCO0FBQzVCbW5DLFdBQUssQ0FBQ25uQyxDQUFELENBQUwsR0FBVztBQUNUbFcsWUFBSSxFQUFFc1ksSUFBSSxDQUFDcEMsQ0FBRCxDQUFKLENBQVFsVyxJQURMO0FBRVRuRixhQUFLLEVBQUU4ZSxJQUFJLENBQUNDLFNBQUwsQ0FBZXRCLElBQUksQ0FBQ3BDLENBQUQsQ0FBSixDQUFRcmIsS0FBdkI7QUFGRSxPQUFYOztBQUlBLFVBQUl5ZCxJQUFJLENBQUNwQyxDQUFELENBQUosQ0FBUWhOLEtBQVIsSUFBaUIsSUFBckIsRUFBMkI7QUFDekJtMEMsYUFBSyxDQUFDbm5DLENBQUQsQ0FBTCxDQUFTaE4sS0FBVCxHQUFpQm9QLElBQUksQ0FBQ3BDLENBQUQsQ0FBSixDQUFRaE4sS0FBekI7QUFDQW0wQyxhQUFLLENBQUNubkMsQ0FBRCxDQUFMLENBQVM1TSxHQUFULEdBQWVnUCxJQUFJLENBQUNwQyxDQUFELENBQUosQ0FBUTVNLEdBQXZCO0FBQ0Q7QUFDRjtBQUNGLEdBWkQsTUFZTyxJQUFJLENBQUM0b0MsRUFBRSxDQUFDdVosR0FBUixFQUFhO0FBQ2xCO0FBQ0F2WixNQUFFLENBQUNvK0IsS0FBSCxHQUFXLElBQVg7QUFDRDtBQUNGOztBQUVELFNBQVM2RCxjQUFULENBQ0V2ekMsT0FERixFQUVFaEosT0FGRixFQUdFO0FBQ0E2OUMsWUFBVSxDQUFDNzBDLE9BQUQsQ0FBVixDQURBLENBR0E7QUFDQTs7QUFDQUEsU0FBTyxDQUFDMHZDLEtBQVIsR0FDRSxDQUFDMXZDLE9BQU8sQ0FBQzdrQixHQUFULElBQ0EsQ0FBQzZrQixPQUFPLENBQUNnb0IsV0FEVCxJQUVBLENBQUNob0IsT0FBTyxDQUFDK3ZDLFNBQVIsQ0FBa0JyMUUsTUFIckI7QUFNQW82RSxZQUFVLENBQUM5MEMsT0FBRCxDQUFWO0FBQ0ErMEMsb0JBQWtCLENBQUMvMEMsT0FBRCxDQUFsQjtBQUNBZzFDLG1CQUFpQixDQUFDaDFDLE9BQUQsQ0FBakI7QUFDQWkxQyxrQkFBZ0IsQ0FBQ2oxQyxPQUFELENBQWhCOztBQUNBLE9BQUssSUFBSTFxQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHODhELFVBQVUsQ0FBQzEzRSxNQUEvQixFQUF1QzRhLENBQUMsRUFBeEMsRUFBNEM7QUFDMUMwcUIsV0FBTyxHQUFHb3lDLFVBQVUsQ0FBQzk4RCxDQUFELENBQVYsQ0FBYzBxQixPQUFkLEVBQXVCaEosT0FBdkIsS0FBbUNnSixPQUE3QztBQUNEOztBQUNEazFDLGNBQVksQ0FBQ2wxQyxPQUFELENBQVo7QUFDQSxTQUFPQSxPQUFQO0FBQ0Q7O0FBRUQsU0FBUzYwQyxVQUFULENBQXFCdmpDLEVBQXJCLEVBQXlCO0FBQ3ZCLE1BQUlzN0IsR0FBRyxHQUFHaUUsY0FBYyxDQUFDdi9CLEVBQUQsRUFBSyxLQUFMLENBQXhCOztBQUNBLE1BQUlzN0IsR0FBSixFQUFTO0FBQ1AsUUFBSTl6QyxJQUFKLEVBQTJDO0FBQ3pDLFVBQUl3WSxFQUFFLENBQUM3RCxHQUFILEtBQVcsVUFBZixFQUEyQjtBQUN6QjBrQyxjQUFNLENBQ0oscUVBREksRUFFSnhCLGlCQUFpQixDQUFDci9CLEVBQUQsRUFBSyxLQUFMLENBRmIsQ0FBTjtBQUlEOztBQUNELFVBQUlBLEVBQUUsQ0FBQzZqQyxHQUFQLEVBQVk7QUFDVixZQUFJcmdELFFBQVEsR0FBR3djLEVBQUUsQ0FBQzhqQyxTQUFILElBQWdCOWpDLEVBQUUsQ0FBQytqQyxTQUFsQztBQUNBLFlBQUlocEQsTUFBTSxHQUFHaWxCLEVBQUUsQ0FBQ2psQixNQUFoQjs7QUFDQSxZQUFJeUksUUFBUSxJQUFJQSxRQUFRLEtBQUs4M0MsR0FBekIsSUFBZ0N2Z0QsTUFBaEMsSUFBMENBLE1BQU0sQ0FBQ29oQixHQUFQLEtBQWUsa0JBQTdELEVBQWlGO0FBQy9FMGtDLGdCQUFNLENBQ0osbUVBQ0EscUNBRkksRUFHSnhCLGlCQUFpQixDQUFDci9CLEVBQUQsRUFBSyxLQUFMLENBSGIsRUFJSjtBQUFLO0FBSkQsV0FBTjtBQU1EO0FBQ0Y7QUFDRjs7QUFDREEsTUFBRSxDQUFDbjJCLEdBQUgsR0FBU3l4RCxHQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTa0ksVUFBVCxDQUFxQnhqQyxFQUFyQixFQUF5QjtBQUN2QixNQUFJK0YsR0FBRyxHQUFHdzVCLGNBQWMsQ0FBQ3YvQixFQUFELEVBQUssS0FBTCxDQUF4Qjs7QUFDQSxNQUFJK0YsR0FBSixFQUFTO0FBQ1AvRixNQUFFLENBQUMrRixHQUFILEdBQVNBLEdBQVQ7QUFDQS9GLE1BQUUsQ0FBQ29HLFFBQUgsR0FBYzQ5QixVQUFVLENBQUNoa0MsRUFBRCxDQUF4QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU2tqQyxVQUFULENBQXFCbGpDLEVBQXJCLEVBQXlCO0FBQ3ZCLE1BQUlzN0IsR0FBSjs7QUFDQSxNQUFLQSxHQUFHLEdBQUdvRSxnQkFBZ0IsQ0FBQzEvQixFQUFELEVBQUssT0FBTCxDQUEzQixFQUEyQztBQUN6QyxRQUFJcFksR0FBRyxHQUFHcThDLFFBQVEsQ0FBQzNJLEdBQUQsQ0FBbEI7O0FBQ0EsUUFBSTF6QyxHQUFKLEVBQVM7QUFDUHlOLFlBQU0sQ0FBQzJLLEVBQUQsRUFBS3BZLEdBQUwsQ0FBTjtBQUNELEtBRkQsTUFFTyxJQUFJSixJQUFKLEVBQTJDO0FBQ2hEcTVDLFlBQU0sQ0FDSCwrQkFBK0J2RixHQUQ1QixFQUVKdDdCLEVBQUUsQ0FBQ3MvQixXQUFILENBQWUsT0FBZixDQUZJLENBQU47QUFJRDtBQUNGO0FBQ0Y7O0FBSUQsU0FBUzJFLFFBQVQsQ0FBbUIzSSxHQUFuQixFQUF3QjtBQUN0QixNQUFJNEksT0FBTyxHQUFHNUksR0FBRyxDQUFDNXBDLEtBQUosQ0FBVXN1QyxVQUFWLENBQWQ7O0FBQ0EsTUFBSSxDQUFDa0UsT0FBTCxFQUFjO0FBQUU7QUFBUTs7QUFDeEIsTUFBSXQ4QyxHQUFHLEdBQUcsRUFBVjtBQUNBQSxLQUFHLENBQUNpOEMsR0FBSixHQUFVSyxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVc5M0UsSUFBWCxFQUFWO0FBQ0EsTUFBSTQyQixLQUFLLEdBQUdraEQsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXOTNFLElBQVgsR0FBa0JELE9BQWxCLENBQTBCK3pFLGFBQTFCLEVBQXlDLEVBQXpDLENBQVo7QUFDQSxNQUFJaUUsYUFBYSxHQUFHbmhELEtBQUssQ0FBQzBPLEtBQU4sQ0FBWXV1QyxhQUFaLENBQXBCOztBQUNBLE1BQUlrRSxhQUFKLEVBQW1CO0FBQ2pCdjhDLE9BQUcsQ0FBQzVFLEtBQUosR0FBWUEsS0FBSyxDQUFDNzJCLE9BQU4sQ0FBYzh6RSxhQUFkLEVBQTZCLEVBQTdCLEVBQWlDN3pFLElBQWpDLEVBQVo7QUFDQXc3QixPQUFHLENBQUNtOEMsU0FBSixHQUFnQkksYUFBYSxDQUFDLENBQUQsQ0FBYixDQUFpQi8zRSxJQUFqQixFQUFoQjs7QUFDQSxRQUFJKzNFLGFBQWEsQ0FBQyxDQUFELENBQWpCLEVBQXNCO0FBQ3BCdjhDLFNBQUcsQ0FBQ2s4QyxTQUFKLEdBQWdCSyxhQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCLzNFLElBQWpCLEVBQWhCO0FBQ0Q7QUFDRixHQU5ELE1BTU87QUFDTHc3QixPQUFHLENBQUM1RSxLQUFKLEdBQVlBLEtBQVo7QUFDRDs7QUFDRCxTQUFPNEUsR0FBUDtBQUNEOztBQUVELFNBQVN1N0MsU0FBVCxDQUFvQm5qQyxFQUFwQixFQUF3QjtBQUN0QixNQUFJczdCLEdBQUcsR0FBR29FLGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBSyxNQUFMLENBQTFCOztBQUNBLE1BQUlzN0IsR0FBSixFQUFTO0FBQ1B0N0IsTUFBRSxDQUFDMHRCLEVBQUgsR0FBUTROLEdBQVI7QUFDQStHLGtCQUFjLENBQUNyaUMsRUFBRCxFQUFLO0FBQ2pCczdCLFNBQUcsRUFBRUEsR0FEWTtBQUVqQm41RCxXQUFLLEVBQUU2OUI7QUFGVSxLQUFMLENBQWQ7QUFJRCxHQU5ELE1BTU87QUFDTCxRQUFJMC9CLGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBSyxRQUFMLENBQWhCLElBQWtDLElBQXRDLEVBQTRDO0FBQzFDQSxRQUFFLENBQUNtaUMsSUFBSCxHQUFVLElBQVY7QUFDRDs7QUFDRCxRQUFJRCxNQUFNLEdBQUd4QyxnQkFBZ0IsQ0FBQzEvQixFQUFELEVBQUssV0FBTCxDQUE3Qjs7QUFDQSxRQUFJa2lDLE1BQUosRUFBWTtBQUNWbGlDLFFBQUUsQ0FBQ2tpQyxNQUFILEdBQVlBLE1BQVo7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU0ssbUJBQVQsQ0FBOEJ2aUMsRUFBOUIsRUFBa0NqbEIsTUFBbEMsRUFBMEM7QUFDeEMsTUFBSTBYLElBQUksR0FBRzJ4QyxlQUFlLENBQUNycEQsTUFBTSxDQUFDcWhCLFFBQVIsQ0FBMUI7O0FBQ0EsTUFBSTNKLElBQUksSUFBSUEsSUFBSSxDQUFDaTdCLEVBQWpCLEVBQXFCO0FBQ25CMlUsa0JBQWMsQ0FBQzV2QyxJQUFELEVBQU87QUFDbkI2b0MsU0FBRyxFQUFFdDdCLEVBQUUsQ0FBQ2tpQyxNQURXO0FBRW5CLy9ELFdBQUssRUFBRTY5QjtBQUZZLEtBQVAsQ0FBZDtBQUlELEdBTEQsTUFLTyxJQUFJeFksSUFBSixFQUEyQztBQUNoRHE1QyxVQUFNLENBQ0osUUFBUTdnQyxFQUFFLENBQUNraUMsTUFBSCxHQUFhLGNBQWNsaUMsRUFBRSxDQUFDa2lDLE1BQWpCLEdBQTBCLEdBQXZDLEdBQThDLE1BQXRELElBQWdFLEdBQWhFLEdBQ0EsbUJBREEsR0FDdUJsaUMsRUFBRSxDQUFDN0QsR0FEMUIsR0FDaUMsK0JBRjdCLEVBR0o2RCxFQUFFLENBQUNzL0IsV0FBSCxDQUFldC9CLEVBQUUsQ0FBQ2tpQyxNQUFILEdBQVksV0FBWixHQUEwQixRQUF6QyxDQUhJLENBQU47QUFLRDtBQUNGOztBQUVELFNBQVNrQyxlQUFULENBQTBCaG9DLFFBQTFCLEVBQW9DO0FBQ2xDLE1BQUlwNEIsQ0FBQyxHQUFHbzRCLFFBQVEsQ0FBQ2h6QyxNQUFqQjs7QUFDQSxTQUFPNGEsQ0FBQyxFQUFSLEVBQVk7QUFDVixRQUFJbzRCLFFBQVEsQ0FBQ3A0QixDQUFELENBQVIsQ0FBWTlGLElBQVosS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUIsYUFBT2srQixRQUFRLENBQUNwNEIsQ0FBRCxDQUFmO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSXdqQixLQUFBLElBQXlDNFUsUUFBUSxDQUFDcDRCLENBQUQsQ0FBUixDQUFZak4sSUFBWixLQUFxQixHQUFsRSxFQUF1RTtBQUNyRThwRSxjQUFNLENBQ0osWUFBYXprQyxRQUFRLENBQUNwNEIsQ0FBRCxDQUFSLENBQVlqTixJQUFaLENBQWlCM0ssSUFBakIsRUFBYixHQUF3QyxrQ0FBeEMsR0FDQSxrQkFGSSxFQUdKZ3dDLFFBQVEsQ0FBQ3A0QixDQUFELENBSEosQ0FBTjtBQUtEOztBQUNEbzRCLGNBQVEsQ0FBQ3hYLEdBQVQ7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU3k5QyxjQUFULENBQXlCcmlDLEVBQXpCLEVBQTZCOHRCLFNBQTdCLEVBQXdDO0FBQ3RDLE1BQUksQ0FBQzl0QixFQUFFLENBQUNxa0MsWUFBUixFQUFzQjtBQUNwQnJrQyxNQUFFLENBQUNxa0MsWUFBSCxHQUFrQixFQUFsQjtBQUNEOztBQUNEcmtDLElBQUUsQ0FBQ3FrQyxZQUFILENBQWdCNW5FLElBQWhCLENBQXFCcXhELFNBQXJCO0FBQ0Q7O0FBRUQsU0FBU3NWLFdBQVQsQ0FBc0JwakMsRUFBdEIsRUFBMEI7QUFDeEIsTUFBSXpKLElBQUksR0FBR21wQyxnQkFBZ0IsQ0FBQzEvQixFQUFELEVBQUssUUFBTCxDQUEzQjs7QUFDQSxNQUFJekosSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDaEJ5SixNQUFFLENBQUN6SixJQUFILEdBQVUsSUFBVjtBQUNEO0FBQ0YsQyxDQUVEO0FBQ0E7OztBQUNBLFNBQVNrdEMsa0JBQVQsQ0FBNkJ6akMsRUFBN0IsRUFBaUM7QUFDL0IsTUFBSXdpQyxTQUFKOztBQUNBLE1BQUl4aUMsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLFVBQWYsRUFBMkI7QUFDekJxbUMsYUFBUyxHQUFHOUMsZ0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLLE9BQUwsQ0FBNUI7QUFDQTs7QUFDQSxRQUFJeFksS0FBQSxJQUF5Q2c3QyxTQUE3QyxFQUF3RDtBQUN0RDNCLFlBQU0sQ0FDSix1RUFDQSx5RUFEQSxHQUVBLGtFQUZBLEdBR0Esc0JBSkksRUFLSjdnQyxFQUFFLENBQUNzL0IsV0FBSCxDQUFlLE9BQWYsQ0FMSSxFQU1KLElBTkksQ0FBTjtBQVFEOztBQUNEdC9CLE1BQUUsQ0FBQ3dpQyxTQUFILEdBQWVBLFNBQVMsSUFBSTlDLGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBSyxZQUFMLENBQTVDO0FBQ0QsR0FkRCxNQWNPLElBQUt3aUMsU0FBUyxHQUFHOUMsZ0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLLFlBQUwsQ0FBakMsRUFBc0Q7QUFDM0Q7QUFDQSxRQUFJeFksS0FBQSxJQUF5Q3dZLEVBQUUsQ0FBQ3crQixRQUFILENBQVksT0FBWixDQUE3QyxFQUFtRTtBQUNqRXFDLFlBQU0sQ0FDSiwwREFBMkQ3Z0MsRUFBRSxDQUFDN0QsR0FBOUQsR0FBcUUsSUFBckUsR0FDQSxrRUFEQSxHQUVBLGlDQUhJLEVBSUo2RCxFQUFFLENBQUNzL0IsV0FBSCxDQUFlLFlBQWYsQ0FKSSxFQUtKLElBTEksQ0FBTjtBQU9EOztBQUNEdC9CLE1BQUUsQ0FBQ3dpQyxTQUFILEdBQWVBLFNBQWY7QUFDRCxHQTVCOEIsQ0E4Qi9COzs7QUFDQSxNQUFJQyxVQUFVLEdBQUdsRCxjQUFjLENBQUN2L0IsRUFBRCxFQUFLLE1BQUwsQ0FBL0I7O0FBQ0EsTUFBSXlpQyxVQUFKLEVBQWdCO0FBQ2R6aUMsTUFBRSxDQUFDeWlDLFVBQUgsR0FBZ0JBLFVBQVUsS0FBSyxJQUFmLEdBQXNCLFdBQXRCLEdBQW9DQSxVQUFwRDtBQUNBemlDLE1BQUUsQ0FBQ3NrQyxpQkFBSCxHQUF1QixDQUFDLEVBQUV0a0MsRUFBRSxDQUFDdytCLFFBQUgsQ0FBWSxPQUFaLEtBQXdCeCtCLEVBQUUsQ0FBQ3crQixRQUFILENBQVksYUFBWixDQUExQixDQUF4QixDQUZjLENBR2Q7QUFDQTs7QUFDQSxRQUFJeCtCLEVBQUUsQ0FBQzdELEdBQUgsS0FBVyxVQUFYLElBQXlCLENBQUM2RCxFQUFFLENBQUN3aUMsU0FBakMsRUFBNEM7QUFDMUNuRSxhQUFPLENBQUNyK0IsRUFBRCxFQUFLLE1BQUwsRUFBYXlpQyxVQUFiLEVBQXlCcEQsaUJBQWlCLENBQUNyL0IsRUFBRCxFQUFLLE1BQUwsQ0FBMUMsQ0FBUDtBQUNEO0FBQ0YsR0F4QzhCLENBMEMvQjs7O0FBQ0E7QUFDRSxRQUFJQSxFQUFFLENBQUM3RCxHQUFILEtBQVcsVUFBZixFQUEyQjtBQUN6QjtBQUNBLFVBQUlvb0MsV0FBVyxHQUFHMUUsdUJBQXVCLENBQUM3L0IsRUFBRCxFQUFLdWdDLE1BQUwsQ0FBekM7O0FBQ0EsVUFBSWdFLFdBQUosRUFBaUI7QUFDZixZQUFJLzhDLElBQUosRUFBMkM7QUFDekMsY0FBSXdZLEVBQUUsQ0FBQ3lpQyxVQUFILElBQWlCemlDLEVBQUUsQ0FBQ3dpQyxTQUF4QixFQUFtQztBQUNqQzNCLGtCQUFNLENBQ0osb0RBREksRUFFSjdnQyxFQUZJLENBQU47QUFJRDs7QUFDRCxjQUFJQSxFQUFFLENBQUNqbEIsTUFBSCxJQUFhLENBQUNxbUQsY0FBYyxDQUFDcGhDLEVBQUUsQ0FBQ2psQixNQUFKLENBQWhDLEVBQTZDO0FBQzNDOGxELGtCQUFNLENBQ0osZ0VBQ0EsNkJBRkksRUFHSjdnQyxFQUhJLENBQU47QUFLRDtBQUNGOztBQUNELFlBQUkrRixHQUFHLEdBQUd5K0IsV0FBVyxDQUFDRCxXQUFELENBQXJCO0FBQ0EsWUFBSXoyRSxJQUFJLEdBQUdpNEMsR0FBRyxDQUFDajRDLElBQWY7QUFDQSxZQUFJb3dFLE9BQU8sR0FBR240QixHQUFHLENBQUNtNEIsT0FBbEI7QUFDQWwrQixVQUFFLENBQUN5aUMsVUFBSCxHQUFnQjMwRSxJQUFoQjtBQUNBa3lDLFVBQUUsQ0FBQ3NrQyxpQkFBSCxHQUF1QnBHLE9BQXZCO0FBQ0FsK0IsVUFBRSxDQUFDd2lDLFNBQUgsR0FBZStCLFdBQVcsQ0FBQzU3RSxLQUFaLElBQXFCaTRFLG1CQUFwQyxDQXJCZSxDQXFCMEM7QUFDMUQ7QUFDRixLQTFCRCxNQTBCTztBQUNMO0FBQ0EsVUFBSTZELGFBQWEsR0FBRzVFLHVCQUF1QixDQUFDNy9CLEVBQUQsRUFBS3VnQyxNQUFMLENBQTNDOztBQUNBLFVBQUlrRSxhQUFKLEVBQW1CO0FBQ2pCLFlBQUlqOUMsSUFBSixFQUEyQztBQUN6QyxjQUFJLENBQUM0NUMsY0FBYyxDQUFDcGhDLEVBQUQsQ0FBbkIsRUFBeUI7QUFDdkI2Z0Msa0JBQU0sQ0FDSixzREFESSxFQUVKNEQsYUFGSSxDQUFOO0FBSUQ7O0FBQ0QsY0FBSXprQyxFQUFFLENBQUN3aUMsU0FBSCxJQUFnQnhpQyxFQUFFLENBQUN5aUMsVUFBdkIsRUFBbUM7QUFDakM1QixrQkFBTSxDQUNKLG9EQURJLEVBRUo3Z0MsRUFGSSxDQUFOO0FBSUQ7O0FBQ0QsY0FBSUEsRUFBRSxDQUFDMFcsV0FBUCxFQUFvQjtBQUNsQm1xQixrQkFBTSxDQUNKLGdFQUNBLHFEQUZJLEVBR0o0RCxhQUhJLENBQU47QUFLRDtBQUNGLFNBckJnQixDQXNCakI7OztBQUNBLFlBQUlsekIsS0FBSyxHQUFHdlIsRUFBRSxDQUFDMFcsV0FBSCxLQUFtQjFXLEVBQUUsQ0FBQzBXLFdBQUgsR0FBaUIsRUFBcEMsQ0FBWjtBQUNBLFlBQUlndUIsS0FBSyxHQUFHRixXQUFXLENBQUNDLGFBQUQsQ0FBdkI7QUFDQSxZQUFJaHpCLE1BQU0sR0FBR2l6QixLQUFLLENBQUM1MkUsSUFBbkI7QUFDQSxZQUFJNjJFLFNBQVMsR0FBR0QsS0FBSyxDQUFDeEcsT0FBdEI7QUFDQSxZQUFJMEcsYUFBYSxHQUFHcnpCLEtBQUssQ0FBQ0UsTUFBRCxDQUFMLEdBQWdCNHZCLGdCQUFnQixDQUFDLFVBQUQsRUFBYSxFQUFiLEVBQWlCcmhDLEVBQWpCLENBQXBEO0FBQ0E0a0MscUJBQWEsQ0FBQ25DLFVBQWQsR0FBMkJoeEIsTUFBM0I7QUFDQW16QixxQkFBYSxDQUFDTixpQkFBZCxHQUFrQ0ssU0FBbEM7QUFDQUMscUJBQWEsQ0FBQ3hvQyxRQUFkLEdBQXlCNEQsRUFBRSxDQUFDNUQsUUFBSCxDQUFZbGEsTUFBWixDQUFtQixVQUFVMFMsQ0FBVixFQUFhO0FBQ3ZELGNBQUksQ0FBQ0EsQ0FBQyxDQUFDNHRDLFNBQVAsRUFBa0I7QUFDaEI1dEMsYUFBQyxDQUFDN1osTUFBRixHQUFXNnBELGFBQVg7QUFDQSxtQkFBTyxJQUFQO0FBQ0Q7QUFDRixTQUx3QixDQUF6QjtBQU1BQSxxQkFBYSxDQUFDcEMsU0FBZCxHQUEwQmlDLGFBQWEsQ0FBQzk3RSxLQUFkLElBQXVCaTRFLG1CQUFqRCxDQXBDaUIsQ0FxQ2pCOztBQUNBNWdDLFVBQUUsQ0FBQzVELFFBQUgsR0FBYyxFQUFkLENBdENpQixDQXVDakI7O0FBQ0E0RCxVQUFFLENBQUNvK0IsS0FBSCxHQUFXLEtBQVg7QUFDRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTb0csV0FBVCxDQUFzQkssT0FBdEIsRUFBK0I7QUFDN0IsTUFBSS8yRSxJQUFJLEdBQUcrMkUsT0FBTyxDQUFDLzJFLElBQVIsQ0FBYTNCLE9BQWIsQ0FBcUJvMEUsTUFBckIsRUFBNkIsRUFBN0IsQ0FBWDs7QUFDQSxNQUFJLENBQUN6eUUsSUFBTCxFQUFXO0FBQ1QsUUFBSSsyRSxPQUFPLENBQUMvMkUsSUFBUixDQUFhLENBQWIsTUFBb0IsR0FBeEIsRUFBNkI7QUFDM0JBLFVBQUksR0FBRyxTQUFQO0FBQ0QsS0FGRCxNQUVPLElBQUkwNUIsSUFBSixFQUEyQztBQUNoRHE1QyxZQUFNLENBQ0osK0NBREksRUFFSmdFLE9BRkksQ0FBTjtBQUlEO0FBQ0Y7O0FBQ0QsU0FBTzFFLFlBQVksQ0FBQ2wyRSxJQUFiLENBQWtCNkQsSUFBbEIsRUFDTDtBQURLLElBRUg7QUFBRUEsUUFBSSxFQUFFQSxJQUFJLENBQUMwL0IsS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFDLENBQWYsQ0FBUjtBQUEyQjB3QyxXQUFPLEVBQUU7QUFBcEMsR0FGRyxDQUdMO0FBSEssSUFJSDtBQUFFcHdFLFFBQUksRUFBRyxPQUFPQSxJQUFQLEdBQWMsSUFBdkI7QUFBOEJvd0UsV0FBTyxFQUFFO0FBQXZDLEdBSko7QUFLRCxDLENBRUQ7OztBQUNBLFNBQVN3RixpQkFBVCxDQUE0QjFqQyxFQUE1QixFQUFnQztBQUM5QixNQUFJQSxFQUFFLENBQUM3RCxHQUFILEtBQVcsTUFBZixFQUF1QjtBQUNyQjZELE1BQUUsQ0FBQzhrQyxRQUFILEdBQWN2RixjQUFjLENBQUN2L0IsRUFBRCxFQUFLLE1BQUwsQ0FBNUI7O0FBQ0EsUUFBSXhZLEtBQUEsSUFBeUN3WSxFQUFFLENBQUNuMkIsR0FBaEQsRUFBcUQ7QUFDbkRnM0QsWUFBTSxDQUNKLHNFQUNBLGtEQURBLEdBRUEsNENBSEksRUFJSnhCLGlCQUFpQixDQUFDci9CLEVBQUQsRUFBSyxLQUFMLENBSmIsQ0FBTjtBQU1EO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTMmpDLGdCQUFULENBQTJCM2pDLEVBQTNCLEVBQStCO0FBQzdCLE1BQUk2a0MsT0FBSjs7QUFDQSxNQUFLQSxPQUFPLEdBQUd0RixjQUFjLENBQUN2L0IsRUFBRCxFQUFLLElBQUwsQ0FBN0IsRUFBMEM7QUFDeENBLE1BQUUsQ0FBQ3QwQyxTQUFILEdBQWVtNUUsT0FBZjtBQUNEOztBQUNELE1BQUluRixnQkFBZ0IsQ0FBQzEvQixFQUFELEVBQUssaUJBQUwsQ0FBaEIsSUFBMkMsSUFBL0MsRUFBcUQ7QUFDbkRBLE1BQUUsQ0FBQzBZLGNBQUgsR0FBb0IsSUFBcEI7QUFDRDtBQUNGOztBQUVELFNBQVNrckIsWUFBVCxDQUF1QjVqQyxFQUF2QixFQUEyQjtBQUN6QixNQUFJNTVCLElBQUksR0FBRzQ1QixFQUFFLENBQUN5K0IsU0FBZDtBQUNBLE1BQUl6NkQsQ0FBSixFQUFPbFgsQ0FBUCxFQUFVZ0IsSUFBVixFQUFnQm0zRCxPQUFoQixFQUF5QnQ4RCxLQUF6QixFQUFnQ284RCxTQUFoQyxFQUEyQ2dnQixPQUEzQyxFQUFvREMsU0FBcEQ7O0FBQ0EsT0FBS2hoRSxDQUFDLEdBQUcsQ0FBSixFQUFPbFgsQ0FBQyxHQUFHc1osSUFBSSxDQUFDaGQsTUFBckIsRUFBNkI0YSxDQUFDLEdBQUdsWCxDQUFqQyxFQUFvQ2tYLENBQUMsRUFBckMsRUFBeUM7QUFDdkNsVyxRQUFJLEdBQUdtM0QsT0FBTyxHQUFHNytDLElBQUksQ0FBQ3BDLENBQUQsQ0FBSixDQUFRbFcsSUFBekI7QUFDQW5GLFNBQUssR0FBR3lkLElBQUksQ0FBQ3BDLENBQUQsQ0FBSixDQUFRcmIsS0FBaEI7O0FBQ0EsUUFBSW8zRSxLQUFLLENBQUM5MUUsSUFBTixDQUFXNkQsSUFBWCxDQUFKLEVBQXNCO0FBQ3BCO0FBQ0FreUMsUUFBRSxDQUFDaWxDLFdBQUgsR0FBaUIsSUFBakIsQ0FGb0IsQ0FHcEI7O0FBQ0FsZ0IsZUFBUyxHQUFHbWdCLGNBQWMsQ0FBQ3AzRSxJQUFJLENBQUMzQixPQUFMLENBQWE0ekUsS0FBYixFQUFvQixFQUFwQixDQUFELENBQTFCLENBSm9CLENBS3BCOztBQUNBLFVBQUloYixTQUFKLEVBQWU7QUFDYmozRCxZQUFJLEdBQUdBLElBQUksQ0FBQzNCLE9BQUwsQ0FBYW0wRSxVQUFiLEVBQXlCLEVBQXpCLENBQVA7QUFDRDs7QUFDRCxVQUFJRCxNQUFNLENBQUNwMkUsSUFBUCxDQUFZNkQsSUFBWixDQUFKLEVBQXVCO0FBQUU7QUFDdkJBLFlBQUksR0FBR0EsSUFBSSxDQUFDM0IsT0FBTCxDQUFhazBFLE1BQWIsRUFBcUIsRUFBckIsQ0FBUDtBQUNBMTNFLGFBQUssR0FBRzB5RSxZQUFZLENBQUMxeUUsS0FBRCxDQUFwQjtBQUNBcThFLGlCQUFTLEdBQUc3RSxZQUFZLENBQUNsMkUsSUFBYixDQUFrQjZELElBQWxCLENBQVo7O0FBQ0EsWUFBSWszRSxTQUFKLEVBQWU7QUFDYmwzRSxjQUFJLEdBQUdBLElBQUksQ0FBQzAvQixLQUFMLENBQVcsQ0FBWCxFQUFjLENBQUMsQ0FBZixDQUFQO0FBQ0Q7O0FBQ0QsWUFDRWhHLEtBQUEsSUFDQTcrQixLQUFLLENBQUN5RCxJQUFOLEdBQWFoRCxNQUFiLEtBQXdCLENBRjFCLEVBR0U7QUFDQXkzRSxnQkFBTSxDQUNILDBFQUEwRS95RSxJQUExRSxHQUFpRixJQUQ5RSxDQUFOO0FBR0Q7O0FBQ0QsWUFBSWkzRCxTQUFKLEVBQWU7QUFDYixjQUFJQSxTQUFTLENBQUN0a0MsSUFBVixJQUFrQixDQUFDdWtELFNBQXZCLEVBQWtDO0FBQ2hDbDNFLGdCQUFJLEdBQUc2bUMsUUFBUSxDQUFDN21DLElBQUQsQ0FBZjs7QUFDQSxnQkFBSUEsSUFBSSxLQUFLLFdBQWIsRUFBMEI7QUFBRUEsa0JBQUksR0FBRyxXQUFQO0FBQXFCO0FBQ2xEOztBQUNELGNBQUlpM0QsU0FBUyxDQUFDb2dCLEtBQVYsSUFBbUIsQ0FBQ0gsU0FBeEIsRUFBbUM7QUFDakNsM0UsZ0JBQUksR0FBRzZtQyxRQUFRLENBQUM3bUMsSUFBRCxDQUFmO0FBQ0Q7O0FBQ0QsY0FBSWkzRCxTQUFTLENBQUMvYixJQUFkLEVBQW9CO0FBQ2xCKzdCLG1CQUFPLEdBQUc5SCxpQkFBaUIsQ0FBQ3QwRSxLQUFELEVBQVEsUUFBUixDQUEzQjs7QUFDQSxnQkFBSSxDQUFDcThFLFNBQUwsRUFBZ0I7QUFDZG5HLHdCQUFVLENBQ1I3K0IsRUFEUSxFQUVQLFlBQWFyTCxRQUFRLENBQUM3bUMsSUFBRCxDQUZkLEVBR1JpM0UsT0FIUSxFQUlSLElBSlEsRUFLUixLQUxRLEVBTVJsRSxNQU5RLEVBT1J6NkQsSUFBSSxDQUFDcEMsQ0FBRCxDQVBJLENBQVY7O0FBU0Esa0JBQUkrd0IsU0FBUyxDQUFDam5DLElBQUQsQ0FBVCxLQUFvQjZtQyxRQUFRLENBQUM3bUMsSUFBRCxDQUFoQyxFQUF3QztBQUN0Qyt3RSwwQkFBVSxDQUNSNytCLEVBRFEsRUFFUCxZQUFhakwsU0FBUyxDQUFDam5DLElBQUQsQ0FGZixFQUdSaTNFLE9BSFEsRUFJUixJQUpRLEVBS1IsS0FMUSxFQU1SbEUsTUFOUSxFQU9SejZELElBQUksQ0FBQ3BDLENBQUQsQ0FQSSxDQUFWO0FBU0Q7QUFDRixhQXJCRCxNQXFCTztBQUNMO0FBQ0E2NkQsd0JBQVUsQ0FDUjcrQixFQURRLEVBRVAsa0JBQWtCbHlDLElBQWxCLEdBQXlCLEdBRmxCLEVBR1JpM0UsT0FIUSxFQUlSLElBSlEsRUFLUixLQUxRLEVBTVJsRSxNQU5RLEVBT1J6NkQsSUFBSSxDQUFDcEMsQ0FBRCxDQVBJLEVBUVIsSUFSUSxDQVFIO0FBUkcsZUFBVjtBQVVEO0FBQ0Y7QUFDRjs7QUFDRCxZQUFLK2dELFNBQVMsSUFBSUEsU0FBUyxDQUFDdGtDLElBQXhCLElBQ0YsQ0FBQ3VmLEVBQUUsQ0FBQ3QwQyxTQUFKLElBQWlCdzFFLG1CQUFtQixDQUFDbGhDLEVBQUUsQ0FBQzdELEdBQUosRUFBUzZELEVBQUUsQ0FBQ3crQixRQUFILENBQVl0Z0UsSUFBckIsRUFBMkJwUSxJQUEzQixDQUR0QyxFQUVHO0FBQ0Rtd0UsaUJBQU8sQ0FBQ2orQixFQUFELEVBQUtseUMsSUFBTCxFQUFXbkYsS0FBWCxFQUFrQnlkLElBQUksQ0FBQ3BDLENBQUQsQ0FBdEIsRUFBMkJnaEUsU0FBM0IsQ0FBUDtBQUNELFNBSkQsTUFJTztBQUNMM0csaUJBQU8sQ0FBQ3IrQixFQUFELEVBQUtseUMsSUFBTCxFQUFXbkYsS0FBWCxFQUFrQnlkLElBQUksQ0FBQ3BDLENBQUQsQ0FBdEIsRUFBMkJnaEUsU0FBM0IsQ0FBUDtBQUNEO0FBQ0YsT0FwRUQsTUFvRU8sSUFBSWxGLElBQUksQ0FBQzcxRSxJQUFMLENBQVU2RCxJQUFWLENBQUosRUFBcUI7QUFBRTtBQUM1QkEsWUFBSSxHQUFHQSxJQUFJLENBQUMzQixPQUFMLENBQWEyekUsSUFBYixFQUFtQixFQUFuQixDQUFQO0FBQ0FrRixpQkFBUyxHQUFHN0UsWUFBWSxDQUFDbDJFLElBQWIsQ0FBa0I2RCxJQUFsQixDQUFaOztBQUNBLFlBQUlrM0UsU0FBSixFQUFlO0FBQ2JsM0UsY0FBSSxHQUFHQSxJQUFJLENBQUMwL0IsS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFDLENBQWYsQ0FBUDtBQUNEOztBQUNEcXhDLGtCQUFVLENBQUM3K0IsRUFBRCxFQUFLbHlDLElBQUwsRUFBV25GLEtBQVgsRUFBa0JvOEQsU0FBbEIsRUFBNkIsS0FBN0IsRUFBb0M4YixNQUFwQyxFQUE0Q3o2RCxJQUFJLENBQUNwQyxDQUFELENBQWhELEVBQXFEZ2hFLFNBQXJELENBQVY7QUFDRCxPQVBNLE1BT0E7QUFBRTtBQUNQbDNFLFlBQUksR0FBR0EsSUFBSSxDQUFDM0IsT0FBTCxDQUFhNHpFLEtBQWIsRUFBb0IsRUFBcEIsQ0FBUCxDQURLLENBRUw7O0FBQ0EsWUFBSXFGLFFBQVEsR0FBR3QzRSxJQUFJLENBQUM0akMsS0FBTCxDQUFXMHVDLEtBQVgsQ0FBZjtBQUNBLFlBQUkvMkUsR0FBRyxHQUFHKzdFLFFBQVEsSUFBSUEsUUFBUSxDQUFDLENBQUQsQ0FBOUI7QUFDQUosaUJBQVMsR0FBRyxLQUFaOztBQUNBLFlBQUkzN0UsR0FBSixFQUFTO0FBQ1B5RSxjQUFJLEdBQUdBLElBQUksQ0FBQzAvQixLQUFMLENBQVcsQ0FBWCxFQUFjLEVBQUVua0MsR0FBRyxDQUFDRCxNQUFKLEdBQWEsQ0FBZixDQUFkLENBQVA7O0FBQ0EsY0FBSSsyRSxZQUFZLENBQUNsMkUsSUFBYixDQUFrQlosR0FBbEIsQ0FBSixFQUE0QjtBQUMxQkEsZUFBRyxHQUFHQSxHQUFHLENBQUNta0MsS0FBSixDQUFVLENBQVYsRUFBYSxDQUFDLENBQWQsQ0FBTjtBQUNBdzNDLHFCQUFTLEdBQUcsSUFBWjtBQUNEO0FBQ0Y7O0FBQ0R0RyxvQkFBWSxDQUFDMStCLEVBQUQsRUFBS2x5QyxJQUFMLEVBQVdtM0QsT0FBWCxFQUFvQnQ4RCxLQUFwQixFQUEyQlUsR0FBM0IsRUFBZ0MyN0UsU0FBaEMsRUFBMkNqZ0IsU0FBM0MsRUFBc0QzK0MsSUFBSSxDQUFDcEMsQ0FBRCxDQUExRCxDQUFaOztBQUNBLFlBQUl3akIsS0FBQSxJQUF5QzE1QixJQUFJLEtBQUssT0FBdEQsRUFBK0Q7QUFDN0R1M0UsNEJBQWtCLENBQUNybEMsRUFBRCxFQUFLcjNDLEtBQUwsQ0FBbEI7QUFDRDtBQUNGO0FBQ0YsS0F0R0QsTUFzR087QUFDTDtBQUNBLFVBQUk2K0IsSUFBSixFQUEyQztBQUN6QyxZQUFJSSxHQUFHLEdBQUc0MEMsU0FBUyxDQUFDN3pFLEtBQUQsRUFBUTB6RSxVQUFSLENBQW5COztBQUNBLFlBQUl6MEMsR0FBSixFQUFTO0FBQ1BpNUMsZ0JBQU0sQ0FDSi95RSxJQUFJLEdBQUcsS0FBUCxHQUFlbkYsS0FBZixHQUF1QixNQUF2QixHQUNBLG9EQURBLEdBRUEsMERBRkEsR0FHQSx1REFKSSxFQUtKeWQsSUFBSSxDQUFDcEMsQ0FBRCxDQUxBLENBQU47QUFPRDtBQUNGOztBQUNEcTZELGFBQU8sQ0FBQ3IrQixFQUFELEVBQUtseUMsSUFBTCxFQUFXMlosSUFBSSxDQUFDQyxTQUFMLENBQWUvZSxLQUFmLENBQVgsRUFBa0N5ZCxJQUFJLENBQUNwQyxDQUFELENBQXRDLENBQVAsQ0FkSyxDQWVMO0FBQ0E7O0FBQ0EsVUFBSSxDQUFDZzhCLEVBQUUsQ0FBQ3QwQyxTQUFKLElBQ0FvQyxJQUFJLEtBQUssT0FEVCxJQUVBb3pFLG1CQUFtQixDQUFDbGhDLEVBQUUsQ0FBQzdELEdBQUosRUFBUzZELEVBQUUsQ0FBQ3crQixRQUFILENBQVl0Z0UsSUFBckIsRUFBMkJwUSxJQUEzQixDQUZ2QixFQUV5RDtBQUN2RG13RSxlQUFPLENBQUNqK0IsRUFBRCxFQUFLbHlDLElBQUwsRUFBVyxNQUFYLEVBQW1Cc1ksSUFBSSxDQUFDcEMsQ0FBRCxDQUF2QixDQUFQO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsU0FBU2dnRSxVQUFULENBQXFCaGtDLEVBQXJCLEVBQXlCO0FBQ3ZCLE1BQUlqbEIsTUFBTSxHQUFHaWxCLEVBQWI7O0FBQ0EsU0FBT2psQixNQUFQLEVBQWU7QUFDYixRQUFJQSxNQUFNLENBQUM4b0QsR0FBUCxLQUFlOTRFLFNBQW5CLEVBQThCO0FBQzVCLGFBQU8sSUFBUDtBQUNEOztBQUNEZ3dCLFVBQU0sR0FBR0EsTUFBTSxDQUFDQSxNQUFoQjtBQUNEOztBQUNELFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVNtcUQsY0FBVCxDQUF5QnAzRSxJQUF6QixFQUErQjtBQUM3QixNQUFJNGpDLEtBQUssR0FBRzVqQyxJQUFJLENBQUM0akMsS0FBTCxDQUFXNHVDLFVBQVgsQ0FBWjs7QUFDQSxNQUFJNXVDLEtBQUosRUFBVztBQUNULFFBQUlFLEdBQUcsR0FBRyxFQUFWO0FBQ0FGLFNBQUssQ0FBQ3h0QixPQUFOLENBQWMsVUFBVWhNLENBQVYsRUFBYTtBQUFFMDVCLFNBQUcsQ0FBQzE1QixDQUFDLENBQUNzMUIsS0FBRixDQUFRLENBQVIsQ0FBRCxDQUFILEdBQWtCLElBQWxCO0FBQXlCLEtBQXREO0FBQ0EsV0FBT29FLEdBQVA7QUFDRDtBQUNGOztBQUVELFNBQVMwdkMsWUFBVCxDQUF1Qm4yQixLQUF2QixFQUE4QjtBQUM1QixNQUFJaG9DLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSWEsQ0FBQyxHQUFHLENBQVIsRUFBV2xYLENBQUMsR0FBR3ErQyxLQUFLLENBQUMvaEQsTUFBMUIsRUFBa0M0YSxDQUFDLEdBQUdsWCxDQUF0QyxFQUF5Q2tYLENBQUMsRUFBMUMsRUFBOEM7QUFDNUMsUUFDRXdqQixLQUFBLElBQ0Fya0IsR0FBRyxDQUFDZ29DLEtBQUssQ0FBQ25uQyxDQUFELENBQUwsQ0FBU2xXLElBQVYsQ0FESCxJQUNzQixDQUFDNHBDLElBRHZCLElBQytCLENBQUNFLE1BRmxDLEVBR0U7QUFDQWlwQyxZQUFNLENBQUMsMEJBQTBCMTFCLEtBQUssQ0FBQ25uQyxDQUFELENBQUwsQ0FBU2xXLElBQXBDLEVBQTBDcTlDLEtBQUssQ0FBQ25uQyxDQUFELENBQS9DLENBQU47QUFDRDs7QUFDRGIsT0FBRyxDQUFDZ29DLEtBQUssQ0FBQ25uQyxDQUFELENBQUwsQ0FBU2xXLElBQVYsQ0FBSCxHQUFxQnE5QyxLQUFLLENBQUNubkMsQ0FBRCxDQUFMLENBQVNyYixLQUE5QjtBQUNEOztBQUNELFNBQU93YSxHQUFQO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTbWdFLFNBQVQsQ0FBb0J0akMsRUFBcEIsRUFBd0I7QUFDdEIsU0FBT0EsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLFFBQVgsSUFBdUI2RCxFQUFFLENBQUM3RCxHQUFILEtBQVcsT0FBekM7QUFDRDs7QUFFRCxTQUFTNG1DLGNBQVQsQ0FBeUIvaUMsRUFBekIsRUFBNkI7QUFDM0IsU0FDRUEsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLE9BQVgsSUFDQzZELEVBQUUsQ0FBQzdELEdBQUgsS0FBVyxRQUFYLEtBQ0MsQ0FBQzZELEVBQUUsQ0FBQ3crQixRQUFILENBQVl0Z0UsSUFBYixJQUNBOGhDLEVBQUUsQ0FBQ3crQixRQUFILENBQVl0Z0UsSUFBWixLQUFxQixpQkFGdEIsQ0FGSDtBQU9EOztBQUVELElBQUlvbkUsT0FBTyxHQUFHLGNBQWQ7QUFDQSxJQUFJQyxVQUFVLEdBQUcsU0FBakI7QUFFQTs7QUFDQSxTQUFTMUMsYUFBVCxDQUF3QjEzQixLQUF4QixFQUErQjtBQUM3QixNQUFJdmpCLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSTVqQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbW5DLEtBQUssQ0FBQy9oRCxNQUExQixFQUFrQzRhLENBQUMsRUFBbkMsRUFBdUM7QUFDckMsUUFBSTQyRCxJQUFJLEdBQUd6dkIsS0FBSyxDQUFDbm5DLENBQUQsQ0FBaEI7O0FBQ0EsUUFBSSxDQUFDc2hFLE9BQU8sQ0FBQ3I3RSxJQUFSLENBQWEyd0UsSUFBSSxDQUFDOXNFLElBQWxCLENBQUwsRUFBOEI7QUFDNUI4c0UsVUFBSSxDQUFDOXNFLElBQUwsR0FBWThzRSxJQUFJLENBQUM5c0UsSUFBTCxDQUFVM0IsT0FBVixDQUFrQm81RSxVQUFsQixFQUE4QixFQUE5QixDQUFaO0FBQ0EzOUMsU0FBRyxDQUFDbnJCLElBQUosQ0FBU20rRCxJQUFUO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPaHpDLEdBQVA7QUFDRDs7QUFFRCxTQUFTeTlDLGtCQUFULENBQTZCcmxDLEVBQTdCLEVBQWlDcjNDLEtBQWpDLEVBQXdDO0FBQ3RDLE1BQUk2OEUsR0FBRyxHQUFHeGxDLEVBQVY7O0FBQ0EsU0FBT3dsQyxHQUFQLEVBQVk7QUFDVixRQUFJQSxHQUFHLENBQUMzQixHQUFKLElBQVcyQixHQUFHLENBQUN4aUQsS0FBSixLQUFjcjZCLEtBQTdCLEVBQW9DO0FBQ2xDazRFLFlBQU0sQ0FDSixNQUFPN2dDLEVBQUUsQ0FBQzdELEdBQVYsR0FBaUIsYUFBakIsR0FBaUN4ekMsS0FBakMsR0FBeUMsT0FBekMsR0FDQSwrREFEQSxHQUVBLGlFQUZBLEdBR0Esb0VBSEEsR0FJQSxtRkFMSSxFQU1KcTNDLEVBQUUsQ0FBQ3MvQixXQUFILENBQWUsU0FBZixDQU5JLENBQU47QUFRRDs7QUFDRGtHLE9BQUcsR0FBR0EsR0FBRyxDQUFDenFELE1BQVY7QUFDRDtBQUNGO0FBRUQ7OztBQUVBLElBQUkwcUQsV0FBSjtBQUNBLElBQUlDLHFCQUFKO0FBRUEsSUFBSUMsbUJBQW1CLEdBQUdyeEMsTUFBTSxDQUFDc3hDLGVBQUQsQ0FBaEM7QUFFQTs7Ozs7Ozs7Ozs7O0FBV0EsU0FBU0MsUUFBVCxDQUFtQnA3QyxJQUFuQixFQUF5Qi9FLE9BQXpCLEVBQWtDO0FBQ2hDLE1BQUksQ0FBQytFLElBQUwsRUFBVztBQUFFO0FBQVE7O0FBQ3JCZzdDLGFBQVcsR0FBR0UsbUJBQW1CLENBQUNqZ0QsT0FBTyxDQUFDbVEsVUFBUixJQUFzQixFQUF2QixDQUFqQztBQUNBNnZDLHVCQUFxQixHQUFHaGdELE9BQU8sQ0FBQ2lVLGFBQVIsSUFBeUJqRSxFQUFqRCxDQUhnQyxDQUloQzs7QUFDQW93QyxjQUFZLENBQUNyN0MsSUFBRCxDQUFaLENBTGdDLENBTWhDOztBQUNBczdDLGlCQUFlLENBQUN0N0MsSUFBRCxFQUFPLEtBQVAsQ0FBZjtBQUNEOztBQUVELFNBQVNtN0MsZUFBVCxDQUEwQjFwRCxJQUExQixFQUFnQztBQUM5QixTQUFPNFgsT0FBTyxDQUNaLG1GQUNDNVgsSUFBSSxHQUFHLE1BQU1BLElBQVQsR0FBZ0IsRUFEckIsQ0FEWSxDQUFkO0FBSUQ7O0FBRUQsU0FBUzRwRCxZQUFULENBQXVCcm9DLElBQXZCLEVBQTZCO0FBQzNCQSxNQUFJLENBQUN1b0MsTUFBTCxHQUFjbHBDLFFBQVEsQ0FBQ1csSUFBRCxDQUF0Qjs7QUFDQSxNQUFJQSxJQUFJLENBQUN2L0IsSUFBTCxLQUFjLENBQWxCLEVBQXFCO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLFFBQ0UsQ0FBQ3duRSxxQkFBcUIsQ0FBQ2pvQyxJQUFJLENBQUN0QixHQUFOLENBQXRCLElBQ0FzQixJQUFJLENBQUN0QixHQUFMLEtBQWEsTUFEYixJQUVBc0IsSUFBSSxDQUFDK2dDLFFBQUwsQ0FBYyxpQkFBZCxLQUFvQyxJQUh0QyxFQUlFO0FBQ0E7QUFDRDs7QUFDRCxTQUFLLElBQUl4NkQsQ0FBQyxHQUFHLENBQVIsRUFBV2xYLENBQUMsR0FBRzJ3QyxJQUFJLENBQUNyQixRQUFMLENBQWNoekMsTUFBbEMsRUFBMEM0YSxDQUFDLEdBQUdsWCxDQUE5QyxFQUFpRGtYLENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsVUFBSXM1QixLQUFLLEdBQUdHLElBQUksQ0FBQ3JCLFFBQUwsQ0FBY3A0QixDQUFkLENBQVo7QUFDQThoRSxrQkFBWSxDQUFDeG9DLEtBQUQsQ0FBWjs7QUFDQSxVQUFJLENBQUNBLEtBQUssQ0FBQzBvQyxNQUFYLEVBQW1CO0FBQ2pCdm9DLFlBQUksQ0FBQ3VvQyxNQUFMLEdBQWMsS0FBZDtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSXZvQyxJQUFJLENBQUM0bUMsWUFBVCxFQUF1QjtBQUNyQixXQUFLLElBQUlwb0IsR0FBRyxHQUFHLENBQVYsRUFBYWdxQixHQUFHLEdBQUd4b0MsSUFBSSxDQUFDNG1DLFlBQUwsQ0FBa0JqN0UsTUFBMUMsRUFBa0Q2eUQsR0FBRyxHQUFHZ3FCLEdBQXhELEVBQTZEaHFCLEdBQUcsRUFBaEUsRUFBb0U7QUFDbEUsWUFBSTk1QyxLQUFLLEdBQUdzN0IsSUFBSSxDQUFDNG1DLFlBQUwsQ0FBa0Jwb0IsR0FBbEIsRUFBdUI5NUMsS0FBbkM7QUFDQTJqRSxvQkFBWSxDQUFDM2pFLEtBQUQsQ0FBWjs7QUFDQSxZQUFJLENBQUNBLEtBQUssQ0FBQzZqRSxNQUFYLEVBQW1CO0FBQ2pCdm9DLGNBQUksQ0FBQ3VvQyxNQUFMLEdBQWMsS0FBZDtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsU0FBU0QsZUFBVCxDQUEwQnRvQyxJQUExQixFQUFnQ3lXLE9BQWhDLEVBQXlDO0FBQ3ZDLE1BQUl6VyxJQUFJLENBQUN2L0IsSUFBTCxLQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQUl1L0IsSUFBSSxDQUFDdW9DLE1BQUwsSUFBZXZvQyxJQUFJLENBQUNsSCxJQUF4QixFQUE4QjtBQUM1QmtILFVBQUksQ0FBQ3lvQyxXQUFMLEdBQW1CaHlCLE9BQW5CO0FBQ0QsS0FIa0IsQ0FJbkI7QUFDQTtBQUNBOzs7QUFDQSxRQUFJelcsSUFBSSxDQUFDdW9DLE1BQUwsSUFBZXZvQyxJQUFJLENBQUNyQixRQUFMLENBQWNoekMsTUFBN0IsSUFBdUMsRUFDekNxMEMsSUFBSSxDQUFDckIsUUFBTCxDQUFjaHpDLE1BQWQsS0FBeUIsQ0FBekIsSUFDQXEwQyxJQUFJLENBQUNyQixRQUFMLENBQWMsQ0FBZCxFQUFpQmwrQixJQUFqQixLQUEwQixDQUZlLENBQTNDLEVBR0c7QUFDRHUvQixVQUFJLENBQUMwb0MsVUFBTCxHQUFrQixJQUFsQjtBQUNBO0FBQ0QsS0FORCxNQU1PO0FBQ0wxb0MsVUFBSSxDQUFDMG9DLFVBQUwsR0FBa0IsS0FBbEI7QUFDRDs7QUFDRCxRQUFJMW9DLElBQUksQ0FBQ3JCLFFBQVQsRUFBbUI7QUFDakIsV0FBSyxJQUFJcDRCLENBQUMsR0FBRyxDQUFSLEVBQVdsWCxDQUFDLEdBQUcyd0MsSUFBSSxDQUFDckIsUUFBTCxDQUFjaHpDLE1BQWxDLEVBQTBDNGEsQ0FBQyxHQUFHbFgsQ0FBOUMsRUFBaURrWCxDQUFDLEVBQWxELEVBQXNEO0FBQ3BEK2hFLHVCQUFlLENBQUN0b0MsSUFBSSxDQUFDckIsUUFBTCxDQUFjcDRCLENBQWQsQ0FBRCxFQUFtQmt3QyxPQUFPLElBQUksQ0FBQyxDQUFDelcsSUFBSSxDQUFDb21DLEdBQXJDLENBQWY7QUFDRDtBQUNGOztBQUNELFFBQUlwbUMsSUFBSSxDQUFDNG1DLFlBQVQsRUFBdUI7QUFDckIsV0FBSyxJQUFJcG9CLEdBQUcsR0FBRyxDQUFWLEVBQWFncUIsR0FBRyxHQUFHeG9DLElBQUksQ0FBQzRtQyxZQUFMLENBQWtCajdFLE1BQTFDLEVBQWtENnlELEdBQUcsR0FBR2dxQixHQUF4RCxFQUE2RGhxQixHQUFHLEVBQWhFLEVBQW9FO0FBQ2xFOHBCLHVCQUFlLENBQUN0b0MsSUFBSSxDQUFDNG1DLFlBQUwsQ0FBa0Jwb0IsR0FBbEIsRUFBdUI5NUMsS0FBeEIsRUFBK0IreEMsT0FBL0IsQ0FBZjtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELFNBQVNwWCxRQUFULENBQW1CVyxJQUFuQixFQUF5QjtBQUN2QixNQUFJQSxJQUFJLENBQUN2L0IsSUFBTCxLQUFjLENBQWxCLEVBQXFCO0FBQUU7QUFDckIsV0FBTyxLQUFQO0FBQ0Q7O0FBQ0QsTUFBSXUvQixJQUFJLENBQUN2L0IsSUFBTCxLQUFjLENBQWxCLEVBQXFCO0FBQUU7QUFDckIsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsU0FBTyxDQUFDLEVBQUV1L0IsSUFBSSxDQUFDOGIsR0FBTCxJQUNSLENBQUM5YixJQUFJLENBQUN3bkMsV0FBTixJQUFxQjtBQUNyQixHQUFDeG5DLElBQUksQ0FBQ2l3QixFQUROLElBQ1ksQ0FBQ2p3QixJQUFJLENBQUNvbUMsR0FEbEIsSUFDeUI7QUFDekIsR0FBQzV2QyxZQUFZLENBQUN3SixJQUFJLENBQUN0QixHQUFOLENBRmIsSUFFMkI7QUFDM0J1cEMsdUJBQXFCLENBQUNqb0MsSUFBSSxDQUFDdEIsR0FBTixDQUhyQixJQUdtQztBQUNuQyxHQUFDaXFDLDBCQUEwQixDQUFDM29DLElBQUQsQ0FKM0IsSUFLQWoxQyxNQUFNLENBQUMwekIsSUFBUCxDQUFZdWhCLElBQVosRUFBa0JqWSxLQUFsQixDQUF3QmlnRCxXQUF4QixDQU5NLENBQVI7QUFRRDs7QUFFRCxTQUFTVywwQkFBVCxDQUFxQzNvQyxJQUFyQyxFQUEyQztBQUN6QyxTQUFPQSxJQUFJLENBQUMxaUIsTUFBWixFQUFvQjtBQUNsQjBpQixRQUFJLEdBQUdBLElBQUksQ0FBQzFpQixNQUFaOztBQUNBLFFBQUkwaUIsSUFBSSxDQUFDdEIsR0FBTCxLQUFhLFVBQWpCLEVBQTZCO0FBQzNCLGFBQU8sS0FBUDtBQUNEOztBQUNELFFBQUlzQixJQUFJLENBQUNvbUMsR0FBVCxFQUFjO0FBQ1osYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPLEtBQVA7QUFDRDtBQUVEOzs7QUFFQSxJQUFJd0MsT0FBTyxHQUFHLHlEQUFkO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLGVBQWpCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLDhGQUFuQixDLENBRUE7O0FBQ0EsSUFBSTdzQyxRQUFRLEdBQUc7QUFDYjhzQyxLQUFHLEVBQUUsRUFEUTtBQUViQyxLQUFHLEVBQUUsQ0FGUTtBQUdieGQsT0FBSyxFQUFFLEVBSE07QUFJYnlkLE9BQUssRUFBRSxFQUpNO0FBS2JDLElBQUUsRUFBRSxFQUxTO0FBTWI3cUUsTUFBSSxFQUFFLEVBTk87QUFPYkYsT0FBSyxFQUFFLEVBUE07QUFRYmdyRSxNQUFJLEVBQUUsRUFSTztBQVNiLFlBQVUsQ0FBQyxDQUFELEVBQUksRUFBSjtBQVRHLENBQWYsQyxDQVlBOztBQUNBLElBQUlDLFFBQVEsR0FBRztBQUNiO0FBQ0FMLEtBQUcsRUFBRSxDQUFDLEtBQUQsRUFBUSxRQUFSLENBRlE7QUFHYkMsS0FBRyxFQUFFLEtBSFE7QUFJYnhkLE9BQUssRUFBRSxPQUpNO0FBS2I7QUFDQXlkLE9BQUssRUFBRSxDQUFDLEdBQUQsRUFBTSxVQUFOLENBTk07QUFPYjtBQUNBQyxJQUFFLEVBQUUsQ0FBQyxJQUFELEVBQU8sU0FBUCxDQVJTO0FBU2I3cUUsTUFBSSxFQUFFLENBQUMsTUFBRCxFQUFTLFdBQVQsQ0FUTztBQVViRixPQUFLLEVBQUUsQ0FBQyxPQUFELEVBQVUsWUFBVixDQVZNO0FBV2JnckUsTUFBSSxFQUFFLENBQUMsTUFBRCxFQUFTLFdBQVQsQ0FYTztBQVliO0FBQ0EsWUFBVSxDQUFDLFdBQUQsRUFBYyxRQUFkLEVBQXdCLEtBQXhCO0FBYkcsQ0FBZixDLENBZ0JBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJRSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVaFosU0FBVixFQUFxQjtBQUFFLFNBQVEsUUFBUUEsU0FBUixHQUFvQixlQUE1QjtBQUErQyxDQUFyRjs7QUFFQSxJQUFJaVosWUFBWSxHQUFHO0FBQ2pCQyxNQUFJLEVBQUUsMkJBRFc7QUFFakJqSSxTQUFPLEVBQUUsMEJBRlE7QUFHakJ6MEMsTUFBSSxFQUFFdzhDLFFBQVEsQ0FBQyx3Q0FBRCxDQUhHO0FBSWpCRyxNQUFJLEVBQUVILFFBQVEsQ0FBQyxpQkFBRCxDQUpHO0FBS2pCajdCLE9BQUssRUFBRWk3QixRQUFRLENBQUMsa0JBQUQsQ0FMRTtBQU1qQkksS0FBRyxFQUFFSixRQUFRLENBQUMsZ0JBQUQsQ0FOSTtBQU9qQnRWLE1BQUksRUFBRXNWLFFBQVEsQ0FBQyxpQkFBRCxDQVBHO0FBUWpCaHJFLE1BQUksRUFBRWdyRSxRQUFRLENBQUMsMkNBQUQsQ0FSRztBQVNqQjlILFFBQU0sRUFBRThILFFBQVEsQ0FBQywyQ0FBRCxDQVRDO0FBVWpCbHJFLE9BQUssRUFBRWtyRSxRQUFRLENBQUMsMkNBQUQ7QUFWRSxDQUFuQjs7QUFhQSxTQUFTSyxXQUFULENBQ0VwZ0IsTUFERixFQUVFdnVCLFFBRkYsRUFHRTtBQUNBLE1BQUk3SixNQUFNLEdBQUc2SixRQUFRLEdBQUcsV0FBSCxHQUFpQixLQUF0QztBQUNBLE1BQUk0dUMsY0FBYyxHQUFHLEVBQXJCO0FBQ0EsTUFBSUMsZUFBZSxHQUFHLEVBQXRCOztBQUNBLE9BQUssSUFBSXY1RSxJQUFULElBQWlCaTVELE1BQWpCLEVBQXlCO0FBQ3ZCLFFBQUl1Z0IsV0FBVyxHQUFHQyxVQUFVLENBQUN4Z0IsTUFBTSxDQUFDajVELElBQUQsQ0FBUCxDQUE1Qjs7QUFDQSxRQUFJaTVELE1BQU0sQ0FBQ2o1RCxJQUFELENBQU4sSUFBZ0JpNUQsTUFBTSxDQUFDajVELElBQUQsQ0FBTixDQUFhb3dFLE9BQWpDLEVBQTBDO0FBQ3hDbUoscUJBQWUsSUFBSXY1RSxJQUFJLEdBQUcsR0FBUCxHQUFhdzVFLFdBQWIsR0FBMkIsR0FBOUM7QUFDRCxLQUZELE1BRU87QUFDTEYsb0JBQWMsSUFBSSxPQUFPdDVFLElBQVAsR0FBYyxLQUFkLEdBQXNCdzVFLFdBQXRCLEdBQW9DLEdBQXREO0FBQ0Q7QUFDRjs7QUFDREYsZ0JBQWMsR0FBRyxNQUFPQSxjQUFjLENBQUM1NUMsS0FBZixDQUFxQixDQUFyQixFQUF3QixDQUFDLENBQXpCLENBQVAsR0FBc0MsR0FBdkQ7O0FBQ0EsTUFBSTY1QyxlQUFKLEVBQXFCO0FBQ25CLFdBQU8xNEMsTUFBTSxHQUFHLEtBQVQsR0FBaUJ5NEMsY0FBakIsR0FBa0MsSUFBbEMsR0FBMENDLGVBQWUsQ0FBQzc1QyxLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUFDLENBQTFCLENBQTFDLEdBQTBFLElBQWpGO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT21CLE1BQU0sR0FBR3k0QyxjQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0csVUFBVCxDQUFxQnZtRCxPQUFyQixFQUE4QjtBQUM1QixNQUFJLENBQUNBLE9BQUwsRUFBYztBQUNaLFdBQU8sY0FBUDtBQUNEOztBQUVELE1BQUkvVyxLQUFLLENBQUNpZSxPQUFOLENBQWNsSCxPQUFkLENBQUosRUFBNEI7QUFDMUIsV0FBUSxNQUFPQSxPQUFPLENBQUM3ZCxHQUFSLENBQVksVUFBVTZkLE9BQVYsRUFBbUI7QUFBRSxhQUFPdW1ELFVBQVUsQ0FBQ3ZtRCxPQUFELENBQWpCO0FBQTZCLEtBQTlELEVBQWdFdmQsSUFBaEUsQ0FBcUUsR0FBckUsQ0FBUCxHQUFvRixHQUE1RjtBQUNEOztBQUVELE1BQUkrakUsWUFBWSxHQUFHakIsWUFBWSxDQUFDdDhFLElBQWIsQ0FBa0IrMkIsT0FBTyxDQUFDcjRCLEtBQTFCLENBQW5CO0FBQ0EsTUFBSTgrRSxvQkFBb0IsR0FBR3BCLE9BQU8sQ0FBQ3A4RSxJQUFSLENBQWErMkIsT0FBTyxDQUFDcjRCLEtBQXJCLENBQTNCO0FBQ0EsTUFBSSsrRSxvQkFBb0IsR0FBR25CLFlBQVksQ0FBQ3Q4RSxJQUFiLENBQWtCKzJCLE9BQU8sQ0FBQ3I0QixLQUFSLENBQWN3RCxPQUFkLENBQXNCbTZFLFVBQXRCLEVBQWtDLEVBQWxDLENBQWxCLENBQTNCOztBQUVBLE1BQUksQ0FBQ3RsRCxPQUFPLENBQUMrakMsU0FBYixFQUF3QjtBQUN0QixRQUFJeWlCLFlBQVksSUFBSUMsb0JBQXBCLEVBQTBDO0FBQ3hDLGFBQU96bUQsT0FBTyxDQUFDcjRCLEtBQWY7QUFDRDs7QUFDRCxXQUFRLHVCQUF1QisrRSxvQkFBb0IsR0FBSSxZQUFhMW1ELE9BQU8sQ0FBQ3I0QixLQUF6QixHQUFtQ3E0QixPQUFPLENBQUNyNEIsS0FBdEYsSUFBK0YsR0FBdkcsQ0FKc0IsQ0FJc0Y7QUFDN0csR0FMRCxNQUtPO0FBQ0wsUUFBSWcvRSxJQUFJLEdBQUcsRUFBWDtBQUNBLFFBQUlDLGVBQWUsR0FBRyxFQUF0QjtBQUNBLFFBQUkxckQsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsU0FBSyxJQUFJclMsR0FBVCxJQUFnQm1YLE9BQU8sQ0FBQytqQyxTQUF4QixFQUFtQztBQUNqQyxVQUFJZ2lCLFlBQVksQ0FBQ2w5RCxHQUFELENBQWhCLEVBQXVCO0FBQ3JCKzlELHVCQUFlLElBQUliLFlBQVksQ0FBQ2w5RCxHQUFELENBQS9CLENBRHFCLENBRXJCOztBQUNBLFlBQUk2dkIsUUFBUSxDQUFDN3ZCLEdBQUQsQ0FBWixFQUFtQjtBQUNqQnFTLGNBQUksQ0FBQ3pmLElBQUwsQ0FBVW9OLEdBQVY7QUFDRDtBQUNGLE9BTkQsTUFNTyxJQUFJQSxHQUFHLEtBQUssT0FBWixFQUFxQjtBQUMxQixZQUFJazdDLFNBQVMsR0FBSS9qQyxPQUFPLENBQUMrakMsU0FBekI7QUFDQTZpQix1QkFBZSxJQUFJZCxRQUFRLENBQ3pCLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsS0FBbEIsRUFBeUIsTUFBekIsRUFDRzVrRCxNQURILENBQ1UsVUFBVTJsRCxXQUFWLEVBQXVCO0FBQUUsaUJBQU8sQ0FBQzlpQixTQUFTLENBQUM4aUIsV0FBRCxDQUFqQjtBQUFpQyxTQURwRSxFQUVHMWtFLEdBRkgsQ0FFTyxVQUFVMGtFLFdBQVYsRUFBdUI7QUFBRSxpQkFBUSxZQUFZQSxXQUFaLEdBQTBCLEtBQWxDO0FBQTJDLFNBRjNFLEVBR0dwa0UsSUFISCxDQUdRLElBSFIsQ0FEeUIsQ0FBM0I7QUFNRCxPQVJNLE1BUUE7QUFDTHlZLFlBQUksQ0FBQ3pmLElBQUwsQ0FBVW9OLEdBQVY7QUFDRDtBQUNGOztBQUNELFFBQUlxUyxJQUFJLENBQUM5eUIsTUFBVCxFQUFpQjtBQUNmdStFLFVBQUksSUFBSUcsWUFBWSxDQUFDNXJELElBQUQsQ0FBcEI7QUFDRCxLQXpCSSxDQTBCTDs7O0FBQ0EsUUFBSTByRCxlQUFKLEVBQXFCO0FBQ25CRCxVQUFJLElBQUlDLGVBQVI7QUFDRDs7QUFDRCxRQUFJTixXQUFXLEdBQUdFLFlBQVksR0FDekIsWUFBYXhtRCxPQUFPLENBQUNyNEIsS0FBckIsR0FBOEIsVUFETCxHQUUxQjgrRSxvQkFBb0IsR0FDakIsYUFBY3ptRCxPQUFPLENBQUNyNEIsS0FBdEIsR0FBK0IsV0FEZCxHQUVsQisrRSxvQkFBb0IsR0FDakIsWUFBYTFtRCxPQUFPLENBQUNyNEIsS0FESixHQUVsQnE0QixPQUFPLENBQUNyNEIsS0FOaEI7QUFPQSxXQUFRLHNCQUFzQmcvRSxJQUF0QixHQUE2QkwsV0FBN0IsR0FBMkMsR0FBbkQ7QUFDRDtBQUNGOztBQUVELFNBQVNRLFlBQVQsQ0FBdUI1ckQsSUFBdkIsRUFBNkI7QUFDM0IsU0FDRTtBQUNBO0FBQ0E7QUFDQSx5Q0FDQ0EsSUFBSSxDQUFDL1ksR0FBTCxDQUFTNGtFLGFBQVQsRUFBd0J0a0UsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FERCxHQUN1QztBQUx6QztBQU9EOztBQUVELFNBQVNza0UsYUFBVCxDQUF3QmwrRCxHQUF4QixFQUE2QjtBQUMzQixNQUFJbStELE1BQU0sR0FBRzc4RSxRQUFRLENBQUMwZSxHQUFELEVBQU0sRUFBTixDQUFyQjs7QUFDQSxNQUFJbStELE1BQUosRUFBWTtBQUNWLFdBQVEsc0JBQXNCQSxNQUE5QjtBQUNEOztBQUNELE1BQUlDLE9BQU8sR0FBR3Z1QyxRQUFRLENBQUM3dkIsR0FBRCxDQUF0QjtBQUNBLE1BQUlxK0QsT0FBTyxHQUFHckIsUUFBUSxDQUFDaDlELEdBQUQsQ0FBdEI7QUFDQSxTQUNFLHVCQUNDcEMsSUFBSSxDQUFDQyxTQUFMLENBQWVtQyxHQUFmLENBREQsR0FDd0IsR0FEeEIsR0FFQ3BDLElBQUksQ0FBQ0MsU0FBTCxDQUFldWdFLE9BQWYsQ0FGRCxHQUU0QixHQUY1QixHQUdBLGFBSEEsR0FJQSxFQUpBLEdBSU14Z0UsSUFBSSxDQUFDQyxTQUFMLENBQWV3Z0UsT0FBZixDQUpOLEdBS0EsR0FORjtBQVFEO0FBRUQ7OztBQUVBLFNBQVN6OUIsRUFBVCxDQUFhekssRUFBYixFQUFpQnlrQixHQUFqQixFQUFzQjtBQUNwQixNQUFJajlCLEtBQUEsSUFBeUNpOUIsR0FBRyxDQUFDTSxTQUFqRCxFQUE0RDtBQUMxRDVnQyxRQUFJLENBQUMsbURBQUQsQ0FBSjtBQUNEOztBQUNENmIsSUFBRSxDQUFDbW9DLGFBQUgsR0FBbUIsVUFBVVIsSUFBVixFQUFnQjtBQUFFLFdBQVEsUUFBUUEsSUFBUixHQUFlLEdBQWYsR0FBc0JsakIsR0FBRyxDQUFDOTdELEtBQTFCLEdBQW1DLEdBQTNDO0FBQWtELEdBQXZGO0FBQ0Q7QUFFRDs7O0FBRUEsU0FBU3kvRSxNQUFULENBQWlCcG9DLEVBQWpCLEVBQXFCeWtCLEdBQXJCLEVBQTBCO0FBQ3hCemtCLElBQUUsQ0FBQ3FvQyxRQUFILEdBQWMsVUFBVVYsSUFBVixFQUFnQjtBQUM1QixXQUFRLFFBQVFBLElBQVIsR0FBZSxJQUFmLEdBQXVCM25DLEVBQUUsQ0FBQzdELEdBQTFCLEdBQWlDLElBQWpDLEdBQXlDc29CLEdBQUcsQ0FBQzk3RCxLQUE3QyxHQUFzRCxHQUF0RCxJQUE2RDg3RCxHQUFHLENBQUNNLFNBQUosSUFBaUJOLEdBQUcsQ0FBQ00sU0FBSixDQUFjdGtDLElBQS9CLEdBQXNDLE1BQXRDLEdBQStDLE9BQTVHLEtBQXdIZ2tDLEdBQUcsQ0FBQ00sU0FBSixJQUFpQk4sR0FBRyxDQUFDTSxTQUFKLENBQWMvYixJQUEvQixHQUFzQyxPQUF0QyxHQUFnRCxFQUF4SyxJQUE4SyxHQUF0TDtBQUNELEdBRkQ7QUFHRDtBQUVEOzs7QUFFQSxJQUFJcy9CLGNBQWMsR0FBRztBQUNuQjc5QixJQUFFLEVBQUVBLEVBRGU7QUFFbkJ6L0IsTUFBSSxFQUFFbzlELE1BRmE7QUFHbkJHLE9BQUssRUFBRTl5QztBQUhZLENBQXJCO0FBTUE7O0FBTUEsSUFBSSt5QyxZQUFZLEdBQUcsU0FBU0EsWUFBVCxDQUF1QjlpRCxPQUF2QixFQUFnQztBQUNqRCxPQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDQSxPQUFLdkIsSUFBTCxHQUFZdUIsT0FBTyxDQUFDdkIsSUFBUixJQUFnQjI1QyxRQUE1QjtBQUNBLE9BQUtnRCxVQUFMLEdBQWtCOUMsbUJBQW1CLENBQUN0NEMsT0FBTyxDQUFDbGYsT0FBVCxFQUFrQixlQUFsQixDQUFyQztBQUNBLE9BQUtpaUUsVUFBTCxHQUFrQnpLLG1CQUFtQixDQUFDdDRDLE9BQU8sQ0FBQ2xmLE9BQVQsRUFBa0IsU0FBbEIsQ0FBckM7QUFDQSxPQUFLcTdCLFVBQUwsR0FBa0J4TSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxFQUFELEVBQUtpekMsY0FBTCxDQUFQLEVBQTZCNWlELE9BQU8sQ0FBQ21jLFVBQXJDLENBQXhCO0FBQ0EsTUFBSWxJLGFBQWEsR0FBR2pVLE9BQU8sQ0FBQ2lVLGFBQVIsSUFBeUJqRSxFQUE3Qzs7QUFDQSxPQUFLMHJDLGNBQUwsR0FBc0IsVUFBVXBoQyxFQUFWLEVBQWM7QUFBRSxXQUFPLENBQUMsQ0FBQ0EsRUFBRSxDQUFDdDBDLFNBQUwsSUFBa0IsQ0FBQ2l1QyxhQUFhLENBQUNxRyxFQUFFLENBQUM3RCxHQUFKLENBQXZDO0FBQWtELEdBQXhGOztBQUNBLE9BQUt1c0MsTUFBTCxHQUFjLENBQWQ7QUFDQSxPQUFLLzNCLGVBQUwsR0FBdUIsRUFBdkI7QUFDQSxPQUFLNEksR0FBTCxHQUFXLEtBQVg7QUFDRCxDQVhEOztBQWVBLFNBQVNvdkIsUUFBVCxDQUNFQyxHQURGLEVBRUVsakQsT0FGRixFQUdFO0FBQ0EsTUFBSW1qRCxLQUFLLEdBQUcsSUFBSUwsWUFBSixDQUFpQjlpRCxPQUFqQixDQUFaO0FBQ0EsTUFBSWlpRCxJQUFJLEdBQUdpQixHQUFHLEdBQUdFLFVBQVUsQ0FBQ0YsR0FBRCxFQUFNQyxLQUFOLENBQWIsR0FBNEIsV0FBMUM7QUFDQSxTQUFPO0FBQ0xsOEIsVUFBTSxFQUFHLHVCQUF1Qmc3QixJQUF2QixHQUE4QixHQURsQztBQUVMaDNCLG1CQUFlLEVBQUVrNEIsS0FBSyxDQUFDbDRCO0FBRmxCLEdBQVA7QUFJRDs7QUFFRCxTQUFTbTRCLFVBQVQsQ0FBcUI5b0MsRUFBckIsRUFBeUI2b0MsS0FBekIsRUFBZ0M7QUFDOUIsTUFBSTdvQyxFQUFFLENBQUNqbEIsTUFBUCxFQUFlO0FBQ2JpbEIsTUFBRSxDQUFDdVosR0FBSCxHQUFTdlosRUFBRSxDQUFDdVosR0FBSCxJQUFVdlosRUFBRSxDQUFDamxCLE1BQUgsQ0FBVXcrQixHQUE3QjtBQUNEOztBQUVELE1BQUl2WixFQUFFLENBQUNtbUMsVUFBSCxJQUFpQixDQUFDbm1DLEVBQUUsQ0FBQytvQyxlQUF6QixFQUEwQztBQUN4QyxXQUFPQyxTQUFTLENBQUNocEMsRUFBRCxFQUFLNm9DLEtBQUwsQ0FBaEI7QUFDRCxHQUZELE1BRU8sSUFBSTdvQyxFQUFFLENBQUN6SixJQUFILElBQVcsQ0FBQ3lKLEVBQUUsQ0FBQ2lwQyxhQUFuQixFQUFrQztBQUN2QyxXQUFPQyxPQUFPLENBQUNscEMsRUFBRCxFQUFLNm9DLEtBQUwsQ0FBZDtBQUNELEdBRk0sTUFFQSxJQUFJN29DLEVBQUUsQ0FBQzZqQyxHQUFILElBQVUsQ0FBQzdqQyxFQUFFLENBQUNtcEMsWUFBbEIsRUFBZ0M7QUFDckMsV0FBT0MsTUFBTSxDQUFDcHBDLEVBQUQsRUFBSzZvQyxLQUFMLENBQWI7QUFDRCxHQUZNLE1BRUEsSUFBSTdvQyxFQUFFLENBQUMwdEIsRUFBSCxJQUFTLENBQUMxdEIsRUFBRSxDQUFDcXBDLFdBQWpCLEVBQThCO0FBQ25DLFdBQU9DLEtBQUssQ0FBQ3RwQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFaO0FBQ0QsR0FGTSxNQUVBLElBQUk3b0MsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLFVBQVgsSUFBeUIsQ0FBQzZELEVBQUUsQ0FBQ3lpQyxVQUE3QixJQUEyQyxDQUFDb0csS0FBSyxDQUFDdHZCLEdBQXRELEVBQTJEO0FBQ2hFLFdBQU9nd0IsV0FBVyxDQUFDdnBDLEVBQUQsRUFBSzZvQyxLQUFMLENBQVgsSUFBMEIsUUFBakM7QUFDRCxHQUZNLE1BRUEsSUFBSTdvQyxFQUFFLENBQUM3RCxHQUFILEtBQVcsTUFBZixFQUF1QjtBQUM1QixXQUFPcXRDLE9BQU8sQ0FBQ3hwQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFkO0FBQ0QsR0FGTSxNQUVBO0FBQ0w7QUFDQSxRQUFJbEIsSUFBSjs7QUFDQSxRQUFJM25DLEVBQUUsQ0FBQ3QwQyxTQUFQLEVBQWtCO0FBQ2hCaThFLFVBQUksR0FBRzhCLFlBQVksQ0FBQ3pwQyxFQUFFLENBQUN0MEMsU0FBSixFQUFlczBDLEVBQWYsRUFBbUI2b0MsS0FBbkIsQ0FBbkI7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJbGhFLElBQUo7O0FBQ0EsVUFBSSxDQUFDcTRCLEVBQUUsQ0FBQ28rQixLQUFKLElBQWNwK0IsRUFBRSxDQUFDdVosR0FBSCxJQUFVc3ZCLEtBQUssQ0FBQ3pILGNBQU4sQ0FBcUJwaEMsRUFBckIsQ0FBNUIsRUFBdUQ7QUFDckRyNEIsWUFBSSxHQUFHK2hFLE9BQU8sQ0FBQzFwQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFkO0FBQ0Q7O0FBRUQsVUFBSXpzQyxRQUFRLEdBQUc0RCxFQUFFLENBQUMwWSxjQUFILEdBQW9CLElBQXBCLEdBQTJCNndCLFdBQVcsQ0FBQ3ZwQyxFQUFELEVBQUs2b0MsS0FBTCxFQUFZLElBQVosQ0FBckQ7QUFDQWxCLFVBQUksR0FBRyxTQUFVM25DLEVBQUUsQ0FBQzdELEdBQWIsR0FBb0IsR0FBcEIsSUFBMkJ4MEIsSUFBSSxHQUFJLE1BQU1BLElBQVYsR0FBa0IsRUFBakQsS0FBd0R5MEIsUUFBUSxHQUFJLE1BQU1BLFFBQVYsR0FBc0IsRUFBdEYsSUFBNEYsR0FBbkc7QUFDRCxLQWJJLENBY0w7OztBQUNBLFNBQUssSUFBSXA0QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNmtFLEtBQUssQ0FBQy9ILFVBQU4sQ0FBaUIxM0UsTUFBckMsRUFBNkM0YSxDQUFDLEVBQTlDLEVBQWtEO0FBQ2hEMmpFLFVBQUksR0FBR2tCLEtBQUssQ0FBQy9ILFVBQU4sQ0FBaUI5OEQsQ0FBakIsRUFBb0JnOEIsRUFBcEIsRUFBd0IybkMsSUFBeEIsQ0FBUDtBQUNEOztBQUNELFdBQU9BLElBQVA7QUFDRDtBQUNGLEMsQ0FFRDs7O0FBQ0EsU0FBU3FCLFNBQVQsQ0FBb0JocEMsRUFBcEIsRUFBd0I2b0MsS0FBeEIsRUFBK0I7QUFDN0I3b0MsSUFBRSxDQUFDK29DLGVBQUgsR0FBcUIsSUFBckIsQ0FENkIsQ0FFN0I7QUFDQTtBQUNBOztBQUNBLE1BQUlZLGdCQUFnQixHQUFHZCxLQUFLLENBQUN0dkIsR0FBN0I7O0FBQ0EsTUFBSXZaLEVBQUUsQ0FBQ3VaLEdBQVAsRUFBWTtBQUNWc3ZCLFNBQUssQ0FBQ3R2QixHQUFOLEdBQVl2WixFQUFFLENBQUN1WixHQUFmO0FBQ0Q7O0FBQ0RzdkIsT0FBSyxDQUFDbDRCLGVBQU4sQ0FBc0JsMEMsSUFBdEIsQ0FBNEIsdUJBQXdCcXNFLFVBQVUsQ0FBQzlvQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFsQyxHQUFpRCxHQUE3RTtBQUNBQSxPQUFLLENBQUN0dkIsR0FBTixHQUFZb3dCLGdCQUFaO0FBQ0EsU0FBUSxTQUFTZCxLQUFLLENBQUNsNEIsZUFBTixDQUFzQnZuRCxNQUF0QixHQUErQixDQUF4QyxLQUE4QzQyQyxFQUFFLENBQUNrbUMsV0FBSCxHQUFpQixPQUFqQixHQUEyQixFQUF6RSxJQUErRSxHQUF2RjtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU2dELE9BQVQsQ0FBa0JscEMsRUFBbEIsRUFBc0I2b0MsS0FBdEIsRUFBNkI7QUFDM0I3b0MsSUFBRSxDQUFDaXBDLGFBQUgsR0FBbUIsSUFBbkI7O0FBQ0EsTUFBSWpwQyxFQUFFLENBQUMwdEIsRUFBSCxJQUFTLENBQUMxdEIsRUFBRSxDQUFDcXBDLFdBQWpCLEVBQThCO0FBQzVCLFdBQU9DLEtBQUssQ0FBQ3RwQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFaO0FBQ0QsR0FGRCxNQUVPLElBQUk3b0MsRUFBRSxDQUFDa21DLFdBQVAsRUFBb0I7QUFDekIsUUFBSXI4RCxHQUFHLEdBQUcsRUFBVjtBQUNBLFFBQUlrUixNQUFNLEdBQUdpbEIsRUFBRSxDQUFDamxCLE1BQWhCOztBQUNBLFdBQU9BLE1BQVAsRUFBZTtBQUNiLFVBQUlBLE1BQU0sQ0FBQzhvRCxHQUFYLEVBQWdCO0FBQ2RoNkQsV0FBRyxHQUFHa1IsTUFBTSxDQUFDbFIsR0FBYjtBQUNBO0FBQ0Q7O0FBQ0RrUixZQUFNLEdBQUdBLE1BQU0sQ0FBQ0EsTUFBaEI7QUFDRDs7QUFDRCxRQUFJLENBQUNsUixHQUFMLEVBQVU7QUFDUjJkLFdBQUEsSUFBeUNxaEQsS0FBSyxDQUFDMWtELElBQU4sQ0FDdkMsc0RBRHVDLEVBRXZDNmIsRUFBRSxDQUFDcy9CLFdBQUgsQ0FBZSxRQUFmLENBRnVDLENBQXpDO0FBSUEsYUFBT3dKLFVBQVUsQ0FBQzlvQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFqQjtBQUNEOztBQUNELFdBQVEsUUFBU0MsVUFBVSxDQUFDOW9DLEVBQUQsRUFBSzZvQyxLQUFMLENBQW5CLEdBQWtDLEdBQWxDLEdBQXlDQSxLQUFLLENBQUNILE1BQU4sRUFBekMsR0FBMkQsR0FBM0QsR0FBaUU3K0QsR0FBakUsR0FBdUUsR0FBL0U7QUFDRCxHQWxCTSxNQWtCQTtBQUNMLFdBQU9tL0QsU0FBUyxDQUFDaHBDLEVBQUQsRUFBSzZvQyxLQUFMLENBQWhCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTUyxLQUFULENBQ0V0cEMsRUFERixFQUVFNm9DLEtBRkYsRUFHRWUsTUFIRixFQUlFQyxRQUpGLEVBS0U7QUFDQTdwQyxJQUFFLENBQUNxcEMsV0FBSCxHQUFpQixJQUFqQixDQURBLENBQ3VCOztBQUN2QixTQUFPUyxlQUFlLENBQUM5cEMsRUFBRSxDQUFDcWtDLFlBQUgsQ0FBZ0I3MkMsS0FBaEIsRUFBRCxFQUEwQnE3QyxLQUExQixFQUFpQ2UsTUFBakMsRUFBeUNDLFFBQXpDLENBQXRCO0FBQ0Q7O0FBRUQsU0FBU0MsZUFBVCxDQUNFQyxVQURGLEVBRUVsQixLQUZGLEVBR0VlLE1BSEYsRUFJRUMsUUFKRixFQUtFO0FBQ0EsTUFBSSxDQUFDRSxVQUFVLENBQUMzZ0YsTUFBaEIsRUFBd0I7QUFDdEIsV0FBT3lnRixRQUFRLElBQUksTUFBbkI7QUFDRDs7QUFFRCxNQUFJL2IsU0FBUyxHQUFHaWMsVUFBVSxDQUFDbCtCLEtBQVgsRUFBaEI7O0FBQ0EsTUFBSWlpQixTQUFTLENBQUN3TixHQUFkLEVBQW1CO0FBQ2pCLFdBQVEsTUFBT3hOLFNBQVMsQ0FBQ3dOLEdBQWpCLEdBQXdCLElBQXhCLEdBQWdDME8sYUFBYSxDQUFDbGMsU0FBUyxDQUFDM3JELEtBQVgsQ0FBN0MsR0FBa0UsR0FBbEUsR0FBeUUybkUsZUFBZSxDQUFDQyxVQUFELEVBQWFsQixLQUFiLEVBQW9CZSxNQUFwQixFQUE0QkMsUUFBNUIsQ0FBaEc7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFRLEtBQU1HLGFBQWEsQ0FBQ2xjLFNBQVMsQ0FBQzNyRCxLQUFYLENBQTNCO0FBQ0QsR0FWRCxDQVlBOzs7QUFDQSxXQUFTNm5FLGFBQVQsQ0FBd0JocUMsRUFBeEIsRUFBNEI7QUFDMUIsV0FBTzRwQyxNQUFNLEdBQ1RBLE1BQU0sQ0FBQzVwQyxFQUFELEVBQUs2b0MsS0FBTCxDQURHLEdBRVQ3b0MsRUFBRSxDQUFDekosSUFBSCxHQUNFMnlDLE9BQU8sQ0FBQ2xwQyxFQUFELEVBQUs2b0MsS0FBTCxDQURULEdBRUVDLFVBQVUsQ0FBQzlvQyxFQUFELEVBQUs2b0MsS0FBTCxDQUpoQjtBQUtEO0FBQ0Y7O0FBRUQsU0FBU08sTUFBVCxDQUNFcHBDLEVBREYsRUFFRTZvQyxLQUZGLEVBR0VlLE1BSEYsRUFJRUssU0FKRixFQUtFO0FBQ0EsTUFBSTNPLEdBQUcsR0FBR3Q3QixFQUFFLENBQUM2akMsR0FBYjtBQUNBLE1BQUk3Z0QsS0FBSyxHQUFHZ2QsRUFBRSxDQUFDaGQsS0FBZjtBQUNBLE1BQUkrZ0QsU0FBUyxHQUFHL2pDLEVBQUUsQ0FBQytqQyxTQUFILEdBQWdCLE1BQU8vakMsRUFBRSxDQUFDK2pDLFNBQTFCLEdBQXdDLEVBQXhEO0FBQ0EsTUFBSUQsU0FBUyxHQUFHOWpDLEVBQUUsQ0FBQzhqQyxTQUFILEdBQWdCLE1BQU85akMsRUFBRSxDQUFDOGpDLFNBQTFCLEdBQXdDLEVBQXhEOztBQUVBLE1BQUl0OEMsS0FBQSxJQUNGcWhELEtBQUssQ0FBQ3pILGNBQU4sQ0FBcUJwaEMsRUFBckIsQ0FERSxJQUVGQSxFQUFFLENBQUM3RCxHQUFILEtBQVcsTUFGVCxJQUdGNkQsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLFVBSFQsSUFJRixDQUFDNkQsRUFBRSxDQUFDbjJCLEdBSk4sRUFLRTtBQUNBZy9ELFNBQUssQ0FBQzFrRCxJQUFOLENBQ0UsTUFBTzZiLEVBQUUsQ0FBQzdELEdBQVYsR0FBaUIsV0FBakIsR0FBK0JuWixLQUEvQixHQUF1QyxNQUF2QyxHQUFnRHM0QyxHQUFoRCxHQUFzRCxxQ0FBdEQsR0FDQSxtQ0FEQSxHQUVBLDBEQUhGLEVBSUV0N0IsRUFBRSxDQUFDcy9CLFdBQUgsQ0FBZSxPQUFmLENBSkYsRUFLRTtBQUFLO0FBTFA7QUFPRDs7QUFFRHQvQixJQUFFLENBQUNtcEMsWUFBSCxHQUFrQixJQUFsQixDQXJCQSxDQXFCd0I7O0FBQ3hCLFNBQU8sQ0FBQ2MsU0FBUyxJQUFJLElBQWQsSUFBc0IsSUFBdEIsR0FBNkIzTyxHQUE3QixHQUFtQyxJQUFuQyxHQUNMLFdBREssR0FDU3Q0QyxLQURULEdBQ2lCK2dELFNBRGpCLEdBQzZCRCxTQUQ3QixHQUN5QyxJQUR6QyxHQUVILFNBRkcsR0FFVSxDQUFDOEYsTUFBTSxJQUFJZCxVQUFYLEVBQXVCOW9DLEVBQXZCLEVBQTJCNm9DLEtBQTNCLENBRlYsR0FHTCxJQUhGO0FBSUQ7O0FBRUQsU0FBU2EsT0FBVCxDQUFrQjFwQyxFQUFsQixFQUFzQjZvQyxLQUF0QixFQUE2QjtBQUMzQixNQUFJbGhFLElBQUksR0FBRyxHQUFYLENBRDJCLENBRzNCO0FBQ0E7O0FBQ0EsTUFBSWk2QixJQUFJLEdBQUdzb0MsYUFBYSxDQUFDbHFDLEVBQUQsRUFBSzZvQyxLQUFMLENBQXhCOztBQUNBLE1BQUlqbkMsSUFBSixFQUFVO0FBQUVqNkIsUUFBSSxJQUFJaTZCLElBQUksR0FBRyxHQUFmO0FBQXFCLEdBTk4sQ0FRM0I7OztBQUNBLE1BQUk1QixFQUFFLENBQUNuMkIsR0FBUCxFQUFZO0FBQ1ZsQyxRQUFJLElBQUksU0FBVXE0QixFQUFFLENBQUNuMkIsR0FBYixHQUFvQixHQUE1QjtBQUNELEdBWDBCLENBWTNCOzs7QUFDQSxNQUFJbTJCLEVBQUUsQ0FBQytGLEdBQVAsRUFBWTtBQUNWcCtCLFFBQUksSUFBSSxTQUFVcTRCLEVBQUUsQ0FBQytGLEdBQWIsR0FBb0IsR0FBNUI7QUFDRDs7QUFDRCxNQUFJL0YsRUFBRSxDQUFDb0csUUFBUCxFQUFpQjtBQUNmeitCLFFBQUksSUFBSSxnQkFBUjtBQUNELEdBbEIwQixDQW1CM0I7OztBQUNBLE1BQUlxNEIsRUFBRSxDQUFDdVosR0FBUCxFQUFZO0FBQ1Y1eEMsUUFBSSxJQUFJLFdBQVI7QUFDRCxHQXRCMEIsQ0F1QjNCOzs7QUFDQSxNQUFJcTRCLEVBQUUsQ0FBQ3QwQyxTQUFQLEVBQWtCO0FBQ2hCaWMsUUFBSSxJQUFJLFdBQVlxNEIsRUFBRSxDQUFDN0QsR0FBZixHQUFzQixLQUE5QjtBQUNELEdBMUIwQixDQTJCM0I7OztBQUNBLE9BQUssSUFBSW40QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNmtFLEtBQUssQ0FBQ0osVUFBTixDQUFpQnIvRSxNQUFyQyxFQUE2QzRhLENBQUMsRUFBOUMsRUFBa0Q7QUFDaEQyRCxRQUFJLElBQUlraEUsS0FBSyxDQUFDSixVQUFOLENBQWlCemtFLENBQWpCLEVBQW9CZzhCLEVBQXBCLENBQVI7QUFDRCxHQTlCMEIsQ0ErQjNCOzs7QUFDQSxNQUFJQSxFQUFFLENBQUNtTCxLQUFQLEVBQWM7QUFDWnhqQyxRQUFJLElBQUksV0FBWXdpRSxRQUFRLENBQUNucUMsRUFBRSxDQUFDbUwsS0FBSixDQUFwQixHQUFrQyxHQUExQztBQUNELEdBbEMwQixDQW1DM0I7OztBQUNBLE1BQUluTCxFQUFFLENBQUNyZixLQUFQLEVBQWM7QUFDWmhaLFFBQUksSUFBSSxjQUFld2lFLFFBQVEsQ0FBQ25xQyxFQUFFLENBQUNyZixLQUFKLENBQXZCLEdBQXFDLEdBQTdDO0FBQ0QsR0F0QzBCLENBdUMzQjs7O0FBQ0EsTUFBSXFmLEVBQUUsQ0FBQyttQixNQUFQLEVBQWU7QUFDYnAvQyxRQUFJLElBQUt3L0QsV0FBVyxDQUFDbm5DLEVBQUUsQ0FBQyttQixNQUFKLEVBQVksS0FBWixDQUFaLEdBQWtDLEdBQTFDO0FBQ0Q7O0FBQ0QsTUFBSS9tQixFQUFFLENBQUNrL0IsWUFBUCxFQUFxQjtBQUNuQnYzRCxRQUFJLElBQUt3L0QsV0FBVyxDQUFDbm5DLEVBQUUsQ0FBQ2svQixZQUFKLEVBQWtCLElBQWxCLENBQVosR0FBdUMsR0FBL0M7QUFDRCxHQTdDMEIsQ0E4QzNCO0FBQ0E7OztBQUNBLE1BQUlsL0IsRUFBRSxDQUFDeWlDLFVBQUgsSUFBaUIsQ0FBQ3ppQyxFQUFFLENBQUN3aUMsU0FBekIsRUFBb0M7QUFDbEM3NkQsUUFBSSxJQUFJLFVBQVdxNEIsRUFBRSxDQUFDeWlDLFVBQWQsR0FBNEIsR0FBcEM7QUFDRCxHQWxEMEIsQ0FtRDNCOzs7QUFDQSxNQUFJemlDLEVBQUUsQ0FBQzBXLFdBQVAsRUFBb0I7QUFDbEIvdUMsUUFBSSxJQUFLeWlFLGNBQWMsQ0FBQ3BxQyxFQUFELEVBQUtBLEVBQUUsQ0FBQzBXLFdBQVIsRUFBcUJteUIsS0FBckIsQ0FBZixHQUE4QyxHQUF0RDtBQUNELEdBdEQwQixDQXVEM0I7OztBQUNBLE1BQUk3b0MsRUFBRSxDQUFDeGYsS0FBUCxFQUFjO0FBQ1o3WSxRQUFJLElBQUksa0JBQW1CcTRCLEVBQUUsQ0FBQ3hmLEtBQUgsQ0FBUzczQixLQUE1QixHQUFxQyxZQUFyQyxHQUFxRHEzQyxFQUFFLENBQUN4ZixLQUFILENBQVMxRSxRQUE5RCxHQUEwRSxjQUExRSxHQUE0RmtrQixFQUFFLENBQUN4ZixLQUFILENBQVNyVixVQUFyRyxHQUFtSCxJQUEzSDtBQUNELEdBMUQwQixDQTJEM0I7OztBQUNBLE1BQUk2MEIsRUFBRSxDQUFDMFksY0FBUCxFQUF1QjtBQUNyQixRQUFJQSxjQUFjLEdBQUcyeEIsaUJBQWlCLENBQUNycUMsRUFBRCxFQUFLNm9DLEtBQUwsQ0FBdEM7O0FBQ0EsUUFBSW53QixjQUFKLEVBQW9CO0FBQ2xCL3dDLFVBQUksSUFBSSt3QyxjQUFjLEdBQUcsR0FBekI7QUFDRDtBQUNGOztBQUNEL3dDLE1BQUksR0FBR0EsSUFBSSxDQUFDeGIsT0FBTCxDQUFhLElBQWIsRUFBbUIsRUFBbkIsSUFBeUIsR0FBaEMsQ0FsRTJCLENBbUUzQjtBQUNBO0FBQ0E7O0FBQ0EsTUFBSTZ6QyxFQUFFLENBQUNzK0IsWUFBUCxFQUFxQjtBQUNuQjMyRCxRQUFJLEdBQUcsUUFBUUEsSUFBUixHQUFlLEtBQWYsR0FBd0JxNEIsRUFBRSxDQUFDN0QsR0FBM0IsR0FBa0MsS0FBbEMsR0FBMkNndUMsUUFBUSxDQUFDbnFDLEVBQUUsQ0FBQ3MrQixZQUFKLENBQW5ELEdBQXdFLEdBQS9FO0FBQ0QsR0F4RTBCLENBeUUzQjs7O0FBQ0EsTUFBSXQrQixFQUFFLENBQUNxb0MsUUFBUCxFQUFpQjtBQUNmMWdFLFFBQUksR0FBR3E0QixFQUFFLENBQUNxb0MsUUFBSCxDQUFZMWdFLElBQVosQ0FBUDtBQUNELEdBNUUwQixDQTZFM0I7OztBQUNBLE1BQUlxNEIsRUFBRSxDQUFDbW9DLGFBQVAsRUFBc0I7QUFDcEJ4Z0UsUUFBSSxHQUFHcTRCLEVBQUUsQ0FBQ21vQyxhQUFILENBQWlCeGdFLElBQWpCLENBQVA7QUFDRDs7QUFDRCxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU3VpRSxhQUFULENBQXdCbHFDLEVBQXhCLEVBQTRCNm9DLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUlqbkMsSUFBSSxHQUFHNUIsRUFBRSxDQUFDNkIsVUFBZDs7QUFDQSxNQUFJLENBQUNELElBQUwsRUFBVztBQUFFO0FBQVE7O0FBQ3JCLE1BQUloYSxHQUFHLEdBQUcsY0FBVjtBQUNBLE1BQUkwaUQsVUFBVSxHQUFHLEtBQWpCO0FBQ0EsTUFBSXRtRSxDQUFKLEVBQU9sWCxDQUFQLEVBQVUyM0QsR0FBVixFQUFlOGxCLFdBQWY7O0FBQ0EsT0FBS3ZtRSxDQUFDLEdBQUcsQ0FBSixFQUFPbFgsQ0FBQyxHQUFHODBDLElBQUksQ0FBQ3g0QyxNQUFyQixFQUE2QjRhLENBQUMsR0FBR2xYLENBQWpDLEVBQW9Da1gsQ0FBQyxFQUFyQyxFQUF5QztBQUN2Q3lnRCxPQUFHLEdBQUc3aUIsSUFBSSxDQUFDNTlCLENBQUQsQ0FBVjtBQUNBdW1FLGVBQVcsR0FBRyxJQUFkO0FBQ0EsUUFBSUMsR0FBRyxHQUFHM0IsS0FBSyxDQUFDaG5DLFVBQU4sQ0FBaUI0aUIsR0FBRyxDQUFDMzJELElBQXJCLENBQVY7O0FBQ0EsUUFBSTA4RSxHQUFKLEVBQVM7QUFDUDtBQUNBO0FBQ0FELGlCQUFXLEdBQUcsQ0FBQyxDQUFDQyxHQUFHLENBQUN4cUMsRUFBRCxFQUFLeWtCLEdBQUwsRUFBVW9rQixLQUFLLENBQUMxa0QsSUFBaEIsQ0FBbkI7QUFDRDs7QUFDRCxRQUFJb21ELFdBQUosRUFBaUI7QUFDZkQsZ0JBQVUsR0FBRyxJQUFiO0FBQ0ExaUQsU0FBRyxJQUFJLGFBQWM2OEIsR0FBRyxDQUFDMzJELElBQWxCLEdBQTBCLGVBQTFCLEdBQTZDMjJELEdBQUcsQ0FBQ1EsT0FBakQsR0FBNEQsSUFBNUQsSUFBb0VSLEdBQUcsQ0FBQzk3RCxLQUFKLEdBQWEsYUFBYzg3RCxHQUFHLENBQUM5N0QsS0FBbEIsR0FBMkIsZUFBM0IsR0FBOEM4ZSxJQUFJLENBQUNDLFNBQUwsQ0FBZSs4QyxHQUFHLENBQUM5N0QsS0FBbkIsQ0FBM0QsR0FBeUYsRUFBN0osS0FBb0s4N0QsR0FBRyxDQUFDcDdELEdBQUosR0FBVyxXQUFXbzdELEdBQUcsQ0FBQ2thLFlBQUosR0FBbUJsYSxHQUFHLENBQUNwN0QsR0FBdkIsR0FBOEIsT0FBUW83RCxHQUFHLENBQUNwN0QsR0FBWixHQUFtQixJQUE1RCxDQUFYLEdBQWlGLEVBQXJQLEtBQTRQbzdELEdBQUcsQ0FBQ00sU0FBSixHQUFpQixnQkFBaUJ0OUMsSUFBSSxDQUFDQyxTQUFMLENBQWUrOEMsR0FBRyxDQUFDTSxTQUFuQixDQUFsQyxHQUFvRSxFQUFoVSxJQUFzVSxJQUE3VTtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSXVsQixVQUFKLEVBQWdCO0FBQ2QsV0FBTzFpRCxHQUFHLENBQUM0RixLQUFKLENBQVUsQ0FBVixFQUFhLENBQUMsQ0FBZCxJQUFtQixHQUExQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzY4QyxpQkFBVCxDQUE0QnJxQyxFQUE1QixFQUFnQzZvQyxLQUFoQyxFQUF1QztBQUNyQyxNQUFJRCxHQUFHLEdBQUc1b0MsRUFBRSxDQUFDNUQsUUFBSCxDQUFZLENBQVosQ0FBVjs7QUFDQSxNQUFJNVUsS0FBQSxLQUNGd1ksRUFBRSxDQUFDNUQsUUFBSCxDQUFZaHpDLE1BQVosS0FBdUIsQ0FBdkIsSUFBNEJ3L0UsR0FBRyxDQUFDMXFFLElBQUosS0FBYSxDQUR2QyxDQUFKLEVBRUc7QUFDRDJxRSxTQUFLLENBQUMxa0QsSUFBTixDQUNFLGlFQURGLEVBRUU7QUFBRW50QixXQUFLLEVBQUVncEMsRUFBRSxDQUFDaHBDO0FBQVosS0FGRjtBQUlEOztBQUNELE1BQUk0eEUsR0FBRyxJQUFJQSxHQUFHLENBQUMxcUUsSUFBSixLQUFhLENBQXhCLEVBQTJCO0FBQ3pCLFFBQUl1c0UsZUFBZSxHQUFHOUIsUUFBUSxDQUFDQyxHQUFELEVBQU1DLEtBQUssQ0FBQ25qRCxPQUFaLENBQTlCO0FBQ0EsV0FBUSx1Q0FBd0Mra0QsZUFBZSxDQUFDOTlCLE1BQXhELEdBQWtFLHFCQUFsRSxHQUEyRjg5QixlQUFlLENBQUM5NUIsZUFBaEIsQ0FBZ0N4dEMsR0FBaEMsQ0FBb0MsVUFBVXdrRSxJQUFWLEVBQWdCO0FBQUUsYUFBUSxnQkFBZ0JBLElBQWhCLEdBQXVCLEdBQS9CO0FBQXNDLEtBQTVGLEVBQThGbGtFLElBQTlGLENBQW1HLEdBQW5HLENBQTNGLEdBQXNNLElBQTlNO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTMm1FLGNBQVQsQ0FDRXBxQyxFQURGLEVBRUV1UixLQUZGLEVBR0VzM0IsS0FIRixFQUlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFJdnJCLGdCQUFnQixHQUFHdGQsRUFBRSxDQUFDNmpDLEdBQUgsSUFBVXI3RSxNQUFNLENBQUMwekIsSUFBUCxDQUFZcTFCLEtBQVosRUFBbUJuTixJQUFuQixDQUF3QixVQUFVdjZCLEdBQVYsRUFBZTtBQUN0RSxRQUFJMm5DLElBQUksR0FBR0QsS0FBSyxDQUFDMW5DLEdBQUQsQ0FBaEI7QUFDQSxXQUNFMm5DLElBQUksQ0FBQzh5QixpQkFBTCxJQUNBOXlCLElBQUksQ0FBQ2tjLEVBREwsSUFFQWxjLElBQUksQ0FBQ3F5QixHQUZMLElBR0E2RyxpQkFBaUIsQ0FBQ2w1QixJQUFELENBSm5CLENBSTBCO0FBSjFCO0FBTUQsR0FSZ0MsQ0FBakMsQ0FMQSxDQWVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQUltNUIsUUFBUSxHQUFHLENBQUMsQ0FBQzNxQyxFQUFFLENBQUMwdEIsRUFBcEIsQ0FuQkEsQ0FxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJLENBQUNwUSxnQkFBTCxFQUF1QjtBQUNyQixRQUFJdmlDLE1BQU0sR0FBR2lsQixFQUFFLENBQUNqbEIsTUFBaEI7O0FBQ0EsV0FBT0EsTUFBUCxFQUFlO0FBQ2IsVUFDR0EsTUFBTSxDQUFDeW5ELFNBQVAsSUFBb0J6bkQsTUFBTSxDQUFDeW5ELFNBQVAsS0FBcUI1QixtQkFBMUMsSUFDQTdsRCxNQUFNLENBQUM4b0QsR0FGVCxFQUdFO0FBQ0F2bUIsd0JBQWdCLEdBQUcsSUFBbkI7QUFDQTtBQUNEOztBQUNELFVBQUl2aUMsTUFBTSxDQUFDMnlDLEVBQVgsRUFBZTtBQUNiaWQsZ0JBQVEsR0FBRyxJQUFYO0FBQ0Q7O0FBQ0Q1dkQsWUFBTSxHQUFHQSxNQUFNLENBQUNBLE1BQWhCO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJNnZELGNBQWMsR0FBR3BpRixNQUFNLENBQUMwekIsSUFBUCxDQUFZcTFCLEtBQVosRUFDbEJwdUMsR0FEa0IsQ0FDZCxVQUFVMEcsR0FBVixFQUFlO0FBQUUsV0FBT2doRSxhQUFhLENBQUN0NUIsS0FBSyxDQUFDMW5DLEdBQUQsQ0FBTixFQUFhZy9ELEtBQWIsQ0FBcEI7QUFBMEMsR0FEN0MsRUFFbEJwbEUsSUFGa0IsQ0FFYixHQUZhLENBQXJCO0FBSUEsU0FBUSxxQkFBcUJtbkUsY0FBckIsR0FBc0MsR0FBdEMsSUFBNkN0dEIsZ0JBQWdCLEdBQUcsWUFBSCxHQUFrQixFQUEvRSxLQUFzRixDQUFDQSxnQkFBRCxJQUFxQnF0QixRQUFyQixHQUFpQyxpQkFBa0J2a0QsSUFBSSxDQUFDd2tELGNBQUQsQ0FBdkQsR0FBNEUsRUFBbEssSUFBd0ssR0FBaEw7QUFDRDs7QUFFRCxTQUFTeGtELElBQVQsQ0FBYytDLEdBQWQsRUFBbUI7QUFDakIsTUFBSS9DLElBQUksR0FBRyxJQUFYO0FBQ0EsTUFBSXBpQixDQUFDLEdBQUdtbEIsR0FBRyxDQUFDLy9CLE1BQVo7O0FBQ0EsU0FBTTRhLENBQU4sRUFBUztBQUNQb2lCLFFBQUksR0FBSUEsSUFBSSxHQUFHLEVBQVIsR0FBYytDLEdBQUcsQ0FBQzJFLFVBQUosQ0FBZSxFQUFFOXBCLENBQWpCLENBQXJCO0FBQ0Q7O0FBQ0QsU0FBT29pQixJQUFJLEtBQUssQ0FBaEI7QUFDRDs7QUFFRCxTQUFTc2tELGlCQUFULENBQTRCMXFDLEVBQTVCLEVBQWdDO0FBQzlCLE1BQUlBLEVBQUUsQ0FBQzloQyxJQUFILEtBQVksQ0FBaEIsRUFBbUI7QUFDakIsUUFBSThoQyxFQUFFLENBQUM3RCxHQUFILEtBQVcsTUFBZixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDs7QUFDRCxXQUFPNkQsRUFBRSxDQUFDNUQsUUFBSCxDQUFZZ0ksSUFBWixDQUFpQnNtQyxpQkFBakIsQ0FBUDtBQUNEOztBQUNELFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVNHLGFBQVQsQ0FDRTdxQyxFQURGLEVBRUU2b0MsS0FGRixFQUdFO0FBQ0EsTUFBSWlDLGNBQWMsR0FBRzlxQyxFQUFFLENBQUN3K0IsUUFBSCxDQUFZLFlBQVosQ0FBckI7O0FBQ0EsTUFBSXgrQixFQUFFLENBQUMwdEIsRUFBSCxJQUFTLENBQUMxdEIsRUFBRSxDQUFDcXBDLFdBQWIsSUFBNEIsQ0FBQ3lCLGNBQWpDLEVBQWlEO0FBQy9DLFdBQU94QixLQUFLLENBQUN0cEMsRUFBRCxFQUFLNm9DLEtBQUwsRUFBWWdDLGFBQVosRUFBMkIsTUFBM0IsQ0FBWjtBQUNEOztBQUNELE1BQUk3cUMsRUFBRSxDQUFDNmpDLEdBQUgsSUFBVSxDQUFDN2pDLEVBQUUsQ0FBQ21wQyxZQUFsQixFQUFnQztBQUM5QixXQUFPQyxNQUFNLENBQUNwcEMsRUFBRCxFQUFLNm9DLEtBQUwsRUFBWWdDLGFBQVosQ0FBYjtBQUNEOztBQUNELE1BQUlySSxTQUFTLEdBQUd4aUMsRUFBRSxDQUFDd2lDLFNBQUgsS0FBaUI1QixtQkFBakIsR0FDWixFQURZLEdBRVp6OEQsTUFBTSxDQUFDNjdCLEVBQUUsQ0FBQ3dpQyxTQUFKLENBRlY7QUFHQSxNQUFJbjZDLEVBQUUsR0FBRyxjQUFjbTZDLFNBQWQsR0FBMEIsSUFBMUIsR0FDUCxTQURPLElBQ014aUMsRUFBRSxDQUFDN0QsR0FBSCxLQUFXLFVBQVgsR0FDVDZELEVBQUUsQ0FBQzB0QixFQUFILElBQVNvZCxjQUFULEdBQ0csTUFBTzlxQyxFQUFFLENBQUMwdEIsRUFBVixHQUFnQixJQUFoQixJQUF3QjZiLFdBQVcsQ0FBQ3ZwQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFYLElBQTBCLFdBQWxELElBQWlFLFlBRHBFLEdBRUVVLFdBQVcsQ0FBQ3ZwQyxFQUFELEVBQUs2b0MsS0FBTCxDQUFYLElBQTBCLFdBSG5CLEdBSVRDLFVBQVUsQ0FBQzlvQyxFQUFELEVBQUs2b0MsS0FBTCxDQUxQLElBS3NCLEdBTC9CLENBWEEsQ0FpQkE7O0FBQ0EsTUFBSWtDLFlBQVksR0FBR3ZJLFNBQVMsR0FBRyxFQUFILEdBQVEsYUFBcEM7QUFDQSxTQUFRLFdBQVd4aUMsRUFBRSxDQUFDeWlDLFVBQUgsSUFBaUIsYUFBNUIsSUFBNkMsTUFBN0MsR0FBc0RwNkMsRUFBdEQsR0FBMkQwaUQsWUFBM0QsR0FBMEUsR0FBbEY7QUFDRDs7QUFFRCxTQUFTeEIsV0FBVCxDQUNFdnBDLEVBREYsRUFFRTZvQyxLQUZGLEVBR0VtQyxTQUhGLEVBSUVDLGFBSkYsRUFLRUMsVUFMRixFQU1FO0FBQ0EsTUFBSTl1QyxRQUFRLEdBQUc0RCxFQUFFLENBQUM1RCxRQUFsQjs7QUFDQSxNQUFJQSxRQUFRLENBQUNoekMsTUFBYixFQUFxQjtBQUNuQixRQUFJK2hGLElBQUksR0FBRy91QyxRQUFRLENBQUMsQ0FBRCxDQUFuQixDQURtQixDQUVuQjs7QUFDQSxRQUFJQSxRQUFRLENBQUNoekMsTUFBVCxLQUFvQixDQUFwQixJQUNGK2hGLElBQUksQ0FBQ3RILEdBREgsSUFFRnNILElBQUksQ0FBQ2h2QyxHQUFMLEtBQWEsVUFGWCxJQUdGZ3ZDLElBQUksQ0FBQ2h2QyxHQUFMLEtBQWEsTUFIZixFQUlFO0FBQ0EsVUFBSStjLGlCQUFpQixHQUFHOHhCLFNBQVMsR0FDN0JuQyxLQUFLLENBQUN6SCxjQUFOLENBQXFCK0osSUFBckIsSUFBNkIsSUFBN0IsR0FBb0MsSUFEUCxHQUU3QixFQUZKO0FBR0EsYUFBUSxLQUFNLENBQUNGLGFBQWEsSUFBSW5DLFVBQWxCLEVBQThCcUMsSUFBOUIsRUFBb0N0QyxLQUFwQyxDQUFOLEdBQW9EM3ZCLGlCQUE1RDtBQUNEOztBQUNELFFBQUlreUIsbUJBQW1CLEdBQUdKLFNBQVMsR0FDL0JLLG9CQUFvQixDQUFDanZDLFFBQUQsRUFBV3lzQyxLQUFLLENBQUN6SCxjQUFqQixDQURXLEdBRS9CLENBRko7QUFHQSxRQUFJb0osR0FBRyxHQUFHVSxVQUFVLElBQUlJLE9BQXhCO0FBQ0EsV0FBUSxNQUFPbHZDLFFBQVEsQ0FBQ2o1QixHQUFULENBQWEsVUFBVXl4QixDQUFWLEVBQWE7QUFBRSxhQUFPNDFDLEdBQUcsQ0FBQzUxQyxDQUFELEVBQUlpMEMsS0FBSixDQUFWO0FBQXVCLEtBQW5ELEVBQXFEcGxFLElBQXJELENBQTBELEdBQTFELENBQVAsR0FBeUUsR0FBekUsSUFBZ0YybkUsbUJBQW1CLEdBQUksTUFBTUEsbUJBQVYsR0FBaUMsRUFBcEksQ0FBUjtBQUNEO0FBQ0YsQyxDQUVEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTQyxvQkFBVCxDQUNFanZDLFFBREYsRUFFRWdsQyxjQUZGLEVBR0U7QUFDQSxNQUFJeDVDLEdBQUcsR0FBRyxDQUFWOztBQUNBLE9BQUssSUFBSTVqQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbzRCLFFBQVEsQ0FBQ2h6QyxNQUE3QixFQUFxQzRhLENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsUUFBSWc4QixFQUFFLEdBQUc1RCxRQUFRLENBQUNwNEIsQ0FBRCxDQUFqQjs7QUFDQSxRQUFJZzhCLEVBQUUsQ0FBQzloQyxJQUFILEtBQVksQ0FBaEIsRUFBbUI7QUFDakI7QUFDRDs7QUFDRCxRQUFJcXRFLGtCQUFrQixDQUFDdnJDLEVBQUQsQ0FBbEIsSUFDQ0EsRUFBRSxDQUFDcWtDLFlBQUgsSUFBbUJya0MsRUFBRSxDQUFDcWtDLFlBQUgsQ0FBZ0JqZ0MsSUFBaEIsQ0FBcUIsVUFBVXhQLENBQVYsRUFBYTtBQUFFLGFBQU8yMkMsa0JBQWtCLENBQUMzMkMsQ0FBQyxDQUFDenlCLEtBQUgsQ0FBekI7QUFBcUMsS0FBekUsQ0FEeEIsRUFDcUc7QUFDbkd5bEIsU0FBRyxHQUFHLENBQU47QUFDQTtBQUNEOztBQUNELFFBQUl3NUMsY0FBYyxDQUFDcGhDLEVBQUQsQ0FBZCxJQUNDQSxFQUFFLENBQUNxa0MsWUFBSCxJQUFtQnJrQyxFQUFFLENBQUNxa0MsWUFBSCxDQUFnQmpnQyxJQUFoQixDQUFxQixVQUFVeFAsQ0FBVixFQUFhO0FBQUUsYUFBT3dzQyxjQUFjLENBQUN4c0MsQ0FBQyxDQUFDenlCLEtBQUgsQ0FBckI7QUFBaUMsS0FBckUsQ0FEeEIsRUFDaUc7QUFDL0Z5bEIsU0FBRyxHQUFHLENBQU47QUFDRDtBQUNGOztBQUNELFNBQU9BLEdBQVA7QUFDRDs7QUFFRCxTQUFTMmpELGtCQUFULENBQTZCdnJDLEVBQTdCLEVBQWlDO0FBQy9CLFNBQU9BLEVBQUUsQ0FBQzZqQyxHQUFILEtBQVc5NEUsU0FBWCxJQUF3QmkxQyxFQUFFLENBQUM3RCxHQUFILEtBQVcsVUFBbkMsSUFBaUQ2RCxFQUFFLENBQUM3RCxHQUFILEtBQVcsTUFBbkU7QUFDRDs7QUFFRCxTQUFTbXZDLE9BQVQsQ0FBa0I3dEMsSUFBbEIsRUFBd0JvckMsS0FBeEIsRUFBK0I7QUFDN0IsTUFBSXByQyxJQUFJLENBQUN2L0IsSUFBTCxLQUFjLENBQWxCLEVBQXFCO0FBQ25CLFdBQU80cUUsVUFBVSxDQUFDcnJDLElBQUQsRUFBT29yQyxLQUFQLENBQWpCO0FBQ0QsR0FGRCxNQUVPLElBQUlwckMsSUFBSSxDQUFDdi9CLElBQUwsS0FBYyxDQUFkLElBQW1CdS9CLElBQUksQ0FBQ1QsU0FBNUIsRUFBdUM7QUFDNUMsV0FBT3d1QyxVQUFVLENBQUMvdEMsSUFBRCxDQUFqQjtBQUNELEdBRk0sTUFFQTtBQUNMLFdBQU9ndUMsT0FBTyxDQUFDaHVDLElBQUQsQ0FBZDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU2d1QyxPQUFULENBQWtCMTBFLElBQWxCLEVBQXdCO0FBQ3RCLFNBQVEsU0FBU0EsSUFBSSxDQUFDbUgsSUFBTCxLQUFjLENBQWQsR0FDYm5ILElBQUksQ0FBQ29VLFVBRFEsQ0FDRztBQURILElBRWJ1Z0Usd0JBQXdCLENBQUNqa0UsSUFBSSxDQUFDQyxTQUFMLENBQWUzUSxJQUFJLENBQUNBLElBQXBCLENBQUQsQ0FGcEIsSUFFbUQsR0FGM0Q7QUFHRDs7QUFFRCxTQUFTeTBFLFVBQVQsQ0FBcUI3UyxPQUFyQixFQUE4QjtBQUM1QixTQUFRLFFBQVNseEQsSUFBSSxDQUFDQyxTQUFMLENBQWVpeEQsT0FBTyxDQUFDNWhFLElBQXZCLENBQVQsR0FBeUMsR0FBakQ7QUFDRDs7QUFFRCxTQUFTeXlFLE9BQVQsQ0FBa0J4cEMsRUFBbEIsRUFBc0I2b0MsS0FBdEIsRUFBNkI7QUFDM0IsTUFBSS9ELFFBQVEsR0FBRzlrQyxFQUFFLENBQUM4a0MsUUFBSCxJQUFlLFdBQTlCO0FBQ0EsTUFBSTFvQyxRQUFRLEdBQUdtdEMsV0FBVyxDQUFDdnBDLEVBQUQsRUFBSzZvQyxLQUFMLENBQTFCO0FBQ0EsTUFBSWpoRCxHQUFHLEdBQUcsUUFBUWs5QyxRQUFSLElBQW9CMW9DLFFBQVEsR0FBSSxNQUFNQSxRQUFWLEdBQXNCLEVBQWxELENBQVY7QUFDQSxNQUFJK08sS0FBSyxHQUFHbkwsRUFBRSxDQUFDbUwsS0FBSCxJQUFZbkwsRUFBRSxDQUFDcytCLFlBQWYsR0FDUjZMLFFBQVEsQ0FBQyxDQUFDbnFDLEVBQUUsQ0FBQ21MLEtBQUgsSUFBWSxFQUFiLEVBQWlCL2pDLE1BQWpCLENBQXdCNDRCLEVBQUUsQ0FBQ3MrQixZQUFILElBQW1CLEVBQTNDLEVBQStDbjdELEdBQS9DLENBQW1ELFVBQVV5M0QsSUFBVixFQUFnQjtBQUFFLFdBQVE7QUFDcEY7QUFDQTlzRSxVQUFJLEVBQUU2bUMsUUFBUSxDQUFDaW1DLElBQUksQ0FBQzlzRSxJQUFOLENBRnNFO0FBR3BGbkYsV0FBSyxFQUFFaXlFLElBQUksQ0FBQ2p5RSxLQUh3RTtBQUlwRnUxRSxhQUFPLEVBQUV0RCxJQUFJLENBQUNzRDtBQUpzRSxLQUFSO0FBS3pFLEdBTEksQ0FBRCxDQURBLEdBT1IsSUFQSjtBQVFBLE1BQUlsekQsSUFBSSxHQUFHZzFCLEVBQUUsQ0FBQ3crQixRQUFILENBQVksUUFBWixDQUFYOztBQUNBLE1BQUksQ0FBQ3J6QixLQUFLLElBQUluZ0MsSUFBVixLQUFtQixDQUFDb3hCLFFBQXhCLEVBQWtDO0FBQ2hDeFUsT0FBRyxJQUFJLE9BQVA7QUFDRDs7QUFDRCxNQUFJdWpCLEtBQUosRUFBVztBQUNUdmpCLE9BQUcsSUFBSSxNQUFNdWpCLEtBQWI7QUFDRDs7QUFDRCxNQUFJbmdDLElBQUosRUFBVTtBQUNSNGMsT0FBRyxJQUFJLENBQUN1akIsS0FBSyxHQUFHLEVBQUgsR0FBUSxPQUFkLElBQXlCLEdBQXpCLEdBQStCbmdDLElBQXRDO0FBQ0Q7O0FBQ0QsU0FBTzRjLEdBQUcsR0FBRyxHQUFiO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTNmhELFlBQVQsQ0FDRWtDLGFBREYsRUFFRTNyQyxFQUZGLEVBR0U2b0MsS0FIRixFQUlFO0FBQ0EsTUFBSXpzQyxRQUFRLEdBQUc0RCxFQUFFLENBQUMwWSxjQUFILEdBQW9CLElBQXBCLEdBQTJCNndCLFdBQVcsQ0FBQ3ZwQyxFQUFELEVBQUs2b0MsS0FBTCxFQUFZLElBQVosQ0FBckQ7QUFDQSxTQUFRLFFBQVE4QyxhQUFSLEdBQXdCLEdBQXhCLEdBQStCakMsT0FBTyxDQUFDMXBDLEVBQUQsRUFBSzZvQyxLQUFMLENBQXRDLElBQXNEenNDLFFBQVEsR0FBSSxNQUFNQSxRQUFWLEdBQXNCLEVBQXBGLElBQTBGLEdBQWxHO0FBQ0Q7O0FBRUQsU0FBUyt0QyxRQUFULENBQW1CeHBELEtBQW5CLEVBQTBCO0FBQ3hCLE1BQUlpckQsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLE9BQUssSUFBSTduRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMmMsS0FBSyxDQUFDdjNCLE1BQTFCLEVBQWtDNGEsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJeWMsSUFBSSxHQUFHRSxLQUFLLENBQUMzYyxDQUFELENBQWhCO0FBQ0EsUUFBSXJiLEtBQUssR0FBRytpRix3QkFBd0IsQ0FBQ2pyRCxJQUFJLENBQUM5M0IsS0FBTixDQUFwQzs7QUFDQSxRQUFJODNCLElBQUksQ0FBQ3k5QyxPQUFULEVBQWtCO0FBQ2hCMk4sa0JBQVksSUFBS3ByRCxJQUFJLENBQUMzeUIsSUFBTixHQUFjLEdBQWQsR0FBb0JuRixLQUFwQixHQUE0QixHQUE1QztBQUNELEtBRkQsTUFFTztBQUNMaWpGLGlCQUFXLElBQUksT0FBUW5yRCxJQUFJLENBQUMzeUIsSUFBYixHQUFxQixLQUFyQixHQUE2Qm5GLEtBQTdCLEdBQXFDLEdBQXBEO0FBQ0Q7QUFDRjs7QUFDRGlqRixhQUFXLEdBQUcsTUFBT0EsV0FBVyxDQUFDcCtDLEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBQyxDQUF0QixDQUFQLEdBQW1DLEdBQWpEOztBQUNBLE1BQUlxK0MsWUFBSixFQUFrQjtBQUNoQixXQUFRLFFBQVFELFdBQVIsR0FBc0IsSUFBdEIsR0FBOEJDLFlBQVksQ0FBQ3IrQyxLQUFiLENBQW1CLENBQW5CLEVBQXNCLENBQUMsQ0FBdkIsQ0FBOUIsR0FBMkQsSUFBbkU7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPbytDLFdBQVA7QUFDRDtBQUNGLEMsQ0FFRDs7O0FBQ0EsU0FBU0Ysd0JBQVQsQ0FBbUMzMEUsSUFBbkMsRUFBeUM7QUFDdkMsU0FBT0EsSUFBSSxDQUNSNUssT0FESSxDQUNJLFNBREosRUFDZSxTQURmLEVBRUpBLE9BRkksQ0FFSSxTQUZKLEVBRWUsU0FGZixDQUFQO0FBR0Q7QUFFRDtBQUlBO0FBQ0E7OztBQUNBLElBQUkyL0UsbUJBQW1CLEdBQUcsSUFBSS9pRCxNQUFKLENBQVcsUUFBUSxDQUMzQyw0RUFDQSxxRUFEQSxHQUVBLHNEQUgyQyxFQUkzQzE4QixLQUoyQyxDQUlyQyxHQUpxQyxFQUloQ29YLElBSmdDLENBSTNCLFNBSjJCLENBQVIsR0FJTixLQUpMLENBQTFCLEMsQ0FNQTs7QUFDQSxJQUFJc29FLGdCQUFnQixHQUFHLElBQUloakQsTUFBSixDQUFXLFFBQ2hDLG9CQUR3QyxDQUV4QzE4QixLQUZ3QyxDQUVsQyxHQUZrQyxFQUU3Qm9YLElBRjZCLENBRXhCLHVCQUZ3QixDQUFSLEdBRVcsbUJBRnRCLENBQXZCLEMsQ0FJQTs7QUFDQSxJQUFJdW9FLGFBQWEsR0FBRyxnR0FBcEIsQyxDQUVBOztBQUNBLFNBQVNDLFlBQVQsQ0FBdUJyRCxHQUF2QixFQUE0QnprRCxJQUE1QixFQUFrQztBQUNoQyxNQUFJeWtELEdBQUosRUFBUztBQUNQc0QsYUFBUyxDQUFDdEQsR0FBRCxFQUFNemtELElBQU4sQ0FBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUytuRCxTQUFULENBQW9CenVDLElBQXBCLEVBQTBCdFosSUFBMUIsRUFBZ0M7QUFDOUIsTUFBSXNaLElBQUksQ0FBQ3YvQixJQUFMLEtBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsU0FBSyxJQUFJcFEsSUFBVCxJQUFpQjJ2QyxJQUFJLENBQUMrZ0MsUUFBdEIsRUFBZ0M7QUFDOUIsVUFBSXVCLEtBQUssQ0FBQzkxRSxJQUFOLENBQVc2RCxJQUFYLENBQUosRUFBc0I7QUFDcEIsWUFBSW5GLEtBQUssR0FBRzgwQyxJQUFJLENBQUMrZ0MsUUFBTCxDQUFjMXdFLElBQWQsQ0FBWjs7QUFDQSxZQUFJbkYsS0FBSixFQUFXO0FBQ1QsY0FBSW8xRSxLQUFLLEdBQUd0Z0MsSUFBSSxDQUFDNmhDLFdBQUwsQ0FBaUJ4eEUsSUFBakIsQ0FBWjs7QUFDQSxjQUFJQSxJQUFJLEtBQUssT0FBYixFQUFzQjtBQUNwQnErRSxvQkFBUSxDQUFDMXVDLElBQUQsRUFBUSxhQUFhOTBDLEtBQWIsR0FBcUIsSUFBN0IsRUFBb0N3N0IsSUFBcEMsRUFBMEM0NUMsS0FBMUMsQ0FBUjtBQUNELFdBRkQsTUFFTyxJQUFJK0IsSUFBSSxDQUFDNzFFLElBQUwsQ0FBVTZELElBQVYsQ0FBSixFQUFxQjtBQUMxQnMrRSxzQkFBVSxDQUFDempGLEtBQUQsRUFBU21GLElBQUksR0FBRyxLQUFQLEdBQWVuRixLQUFmLEdBQXVCLElBQWhDLEVBQXVDdzdCLElBQXZDLEVBQTZDNDVDLEtBQTdDLENBQVY7QUFDRCxXQUZNLE1BRUE7QUFDTHNPLDJCQUFlLENBQUMxakYsS0FBRCxFQUFTbUYsSUFBSSxHQUFHLEtBQVAsR0FBZW5GLEtBQWYsR0FBdUIsSUFBaEMsRUFBdUN3N0IsSUFBdkMsRUFBNkM0NUMsS0FBN0MsQ0FBZjtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUNELFFBQUl0Z0MsSUFBSSxDQUFDckIsUUFBVCxFQUFtQjtBQUNqQixXQUFLLElBQUlwNEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3k1QixJQUFJLENBQUNyQixRQUFMLENBQWNoekMsTUFBbEMsRUFBMEM0YSxDQUFDLEVBQTNDLEVBQStDO0FBQzdDa29FLGlCQUFTLENBQUN6dUMsSUFBSSxDQUFDckIsUUFBTCxDQUFjcDRCLENBQWQsQ0FBRCxFQUFtQm1nQixJQUFuQixDQUFUO0FBQ0Q7QUFDRjtBQUNGLEdBckJELE1BcUJPLElBQUlzWixJQUFJLENBQUN2L0IsSUFBTCxLQUFjLENBQWxCLEVBQXFCO0FBQzFCbXVFLG1CQUFlLENBQUM1dUMsSUFBSSxDQUFDdHlCLFVBQU4sRUFBa0JzeUIsSUFBSSxDQUFDMW1DLElBQXZCLEVBQTZCb3RCLElBQTdCLEVBQW1Dc1osSUFBbkMsQ0FBZjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzJ1QyxVQUFULENBQXFCOVEsR0FBckIsRUFBMEJ2a0UsSUFBMUIsRUFBZ0NvdEIsSUFBaEMsRUFBc0M0NUMsS0FBdEMsRUFBNkM7QUFDM0MsTUFBSXVPLE9BQU8sR0FBR2hSLEdBQUcsQ0FBQ252RSxPQUFKLENBQVk2L0UsYUFBWixFQUEyQixFQUEzQixDQUFkO0FBQ0EsTUFBSU8sWUFBWSxHQUFHRCxPQUFPLENBQUM1NkMsS0FBUixDQUFjcTZDLGdCQUFkLENBQW5COztBQUNBLE1BQUlRLFlBQVksSUFBSUQsT0FBTyxDQUFDdGhGLE1BQVIsQ0FBZXVoRixZQUFZLENBQUNydkUsS0FBYixHQUFxQixDQUFwQyxNQUEyQyxHQUEvRCxFQUFvRTtBQUNsRWluQixRQUFJLENBQ0YsNkRBQ0EsSUFEQSxHQUNRb29ELFlBQVksQ0FBQyxDQUFELENBRHBCLEdBQzJCLG1CQUQzQixHQUNrRHgxRSxJQUFJLENBQUMzSyxJQUFMLEVBRmhELEVBR0YyeEUsS0FIRSxDQUFKO0FBS0Q7O0FBQ0RzTyxpQkFBZSxDQUFDL1EsR0FBRCxFQUFNdmtFLElBQU4sRUFBWW90QixJQUFaLEVBQWtCNDVDLEtBQWxCLENBQWY7QUFDRDs7QUFFRCxTQUFTb08sUUFBVCxDQUFtQjF1QyxJQUFuQixFQUF5QjFtQyxJQUF6QixFQUErQm90QixJQUEvQixFQUFxQzQ1QyxLQUFyQyxFQUE0QztBQUMxQ3NPLGlCQUFlLENBQUM1dUMsSUFBSSxDQUFDb21DLEdBQUwsSUFBWSxFQUFiLEVBQWlCOXNFLElBQWpCLEVBQXVCb3RCLElBQXZCLEVBQTZCNDVDLEtBQTdCLENBQWY7QUFDQXlPLGlCQUFlLENBQUMvdUMsSUFBSSxDQUFDemEsS0FBTixFQUFhLGFBQWIsRUFBNEJqc0IsSUFBNUIsRUFBa0NvdEIsSUFBbEMsRUFBd0M0NUMsS0FBeEMsQ0FBZjtBQUNBeU8saUJBQWUsQ0FBQy91QyxJQUFJLENBQUNzbUMsU0FBTixFQUFpQixnQkFBakIsRUFBbUNodEUsSUFBbkMsRUFBeUNvdEIsSUFBekMsRUFBK0M0NUMsS0FBL0MsQ0FBZjtBQUNBeU8saUJBQWUsQ0FBQy91QyxJQUFJLENBQUNxbUMsU0FBTixFQUFpQixnQkFBakIsRUFBbUMvc0UsSUFBbkMsRUFBeUNvdEIsSUFBekMsRUFBK0M0NUMsS0FBL0MsQ0FBZjtBQUNEOztBQUVELFNBQVN5TyxlQUFULENBQ0VDLEtBREYsRUFFRXZ1RSxJQUZGLEVBR0VuSCxJQUhGLEVBSUVvdEIsSUFKRixFQUtFNDVDLEtBTEYsRUFNRTtBQUNBLE1BQUksT0FBTzBPLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsUUFBSTtBQUNGLFVBQUk1dUQsUUFBSixDQUFjLFNBQVM0dUQsS0FBVCxHQUFpQixJQUEvQjtBQUNELEtBRkQsQ0FFRSxPQUFPbmxELENBQVAsRUFBVTtBQUNWbkQsVUFBSSxDQUFFLGFBQWFqbUIsSUFBYixHQUFvQixLQUFwQixHQUE0QnV1RSxLQUE1QixHQUFvQyxvQkFBcEMsR0FBNEQxMUUsSUFBSSxDQUFDM0ssSUFBTCxFQUE5RCxFQUE2RTJ4RSxLQUE3RSxDQUFKO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVNzTyxlQUFULENBQTBCL1EsR0FBMUIsRUFBK0J2a0UsSUFBL0IsRUFBcUNvdEIsSUFBckMsRUFBMkM0NUMsS0FBM0MsRUFBa0Q7QUFDaEQsTUFBSTtBQUNGLFFBQUlsZ0QsUUFBSixDQUFjLFlBQVl5OUMsR0FBMUI7QUFDRCxHQUZELENBRUUsT0FBT2gwQyxDQUFQLEVBQVU7QUFDVixRQUFJaWxELFlBQVksR0FBR2pSLEdBQUcsQ0FBQ252RSxPQUFKLENBQVk2L0UsYUFBWixFQUEyQixFQUEzQixFQUErQnQ2QyxLQUEvQixDQUFxQ282QyxtQkFBckMsQ0FBbkI7O0FBQ0EsUUFBSVMsWUFBSixFQUFrQjtBQUNoQnBvRCxVQUFJLENBQ0Ysc0RBQ0EsSUFEQSxHQUNRb29ELFlBQVksQ0FBQyxDQUFELENBRHBCLEdBQzJCLHdCQUQzQixHQUN1RHgxRSxJQUFJLENBQUMzSyxJQUFMLEVBRnJELEVBR0YyeEUsS0FIRSxDQUFKO0FBS0QsS0FORCxNQU1PO0FBQ0w1NUMsVUFBSSxDQUNGLHlCQUEwQm1ELENBQUMsQ0FBQ3JELE9BQTVCLEdBQXVDLFNBQXZDLEdBQ0EsTUFEQSxHQUNTcTNDLEdBRFQsR0FDZSxNQURmLEdBRUEsb0JBRkEsR0FFd0J2a0UsSUFBSSxDQUFDM0ssSUFBTCxFQUZ4QixHQUV1QyxJQUhyQyxFQUlGMnhFLEtBSkUsQ0FBSjtBQU1EO0FBQ0Y7QUFDRjtBQUVEOzs7QUFFQSxJQUFJQSxLQUFLLEdBQUcsQ0FBWjs7QUFFQSxTQUFTMk8saUJBQVQsQ0FDRXhsRSxNQURGLEVBRUVsUSxLQUZGLEVBR0VJLEdBSEYsRUFJRTtBQUNBLE1BQUtKLEtBQUssS0FBSyxLQUFLLENBQXBCLEVBQXdCQSxLQUFLLEdBQUcsQ0FBUjtBQUN4QixNQUFLSSxHQUFHLEtBQUssS0FBSyxDQUFsQixFQUFzQkEsR0FBRyxHQUFHOFAsTUFBTSxDQUFDOWQsTUFBYjtBQUV0QixNQUFJdWpGLEtBQUssR0FBR3psRSxNQUFNLENBQUM3YSxLQUFQLENBQWEsT0FBYixDQUFaO0FBQ0EsTUFBSXVnRixLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlobEQsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsT0FBSyxJQUFJNWpCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcyb0UsS0FBSyxDQUFDdmpGLE1BQTFCLEVBQWtDNGEsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQzRvRSxTQUFLLElBQUlELEtBQUssQ0FBQzNvRSxDQUFELENBQUwsQ0FBUzVhLE1BQVQsR0FBa0IsQ0FBM0I7O0FBQ0EsUUFBSXdqRixLQUFLLElBQUk1MUUsS0FBYixFQUFvQjtBQUNsQixXQUFLLElBQUkybUQsQ0FBQyxHQUFHMzVDLENBQUMsR0FBRys1RCxLQUFqQixFQUF3QnBnQixDQUFDLElBQUkzNUMsQ0FBQyxHQUFHKzVELEtBQVQsSUFBa0IzbUUsR0FBRyxHQUFHdzFFLEtBQWhELEVBQXVEanZCLENBQUMsRUFBeEQsRUFBNEQ7QUFDMUQsWUFBSUEsQ0FBQyxHQUFHLENBQUosSUFBU0EsQ0FBQyxJQUFJZ3ZCLEtBQUssQ0FBQ3ZqRixNQUF4QixFQUFnQztBQUFFO0FBQVU7O0FBQzVDdytCLFdBQUcsQ0FBQ25yQixJQUFKLENBQVUsTUFBTWtoRCxDQUFDLEdBQUcsQ0FBVixJQUFnQmt2QixRQUFRLENBQUMsR0FBRCxFQUFNLElBQUkxb0UsTUFBTSxDQUFDdzVDLENBQUMsR0FBRyxDQUFMLENBQU4sQ0FBY3YwRCxNQUF4QixDQUF4QixHQUEyRCxLQUEzRCxHQUFvRXVqRixLQUFLLENBQUNodkIsQ0FBRCxDQUFuRjtBQUNBLFlBQUltdkIsVUFBVSxHQUFHSCxLQUFLLENBQUNodkIsQ0FBRCxDQUFMLENBQVN2MEQsTUFBMUI7O0FBQ0EsWUFBSXUwRCxDQUFDLEtBQUszNUMsQ0FBVixFQUFhO0FBQ1g7QUFDQSxjQUFJK29FLEdBQUcsR0FBRy8xRSxLQUFLLElBQUk0MUUsS0FBSyxHQUFHRSxVQUFaLENBQUwsR0FBK0IsQ0FBekM7QUFDQSxjQUFJMWpGLE1BQU0sR0FBR2dPLEdBQUcsR0FBR3cxRSxLQUFOLEdBQWNFLFVBQVUsR0FBR0MsR0FBM0IsR0FBaUMzMUUsR0FBRyxHQUFHSixLQUFwRDtBQUNBNHdCLGFBQUcsQ0FBQ25yQixJQUFKLENBQVMsV0FBV293RSxRQUFRLENBQUMsR0FBRCxFQUFNRSxHQUFOLENBQW5CLEdBQWdDRixRQUFRLENBQUMsR0FBRCxFQUFNempGLE1BQU4sQ0FBakQ7QUFDRCxTQUxELE1BS08sSUFBSXUwRCxDQUFDLEdBQUczNUMsQ0FBUixFQUFXO0FBQ2hCLGNBQUk1TSxHQUFHLEdBQUd3MUUsS0FBVixFQUFpQjtBQUNmLGdCQUFJSSxRQUFRLEdBQUd2Z0YsSUFBSSxDQUFDd2dGLEdBQUwsQ0FBUzcxRSxHQUFHLEdBQUd3MUUsS0FBZixFQUFzQkUsVUFBdEIsQ0FBZjtBQUNBbGxELGVBQUcsQ0FBQ25yQixJQUFKLENBQVMsV0FBV293RSxRQUFRLENBQUMsR0FBRCxFQUFNRyxRQUFOLENBQTVCO0FBQ0Q7O0FBQ0RKLGVBQUssSUFBSUUsVUFBVSxHQUFHLENBQXRCO0FBQ0Q7QUFDRjs7QUFDRDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT2xsRCxHQUFHLENBQUNua0IsSUFBSixDQUFTLElBQVQsQ0FBUDtBQUNEOztBQUVELFNBQVNvcEUsUUFBVCxDQUFtQjFqRCxHQUFuQixFQUF3QitJLENBQXhCLEVBQTJCO0FBQ3pCLE1BQUloN0IsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsTUFBSWc3QixDQUFDLEdBQUcsQ0FBUixFQUFXO0FBQ1QsV0FBTyxJQUFQLEVBQWE7QUFBRTtBQUNiLFVBQUlBLENBQUMsR0FBRyxDQUFSLEVBQVc7QUFBRWg3QixjQUFNLElBQUlpeUIsR0FBVjtBQUFnQjs7QUFDN0IrSSxPQUFDLE1BQU0sQ0FBUDs7QUFDQSxVQUFJQSxDQUFDLElBQUksQ0FBVCxFQUFZO0FBQUU7QUFBTzs7QUFDckIvSSxTQUFHLElBQUlBLEdBQVA7QUFDRDtBQUNGOztBQUNELFNBQU9qeUIsTUFBUDtBQUNEO0FBRUQ7OztBQUlBLFNBQVNnMkUsY0FBVCxDQUF5QnZGLElBQXpCLEVBQStCd0YsTUFBL0IsRUFBdUM7QUFDckMsTUFBSTtBQUNGLFdBQU8sSUFBSXR2RCxRQUFKLENBQWE4cEQsSUFBYixDQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU8vakQsR0FBUCxFQUFZO0FBQ1p1cEQsVUFBTSxDQUFDMXdFLElBQVAsQ0FBWTtBQUFFbW5CLFNBQUcsRUFBRUEsR0FBUDtBQUFZK2pELFVBQUksRUFBRUE7QUFBbEIsS0FBWjtBQUNBLFdBQU9seUMsSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzIzQyx5QkFBVCxDQUFvQ0MsT0FBcEMsRUFBNkM7QUFDM0MsTUFBSTk0QyxLQUFLLEdBQUcvckMsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYyxJQUFkLENBQVo7QUFFQSxTQUFPLFNBQVNzNUMsa0JBQVQsQ0FDTDF1RCxRQURLLEVBRUw4RyxPQUZLLEVBR0xnVixFQUhLLEVBSUw7QUFDQWhWLFdBQU8sR0FBRzJQLE1BQU0sQ0FBQyxFQUFELEVBQUszUCxPQUFMLENBQWhCO0FBQ0EsUUFBSW03QyxNQUFNLEdBQUduN0MsT0FBTyxDQUFDdkIsSUFBUixJQUFnQkEsSUFBN0I7QUFDQSxXQUFPdUIsT0FBTyxDQUFDdkIsSUFBZjtBQUVBOztBQUNBLFFBQUlxRCxJQUFKLEVBQTJDO0FBQ3pDO0FBQ0EsVUFBSTtBQUNGLFlBQUkzSixRQUFKLENBQWEsVUFBYjtBQUNELE9BRkQsQ0FFRSxPQUFPeUosQ0FBUCxFQUFVO0FBQ1YsWUFBSUEsQ0FBQyxDQUFDMzdCLFFBQUYsR0FBYStsQyxLQUFiLENBQW1CLGlCQUFuQixDQUFKLEVBQTJDO0FBQ3pDbXZDLGdCQUFNLENBQ0osaUVBQ0EsdUVBREEsR0FFQSxrRUFGQSxHQUdBLGlFQUhBLEdBSUEsa0NBTEksQ0FBTjtBQU9EO0FBQ0Y7QUFDRixLQXJCRCxDQXVCQTs7O0FBQ0EsUUFBSWgzRCxHQUFHLEdBQUc2YixPQUFPLENBQUMyMkMsVUFBUixHQUNObDRELE1BQU0sQ0FBQ3VoQixPQUFPLENBQUMyMkMsVUFBVCxDQUFOLEdBQTZCejlDLFFBRHZCLEdBRU5BLFFBRko7O0FBR0EsUUFBSTJWLEtBQUssQ0FBQzFxQixHQUFELENBQVQsRUFBZ0I7QUFDZCxhQUFPMHFCLEtBQUssQ0FBQzFxQixHQUFELENBQVo7QUFDRCxLQTdCRCxDQStCQTs7O0FBQ0EsUUFBSTBqRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQ3p1RCxRQUFELEVBQVc4RyxPQUFYLENBQXRCLENBaENBLENBa0NBOztBQUNBLFFBQUk4QixJQUFKLEVBQTJDO0FBQ3pDLFVBQUkrbEQsUUFBUSxDQUFDSixNQUFULElBQW1CSSxRQUFRLENBQUNKLE1BQVQsQ0FBZ0IvakYsTUFBdkMsRUFBK0M7QUFDN0MsWUFBSXM4QixPQUFPLENBQUNzMUMsaUJBQVosRUFBK0I7QUFDN0J1UyxrQkFBUSxDQUFDSixNQUFULENBQWdCanBFLE9BQWhCLENBQXdCLFVBQVVvakIsQ0FBVixFQUFhO0FBQ25DdTVDLGtCQUFNLENBQ0osa0NBQW1DdjVDLENBQUMsQ0FBQ21ULEdBQXJDLEdBQTRDLE1BQTVDLEdBQ0FpeUMsaUJBQWlCLENBQUM5dEQsUUFBRCxFQUFXMEksQ0FBQyxDQUFDdHdCLEtBQWIsRUFBb0Jzd0IsQ0FBQyxDQUFDbHdCLEdBQXRCLENBRmIsRUFHSnNqQyxFQUhJLENBQU47QUFLRCxXQU5EO0FBT0QsU0FSRCxNQVFPO0FBQ0xtbUMsZ0JBQU0sQ0FDSixrQ0FBa0NqaUQsUUFBbEMsR0FBNkMsTUFBN0MsR0FDQTJ1RCxRQUFRLENBQUNKLE1BQVQsQ0FBZ0JocUUsR0FBaEIsQ0FBb0IsVUFBVW1rQixDQUFWLEVBQWE7QUFBRSxtQkFBUSxPQUFPQSxDQUFmO0FBQW9CLFdBQXZELEVBQXlEN2pCLElBQXpELENBQThELElBQTlELENBREEsR0FDc0UsSUFGbEUsRUFHSmkzQixFQUhJLENBQU47QUFLRDtBQUNGOztBQUNELFVBQUk2eUMsUUFBUSxDQUFDQyxJQUFULElBQWlCRCxRQUFRLENBQUNDLElBQVQsQ0FBY3BrRixNQUFuQyxFQUEyQztBQUN6QyxZQUFJczhCLE9BQU8sQ0FBQ3MxQyxpQkFBWixFQUErQjtBQUM3QnVTLGtCQUFRLENBQUNDLElBQVQsQ0FBY3RwRSxPQUFkLENBQXNCLFVBQVVvakIsQ0FBVixFQUFhO0FBQUUsbUJBQU82UyxHQUFHLENBQUM3UyxDQUFDLENBQUNtVCxHQUFILEVBQVFDLEVBQVIsQ0FBVjtBQUF3QixXQUE3RDtBQUNELFNBRkQsTUFFTztBQUNMNnlDLGtCQUFRLENBQUNDLElBQVQsQ0FBY3RwRSxPQUFkLENBQXNCLFVBQVV1MkIsR0FBVixFQUFlO0FBQUUsbUJBQU9OLEdBQUcsQ0FBQ00sR0FBRCxFQUFNQyxFQUFOLENBQVY7QUFBc0IsV0FBN0Q7QUFDRDtBQUNGO0FBQ0YsS0E1REQsQ0E4REE7OztBQUNBLFFBQUk5UyxHQUFHLEdBQUcsRUFBVjtBQUNBLFFBQUk2bEQsV0FBVyxHQUFHLEVBQWxCO0FBQ0E3bEQsT0FBRyxDQUFDK2tCLE1BQUosR0FBYXVnQyxjQUFjLENBQUNLLFFBQVEsQ0FBQzVnQyxNQUFWLEVBQWtCOGdDLFdBQWxCLENBQTNCO0FBQ0E3bEQsT0FBRyxDQUFDK29CLGVBQUosR0FBc0I0OEIsUUFBUSxDQUFDNThCLGVBQVQsQ0FBeUJ4dEMsR0FBekIsQ0FBNkIsVUFBVXdrRSxJQUFWLEVBQWdCO0FBQ2pFLGFBQU91RixjQUFjLENBQUN2RixJQUFELEVBQU84RixXQUFQLENBQXJCO0FBQ0QsS0FGcUIsQ0FBdEIsQ0FsRUEsQ0FzRUE7QUFDQTtBQUNBOztBQUNBOztBQUNBLFFBQUlqbUQsSUFBSixFQUEyQztBQUN6QyxVQUFJLENBQUMsQ0FBQytsRCxRQUFRLENBQUNKLE1BQVYsSUFBb0IsQ0FBQ0ksUUFBUSxDQUFDSixNQUFULENBQWdCL2pGLE1BQXRDLEtBQWlEcWtGLFdBQVcsQ0FBQ3JrRixNQUFqRSxFQUF5RTtBQUN2RXkzRSxjQUFNLENBQ0osNENBQ0E0TSxXQUFXLENBQUN0cUUsR0FBWixDQUFnQixVQUFVNGlDLEdBQVYsRUFBZTtBQUM3QixjQUFJbmlCLEdBQUcsR0FBR21pQixHQUFHLENBQUNuaUIsR0FBZDtBQUNBLGNBQUkrakQsSUFBSSxHQUFHNWhDLEdBQUcsQ0FBQzRoQyxJQUFmO0FBRUEsaUJBQVMvakQsR0FBRyxDQUFDajRCLFFBQUosRUFBRCxHQUFtQixTQUFuQixHQUErQmc4RSxJQUEvQixHQUFzQyxJQUE5QztBQUNILFNBTEMsRUFLQ2xrRSxJQUxELENBS00sSUFMTixDQUZJLEVBUUppM0IsRUFSSSxDQUFOO0FBVUQ7QUFDRjs7QUFFRCxXQUFRbkcsS0FBSyxDQUFDMXFCLEdBQUQsQ0FBTCxHQUFhK2QsR0FBckI7QUFDRCxHQTlGRDtBQStGRDtBQUVEOzs7QUFFQSxTQUFTOGxELHFCQUFULENBQWdDQyxXQUFoQyxFQUE2QztBQUMzQyxTQUFPLFNBQVNDLGNBQVQsQ0FBeUJDLFdBQXpCLEVBQXNDO0FBQzNDLGFBQVNSLE9BQVQsQ0FDRXp1RCxRQURGLEVBRUU4RyxPQUZGLEVBR0U7QUFDQSxVQUFJb29ELFlBQVksR0FBR3RsRixNQUFNLENBQUN3ckMsTUFBUCxDQUFjNjVDLFdBQWQsQ0FBbkI7QUFDQSxVQUFJVixNQUFNLEdBQUcsRUFBYjtBQUNBLFVBQUlLLElBQUksR0FBRyxFQUFYOztBQUVBLFVBQUlycEQsSUFBSSxHQUFHLGNBQVVzVyxHQUFWLEVBQWVzakMsS0FBZixFQUFzQjVqQyxHQUF0QixFQUEyQjtBQUNwQyxTQUFDQSxHQUFHLEdBQUdxekMsSUFBSCxHQUFVTCxNQUFkLEVBQXNCMXdFLElBQXRCLENBQTJCZytCLEdBQTNCO0FBQ0QsT0FGRDs7QUFJQSxVQUFJL1UsT0FBSixFQUFhO0FBQ1gsWUFBSThCLEtBQUEsSUFBeUM5QixPQUFPLENBQUNzMUMsaUJBQXJELEVBQXdFO0FBQ3RFO0FBQ0EsY0FBSStTLGtCQUFrQixHQUFHbnZELFFBQVEsQ0FBQzhTLEtBQVQsQ0FBZSxNQUFmLEVBQXVCLENBQXZCLEVBQTBCdG9DLE1BQW5EOztBQUVBKzZCLGNBQUksR0FBRyxjQUFVc1csR0FBVixFQUFlc2pDLEtBQWYsRUFBc0I1akMsR0FBdEIsRUFBMkI7QUFDaEMsZ0JBQUl4eUIsSUFBSSxHQUFHO0FBQUU4eUIsaUJBQUcsRUFBRUE7QUFBUCxhQUFYOztBQUNBLGdCQUFJc2pDLEtBQUosRUFBVztBQUNULGtCQUFJQSxLQUFLLENBQUMvbUUsS0FBTixJQUFlLElBQW5CLEVBQXlCO0FBQ3ZCMlEsb0JBQUksQ0FBQzNRLEtBQUwsR0FBYSttRSxLQUFLLENBQUMvbUUsS0FBTixHQUFjKzJFLGtCQUEzQjtBQUNEOztBQUNELGtCQUFJaFEsS0FBSyxDQUFDM21FLEdBQU4sSUFBYSxJQUFqQixFQUF1QjtBQUNyQnVRLG9CQUFJLENBQUN2USxHQUFMLEdBQVcybUUsS0FBSyxDQUFDM21FLEdBQU4sR0FBWTIyRSxrQkFBdkI7QUFDRDtBQUNGOztBQUNELGFBQUM1ekMsR0FBRyxHQUFHcXpDLElBQUgsR0FBVUwsTUFBZCxFQUFzQjF3RSxJQUF0QixDQUEyQmtMLElBQTNCO0FBQ0QsV0FYRDtBQVlELFNBakJVLENBa0JYOzs7QUFDQSxZQUFJK2QsT0FBTyxDQUFDbGYsT0FBWixFQUFxQjtBQUNuQnNuRSxzQkFBWSxDQUFDdG5FLE9BQWIsR0FDRSxDQUFDcW5FLFdBQVcsQ0FBQ3JuRSxPQUFaLElBQXVCLEVBQXhCLEVBQTRCWSxNQUE1QixDQUFtQ3NlLE9BQU8sQ0FBQ2xmLE9BQTNDLENBREY7QUFFRCxTQXRCVSxDQXVCWDs7O0FBQ0EsWUFBSWtmLE9BQU8sQ0FBQ21jLFVBQVosRUFBd0I7QUFDdEJpc0Msc0JBQVksQ0FBQ2pzQyxVQUFiLEdBQTBCeE0sTUFBTSxDQUM5QjdzQyxNQUFNLENBQUN3ckMsTUFBUCxDQUFjNjVDLFdBQVcsQ0FBQ2hzQyxVQUFaLElBQTBCLElBQXhDLENBRDhCLEVBRTlCbmMsT0FBTyxDQUFDbWMsVUFGc0IsQ0FBaEM7QUFJRCxTQTdCVSxDQThCWDs7O0FBQ0EsYUFBSyxJQUFJaDRCLEdBQVQsSUFBZ0I2YixPQUFoQixFQUF5QjtBQUN2QixjQUFJN2IsR0FBRyxLQUFLLFNBQVIsSUFBcUJBLEdBQUcsS0FBSyxZQUFqQyxFQUErQztBQUM3Q2lrRSx3QkFBWSxDQUFDamtFLEdBQUQsQ0FBWixHQUFvQjZiLE9BQU8sQ0FBQzdiLEdBQUQsQ0FBM0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRURpa0Usa0JBQVksQ0FBQzNwRCxJQUFiLEdBQW9CQSxJQUFwQjtBQUVBLFVBQUlvcEQsUUFBUSxHQUFHSSxXQUFXLENBQUMvdUQsUUFBUSxDQUFDeHlCLElBQVQsRUFBRCxFQUFrQjBoRixZQUFsQixDQUExQjs7QUFDQSxVQUFJdG1ELElBQUosRUFBMkM7QUFDekN5a0Qsb0JBQVksQ0FBQ3NCLFFBQVEsQ0FBQzNFLEdBQVYsRUFBZXprRCxJQUFmLENBQVo7QUFDRDs7QUFDRG9wRCxjQUFRLENBQUNKLE1BQVQsR0FBa0JBLE1BQWxCO0FBQ0FJLGNBQVEsQ0FBQ0MsSUFBVCxHQUFnQkEsSUFBaEI7QUFDQSxhQUFPRCxRQUFQO0FBQ0Q7O0FBRUQsV0FBTztBQUNMRixhQUFPLEVBQUVBLE9BREo7QUFFTEMsd0JBQWtCLEVBQUVGLHlCQUF5QixDQUFDQyxPQUFEO0FBRnhDLEtBQVA7QUFJRCxHQWxFRDtBQW1FRDtBQUVEO0FBRUE7QUFDQTtBQUNBOzs7QUFDQSxJQUFJTyxjQUFjLEdBQUdGLHFCQUFxQixDQUFDLFNBQVNDLFdBQVQsQ0FDekMvdUQsUUFEeUMsRUFFekM4RyxPQUZ5QyxFQUd6QztBQUNBLE1BQUlrakQsR0FBRyxHQUFHNytELEtBQUssQ0FBQzZVLFFBQVEsQ0FBQ3h5QixJQUFULEVBQUQsRUFBa0JzNUIsT0FBbEIsQ0FBZjs7QUFDQSxNQUFJQSxPQUFPLENBQUNtZ0QsUUFBUixLQUFxQixLQUF6QixFQUFnQztBQUM5QkEsWUFBUSxDQUFDK0MsR0FBRCxFQUFNbGpELE9BQU4sQ0FBUjtBQUNEOztBQUNELE1BQUlpaUQsSUFBSSxHQUFHZ0IsUUFBUSxDQUFDQyxHQUFELEVBQU1sakQsT0FBTixDQUFuQjtBQUNBLFNBQU87QUFDTGtqRCxPQUFHLEVBQUVBLEdBREE7QUFFTGo4QixVQUFNLEVBQUVnN0IsSUFBSSxDQUFDaDdCLE1BRlI7QUFHTGdFLG1CQUFlLEVBQUVnM0IsSUFBSSxDQUFDaDNCO0FBSGpCLEdBQVA7QUFLRCxDQWR5QyxDQUExQzs7QUFnQkEsU0FBU3E5QixhQUFULENBQXVCaHVDLEVBQXZCLEVBQTJCdGEsT0FBM0IsRUFBb0M7QUFDbEMsTUFBSXZCLElBQUksR0FBR3VCLE9BQU8sQ0FBQ3ZCLElBQVIsSUFBZ0IyNUMsUUFBM0I7QUFDQSxNQUFJbFksV0FBVyxHQUFHOFosZ0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLLE9BQUwsQ0FBbEM7O0FBQ0EsTUFBSXhZLEtBQUEsSUFBeUNvK0IsV0FBN0MsRUFBMEQ7QUFDeEQsUUFBSXo2QyxVQUFVLEdBQUdxeEQsU0FBUyxDQUFDNVcsV0FBRCxFQUFjbGdDLE9BQU8sQ0FBQzIyQyxVQUF0QixDQUExQjs7QUFDQSxRQUFJbHhELFVBQUosRUFBZ0I7QUFDZGdaLFVBQUksQ0FDRixhQUFheWhDLFdBQWIsR0FBMkIsTUFBM0IsR0FDRSxvREFERixHQUVFLDBEQUZGLEdBR0UsNkRBSkEsQ0FBSjtBQU1EO0FBQ0Y7O0FBQ0QsTUFBSUEsV0FBSixFQUFpQjtBQUNmNWxCLE1BQUUsQ0FBQzRsQixXQUFILEdBQWlCbitDLElBQUksQ0FBQ0MsU0FBTCxDQUFlaytDLFdBQWYsQ0FBakI7QUFDRDs7QUFDRCxNQUFJcW9CLFlBQVksR0FBRzFPLGNBQWMsQ0FBQ3YvQixFQUFELEVBQUssT0FBTCxFQUFjO0FBQU07QUFBcEIsR0FBakM7O0FBQ0EsTUFBSWl1QyxZQUFKLEVBQWtCO0FBQ2hCanVDLE1BQUUsQ0FBQ2l1QyxZQUFILEdBQWtCQSxZQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsU0FBVCxDQUFtQmx1QyxFQUFuQixFQUF1QjtBQUNyQixNQUFJcjRCLElBQUksR0FBRyxFQUFYOztBQUNBLE1BQUlxNEIsRUFBRSxDQUFDNGxCLFdBQVAsRUFBb0I7QUFDbEJqK0MsUUFBSSxJQUFJLGlCQUFrQnE0QixFQUFFLENBQUM0bEIsV0FBckIsR0FBb0MsR0FBNUM7QUFDRDs7QUFDRCxNQUFJNWxCLEVBQUUsQ0FBQ2l1QyxZQUFQLEVBQXFCO0FBQ25CdG1FLFFBQUksSUFBSSxXQUFZcTRCLEVBQUUsQ0FBQ2l1QyxZQUFmLEdBQStCLEdBQXZDO0FBQ0Q7O0FBQ0QsU0FBT3RtRSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSXdtRSxRQUFRLEdBQUc7QUFDYnQ0QyxZQUFVLEVBQUUsQ0FBQyxhQUFELENBREM7QUFFYm00QyxlQUFhLEVBQUVBLGFBRkY7QUFHYnRFLFNBQU8sRUFBRXdFO0FBSEksQ0FBZjtBQU1BLElBQUlFLFdBQVcsR0FBRzk1QyxNQUFNLENBQUNLLFFBQUQsQ0FBeEI7O0FBRUEsU0FBUzA1QyxlQUFULENBQXlCcnVDLEVBQXpCLEVBQTZCdGEsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSXZCLElBQUksR0FBR3VCLE9BQU8sQ0FBQ3ZCLElBQVIsSUFBZ0IyNUMsUUFBM0I7QUFDQSxNQUFJNVcsV0FBVyxHQUFHd1ksZ0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLLE9BQUwsQ0FBbEM7QUFDQSxNQUFJK0YsR0FBRyxHQUFHdW9DLGdCQUFnQixDQUFDcG5CLFdBQUQsRUFBY3hoQyxPQUFkLENBQTFCO0FBQ0EsTUFBSXc0QyxPQUFPLEdBQUduNEIsR0FBRyxDQUFDbTRCLE9BQWxCO0FBQ0EsTUFBSXFRLFdBQVcsR0FBR3hvQyxHQUFHLENBQUN3b0MsV0FBdEI7O0FBQ0EsTUFBSS9tRCxLQUFBLElBQXlDMDJDLE9BQTdDLEVBQXNEO0FBQ3BELzVDLFFBQUksQ0FDRixhQUFjaGdCLE1BQU0sQ0FBQytpRCxXQUFELENBQXBCLEdBQXFDLE1BQXJDLEdBQ0UsdURBREYsR0FFRSw0Q0FIQSxDQUFKO0FBS0Q7O0FBQ0QsTUFBSSxDQUFDZ1gsT0FBRCxJQUFZcVEsV0FBaEIsRUFBNkI7QUFDM0J2dUMsTUFBRSxDQUFDa25CLFdBQUgsR0FBaUJxbkIsV0FBakI7QUFDRDs7QUFDRCxNQUFJQyxZQUFZLEdBQUdqUCxjQUFjLENBQUN2L0IsRUFBRCxFQUFLLE9BQUwsRUFBYztBQUFNO0FBQXBCLEdBQWpDOztBQUNBLE1BQUl3dUMsWUFBSixFQUFrQjtBQUNoQnh1QyxNQUFFLENBQUN3dUMsWUFBSCxHQUFrQkEsWUFBbEI7QUFDRCxHQUZELE1BRU8sSUFBSXRRLE9BQUosRUFBYTtBQUNsQmwrQixNQUFFLENBQUN3dUMsWUFBSCxHQUFrQkQsV0FBbEI7QUFDRDtBQUNGOztBQUVELFNBQVNFLFNBQVQsQ0FBbUJ6dUMsRUFBbkIsRUFBdUI7QUFDckIsTUFBSXI0QixJQUFJLEdBQUcsRUFBWDs7QUFDQSxNQUFJcTRCLEVBQUUsQ0FBQ2tuQixXQUFQLEVBQW9CO0FBQ2xCdi9DLFFBQUksSUFBSSxpQkFBa0JxNEIsRUFBRSxDQUFDa25CLFdBQXJCLEdBQW9DLEdBQTVDO0FBQ0Q7O0FBQ0QsTUFBSWxuQixFQUFFLENBQUN3dUMsWUFBUCxFQUFxQjtBQUNuQjdtRSxRQUFJLElBQUksV0FBWXE0QixFQUFFLENBQUN3dUMsWUFBZixHQUErQixHQUF2QztBQUNEOztBQUNELFNBQU83bUUsSUFBUDtBQUNEOztBQUVELFNBQVMybUUsZ0JBQVQsQ0FBMEJwbkIsV0FBMUIsRUFBdUN4aEMsT0FBdkMsRUFBZ0Q7QUFDOUM7QUFDQTtBQUNBLE1BQUl3NEMsT0FBTyxHQUFHLEtBQWQ7QUFDQSxNQUFJcVEsV0FBVyxHQUFHLEVBQWxCOztBQUNBLE1BQUlybkIsV0FBSixFQUFpQjtBQUNmLFFBQUl3bkIsU0FBUyxHQUFHeG5CLFdBQVcsQ0FDeEI5NkQsSUFEYSxHQUViQyxLQUZhLENBRVAsR0FGTyxFQUdiOFcsR0FIYSxDQUdULFVBQVUrSyxLQUFWLEVBQWlCO0FBQ3BCLFVBQUloWCxNQUFNLEdBQUdnWCxLQUFLLENBQUM5aEIsSUFBTixHQUFhQyxLQUFiLENBQW1CLEdBQW5CLENBQWI7O0FBQ0EsVUFBSTZLLE1BQU0sQ0FBQzlOLE1BQVAsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDdkI7QUFDRDs7QUFDRCxVQUFJeWdCLEdBQUcsR0FBR3VrRSxXQUFXLENBQUNsM0UsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVOUssSUFBVixFQUFELENBQXJCO0FBQ0EsVUFBSXpELEtBQUssR0FBR3VPLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVTlLLElBQVYsRUFBWjtBQUNBLFVBQUlxekUsWUFBWSxHQUFHakQsU0FBUyxDQUFDN3pFLEtBQUQsRUFBUSs4QixPQUFPLENBQUMyMkMsVUFBaEIsQ0FBNUI7O0FBQ0EsVUFBSW9ELFlBQUosRUFBa0I7QUFDaEJ2QixlQUFPLEdBQUcsSUFBVjtBQUNBLGVBQU9yMEQsR0FBRyxHQUFHLEdBQU4sR0FBWTQxRCxZQUFuQjtBQUNEOztBQUNELGFBQU81MUQsR0FBRyxHQUFHLEdBQU4sR0FBWXBDLElBQUksQ0FBQ0MsU0FBTCxDQUFlL2UsS0FBZixDQUFuQjtBQUNELEtBaEJhLEVBaUJidTVCLE1BakJhLENBaUJOLFVBQVVockIsTUFBVixFQUFrQjtBQUFFLGFBQU9BLE1BQVA7QUFBZ0IsS0FqQjlCLENBQWhCOztBQWtCQSxRQUFJdzNFLFNBQVMsQ0FBQ3RsRixNQUFkLEVBQXNCO0FBQ3BCbWxGLGlCQUFXLEdBQUcsTUFBTUcsU0FBUyxDQUFDanJFLElBQVYsQ0FBZSxHQUFmLENBQU4sR0FBNEIsR0FBMUM7QUFDRDtBQUNGOztBQUNELFNBQU87QUFBRXk2RCxXQUFPLEVBQUVBLE9BQVg7QUFBb0JxUSxlQUFXLEVBQUVBO0FBQWpDLEdBQVA7QUFDRDs7QUFFRCxJQUFJSSxPQUFPLEdBQUc7QUFDWjk0QyxZQUFVLEVBQUUsQ0FBQyxhQUFELENBREE7QUFFWm00QyxlQUFhLEVBQUVLLGVBRkg7QUFHWjNFLFNBQU8sRUFBRStFO0FBSEcsQ0FBZDs7QUFNQSxTQUFTRyxnQkFBVCxDQUEwQjV1QyxFQUExQixFQUE4QjtBQUM1QixNQUFJNnVDLElBQUo7O0FBRUEsTUFBSXhkLG9CQUFvQixDQUFDcnhCLEVBQUUsQ0FBQzdELEdBQUosQ0FBcEIsS0FBaUMsZ0JBQXJDLEVBQXVEO0FBQ3JEMHlDLFFBQUksR0FBR25QLGdCQUFnQixDQUFDMS9CLEVBQUQsRUFBSyxPQUFMLENBQXZCO0FBQ0EsV0FBT0EsRUFBRSxDQUFDdytCLFFBQUgsQ0FBWSxPQUFaLENBQVA7O0FBQ0EsUUFBSWgzQyxLQUFBLElBQXlDcW5ELElBQTdDLEVBQW1EO0FBQ2pEMXFELFVBQUksQ0FDRiwrQ0FBZ0Q2YixFQUFFLENBQUM3RCxHQUFuRCxHQUEwRCxJQUExRCxHQUNFLDJEQURGLEdBRUUsR0FGRixHQUVTNkQsRUFBRSxDQUFDN0QsR0FGWixHQUVtQixXQUZuQixHQUVpQzB5QyxJQUZqQyxHQUV3QyxXQUZ4QyxHQUV1RDd1QyxFQUFFLENBQUM3RCxHQUYxRCxHQUVpRSxTQUZqRSxHQUU2RTB5QyxJQUY3RSxHQUVvRixNQUhsRixDQUFKO0FBS0Q7QUFDRjs7QUFFRCxNQUFJdlQsR0FBRyxHQUFHb0UsZ0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLLEtBQUwsQ0FBaEIsSUFBK0I2dUMsSUFBekM7O0FBQ0EsTUFBSSxDQUFDdlQsR0FBTCxFQUFVO0FBQUU7QUFBUTs7QUFFcEIsTUFBSTF6QyxHQUFHLEdBQUdxOEMsUUFBUSxDQUFDM0ksR0FBRCxDQUFsQjs7QUFDQSxNQUFJLENBQUMxekMsR0FBTCxFQUFVO0FBQ1IsUUFBSUosSUFBSixFQUEyQztBQUN6Q3JELFVBQUksQ0FBRSw2QkFBNkJtM0MsR0FBL0IsQ0FBSjtBQUNEOztBQUNEO0FBQ0Q7O0FBRURpRCxZQUFVLENBQUN2K0IsRUFBRCxFQUFLLFFBQUwsRUFBZXBZLEdBQUcsQ0FBQ2k4QyxHQUFuQixDQUFWO0FBQ0F0RixZQUFVLENBQUN2K0IsRUFBRCxFQUFLLFFBQUwsRUFBZXBZLEdBQUcsQ0FBQzVFLEtBQW5CLENBQVY7O0FBRUEsTUFBSTRFLEdBQUcsQ0FBQ204QyxTQUFSLEVBQW1CO0FBQ2pCeEYsY0FBVSxDQUFDditCLEVBQUQsRUFBSyxRQUFMLEVBQWVwWSxHQUFHLENBQUNtOEMsU0FBbkIsQ0FBVjtBQUNEO0FBQ0Y7O0FBRUQsSUFBSStLLElBQUksR0FBRztBQUNURixrQkFBZ0IsRUFBRUE7QUFEVCxDQUFYOztBQUlBLFNBQVNHLGtCQUFULENBQTRCL3VDLEVBQTVCLEVBQWdDO0FBQzlCLE1BQUlBLEVBQUUsQ0FBQzdELEdBQUgsS0FBVyxhQUFmLEVBQThCO0FBQUU7QUFBUTs7QUFDeEMsTUFBSWsxQixvQkFBb0IsQ0FBQ3J4QixFQUFFLENBQUNqbEIsTUFBSCxDQUFVb2hCLEdBQVgsQ0FBcEIsS0FBd0MsYUFBNUMsRUFBMkQ7QUFDekRraUMsV0FBTyxDQUFDcitCLEVBQUUsQ0FBQ2psQixNQUFKLEVBQVksZUFBWixFQUE2QixNQUE3QixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxJQUFJaTBELE1BQU0sR0FBRztBQUNYSixrQkFBZ0IsRUFBRUc7QUFEUCxDQUFiOztBQUlBLFNBQVNFLGtCQUFULENBQTRCanZDLEVBQTVCLEVBQWdDO0FBQzlCLE1BQUlBLEVBQUUsQ0FBQ2psQixNQUFILElBQWFpbEIsRUFBRSxDQUFDamxCLE1BQUgsQ0FBVW9oQixHQUFWLEtBQWtCLFlBQW5DLEVBQWlEO0FBQy9DLFFBQUluWixLQUFLLEdBQUdnZCxFQUFFLENBQUNqbEIsTUFBSCxDQUFVQSxNQUFWLENBQWlCeWpELFFBQWpCLENBQTBCLFFBQTFCLEtBQXVDLE1BQW5EO0FBQ0EsUUFBSXRoRSxLQUFLLEdBQUc4aUMsRUFBRSxDQUFDamxCLE1BQUgsQ0FBVUEsTUFBVixDQUFpQnlqRCxRQUFqQixDQUEwQixRQUExQixLQUF1QyxRQUFuRDtBQUNBeCtCLE1BQUUsQ0FBQ3dpQyxTQUFILEdBQWUwTSxnQkFBZ0IsQ0FBQ2xzRCxLQUFELEVBQVE5bEIsS0FBUixDQUEvQjtBQUNEO0FBQ0Y7O0FBRUQsSUFBSWl5RSxXQUFXLEdBQUc7QUFDaEJQLGtCQUFnQixFQUFFSztBQURGLENBQWxCOztBQUlBLFNBQVNDLGdCQUFULENBQTBCbHNELEtBQTFCLEVBQWlDOWxCLEtBQWpDLEVBQXdDO0FBQ3RDLFNBQVEsT0FBTzhsQixLQUFQLEdBQWUsSUFBZixHQUFzQjlsQixLQUF0QixHQUE4QixpQkFBdEM7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNreUUsZUFBVCxDQUF5QnB2QyxFQUF6QixFQUE2QjtBQUMzQixNQUFJNDZCLElBQUksR0FBR3B5RSxNQUFNLENBQUMwekIsSUFBUCxDQUFZOGpCLEVBQUUsQ0FBQ3crQixRQUFmLEVBQXlCNlEsSUFBekIsQ0FBOEIsVUFBVXpVLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLENBQUN6NEMsVUFBTCxDQUFnQixHQUFoQixDQUFQO0FBQThCLEdBQTlFLENBQVg7O0FBRUEsTUFBSXk0QyxJQUFKLEVBQVU7QUFDUixRQUFJMFUsUUFBUSxHQUFHMVUsSUFBSSxDQUFDM3ZFLE1BQUwsQ0FBWSxDQUFaLENBQWY7QUFDQSxRQUFJODZDLEdBQUcsR0FBR3VwQyxRQUFRLENBQUNqakYsS0FBVCxDQUFlLEdBQWYsQ0FBVjtBQUNBLFFBQUloRCxHQUFHLEdBQUcwOEMsR0FBRyxDQUFDLENBQUQsQ0FBYjtBQUNBLFFBQUlnZixTQUFTLEdBQUdoZixHQUFHLENBQUN2WSxLQUFKLENBQVUsQ0FBVixDQUFoQjtBQUNBdTNCLGFBQVMsR0FBR0EsU0FBUyxDQUFDbjhCLE1BQVYsQ0FBaUIsVUFBVTJtRCxJQUFWLEVBQWdCMXFELEdBQWhCLEVBQXFCO0FBQ2hEMHFELFVBQUksQ0FBQzFxRCxHQUFELENBQUosR0FBWSxJQUFaO0FBQ0EsYUFBTzBxRCxJQUFQO0FBQ0QsS0FIVyxFQUdULEVBSFMsQ0FBWjtBQUlBN1Asb0JBQWdCLENBQUMxL0IsRUFBRCxFQUFLNDZCLElBQUwsRUFBVyxJQUFYLENBQWhCO0FBQ0E4RCxnQkFBWSxDQUFDMStCLEVBQUQsRUFBSyxNQUFMLEVBQWMsWUFBWXN2QyxRQUExQixFQUFxQyxFQUFyQyxFQUF5Q2ptRixHQUF6QyxFQUE4QyxLQUE5QyxFQUFxRDA3RCxTQUFyRCxDQUFaO0FBQ0Q7QUFDRjs7QUFFRCxJQUFJMXhDLElBQUksR0FBRztBQUNUMjZELGVBQWEsRUFBRW9CO0FBRE4sQ0FBWDtBQUlBLElBQUlJLFNBQVMsR0FBRyxDQUFDckIsUUFBRCxFQUFXUSxPQUFYLEVBQW9CUSxXQUFwQixFQUFpQ0wsSUFBakMsRUFBdUNFLE1BQXZDLEVBQStDMzdELElBQS9DLENBQWhCOztBQUVBLFNBQVNtTixLQUFULENBQWV3ZixFQUFmLEVBQW1CeWtCLEdBQW5CLEVBQXdCO0FBQ3RCLE1BQUl6a0IsRUFBRSxDQUFDOWhDLElBQUgsS0FBWSxDQUFaLElBQWlCMnpELFdBQVcsQ0FBQzd4QixFQUFFLENBQUM3RCxHQUFKLENBQWhDLEVBQTBDO0FBQ3hDc3pDLG1CQUFlLENBQUN6dkMsRUFBRCxFQUFLeWtCLEdBQUcsQ0FBQzk3RCxLQUFULEVBQWdCODdELEdBQUcsQ0FBQ00sU0FBcEIsQ0FBZjtBQUNELEdBRkQsTUFFTztBQUNMNlgscUJBQWlCLENBQUM1OEIsRUFBRCxFQUFLeWtCLEdBQUcsQ0FBQzk3RCxLQUFULEVBQWdCODdELEdBQUcsQ0FBQ00sU0FBcEIsQ0FBakI7QUFDRDtBQUNGOztBQUVELFNBQVMwcUIsZUFBVCxDQUF5Qnp2QyxFQUF6QixFQUE2QnIzQyxLQUE3QixFQUFvQ284RCxTQUFwQyxFQUErQztBQUM3QyxNQUFJaGYsR0FBRyxHQUFHZ2YsU0FBUyxJQUFJLEVBQXZCO0FBQ0EsTUFBSTM0RCxJQUFJLEdBQUcyNUMsR0FBRyxDQUFDMzVDLElBQWY7QUFDQSxNQUFJeXdFLE1BQU0sR0FBRzkyQixHQUFHLENBQUM4MkIsTUFBakI7QUFDQSxNQUFJNkgsS0FBSyxHQUFHOVMsV0FBVyxDQUFDNXhCLEVBQUUsQ0FBQzdELEdBQUosQ0FBWCxDQUFvQjNiLEtBQWhDO0FBQ0EsTUFBSUMsSUFBSSxHQUFHaWtELEtBQUssQ0FBQ2prRCxJQUFqQjtBQUNBLE1BQUlDLEtBQUssR0FBR2drRCxLQUFLLENBQUNoa0QsS0FBbEI7QUFFQSxNQUFJcThDLGVBQWUsR0FBRyxrQkFBa0Izd0UsSUFBSSxHQUFHLFNBQUgsR0FBZSxFQUFyQyxDQUF0Qjs7QUFFQSxNQUFJeXdFLE1BQUosRUFBWTtBQUNWRSxtQkFBZSxHQUFHLFFBQVFBLGVBQVIsR0FBMEIsR0FBNUM7QUFDRDs7QUFFRCxNQUFJNEssSUFBSSxHQUFHMUssaUJBQWlCLENBQUN0MEUsS0FBRCxFQUFRbzBFLGVBQVIsQ0FBNUI7QUFFQXNCLFNBQU8sQ0FBQ3IrQixFQUFELEVBQUt2ZixJQUFMLEVBQVksTUFBTTkzQixLQUFOLEdBQWMsR0FBMUIsQ0FBUDtBQUNBazJFLFlBQVUsQ0FBQzcrQixFQUFELEVBQUt0ZixLQUFMLEVBQVlpbkQsSUFBWixFQUFrQixJQUFsQixFQUF3QixJQUF4QixDQUFWO0FBQ0Q7O0FBRUQsSUFBSStILFlBQVksR0FBRztBQUNqQmx2RCxPQUFLLEVBQUVBO0FBRFUsQ0FBbkI7QUFJQSxJQUFJcXRELFdBQVcsR0FBRztBQUNoQnJuRSxTQUFPLEVBQUVncEUsU0FETztBQUVoQjN0QyxZQUFVLEVBQUU2dEMsWUFGSTtBQUdoQnhlLFlBQVUsRUFBRUEsVUFISTtBQUloQmwzQixhQUFXLEVBQUVBLFdBSkc7QUFLaEJvM0Isa0JBQWdCLEVBQUVBLGdCQUxGO0FBTWhCejNCLGVBQWEsRUFBRUEsYUFOQztBQU9oQkcsaUJBQWUsRUFBRUEsZUFQRDtBQVFoQjBuQyxvQkFBa0IsRUFBRSxLQVJKO0FBU2hCM3JDLFlBQVUsRUFBRUQsYUFBYSxDQUFDNDVDLFNBQUQ7QUFUVCxDQUFsQjtBQVlBLElBQUk5SyxLQUFLLEdBQUdrSixjQUFjLENBQUNDLFdBQUQsQ0FBMUI7QUFDQSxJQUFJUCxrQkFBa0IsR0FBRzVJLEtBQUssQ0FBQzRJLGtCQUEvQjs7QUFFQSxTQUFTL3NELEdBQVQsQ0FBY21GLE9BQWQsRUFBdUI7QUFDckIsTUFBSThCLEtBQUEsSUFDRixFQUFFLGdCQUFnQmpILEdBQWxCLENBREYsRUFFRTtBQUNBNEQsUUFBSSxDQUFDLGtFQUFELENBQUo7QUFDRDs7QUFDRCxPQUFLeXJCLEtBQUwsQ0FBV2xxQixPQUFYO0FBQ0Q7O0FBRURpcUIsU0FBUyxDQUFDcHZCLEdBQUQsQ0FBVDtBQUNBc3VCLFVBQVUsQ0FBQ3R1QixHQUFELENBQVY7QUFDQXU3QixXQUFXLENBQUN2N0IsR0FBRCxDQUFYO0FBQ0FpOEIsY0FBYyxDQUFDajhCLEdBQUQsQ0FBZDtBQUNBczVCLFdBQVcsQ0FBQ3Q1QixHQUFELENBQVg7QUFFQTs7QUFFQSxTQUFTb3ZELE9BQVQsQ0FBa0JwdkQsR0FBbEIsRUFBdUI7QUFDckJBLEtBQUcsQ0FBQ3F2RCxHQUFKLEdBQVUsVUFBVUMsTUFBVixFQUFrQjtBQUMxQixRQUFJQyxnQkFBZ0IsR0FBSSxLQUFLQyxpQkFBTCxLQUEyQixLQUFLQSxpQkFBTCxHQUF5QixFQUFwRCxDQUF4Qjs7QUFDQSxRQUFJRCxnQkFBZ0IsQ0FBQzlqRixPQUFqQixDQUF5QjZqRixNQUF6QixJQUFtQyxDQUFDLENBQXhDLEVBQTJDO0FBQ3pDLGFBQU8sSUFBUDtBQUNELEtBSnlCLENBTTFCOzs7QUFDQSxRQUFJeGhFLElBQUksR0FBRyttQixPQUFPLENBQUNqc0MsU0FBRCxFQUFZLENBQVosQ0FBbEI7QUFDQWtsQixRQUFJLENBQUMrd0QsT0FBTCxDQUFhLElBQWI7O0FBQ0EsUUFBSSxPQUFPeVEsTUFBTSxDQUFDaHNELE9BQWQsS0FBMEIsVUFBOUIsRUFBMEM7QUFDeENnc0QsWUFBTSxDQUFDaHNELE9BQVAsQ0FBZXoyQixLQUFmLENBQXFCeWlGLE1BQXJCLEVBQTZCeGhFLElBQTdCO0FBQ0QsS0FGRCxNQUVPLElBQUksT0FBT3doRSxNQUFQLEtBQWtCLFVBQXRCLEVBQWtDO0FBQ3ZDQSxZQUFNLENBQUN6aUYsS0FBUCxDQUFhLElBQWIsRUFBbUJpaEIsSUFBbkI7QUFDRDs7QUFDRHloRSxvQkFBZ0IsQ0FBQ3J6RSxJQUFqQixDQUFzQm96RSxNQUF0QjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBaEJEO0FBaUJEO0FBRUQ7OztBQUVBLFNBQVNHLFdBQVQsQ0FBc0J6dkQsR0FBdEIsRUFBMkI7QUFDekJBLEtBQUcsQ0FBQzB2RCxLQUFKLEdBQVksVUFBVUEsS0FBVixFQUFpQjtBQUMzQixTQUFLdnFELE9BQUwsR0FBZW9jLFlBQVksQ0FBQyxLQUFLcGMsT0FBTixFQUFldXFELEtBQWYsQ0FBM0I7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUhEO0FBSUQ7QUFFRDs7O0FBRUEsU0FBU0MsVUFBVCxDQUFxQjN2RCxHQUFyQixFQUEwQjtBQUN4Qjs7Ozs7QUFLQUEsS0FBRyxDQUFDdWEsR0FBSixHQUFVLENBQVY7QUFDQSxNQUFJQSxHQUFHLEdBQUcsQ0FBVjtBQUVBOzs7O0FBR0F2YSxLQUFHLENBQUM4VSxNQUFKLEdBQWEsVUFBVTRiLGFBQVYsRUFBeUI7QUFDcENBLGlCQUFhLEdBQUdBLGFBQWEsSUFBSSxFQUFqQztBQUNBLFFBQUlrL0IsS0FBSyxHQUFHLElBQVo7QUFDQSxRQUFJQyxPQUFPLEdBQUdELEtBQUssQ0FBQ3IxQyxHQUFwQjtBQUNBLFFBQUl1MUMsV0FBVyxHQUFHcC9CLGFBQWEsQ0FBQ3EvQixLQUFkLEtBQXdCci9CLGFBQWEsQ0FBQ3EvQixLQUFkLEdBQXNCLEVBQTlDLENBQWxCOztBQUNBLFFBQUlELFdBQVcsQ0FBQ0QsT0FBRCxDQUFmLEVBQTBCO0FBQ3hCLGFBQU9DLFdBQVcsQ0FBQ0QsT0FBRCxDQUFsQjtBQUNEOztBQUVELFFBQUl0aUYsSUFBSSxHQUFHbWpELGFBQWEsQ0FBQ25qRCxJQUFkLElBQXNCcWlGLEtBQUssQ0FBQ3pxRCxPQUFOLENBQWM1M0IsSUFBL0M7O0FBQ0EsUUFBSTA1QixLQUFBLElBQXlDMTVCLElBQTdDLEVBQW1EO0FBQ2pEeXpDLDJCQUFxQixDQUFDenpDLElBQUQsQ0FBckI7QUFDRDs7QUFFRCxRQUFJeWlGLEdBQUcsR0FBRyxTQUFTQyxZQUFULENBQXVCOXFELE9BQXZCLEVBQWdDO0FBQ3hDLFdBQUtrcUIsS0FBTCxDQUFXbHFCLE9BQVg7QUFDRCxLQUZEOztBQUdBNnFELE9BQUcsQ0FBQ2xtRixTQUFKLEdBQWdCN0IsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBY204QyxLQUFLLENBQUM5bEYsU0FBcEIsQ0FBaEI7QUFDQWttRixPQUFHLENBQUNsbUYsU0FBSixDQUFjOGEsV0FBZCxHQUE0Qm9yRSxHQUE1QjtBQUNBQSxPQUFHLENBQUN6MUMsR0FBSixHQUFVQSxHQUFHLEVBQWI7QUFDQXkxQyxPQUFHLENBQUM3cUQsT0FBSixHQUFjb2MsWUFBWSxDQUN4QnF1QyxLQUFLLENBQUN6cUQsT0FEa0IsRUFFeEJ1ckIsYUFGd0IsQ0FBMUI7QUFJQXMvQixPQUFHLENBQUMsT0FBRCxDQUFILEdBQWVKLEtBQWYsQ0F4Qm9DLENBMEJwQztBQUNBO0FBQ0E7O0FBQ0EsUUFBSUksR0FBRyxDQUFDN3FELE9BQUosQ0FBWS9FLEtBQWhCLEVBQXVCO0FBQ3JCOHZELGlCQUFXLENBQUNGLEdBQUQsQ0FBWDtBQUNEOztBQUNELFFBQUlBLEdBQUcsQ0FBQzdxRCxPQUFKLENBQVlyRSxRQUFoQixFQUEwQjtBQUN4QnF2RCxvQkFBYyxDQUFDSCxHQUFELENBQWQ7QUFDRCxLQWxDbUMsQ0FvQ3BDOzs7QUFDQUEsT0FBRyxDQUFDbDdDLE1BQUosR0FBYTg2QyxLQUFLLENBQUM5NkMsTUFBbkI7QUFDQWs3QyxPQUFHLENBQUNOLEtBQUosR0FBWUUsS0FBSyxDQUFDRixLQUFsQjtBQUNBTSxPQUFHLENBQUNYLEdBQUosR0FBVU8sS0FBSyxDQUFDUCxHQUFoQixDQXZDb0MsQ0F5Q3BDO0FBQ0E7O0FBQ0E1MkMsZUFBVyxDQUFDOTBCLE9BQVosQ0FBb0IsVUFBVWhHLElBQVYsRUFBZ0I7QUFDbENxeUUsU0FBRyxDQUFDcnlFLElBQUQsQ0FBSCxHQUFZaXlFLEtBQUssQ0FBQ2p5RSxJQUFELENBQWpCO0FBQ0QsS0FGRCxFQTNDb0MsQ0E4Q3BDOztBQUNBLFFBQUlwUSxJQUFKLEVBQVU7QUFDUnlpRixTQUFHLENBQUM3cUQsT0FBSixDQUFZNWlCLFVBQVosQ0FBdUJoVixJQUF2QixJQUErQnlpRixHQUEvQjtBQUNELEtBakRtQyxDQW1EcEM7QUFDQTtBQUNBOzs7QUFDQUEsT0FBRyxDQUFDMS9CLFlBQUosR0FBbUJzL0IsS0FBSyxDQUFDenFELE9BQXpCO0FBQ0E2cUQsT0FBRyxDQUFDdC9CLGFBQUosR0FBb0JBLGFBQXBCO0FBQ0FzL0IsT0FBRyxDQUFDbC9CLGFBQUosR0FBb0JoYyxNQUFNLENBQUMsRUFBRCxFQUFLazdDLEdBQUcsQ0FBQzdxRCxPQUFULENBQTFCLENBeERvQyxDQTBEcEM7O0FBQ0EycUQsZUFBVyxDQUFDRCxPQUFELENBQVgsR0FBdUJHLEdBQXZCO0FBQ0EsV0FBT0EsR0FBUDtBQUNELEdBN0REO0FBOEREOztBQUVELFNBQVNFLFdBQVQsQ0FBc0JFLElBQXRCLEVBQTRCO0FBQzFCLE1BQUlod0QsS0FBSyxHQUFHZ3dELElBQUksQ0FBQ2pyRCxPQUFMLENBQWEvRSxLQUF6Qjs7QUFDQSxPQUFLLElBQUk5VyxHQUFULElBQWdCOFcsS0FBaEIsRUFBdUI7QUFDckJvc0IsU0FBSyxDQUFDNGpDLElBQUksQ0FBQ3RtRixTQUFOLEVBQWlCLFFBQWpCLEVBQTJCd2YsR0FBM0IsQ0FBTDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUzZtRSxjQUFULENBQXlCQyxJQUF6QixFQUErQjtBQUM3QixNQUFJdHZELFFBQVEsR0FBR3N2RCxJQUFJLENBQUNqckQsT0FBTCxDQUFhckUsUUFBNUI7O0FBQ0EsT0FBSyxJQUFJeFgsR0FBVCxJQUFnQndYLFFBQWhCLEVBQTBCO0FBQ3hCaXRCLGtCQUFjLENBQUNxaUMsSUFBSSxDQUFDdG1GLFNBQU4sRUFBaUJ3ZixHQUFqQixFQUFzQndYLFFBQVEsQ0FBQ3hYLEdBQUQsQ0FBOUIsQ0FBZDtBQUNEO0FBQ0Y7QUFFRDs7O0FBRUEsU0FBUyttRSxrQkFBVCxDQUE2QnJ3RCxHQUE3QixFQUFrQztBQUNoQzs7O0FBR0F5WSxhQUFXLENBQUM5MEIsT0FBWixDQUFvQixVQUFVaEcsSUFBVixFQUFnQjtBQUNsQ3FpQixPQUFHLENBQUNyaUIsSUFBRCxDQUFILEdBQVksVUFDVnlJLEVBRFUsRUFFVmtxRSxVQUZVLEVBR1Y7QUFDQSxVQUFJLENBQUNBLFVBQUwsRUFBaUI7QUFDZixlQUFPLEtBQUtuckQsT0FBTCxDQUFheG5CLElBQUksR0FBRyxHQUFwQixFQUF5QnlJLEVBQXpCLENBQVA7QUFDRCxPQUZELE1BRU87QUFDTDtBQUNBLFlBQUk2Z0IsS0FBQSxJQUF5Q3RwQixJQUFJLEtBQUssV0FBdEQsRUFBbUU7QUFDakVxakMsK0JBQXFCLENBQUM1NkIsRUFBRCxDQUFyQjtBQUNEOztBQUNELFlBQUl6SSxJQUFJLEtBQUssV0FBVCxJQUF3Qm8xQixhQUFhLENBQUN1OUMsVUFBRCxDQUF6QyxFQUF1RDtBQUNyREEsb0JBQVUsQ0FBQy9pRixJQUFYLEdBQWtCK2lGLFVBQVUsQ0FBQy9pRixJQUFYLElBQW1CNlksRUFBckM7QUFDQWtxRSxvQkFBVSxHQUFHLEtBQUtuckQsT0FBTCxDQUFhcWMsS0FBYixDQUFtQjFNLE1BQW5CLENBQTBCdzdDLFVBQTFCLENBQWI7QUFDRDs7QUFDRCxZQUFJM3lFLElBQUksS0FBSyxXQUFULElBQXdCLE9BQU8yeUUsVUFBUCxLQUFzQixVQUFsRCxFQUE4RDtBQUM1REEsb0JBQVUsR0FBRztBQUFFN2xFLGdCQUFJLEVBQUU2bEUsVUFBUjtBQUFvQjVxRCxrQkFBTSxFQUFFNHFEO0FBQTVCLFdBQWI7QUFDRDs7QUFDRCxhQUFLbnJELE9BQUwsQ0FBYXhuQixJQUFJLEdBQUcsR0FBcEIsRUFBeUJ5SSxFQUF6QixJQUErQmtxRSxVQUEvQjtBQUNBLGVBQU9BLFVBQVA7QUFDRDtBQUNGLEtBckJEO0FBc0JELEdBdkJEO0FBd0JEO0FBRUQ7OztBQUlBLFNBQVNDLGdCQUFULENBQTJCbGhELElBQTNCLEVBQWlDO0FBQy9CLFNBQU9BLElBQUksS0FBS0EsSUFBSSxDQUFDNkksSUFBTCxDQUFVL1MsT0FBVixDQUFrQjUzQixJQUFsQixJQUEwQjhoQyxJQUFJLENBQUN1TSxHQUFwQyxDQUFYO0FBQ0Q7O0FBRUQsU0FBUzQwQyxPQUFULENBQWtCNWIsT0FBbEIsRUFBMkJybkUsSUFBM0IsRUFBaUM7QUFDL0IsTUFBSW1jLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY2l0QyxPQUFkLENBQUosRUFBNEI7QUFDMUIsV0FBT0EsT0FBTyxDQUFDbnBFLE9BQVIsQ0FBZ0I4QixJQUFoQixJQUF3QixDQUFDLENBQWhDO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBT3FuRSxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQ3RDLFdBQU9BLE9BQU8sQ0FBQzlvRSxLQUFSLENBQWMsR0FBZCxFQUFtQkwsT0FBbkIsQ0FBMkI4QixJQUEzQixJQUFtQyxDQUFDLENBQTNDO0FBQ0QsR0FGTSxNQUVBLElBQUl5bEMsVUFBVSxDQUFDNGhDLE9BQUQsQ0FBZCxFQUF5QjtBQUM5QixXQUFPQSxPQUFPLENBQUNsckUsSUFBUixDQUFhNkQsSUFBYixDQUFQO0FBQ0Q7QUFDRDs7O0FBQ0EsU0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBU2tqRixVQUFULENBQXFCQyxpQkFBckIsRUFBd0MvdUQsTUFBeEMsRUFBZ0Q7QUFDOUMsTUFBSXFTLEtBQUssR0FBRzA4QyxpQkFBaUIsQ0FBQzE4QyxLQUE5QjtBQUNBLE1BQUlyWSxJQUFJLEdBQUcrMEQsaUJBQWlCLENBQUMvMEQsSUFBN0I7QUFDQSxNQUFJeTlCLE1BQU0sR0FBR3MzQixpQkFBaUIsQ0FBQ3QzQixNQUEvQjs7QUFDQSxPQUFLLElBQUk5dkMsR0FBVCxJQUFnQjBxQixLQUFoQixFQUF1QjtBQUNyQixRQUFJMjhDLFVBQVUsR0FBRzM4QyxLQUFLLENBQUMxcUIsR0FBRCxDQUF0Qjs7QUFDQSxRQUFJcW5FLFVBQUosRUFBZ0I7QUFDZCxVQUFJcGpGLElBQUksR0FBR2dqRixnQkFBZ0IsQ0FBQ0ksVUFBVSxDQUFDNTBDLGdCQUFaLENBQTNCOztBQUNBLFVBQUl4dUMsSUFBSSxJQUFJLENBQUNvMEIsTUFBTSxDQUFDcDBCLElBQUQsQ0FBbkIsRUFBMkI7QUFDekJxakYsdUJBQWUsQ0FBQzU4QyxLQUFELEVBQVExcUIsR0FBUixFQUFhcVMsSUFBYixFQUFtQnk5QixNQUFuQixDQUFmO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsU0FBU3czQixlQUFULENBQ0U1OEMsS0FERixFQUVFMXFCLEdBRkYsRUFHRXFTLElBSEYsRUFJRWdFLE9BSkYsRUFLRTtBQUNBLE1BQUlvVSxNQUFNLEdBQUdDLEtBQUssQ0FBQzFxQixHQUFELENBQWxCOztBQUNBLE1BQUl5cUIsTUFBTSxLQUFLLENBQUNwVSxPQUFELElBQVlvVSxNQUFNLENBQUM2SCxHQUFQLEtBQWVqYyxPQUFPLENBQUNpYyxHQUF4QyxDQUFWLEVBQXdEO0FBQ3REN0gsVUFBTSxDQUFDc0ksaUJBQVAsQ0FBeUJrYixRQUF6QjtBQUNEOztBQUNEdmpCLE9BQUssQ0FBQzFxQixHQUFELENBQUwsR0FBYSxJQUFiO0FBQ0FzcUIsUUFBTSxDQUFDalksSUFBRCxFQUFPclMsR0FBUCxDQUFOO0FBQ0Q7O0FBRUQsSUFBSXVuRSxZQUFZLEdBQUcsQ0FBQ2p0RSxNQUFELEVBQVM0a0IsTUFBVCxFQUFpQjllLEtBQWpCLENBQW5CO0FBRUEsSUFBSW9uRSxTQUFTLEdBQUc7QUFDZHZqRixNQUFJLEVBQUUsWUFEUTtBQUVkMHFELFVBQVEsRUFBRSxJQUZJO0FBSWQ3M0IsT0FBSyxFQUFFO0FBQ0wyd0QsV0FBTyxFQUFFRixZQURKO0FBRUxHLFdBQU8sRUFBRUgsWUFGSjtBQUdMdnhDLE9BQUcsRUFBRSxDQUFDMTdCLE1BQUQsRUFBU0MsTUFBVDtBQUhBLEdBSk87QUFVZGtvRCxTQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFvQjtBQUMzQixTQUFLLzNCLEtBQUwsR0FBYS9yQyxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FBYjtBQUNBLFNBQUs5WCxJQUFMLEdBQVksRUFBWjtBQUNELEdBYmE7QUFlZHF3QyxXQUFTLEVBQUUsU0FBU0EsU0FBVCxHQUFzQjtBQUMvQixTQUFLLElBQUkxaUQsR0FBVCxJQUFnQixLQUFLMHFCLEtBQXJCLEVBQTRCO0FBQzFCNDhDLHFCQUFlLENBQUMsS0FBSzU4QyxLQUFOLEVBQWExcUIsR0FBYixFQUFrQixLQUFLcVMsSUFBdkIsQ0FBZjtBQUNEO0FBQ0YsR0FuQmE7QUFxQmR5RixTQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFvQjtBQUMzQixRQUFJdzBCLE1BQU0sR0FBRyxJQUFiO0FBRUEsU0FBS3ZILE1BQUwsQ0FBWSxTQUFaLEVBQXVCLFVBQVVuZixHQUFWLEVBQWU7QUFDcEN1aEQsZ0JBQVUsQ0FBQzc2QixNQUFELEVBQVMsVUFBVXJvRCxJQUFWLEVBQWdCO0FBQUUsZUFBT2lqRixPQUFPLENBQUN0aEQsR0FBRCxFQUFNM2hDLElBQU4sQ0FBZDtBQUE0QixPQUF2RCxDQUFWO0FBQ0QsS0FGRDtBQUdBLFNBQUs4Z0QsTUFBTCxDQUFZLFNBQVosRUFBdUIsVUFBVW5mLEdBQVYsRUFBZTtBQUNwQ3VoRCxnQkFBVSxDQUFDNzZCLE1BQUQsRUFBUyxVQUFVcm9ELElBQVYsRUFBZ0I7QUFBRSxlQUFPLENBQUNpakYsT0FBTyxDQUFDdGhELEdBQUQsRUFBTTNoQyxJQUFOLENBQWY7QUFBNkIsT0FBeEQsQ0FBVjtBQUNELEtBRkQ7QUFHRCxHQTlCYTtBQWdDZDYrQyxRQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFtQjtBQUN6QixRQUFJNkUsSUFBSSxHQUFHLEtBQUt1QixNQUFMLENBQVlseUIsT0FBdkI7QUFDQSxRQUFJK2MsS0FBSyxHQUFHeWQsc0JBQXNCLENBQUM3SixJQUFELENBQWxDO0FBQ0EsUUFBSWxWLGdCQUFnQixHQUFHc0IsS0FBSyxJQUFJQSxLQUFLLENBQUN0QixnQkFBdEM7O0FBQ0EsUUFBSUEsZ0JBQUosRUFBc0I7QUFDcEI7QUFDQSxVQUFJeHVDLElBQUksR0FBR2dqRixnQkFBZ0IsQ0FBQ3gwQyxnQkFBRCxDQUEzQjtBQUNBLFVBQUl5SixHQUFHLEdBQUcsSUFBVjtBQUNBLFVBQUl1ckMsT0FBTyxHQUFHdnJDLEdBQUcsQ0FBQ3VyQyxPQUFsQjtBQUNBLFVBQUlDLE9BQU8sR0FBR3hyQyxHQUFHLENBQUN3ckMsT0FBbEI7O0FBQ0EsV0FDRTtBQUNDRCxhQUFPLEtBQUssQ0FBQ3hqRixJQUFELElBQVMsQ0FBQ2lqRixPQUFPLENBQUNPLE9BQUQsRUFBVXhqRixJQUFWLENBQXRCLENBQVIsSUFDQTtBQUNDeWpGLGFBQU8sSUFBSXpqRixJQUFYLElBQW1CaWpGLE9BQU8sQ0FBQ1EsT0FBRCxFQUFVempGLElBQVYsQ0FKN0IsRUFLRTtBQUNBLGVBQU84dkMsS0FBUDtBQUNEOztBQUVELFVBQUk4bUMsS0FBSyxHQUFHLElBQVo7QUFDQSxVQUFJbndDLEtBQUssR0FBR213QyxLQUFLLENBQUNud0MsS0FBbEI7QUFDQSxVQUFJclksSUFBSSxHQUFHd29ELEtBQUssQ0FBQ3hvRCxJQUFqQjtBQUNBLFVBQUlyUyxHQUFHLEdBQUcrekIsS0FBSyxDQUFDL3pCLEdBQU4sSUFBYSxJQUFiLENBQ1I7QUFDQTtBQUZRLFFBR055eUIsZ0JBQWdCLENBQUM3RCxJQUFqQixDQUFzQnFDLEdBQXRCLElBQTZCd0IsZ0JBQWdCLENBQUNILEdBQWpCLEdBQXdCLE9BQVFHLGdCQUFnQixDQUFDSCxHQUFqRCxHQUF5RCxFQUF0RixDQUhNLEdBSU55QixLQUFLLENBQUMvekIsR0FKVjs7QUFLQSxVQUFJMHFCLEtBQUssQ0FBQzFxQixHQUFELENBQVQsRUFBZ0I7QUFDZCt6QixhQUFLLENBQUNoQixpQkFBTixHQUEwQnJJLEtBQUssQ0FBQzFxQixHQUFELENBQUwsQ0FBVyt5QixpQkFBckMsQ0FEYyxDQUVkOztBQUNBekksY0FBTSxDQUFDalksSUFBRCxFQUFPclMsR0FBUCxDQUFOO0FBQ0FxUyxZQUFJLENBQUN6ZixJQUFMLENBQVVvTixHQUFWO0FBQ0QsT0FMRCxNQUtPO0FBQ0wwcUIsYUFBSyxDQUFDMXFCLEdBQUQsQ0FBTCxHQUFhK3pCLEtBQWI7QUFDQTFoQixZQUFJLENBQUN6ZixJQUFMLENBQVVvTixHQUFWLEVBRkssQ0FHTDs7QUFDQSxZQUFJLEtBQUtnMkIsR0FBTCxJQUFZM2pCLElBQUksQ0FBQzl5QixNQUFMLEdBQWMrQixRQUFRLENBQUMsS0FBSzAwQyxHQUFOLENBQXRDLEVBQWtEO0FBQ2hEc3hDLHlCQUFlLENBQUM1OEMsS0FBRCxFQUFRclksSUFBSSxDQUFDLENBQUQsQ0FBWixFQUFpQkEsSUFBakIsRUFBdUIsS0FBS3k5QixNQUE1QixDQUFmO0FBQ0Q7QUFDRjs7QUFFRC9iLFdBQUssQ0FBQ2oyQixJQUFOLENBQVc0dkMsU0FBWCxHQUF1QixJQUF2QjtBQUNEOztBQUNELFdBQU8zWixLQUFLLElBQUs0VCxJQUFJLElBQUlBLElBQUksQ0FBQyxDQUFELENBQTdCO0FBQ0Q7QUE1RWEsQ0FBaEI7QUErRUEsSUFBSWdnQyxpQkFBaUIsR0FBRztBQUN0QkgsV0FBUyxFQUFFQTtBQURXLENBQXhCO0FBSUE7O0FBRUEsU0FBU0ksYUFBVCxDQUF3Qmx4RCxHQUF4QixFQUE2QjtBQUMzQjtBQUNBLE1BQUlteEQsU0FBUyxHQUFHLEVBQWhCOztBQUNBQSxXQUFTLENBQUNwbkYsR0FBVixHQUFnQixZQUFZO0FBQUUsV0FBTzR1QyxNQUFQO0FBQWdCLEdBQTlDOztBQUNBLE1BQUkxUixJQUFKLEVBQTJDO0FBQ3pDa3FELGFBQVMsQ0FBQ3JzRSxHQUFWLEdBQWdCLFlBQVk7QUFDMUI4ZSxVQUFJLENBQ0Ysc0VBREUsQ0FBSjtBQUdELEtBSkQ7QUFLRDs7QUFDRDM3QixRQUFNLENBQUNDLGNBQVAsQ0FBc0I4M0IsR0FBdEIsRUFBMkIsUUFBM0IsRUFBcUNteEQsU0FBckMsRUFYMkIsQ0FhM0I7QUFDQTtBQUNBOztBQUNBbnhELEtBQUcsQ0FBQ294RCxJQUFKLEdBQVc7QUFDVHh0RCxRQUFJLEVBQUVBLElBREc7QUFFVGtSLFVBQU0sRUFBRUEsTUFGQztBQUdUeU0sZ0JBQVksRUFBRUEsWUFITDtBQUlUOUMsa0JBQWMsRUFBRUE7QUFKUCxHQUFYO0FBT0F6ZSxLQUFHLENBQUNsYixHQUFKLEdBQVVBLEdBQVY7QUFDQWtiLEtBQUcsQ0FBQzNFLE1BQUosR0FBYWtrQixHQUFiO0FBQ0F2ZixLQUFHLENBQUNxbEIsUUFBSixHQUFlQSxRQUFmLENBekIyQixDQTJCM0I7O0FBQ0FybEIsS0FBRyxDQUFDcXhELFVBQUosR0FBaUIsVUFBVTNyRSxHQUFWLEVBQWU7QUFDOUJnNUIsV0FBTyxDQUFDaDVCLEdBQUQsQ0FBUDtBQUNBLFdBQU9BLEdBQVA7QUFDRCxHQUhEOztBQUtBc2EsS0FBRyxDQUFDbUYsT0FBSixHQUFjbDlCLE1BQU0sQ0FBQ3dyQyxNQUFQLENBQWMsSUFBZCxDQUFkO0FBQ0FnRixhQUFXLENBQUM5MEIsT0FBWixDQUFvQixVQUFVaEcsSUFBVixFQUFnQjtBQUNsQ3FpQixPQUFHLENBQUNtRixPQUFKLENBQVl4bkIsSUFBSSxHQUFHLEdBQW5CLElBQTBCMVYsTUFBTSxDQUFDd3JDLE1BQVAsQ0FBYyxJQUFkLENBQTFCO0FBQ0QsR0FGRCxFQWxDMkIsQ0FzQzNCO0FBQ0E7O0FBQ0F6VCxLQUFHLENBQUNtRixPQUFKLENBQVlxYyxLQUFaLEdBQW9CeGhCLEdBQXBCO0FBRUE4VSxRQUFNLENBQUM5VSxHQUFHLENBQUNtRixPQUFKLENBQVk1aUIsVUFBYixFQUF5QjB1RSxpQkFBekIsQ0FBTjtBQUVBN0IsU0FBTyxDQUFDcHZELEdBQUQsQ0FBUDtBQUNBeXZELGFBQVcsQ0FBQ3p2RCxHQUFELENBQVg7QUFDQTJ2RCxZQUFVLENBQUMzdkQsR0FBRCxDQUFWO0FBQ0Fxd0Qsb0JBQWtCLENBQUNyd0QsR0FBRCxDQUFsQjtBQUNEOztBQUVEa3hELGFBQWEsQ0FBQ2x4RCxHQUFELENBQWI7QUFFQS8zQixNQUFNLENBQUNDLGNBQVAsQ0FBc0I4M0IsR0FBRyxDQUFDbDJCLFNBQTFCLEVBQXFDLFdBQXJDLEVBQWtEO0FBQ2hEQyxLQUFHLEVBQUU4dEM7QUFEMkMsQ0FBbEQ7QUFJQTV2QyxNQUFNLENBQUNDLGNBQVAsQ0FBc0I4M0IsR0FBRyxDQUFDbDJCLFNBQTFCLEVBQXFDLGFBQXJDLEVBQW9EO0FBQ2xEQyxLQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFnQjtBQUNuQjtBQUNBLFdBQU8sS0FBS2d2RCxNQUFMLElBQWUsS0FBS0EsTUFBTCxDQUFZdTRCLFVBQWxDO0FBQ0Q7QUFKaUQsQ0FBcEQsRSxDQU9BOztBQUNBcnBGLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQjgzQixHQUF0QixFQUEyQix5QkFBM0IsRUFBc0Q7QUFDcEQ1M0IsT0FBSyxFQUFFdXREO0FBRDZDLENBQXREO0FBSUEzMUIsR0FBRyxDQUFDdXhELE9BQUosR0FBYyxRQUFkLEMsQ0FFQTs7QUFDQSxTQUFTQyxVQUFULENBQW9CbjBDLEtBQXBCLEVBQTJCO0FBQ3pCLFNBQU9BLEtBQUssQ0FBQ2hCLGlCQUFOLEtBQTRCLENBQUNnQixLQUFLLENBQUNqMkIsSUFBUCxJQUFlLENBQUNpMkIsS0FBSyxDQUFDajJCLElBQU4sQ0FBVzA0QyxVQUF2RCxJQUNIMHhCLFVBQVUsQ0FBQ24wQyxLQUFLLENBQUNoQixpQkFBTixDQUF3QitjLE1BQXpCLENBRFAsR0FFSC9iLEtBRko7QUFHRDs7QUFFRCxJQUFJa3RCLElBQUksR0FBRztBQUNUOS9DLE1BQUksRUFBRSxTQUFTQSxJQUFULENBQWNnMUIsRUFBZCxFQUFrQitGLEdBQWxCLEVBQXVCbkksS0FBdkIsRUFBOEI7QUFDbEMsUUFBSWoxQyxLQUFLLEdBQUdvOUMsR0FBRyxDQUFDcDlDLEtBQWhCO0FBRUFpMUMsU0FBSyxHQUFHbTBDLFVBQVUsQ0FBQ24wQyxLQUFELENBQWxCO0FBQ0EsUUFBSXlpQixVQUFVLEdBQUd6aUIsS0FBSyxDQUFDajJCLElBQU4sSUFBY2kyQixLQUFLLENBQUNqMkIsSUFBTixDQUFXMDRDLFVBQTFDO0FBQ0EsUUFBSTJ4QixrQkFBa0IsR0FBSWh5QyxFQUFFLENBQUNpeUMscUJBQUgsR0FDeEJqeUMsRUFBRSxDQUFDbGQsWUFBSCxDQUFnQixZQUFoQixNQUFrQyxNQUFsQyxHQUNJLEVBREosR0FFSWtkLEVBQUUsQ0FBQ2xkLFlBQUgsQ0FBZ0IsWUFBaEIsQ0FITjs7QUFJQSxRQUFJbjZCLEtBQUssSUFBSTAzRCxVQUFiLEVBQXlCO0FBQ3ZCemlCLFdBQUssQ0FBQ2oyQixJQUFOLENBQVdtakQsSUFBWCxHQUFrQixJQUFsQjtBQUNBN0IsV0FBSyxDQUFDcnJCLEtBQUQsRUFBUSxZQUFZO0FBQ3ZCb0MsVUFBRSxDQUFDN2UsWUFBSCxDQUFnQixZQUFoQixFQUE4QjZ3RCxrQkFBOUI7QUFDRCxPQUZJLENBQUw7QUFHRCxLQUxELE1BS087QUFDTGh5QyxRQUFFLENBQUM3ZSxZQUFILENBQWdCLFlBQWhCLEVBQThCeDRCLEtBQUssR0FBR3FwRixrQkFBSCxHQUF3QixXQUEzRDtBQUNEO0FBQ0YsR0FsQlE7QUFvQlQvckQsUUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0IrWixFQUFoQixFQUFvQitGLEdBQXBCLEVBQXlCbkksS0FBekIsRUFBZ0M7QUFDdEMsUUFBSWoxQyxLQUFLLEdBQUdvOUMsR0FBRyxDQUFDcDlDLEtBQWhCO0FBQ0EsUUFBSTRrQixRQUFRLEdBQUd3NEIsR0FBRyxDQUFDeDRCLFFBQW5CO0FBRUE7O0FBQ0EsUUFBSSxDQUFDNWtCLEtBQUQsS0FBVyxDQUFDNGtCLFFBQWhCLEVBQTBCO0FBQUU7QUFBUTs7QUFDcENxd0IsU0FBSyxHQUFHbTBDLFVBQVUsQ0FBQ24wQyxLQUFELENBQWxCO0FBQ0EsUUFBSXlpQixVQUFVLEdBQUd6aUIsS0FBSyxDQUFDajJCLElBQU4sSUFBY2kyQixLQUFLLENBQUNqMkIsSUFBTixDQUFXMDRDLFVBQTFDOztBQUNBLFFBQUlBLFVBQUosRUFBZ0I7QUFDZHppQixXQUFLLENBQUNqMkIsSUFBTixDQUFXbWpELElBQVgsR0FBa0IsSUFBbEI7O0FBQ0EsVUFBSW5pRSxLQUFKLEVBQVc7QUFDVHNnRSxhQUFLLENBQUNyckIsS0FBRCxFQUFRLFlBQVk7QUFDdkJvQyxZQUFFLENBQUM3ZSxZQUFILENBQWdCLFlBQWhCLEVBQThCNmUsRUFBRSxDQUFDaXlDLHFCQUFqQztBQUNELFNBRkksQ0FBTDtBQUdELE9BSkQsTUFJTztBQUNML21CLGFBQUssQ0FBQ3R0QixLQUFELEVBQVEsWUFBWTtBQUN2Qm9DLFlBQUUsQ0FBQzdlLFlBQUgsQ0FBZ0IsWUFBaEIsRUFBOEIsV0FBOUI7QUFDRCxTQUZJLENBQUw7QUFHRDtBQUNGLEtBWEQsTUFXTztBQUNMNmUsUUFBRSxDQUFDN2UsWUFBSCxDQUNFLFlBREYsRUFFRXg0QixLQUFLLEdBQUdxM0MsRUFBRSxDQUFDaXlDLHFCQUFOLEdBQThCLFdBRnJDO0FBSUQ7QUFDRixHQTdDUTtBQStDVEMsUUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0JseUMsRUFBaEIsRUFBb0I2a0MsT0FBcEIsRUFBNkJqbkMsS0FBN0IsRUFBb0NwYixRQUFwQyxFQUE4QzBoQyxTQUE5QyxFQUF5RDtBQUMvRCxRQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDZGxrQixRQUFFLENBQUM3ZSxZQUFILENBQWdCLFlBQWhCLEVBQThCNmUsRUFBRSxDQUFDaXlDLHFCQUFqQztBQUNEO0FBQ0Y7QUFuRFEsQ0FBWDtBQXNEQSxJQUFJRSxNQUFNLEdBQUc7QUFDWDd6QyxVQUFRLEVBQUUsU0FBU0EsUUFBVCxDQUFrQjBCLEVBQWxCLEVBQXNCK0YsR0FBdEIsRUFBMkI7QUFDbkMsUUFBSTE4QyxHQUFHLEdBQUcwOEMsR0FBRyxDQUFDMThDLEdBQWQ7QUFDQSxRQUFJMDdELFNBQVMsR0FBR2hmLEdBQUcsQ0FBQ2dmLFNBQXBCO0FBRUEsUUFBSWhxQyxNQUFNLEdBQUdpbEIsRUFBRSxDQUFDK2UsVUFBSCxDQUFjM3JDLFVBQTNCOztBQUVBLFFBQUkySCxNQUFKLEVBQVk7QUFDVixVQUFJZ3FDLFNBQVMsQ0FBQzV6QixLQUFkLEVBQXFCO0FBQ25CcFcsY0FBTSxDQUFDMXhCLEdBQUQsQ0FBTixHQUFjLENBQUMweEIsTUFBTSxDQUFDMXhCLEdBQUQsQ0FBTixJQUFlLEVBQWhCLEVBQW9Cb1QsSUFBcEIsQ0FBeUJ1akMsRUFBRSxDQUFDNXNCLFVBQTVCLENBQWQ7QUFDRCxPQUZELE1BRU87QUFDTDJILGNBQU0sQ0FBQzF4QixHQUFELENBQU4sR0FBYzIyQyxFQUFFLENBQUM1c0IsVUFBakI7QUFDRDtBQUNGO0FBQ0Y7QUFkVSxDQUFiO0FBaUJBLElBQUlnL0Qsa0JBQWtCLEdBQUc7QUFDdkJ0bkIsTUFBSSxFQUFFQSxJQURpQjtBQUV2QnozQyxNQUFJLEVBQUU4K0Q7QUFGaUIsQ0FBekIsQyxDQUtBOztBQUVBNXhELEdBQUcsQ0FBQzJZLE1BQUosQ0FBV2MsV0FBWCxHQUF5QkEsV0FBekI7QUFDQXpaLEdBQUcsQ0FBQzJZLE1BQUosQ0FBV1MsYUFBWCxHQUEyQkEsYUFBM0I7QUFDQXBaLEdBQUcsQ0FBQzJZLE1BQUosQ0FBV1csZ0JBQVgsR0FBOEJBLGdCQUE5QjtBQUVBdFosR0FBRyxDQUFDOHhELFNBQUosR0FBZ0I5eEQsR0FBRyxDQUFDbDJCLFNBQUosQ0FBY2dvRixTQUFkLEdBQTBCLElBQUlwYixZQUFKLEVBQTFDO0FBRUExMkMsR0FBRyxDQUFDOHNELE9BQUosR0FBY0Msa0JBQWQ7QUFDQS9zRCxHQUFHLENBQUN1RCxlQUFKLEdBQXNCQSxlQUF0QjtBQUVBdDdCLE1BQU0sQ0FBQys0QixNQUFQLENBQWNoQixHQUFHLENBQUNtRixPQUFKLENBQVltYyxVQUExQixFQUFzQ3V3QyxrQkFBdEM7QUFFQTd4RCxHQUFHLENBQUNsMkIsU0FBSixDQUFjeXlELFNBQWQsR0FBMEJ3RyxLQUExQjs7QUFFQS9pQyxHQUFHLENBQUNsMkIsU0FBSixDQUFjZ21ELE1BQWQsR0FBdUIsVUFBU3JRLEVBQVQsRUFBYXNYLFNBQWIsRUFBd0I7QUFDN0MsTUFBSTV4QixPQUFPLEdBQUcsS0FBS3NWLFFBQW5CLENBRDZDLENBRTdDOztBQUNBLE1BQUksQ0FBQ3RWLE9BQU8sQ0FBQ2luQixNQUFiLEVBQXFCO0FBQ25CLFFBQUkvdEIsUUFBUSxHQUFHOEcsT0FBTyxDQUFDOUcsUUFBdkI7O0FBQ0EsUUFBSUEsUUFBUSxJQUFJLE9BQU9BLFFBQVAsS0FBb0IsUUFBcEMsRUFBOEM7QUFDNUN1RixVQUFJLENBQUMsOEJBQThCdkYsUUFBL0IsRUFBeUMsSUFBekMsQ0FBSjtBQUNBLGFBQU8sSUFBUDtBQUNEOztBQUVELFFBQUlBLFFBQUosRUFBYztBQUNaLFVBQUltbkIsR0FBRyxHQUFHdW5DLGtCQUFrQixDQUMxQjF1RCxRQUQwQixFQUUxQjtBQUNFeTlDLGtCQUFVLEVBQUUzMkMsT0FBTyxDQUFDMjJDLFVBRHRCO0FBRUVzRyxnQkFBUSxFQUFFajlDLE9BQU8sQ0FBQ2k5QztBQUZwQixPQUYwQixFQU0xQixJQU4wQixDQUE1QjtBQVFBLFVBQUloMkIsTUFBTSxHQUFHNUcsR0FBRyxDQUFDNEcsTUFBakI7QUFDQSxVQUFJZ0UsZUFBZSxHQUFHNUssR0FBRyxDQUFDNEssZUFBMUI7QUFDQWpyQixhQUFPLENBQUNpbkIsTUFBUixHQUFpQkEsTUFBakI7QUFDQWpuQixhQUFPLENBQUNpckIsZUFBUixHQUEwQkEsZUFBMUI7QUFDRDtBQUNGOztBQUVELFNBQU9xTSxjQUFjLENBQUMsSUFBRCxFQUFPaGQsRUFBUCxFQUFXc1gsU0FBWCxDQUFyQjtBQUNELENBM0JEOztBQTZCQS8yQixHQUFHLENBQUNsMkIsU0FBSixDQUFjaW9GLE1BQWQsR0FBdUIsWUFBVztBQUNoQyxNQUFJaG9ELElBQUksR0FBRyxJQUFYO0FBQ0EsTUFBSWlvRCxjQUFjLEdBQUdoeUQsR0FBRyxDQUFDOFUsTUFBSixDQUFXLEtBQUsyRixRQUFoQixDQUFyQixDQUZnQyxDQUloQzs7QUFDQXh5QyxRQUFNLENBQUNtYSxNQUFQLENBQWMrdUQsYUFBYSxFQUEzQixFQUErQnh0RCxPQUEvQixDQUF1QyxVQUFVeW9ELEtBQVYsRUFBaUI7QUFDdERwc0MsT0FBRyxDQUFDNzBCLFNBQUosQ0FBY2loRSxLQUFLLENBQUM2RSxJQUFOLENBQVc5bEUsU0FBWCxDQUFxQm9DLElBQW5DLEVBQXlDNitELEtBQUssQ0FBQzZFLElBQU4sQ0FBVzlsRSxTQUFwRDtBQUNELEdBRkQ7QUFJQTA3QixhQUFXLENBQUNxakIsRUFBWixDQUFlcmpCLFdBQVcsQ0FBQ29yRCxXQUEzQixFQUF3QyxVQUFVbmtFLElBQVYsRUFBZ0I7QUFDdEQsUUFBSWljLElBQUksQ0FBQ3F5QixHQUFULEVBQWM7QUFDWnJ5QixVQUFJLENBQUN3dEIsUUFBTDtBQUNBeHRCLFVBQUksR0FBRyxJQUFJaW9ELGNBQUosRUFBUDtBQUNEOztBQUVEam9ELFFBQUksQ0FBQytsQixNQUFMO0FBQ0FoaUMsUUFBSSxDQUFDb2MsSUFBTCxHQUFZSCxJQUFJLENBQUNxeUIsR0FBTCxDQUFTdnBDLFVBQXJCO0FBQ0QsR0FSRDtBQVVBZ1UsYUFBVyxDQUFDdWdCLEdBQVo7QUFDRCxDQXBCRCxDLENBc0JBOzs7QUFDQW4vQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0I4M0IsR0FBRyxDQUFDbDJCLFNBQTFCLEVBQXFDLFlBQXJDLEVBQW1EO0FBQ2pEQyxLQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sS0FBS3F5RCxHQUFMLENBQVN2cEMsVUFBaEI7QUFDRDtBQUhnRCxDQUFuRDs7QUFNQSxTQUFTcS9ELHFCQUFULENBQStCLzNDLEVBQS9CLEVBQW1DO0FBQ2pDLE1BQUksQ0FBQ0EsRUFBTCxFQUFTO0FBQ1AsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSWl5QixLQUFLLEdBQUdqeUIsRUFBRSxDQUFDUyxPQUFmOztBQUNBLFNBQU93eEIsS0FBSyxJQUFJQSxLQUFLLENBQUMzeEIsUUFBTixDQUFlbHRDLElBQWYsS0FBd0IsWUFBeEMsRUFBc0Q7QUFDcEQ2K0QsU0FBSyxHQUFHQSxLQUFLLENBQUN4eEIsT0FBZDtBQUNEOztBQUVELFNBQU93eEIsS0FBUDtBQUNEOztBQUVELElBQUkrbEIsV0FBVyxHQUFHO0FBQ2hCN3VELFNBQU8sRUFBRSxTQUFTQSxPQUFULENBQWlCdEQsR0FBakIsRUFBc0I7QUFDN0JBLE9BQUcsQ0FBQzB2RCxLQUFKLENBQVU7QUFDUjNqQixhQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixZQUFJaGlDLElBQUksR0FBRyxJQUFYO0FBQ0EsYUFBS3FvRCxNQUFMLEdBQWM7QUFDWnBXLGVBQUssRUFBRSxTQUFTQSxLQUFULENBQWU1MEQsSUFBZixFQUFxQjtBQUMxQixnQkFBSWdsRCxLQUFLLEdBQUc4bEIscUJBQXFCLENBQUNub0QsSUFBRCxDQUFqQzs7QUFFQSxnQkFBSXFpQyxLQUFKLEVBQVc7QUFDVEEsbUJBQUssQ0FBQ2ltQixPQUFOLENBQWNqckUsSUFBZDtBQUNEO0FBQ0Y7QUFQVyxTQUFkO0FBU0Q7QUFaTyxLQUFWOztBQWVBNFksT0FBRyxDQUFDbDJCLFNBQUosQ0FBY3dvRixVQUFkLEdBQTJCLFVBQVNubkYsU0FBVCxFQUFvQmc2QixPQUFwQixFQUE2QjtBQUN0RCxVQUFJeXdCLE1BQU0sR0FBRyxJQUFiO0FBRUEsYUFBTyxJQUFJNXZCLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CO0FBQ3BDLFlBQUkrekIsUUFBUSxHQUFHLEtBQWY7O0FBQ0EsWUFBSXE0QixPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVanJFLElBQVYsRUFBZ0I7QUFDNUIsY0FBSTR5QyxRQUFKLEVBQWM7QUFBRTtBQUFROztBQUV4QkEsa0JBQVEsR0FBRyxJQUFYO0FBQ0EvekIsaUJBQU8sQ0FBQzdlLElBQUQsQ0FBUDtBQUNBbXJFLG1CQUFTLENBQUNDLFVBQVYsR0FMNEIsQ0FPNUI7QUFDQTs7QUFDQUMsMEJBQWdCLENBQUNqd0QsS0FBakIsQ0FBdUIsYUFBdkIsRUFBc0NwYixJQUF0QztBQUNBcXJFLDBCQUFnQixDQUFDbDdCLFFBQWpCO0FBQ0QsU0FYRCxDQUZvQyxDQWVwQzs7O0FBQ0FweUIsZUFBTyxHQUFHbDlCLE1BQU0sQ0FBQys0QixNQUFQLENBQWMsRUFBZCxFQUFrQm1FLE9BQWxCLEVBQTJCO0FBQ25DbkQsaUJBQU8sRUFBRSxJQUQwQjtBQUVuQzB3RCx1QkFBYSxFQUFFTDtBQUZvQixTQUEzQixDQUFWO0FBS0EsWUFBSUksZ0JBQWdCLEdBQUcsSUFBSXp5RCxHQUFKLENBQVE7QUFDN0J6eUIsY0FBSSxFQUFFLFlBRHVCO0FBRTdCaXRCLGdCQUFNLEVBQUVvN0IsTUFBTSxDQUFDdGIsS0FGYztBQUc3QnpZLGlCQUFPLEVBQUU7QUFDUHd3RCxtQkFBTyxFQUFFQTtBQURGLFdBSG9CO0FBTTdCam1DLGdCQUFNLEVBQUUsZ0JBQVU5L0MsQ0FBVixFQUFhO0FBQUUsbUJBQU9BLENBQUMsQ0FBQ25CLFNBQUQsRUFBWTtBQUN2Q2kxQixtQkFBSyxFQUFFK0UsT0FBTyxDQUFDL0U7QUFEd0IsYUFBWixDQUFSO0FBRWhCO0FBUnNCLFNBQVIsQ0FBdkI7QUFVQSxZQUFJbXlELFNBQVMsR0FBR0UsZ0JBQWdCLENBQUMzaUMsTUFBakIsR0FBMEJzTSxHQUExQixDQUE4QnZwQyxVQUE5QztBQUVBK2lDLGNBQU0sQ0FBQ3dHLEdBQVAsQ0FBV3ZwQyxVQUFYLENBQXNCOC9ELFNBQXRCLENBQWdDSixTQUFoQyxFQUEyQ3B0RCxPQUEzQztBQUNELE9BbENNLENBQVA7QUFtQ0QsS0F0Q0Q7QUF1Q0Q7QUF4RGUsQ0FBbEI7O0FBMkRBLFNBQVN5dEQsZ0JBQVQsQ0FBMEJwbkIsS0FBMUIsRUFBaUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUk1NEIsVUFBVSxDQUFDNDRCLEtBQUQsQ0FBVixJQUFxQmg1QixLQUFLLENBQUNnNUIsS0FBSyxDQUFDcFAsR0FBUCxDQUE5QixFQUEyQztBQUN6Q29QLFNBQUssR0FBR0EsS0FBSyxDQUFDcFAsR0FBTixDQUFVdnBDLFVBQWxCO0FBQ0QsR0FGRCxNQUVPLElBQUk4ZixXQUFXLENBQUM2NEIsS0FBRCxDQUFmLEVBQXdCO0FBQzdCQSxTQUFLLEdBQUdsakUsbUJBQU8sQ0FBQywyQkFBRCxDQUFQLENBQXFDdXFGLFlBQXJDLENBQWtEcm5CLEtBQWxELENBQVI7QUFDRCxHQUZNLE1BRUEsSUFBSWg1QixLQUFLLENBQUNnNUIsS0FBSyxDQUFDMzRDLFVBQVAsQ0FBVCxFQUE2QjtBQUNsQzI0QyxTQUFLLEdBQUdBLEtBQUssQ0FBQzM0QyxVQUFkO0FBQ0QsR0FaOEIsQ0FhL0I7OztBQUNBLFNBQU80NEMsUUFBUSxDQUFDRCxLQUFLLENBQUNwbEQsRUFBUCxDQUFmO0FBQ0Q7O0FBRUQsU0FBUzBzRSx5QkFBVCxDQUFtQzM0QyxFQUFuQyxFQUF1QztBQUNyQyxNQUFJLENBQUNBLEVBQUwsRUFBUztBQUNQLFdBQU8sS0FBUDtBQUNEOztBQUVELE1BQUlpeUIsS0FBSyxHQUFHanlCLEVBQUUsQ0FBQ1MsT0FBZjs7QUFDQSxTQUFPd3hCLEtBQUssSUFBSUEsS0FBSyxDQUFDM3hCLFFBQU4sQ0FBZWx0QyxJQUFmLEtBQXdCLGlCQUF4QyxFQUEyRDtBQUN6RDYrRCxTQUFLLEdBQUdBLEtBQUssQ0FBQ3h4QixPQUFkO0FBQ0Q7O0FBRUQsU0FBT3d4QixLQUFQO0FBQ0Q7O0FBRUQsSUFBSTJtQixlQUFlLEdBQUc7QUFDcEJ6dkQsU0FBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBaUJ0RCxHQUFqQixFQUFzQjtBQUM3QkEsT0FBRyxDQUFDbDJCLFNBQUosQ0FBY2twRixhQUFkLEdBQThCLFVBQVM3dEQsT0FBVCxFQUFrQjZuQyxjQUFsQixFQUFrQztBQUM5RCxVQUFLQSxjQUFjLEtBQUssS0FBSyxDQUE3QixFQUFpQ0EsY0FBYyxHQUFHLElBQWpCO0FBRWpDLFVBQUlpbUIsUUFBUSxHQUFHSCx5QkFBeUIsQ0FBQyxJQUFELENBQXhDO0FBQ0EsVUFBSUksY0FBYyxHQUFHO0FBQ25CMW5CLGFBQUssRUFBRXluQixRQUFRLEdBQUdBLFFBQVEsQ0FBQ3g0QyxRQUFULENBQWtCK3dCLEtBQXJCLEdBQTZCO0FBRHpCLE9BQXJCO0FBR0FybUMsYUFBTyxHQUFHbDlCLE1BQU0sQ0FBQys0QixNQUFQLENBQWMsRUFBZCxFQUFrQmt5RCxjQUFsQixFQUFrQy90RCxPQUFsQyxDQUFWO0FBQ0EsVUFBSXFtQyxLQUFLLEdBQUdvbkIsZ0JBQWdCLENBQUN6dEQsT0FBTyxDQUFDcW1DLEtBQVQsQ0FBNUI7QUFFQUEsV0FBSyxDQUFDbUIsSUFBTixDQUFXSyxjQUFYO0FBQ0QsS0FYRDs7QUFhQWh0QyxPQUFHLENBQUNsMkIsU0FBSixDQUFjcXBGLFdBQWQsR0FBNEIsVUFBU2hvRixTQUFULEVBQW9CZzZCLE9BQXBCLEVBQTZCO0FBQ3ZELFVBQUl5d0IsTUFBTSxHQUFHLElBQWI7QUFFQSxVQUFJczlCLGNBQWMsR0FBRztBQUNuQjFuQixhQUFLLEVBQUU7QUFEWSxPQUFyQixDQUh1RCxDQU12RDs7QUFDQXJtQyxhQUFPLEdBQUdsOUIsTUFBTSxDQUFDKzRCLE1BQVAsQ0FBYyxFQUFkLEVBQWtCa3lELGNBQWxCLEVBQWtDL3RELE9BQWxDLENBQVY7QUFFQSxhQUFPLElBQUlhLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CO0FBQ3BDLFlBQUl1bEMsS0FBSyxHQUFHb25CLGdCQUFnQixDQUFDenRELE9BQU8sQ0FBQ3FtQyxLQUFULENBQTVCO0FBQ0EsWUFBSWluQixnQkFBZ0IsR0FBRyxJQUFJenlELEdBQUosQ0FBUTtBQUM3Qnp5QixjQUFJLEVBQUUsaUJBRHVCO0FBRTdCaXRCLGdCQUFNLEVBQUVvN0IsTUFBTSxDQUFDdGIsS0FGYztBQUc3Qmt4QixlQUFLLEVBQUVBLEtBSHNCO0FBSTdCcHJDLGVBQUssRUFBRTtBQUNMb3JDLGlCQUFLLEVBQUU7QUFDTGxyQyxxQkFBTyxFQUFFa3JDLEtBQUssQ0FBQ3BsRDtBQURWO0FBREYsV0FKc0I7QUFTN0JnbUMsZ0JBQU0sRUFBRSxnQkFBVTkvQyxDQUFWLEVBQWE7QUFBRSxtQkFBT0EsQ0FBQyxDQUFDbkIsU0FBRCxFQUFZO0FBQUVpMUIsbUJBQUssRUFBRStFLE9BQU8sQ0FBQy9FO0FBQWpCLGFBQVosQ0FBUjtBQUFnRDtBQVQxQyxTQUFSLENBQXZCO0FBV0EsWUFBSXlzQyxJQUFJLEdBQUc0bEIsZ0JBQWdCLENBQUMzaUMsTUFBakIsR0FBMEJzTSxHQUExQixDQUE4QnZwQyxVQUF6Qzs7QUFFQSxZQUFJNE4sT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVTNTLElBQVYsRUFBZ0I7QUFDNUIsY0FBSUEsSUFBSSxDQUFDZy9DLGdCQUFULEVBQTJCO0FBQ3pCRCxnQkFBSSxDQUFDRSxHQUFMLENBQVMsZUFBVCxFQUEwQnRzQyxPQUExQjtBQUNBZ3lELDRCQUFnQixDQUFDbDdCLFFBQWpCO0FBQ0Q7QUFDRixTQUxEOztBQU1Bc1YsWUFBSSxDQUFDM2lCLEVBQUwsQ0FBUSxlQUFSLEVBQXlCenBCLE9BQXpCLEVBckJvQyxDQXVCcEM7QUFDQTs7QUFDQSxZQUFJZ3VDLE9BQU8sR0FBRzVCLElBQUksQ0FBQzUxQyxpQkFBbkI7O0FBQ0E0MUMsWUFBSSxDQUFDNTFDLGlCQUFMLEdBQXlCLFlBQVk7QUFDbkMsY0FBSW5KLElBQUksR0FBRyxFQUFYO0FBQUEsY0FBZTh2QixHQUFHLEdBQUdoMUMsU0FBUyxDQUFDQyxNQUEvQjs7QUFDQSxpQkFBUSswQyxHQUFHLEVBQVg7QUFBZ0I5dkIsZ0JBQUksQ0FBRTh2QixHQUFGLENBQUosR0FBY2gxQyxTQUFTLENBQUVnMUMsR0FBRixDQUF2QjtBQUFoQjs7QUFFQTYwQywwQkFBZ0IsQ0FBQ2w3QixRQUFqQjtBQUNBa1gsaUJBQU8sQ0FBQ243QyxJQUFSLENBQWF1NUMsSUFBYixFQUFtQi8rQyxJQUFuQjtBQUNELFNBTkQ7O0FBUUEwOUMsYUFBSyxDQUFDa0IsUUFBTixDQUFlemtFLE1BQU0sQ0FBQys0QixNQUFQLENBQWMsRUFBZCxFQUFrQm1FLE9BQWxCLEVBQTJCO0FBQUVzTyxnQkFBTSxFQUFFLGtCQUFZO0FBQUUsbUJBQU9vNUIsSUFBUDtBQUFjO0FBQXRDLFNBQTNCLENBQWY7QUFDQTVtQyxlQUFPLENBQUM0bUMsSUFBRCxDQUFQO0FBQ0QsT0FwQ00sQ0FBUDtBQXFDRCxLQTlDRDtBQStDRDtBQTlEbUIsQ0FBdEI7QUFpRUE3c0MsR0FBRyxDQUFDMlksTUFBSixDQUFXRSxNQUFYLEdBQW9CLElBQXBCO0FBRUFpK0IsTUFBTSxDQUFDOTJDLEdBQUQsQ0FBTjtBQUVBQSxHQUFHLENBQUNxdkQsR0FBSixDQUFROEMsV0FBUjtBQUNBbnlELEdBQUcsQ0FBQ3F2RCxHQUFKLENBQVEwRCxlQUFSO0FBRUEsSUFBSUssYUFBYSxHQUFHLE1BQXBCOztBQUVBenZELE9BQU8sQ0FBQ0YsR0FBUixHQUFlLFVBQVNBLEdBQVQsRUFBYzJMLE9BQWQsRUFBdUJwUCxHQUF2QixFQUE0QjtBQUN6QyxTQUFPLFlBQVc7QUFDaEIsUUFBSWxTLElBQUksR0FBRyxFQUFYO0FBQUEsUUFBZTh2QixHQUFHLEdBQUdoMUMsU0FBUyxDQUFDQyxNQUEvQjs7QUFDQSxXQUFRKzBDLEdBQUcsRUFBWDtBQUFnQjl2QixVQUFJLENBQUU4dkIsR0FBRixDQUFKLEdBQWNoMUMsU0FBUyxDQUFFZzFDLEdBQUYsQ0FBdkI7QUFBaEI7O0FBRUEsV0FBT25hLEdBQUcsQ0FBQ25RLElBQUosQ0FBU3ptQixLQUFULENBQ0w0MkIsR0FESyxFQUNBLENBQUUsSUFBRixFQUFTNWMsTUFBVCxDQUFpQjZDLEtBQUssQ0FBQzVmLFNBQU4sQ0FBZ0I4WSxHQUFoQixDQUFvQjBRLElBQXBCLENBQXlCeEYsSUFBekIsRUFBK0IsVUFBU2hsQixHQUFULEVBQWM7QUFDakUsYUFBT3NtQyxPQUFPLENBQUN0bUMsR0FBRCxFQUFNO0FBQ2xCMm1DLGFBQUssRUFBRSxDQURXO0FBRWxCeDNCLGNBQU0sRUFBRStuQixHQUFHLENBQUMyWSxNQUFKLENBQVcwNkMsS0FGRDtBQUdsQjNqRCxrQkFBVSxFQUFFO0FBSE0sT0FBTixDQUFQLENBSUo5akMsT0FKSSxDQUlJd25GLGFBSkosRUFJbUIsSUFKbkIsQ0FBUDtBQUtELEtBTnFCLENBQWpCLENBREEsQ0FBUDtBQVNELEdBYkQ7QUFjRCxDQWZhLENBZVh6dkQsT0FBTyxDQUFDRixHQWZHLEVBZUUwTCxXQWZGLEVBZWVuUCxHQWZmLENBQWQ7O0FBaUJBL04sTUFBTSxDQUFDcWhFLGdCQUFQLEdBQTBCLFlBQVk7QUFDcEMsTUFBSTluQixLQUFLLEdBQUdsakUsbUJBQU8sQ0FBQywyQkFBRCxDQUFQLENBQXFDaXJGLE9BQXJDLEVBQVo7O0FBQ0EsTUFBSS9uQixLQUFKLEVBQVc7QUFDVCxRQUFJQSxLQUFLLENBQUNnb0IsV0FBTixJQUFxQmhvQixLQUFLLENBQUNnb0IsV0FBTixDQUFrQkMsS0FBM0MsRUFBa0Q7QUFDaERqb0IsV0FBSyxDQUFDZ29CLFdBQU4sQ0FBa0JDLEtBQWxCLENBQXdCakIsVUFBeEI7QUFDRDs7QUFFRCxRQUFJaG5CLEtBQUssQ0FBQ2dvQixXQUFWLEVBQXVCO0FBQ3JCaG9CLFdBQUssQ0FBQ2dvQixXQUFOLENBQWtCRSxVQUFsQixDQUNFcHJGLG1CQUFPLENBQUMsOEJBQUQsQ0FBUCxDQUF3Q3FyRixjQUF4QyxFQURGO0FBR0Q7QUFDRjtBQUNGLENBYkQsQyxDQWVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTN6RCxHQUFHLENBQUNNLE9BQUosR0FBY04sR0FBZDtBQUVBcmEsTUFBTSxDQUFDeGQsT0FBUCxHQUFpQjYzQixHQUFqQixDOzs7Ozs7OztBQ2o4YkEsSUFBSUEsR0FBSixDLENBQVE7O0FBQ1IsSUFBSXV4RCxPQUFKO0FBQ0EsSUFBSTN1RSxHQUFHLEdBQUczYSxNQUFNLENBQUN3ckMsTUFBUCxDQUFjLElBQWQsQ0FBVjs7QUFDQSxJQUFJLE9BQU96TSxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ2pDQSxRQUFNLENBQUM0c0QsZUFBUCxHQUF5Qmh4RSxHQUF6QjtBQUNEOztBQUNELElBQUlpeEUsU0FBUyxHQUFHLEtBQWhCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLEtBQW5CO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLGNBQW5COztBQUVBNXJGLE9BQU8sQ0FBQ203QixPQUFSLEdBQWtCLFVBQVUwd0QsR0FBVixFQUFlQyxVQUFmLEVBQTJCO0FBQzNDLE1BQUlKLFNBQUosRUFBZTtBQUFFO0FBQVE7O0FBQ3pCQSxXQUFTLEdBQUcsSUFBWjtBQUVBN3pELEtBQUcsR0FBR2cwRCxHQUFHLENBQUNwNkIsVUFBSixHQUFpQm82QixHQUFHLENBQUMxekQsT0FBckIsR0FBK0IwekQsR0FBckM7QUFDQXpDLFNBQU8sR0FBR3Z4RCxHQUFHLENBQUN1eEQsT0FBSixDQUFZemxGLEtBQVosQ0FBa0IsR0FBbEIsRUFBdUI4VyxHQUF2QixDQUEyQmlCLE1BQTNCLENBQVY7QUFDQWl3RSxjQUFZLEdBQUdHLFVBQWYsQ0FOMkMsQ0FRM0M7O0FBQ0EsTUFBSWowRCxHQUFHLENBQUMyWSxNQUFKLENBQVdnQixlQUFYLENBQTJCbHVDLE9BQTNCLENBQW1DLE1BQW5DLElBQTZDLENBQUMsQ0FBbEQsRUFBcUQ7QUFDbkRzb0YsZ0JBQVksR0FBRyxNQUFmO0FBQ0Q7O0FBRUQ1ckYsU0FBTyxDQUFDK3JGLFVBQVIsR0FBcUIzQyxPQUFPLENBQUMsQ0FBRCxDQUFQLElBQWMsQ0FBbkM7O0FBQ0EsTUFBSSxDQUFDcHBGLE9BQU8sQ0FBQytyRixVQUFiLEVBQXlCO0FBQ3ZCdndELFdBQU8sQ0FBQ0MsSUFBUixDQUNFLGlFQUNFLDBDQUZKO0FBSUE7QUFDRDtBQUNGLENBckJEO0FBdUJBOzs7Ozs7Ozs7QUFRQXo3QixPQUFPLENBQUNnc0YsWUFBUixHQUF1QixVQUFVL3RFLEVBQVYsRUFBYytlLE9BQWQsRUFBdUI7QUFDNUMsTUFBR3ZpQixHQUFHLENBQUN3RCxFQUFELENBQU4sRUFBWTtBQUFFO0FBQVE7O0FBRXRCLE1BQUk4eEIsSUFBSSxHQUFHLElBQVg7O0FBQ0EsTUFBSSxPQUFPL1MsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQytTLFFBQUksR0FBRy9TLE9BQVA7QUFDQUEsV0FBTyxHQUFHK1MsSUFBSSxDQUFDL1MsT0FBZjtBQUNEOztBQUNEaXZELGdCQUFjLENBQUNodUUsRUFBRCxFQUFLK2UsT0FBTCxDQUFkO0FBQ0F2aUIsS0FBRyxDQUFDd0QsRUFBRCxDQUFILEdBQVU7QUFDUjh4QixRQUFJLEVBQUVBLElBREU7QUFFUi9TLFdBQU8sRUFBRUEsT0FGRDtBQUdSa3ZELGFBQVMsRUFBRTtBQUhILEdBQVY7QUFLRCxDQWREO0FBZ0JBOzs7Ozs7O0FBTUFsc0YsT0FBTyxDQUFDbXNGLFVBQVIsR0FBcUIsVUFBVWx1RSxFQUFWLEVBQWM7QUFDakMsU0FBTyxPQUFPeEQsR0FBRyxDQUFDd0QsRUFBRCxDQUFWLEtBQW1CLFdBQTFCO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7OztBQU9BLFNBQVNndUUsY0FBVCxDQUF3Qmh1RSxFQUF4QixFQUE0QitlLE9BQTVCLEVBQXFDO0FBQ25DLE1BQUlBLE9BQU8sQ0FBQzR5QixVQUFaLEVBQXdCO0FBQ3RCLFFBQUkzTCxNQUFNLEdBQUdqbkIsT0FBTyxDQUFDaW5CLE1BQXJCOztBQUNBam5CLFdBQU8sQ0FBQ2luQixNQUFSLEdBQWlCLFVBQVU5L0MsQ0FBVixFQUFheTdCLEdBQWIsRUFBa0I7QUFDakMsVUFBSXNzRCxTQUFTLEdBQUd6eEUsR0FBRyxDQUFDd0QsRUFBRCxDQUFILENBQVFpdUUsU0FBeEI7O0FBQ0EsVUFBSXRzRCxHQUFHLElBQUlzc0QsU0FBUyxDQUFDNW9GLE9BQVYsQ0FBa0JzOEIsR0FBRyxDQUFDdk4sTUFBdEIsSUFBZ0MsQ0FBM0MsRUFBOEM7QUFDNUM2NUQsaUJBQVMsQ0FBQ240RSxJQUFWLENBQWU2ckIsR0FBRyxDQUFDdk4sTUFBbkI7QUFDRDs7QUFDRCxhQUFPNHhCLE1BQU0sQ0FBQzkvQyxDQUFELEVBQUl5N0IsR0FBSixDQUFiO0FBQ0QsS0FORDtBQU9ELEdBVEQsTUFTTztBQUNMd3NELGNBQVUsQ0FBQ3B2RCxPQUFELEVBQVU0dUQsWUFBVixFQUF3QixZQUFXO0FBQzNDLFVBQUlTLE1BQU0sR0FBRzV4RSxHQUFHLENBQUN3RCxFQUFELENBQWhCOztBQUNBLFVBQUksQ0FBQ291RSxNQUFNLENBQUN0OEMsSUFBWixFQUFrQjtBQUNoQnM4QyxjQUFNLENBQUN0OEMsSUFBUCxHQUFjLEtBQUt0ekIsV0FBbkI7QUFDRDs7QUFDRDR2RSxZQUFNLENBQUNILFNBQVAsQ0FBaUJuNEUsSUFBakIsQ0FBc0IsSUFBdEI7QUFDRCxLQU5TLENBQVY7QUFPQXE0RSxjQUFVLENBQUNwdkQsT0FBRCxFQUFVLGVBQVYsRUFBMkIsWUFBVztBQUM5QyxVQUFJa3ZELFNBQVMsR0FBR3p4RSxHQUFHLENBQUN3RCxFQUFELENBQUgsQ0FBUWl1RSxTQUF4QjtBQUNBQSxlQUFTLENBQUN4Z0QsTUFBVixDQUFpQndnRCxTQUFTLENBQUM1b0YsT0FBVixDQUFrQixJQUFsQixDQUFqQixFQUEwQyxDQUExQztBQUNELEtBSFMsQ0FBVjtBQUlEO0FBQ0Y7QUFFRDs7Ozs7Ozs7OztBQVNBLFNBQVM4b0YsVUFBVCxDQUFvQnB2RCxPQUFwQixFQUE2QjUzQixJQUE3QixFQUFtQ2t6QyxJQUFuQyxFQUF5QztBQUN2QyxNQUFJd1QsUUFBUSxHQUFHOXVCLE9BQU8sQ0FBQzUzQixJQUFELENBQXRCO0FBQ0E0M0IsU0FBTyxDQUFDNTNCLElBQUQsQ0FBUCxHQUFnQjBtRCxRQUFRLEdBQ3BCdnFDLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY3NzQixRQUFkLElBQTBCQSxRQUFRLENBQUNwdEMsTUFBVCxDQUFnQjQ1QixJQUFoQixDQUExQixHQUFrRCxDQUFDd1QsUUFBRCxFQUFXeFQsSUFBWCxDQUQ5QixHQUVwQixDQUFDQSxJQUFELENBRko7QUFHRDs7QUFFRCxTQUFTZzBDLE9BQVQsQ0FBaUIzc0QsRUFBakIsRUFBcUI7QUFDbkIsU0FBTyxVQUFVMWhCLEVBQVYsRUFBY3RkLEdBQWQsRUFBbUI7QUFDeEIsUUFBSTtBQUNGZy9CLFFBQUUsQ0FBQzFoQixFQUFELEVBQUt0ZCxHQUFMLENBQUY7QUFDRCxLQUZELENBRUUsT0FBT2krQixDQUFQLEVBQVU7QUFDVnBELGFBQU8sQ0FBQ0UsS0FBUixDQUFja0QsQ0FBZDtBQUNBcEQsYUFBTyxDQUFDQyxJQUFSLENBQ0UsNkVBREY7QUFHRDtBQUNGLEdBVEQ7QUFVRDs7QUFFRCxTQUFTOHdELGFBQVQsQ0FBd0JDLFVBQXhCLEVBQW9DQyxVQUFwQyxFQUFnRDtBQUM5QyxPQUFLLElBQUl0ckUsR0FBVCxJQUFnQnFyRSxVQUFoQixFQUE0QjtBQUMxQixRQUFJLEVBQUVyckUsR0FBRyxJQUFJc3JFLFVBQVQsQ0FBSixFQUEwQjtBQUN4QixhQUFPRCxVQUFVLENBQUNyckUsR0FBRCxDQUFqQjtBQUNEO0FBQ0Y7O0FBQ0QsT0FBSyxJQUFJczNCLEtBQVQsSUFBa0JnMEMsVUFBbEIsRUFBOEI7QUFDNUJELGNBQVUsQ0FBQy96QyxLQUFELENBQVYsR0FBb0JnMEMsVUFBVSxDQUFDaDBDLEtBQUQsQ0FBOUI7QUFDRDtBQUNGOztBQUVEejRDLE9BQU8sQ0FBQzBzRixRQUFSLEdBQW1CSixPQUFPLENBQUMsVUFBVXJ1RSxFQUFWLEVBQWMrZSxPQUFkLEVBQXVCO0FBQ2hELE1BQUlxdkQsTUFBTSxHQUFHNXhFLEdBQUcsQ0FBQ3dELEVBQUQsQ0FBaEI7O0FBQ0EsTUFBSSxDQUFDK2UsT0FBTCxFQUFjO0FBQ1pxdkQsVUFBTSxDQUFDSCxTQUFQLENBQWlCcG5ELEtBQWpCLEdBQXlCdHBCLE9BQXpCLENBQWlDLFVBQVVteEUsUUFBVixFQUFvQjtBQUNuREEsY0FBUSxDQUFDcjZCLFlBQVQ7QUFDRCxLQUZEO0FBR0E7QUFDRDs7QUFDRCxNQUFJLE9BQU90MUIsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ0EsV0FBTyxHQUFHQSxPQUFPLENBQUNBLE9BQWxCO0FBQ0Q7O0FBQ0QsTUFBSXF2RCxNQUFNLENBQUN0OEMsSUFBWCxFQUFpQjtBQUNmczhDLFVBQU0sQ0FBQ3Q4QyxJQUFQLENBQVkvUyxPQUFaLENBQW9CaW5CLE1BQXBCLEdBQTZCam5CLE9BQU8sQ0FBQ2luQixNQUFyQztBQUNBb29DLFVBQU0sQ0FBQ3Q4QyxJQUFQLENBQVkvUyxPQUFaLENBQW9CaXJCLGVBQXBCLEdBQXNDanJCLE9BQU8sQ0FBQ2lyQixlQUE5QztBQUNBb2tDLFVBQU0sQ0FBQ0gsU0FBUCxDQUFpQnBuRCxLQUFqQixHQUF5QnRwQixPQUF6QixDQUFpQyxVQUFVbXhFLFFBQVYsRUFBb0I7QUFDbkRBLGNBQVEsQ0FBQ3I2QyxRQUFULENBQWtCMlIsTUFBbEIsR0FBMkJqbkIsT0FBTyxDQUFDaW5CLE1BQW5DO0FBQ0Ewb0MsY0FBUSxDQUFDcjZDLFFBQVQsQ0FBa0IyVixlQUFsQixHQUFvQ2pyQixPQUFPLENBQUNpckIsZUFBNUMsQ0FGbUQsQ0FHbkQ7QUFDQTs7QUFDQSxVQUFJMGtDLFFBQVEsQ0FBQ2xoQyxZQUFiLEVBQTJCO0FBQ3pCa2hDLGdCQUFRLENBQUNsaEMsWUFBVCxHQUF3QixFQUF4QjtBQUNELE9BUGtELENBUW5EOzs7QUFDQSxVQUFJbHFDLEtBQUssQ0FBQ2llLE9BQU4sQ0FBYzZzRCxNQUFNLENBQUN0OEMsSUFBUCxDQUFZL1MsT0FBWixDQUFvQjRPLE1BQWxDLENBQUosRUFBK0M7QUFDN0N5Z0QsY0FBTSxDQUFDdDhDLElBQVAsQ0FBWS9TLE9BQVosQ0FBb0I0TyxNQUFwQixHQUE2QixFQUE3QjtBQUNELE9BWGtELENBWW5EOzs7QUFDQSxVQUFJcnFCLEtBQUssQ0FBQ2llLE9BQU4sQ0FBY210RCxRQUFRLENBQUNyNkMsUUFBVCxDQUFrQjFHLE1BQWhDLENBQUosRUFBNkM7QUFDM0MrZ0QsZ0JBQVEsQ0FBQ3I2QyxRQUFULENBQWtCMUcsTUFBbEIsR0FBMkIsRUFBM0I7QUFDRCxPQWZrRCxDQWlCbkQ7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQ0EsVUFBSWdoRCxPQUFPLEdBQUdDLGdCQUFnQixDQUFDRixRQUFELENBQTlCO0FBQ0FBLGNBQVEsQ0FBQ3I2QixZQUFUO0FBQ0FxNkIsY0FBUSxDQUFDdjdCLFNBQVQsQ0FBbUJ3N0IsT0FBbkI7QUFDRCxLQTFCRDtBQTJCRCxHQTlCRCxNQThCTztBQUNMO0FBQ0FQLFVBQU0sQ0FBQ3J2RCxPQUFQLENBQWVpbkIsTUFBZixHQUF3QmpuQixPQUFPLENBQUNpbkIsTUFBaEM7QUFDQW9vQyxVQUFNLENBQUNydkQsT0FBUCxDQUFlaXJCLGVBQWYsR0FBaUNqckIsT0FBTyxDQUFDaXJCLGVBQXpDLENBSEssQ0FLTDs7QUFDQSxRQUFJb2tDLE1BQU0sQ0FBQ3J2RCxPQUFQLENBQWU0eUIsVUFBbkIsRUFBK0I7QUFDN0I7QUFDQSxVQUFJOXZELE1BQU0sQ0FBQzB6QixJQUFQLENBQVl3SixPQUFaLEVBQXFCdDhCLE1BQXJCLEdBQThCLENBQWxDLEVBQXFDO0FBQ25DNnJGLHFCQUFhLENBQUNGLE1BQU0sQ0FBQ3J2RCxPQUFSLEVBQWlCQSxPQUFqQixDQUFiO0FBQ0QsT0FGRCxNQUVPO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsWUFBSTh2RCxZQUFZLEdBQUdULE1BQU0sQ0FBQ3J2RCxPQUFQLENBQWUrdkQsYUFBbEM7O0FBQ0EsWUFBSUQsWUFBSixFQUFrQjtBQUNoQixjQUFJN29DLE1BQU0sR0FBR2puQixPQUFPLENBQUNpbkIsTUFBckI7O0FBQ0Fvb0MsZ0JBQU0sQ0FBQ3J2RCxPQUFQLENBQWVpbkIsTUFBZixHQUF3QixVQUFVOS9DLENBQVYsRUFBYXk3QixHQUFiLEVBQWtCO0FBQ3hDa3RELHdCQUFZLENBQUMzaEUsSUFBYixDQUFrQnlVLEdBQWxCO0FBQ0EsbUJBQU9xa0IsTUFBTSxDQUFDOS9DLENBQUQsRUFBSXk3QixHQUFKLENBQWI7QUFDRCxXQUhEO0FBSUQ7QUFDRjs7QUFDRHlzRCxZQUFNLENBQUNydkQsT0FBUCxDQUFlNHFELEtBQWYsR0FBdUIsSUFBdkIsQ0FqQjZCLENBa0I3Qjs7QUFDQSxVQUFJcm1FLEtBQUssQ0FBQ2llLE9BQU4sQ0FBYzZzRCxNQUFNLENBQUNydkQsT0FBUCxDQUFlNE8sTUFBN0IsQ0FBSixFQUEwQztBQUN4Q3lnRCxjQUFNLENBQUNydkQsT0FBUCxDQUFlNE8sTUFBZixHQUF3QixFQUF4QjtBQUNEOztBQUNEeWdELFlBQU0sQ0FBQ0gsU0FBUCxDQUFpQnBuRCxLQUFqQixHQUF5QnRwQixPQUF6QixDQUFpQyxVQUFVbXhFLFFBQVYsRUFBb0I7QUFDbkRBLGdCQUFRLENBQUNyNkIsWUFBVDtBQUNELE9BRkQ7QUFHRDtBQUNGO0FBQ0YsQ0ExRXlCLENBQTFCO0FBNEVBdHlELE9BQU8sQ0FBQ2d0RixNQUFSLEdBQWlCVixPQUFPLENBQUMsVUFBVXJ1RSxFQUFWLEVBQWMrZSxPQUFkLEVBQXVCO0FBQzlDLE1BQUlxdkQsTUFBTSxHQUFHNXhFLEdBQUcsQ0FBQ3dELEVBQUQsQ0FBaEI7O0FBQ0EsTUFBSStlLE9BQUosRUFBYTtBQUNYLFFBQUksT0FBT0EsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ0EsYUFBTyxHQUFHQSxPQUFPLENBQUNBLE9BQWxCO0FBQ0Q7O0FBQ0RpdkQsa0JBQWMsQ0FBQ2h1RSxFQUFELEVBQUsrZSxPQUFMLENBQWQ7O0FBQ0EsUUFBSXF2RCxNQUFNLENBQUN0OEMsSUFBWCxFQUFpQjtBQUNmLFVBQUlxNUMsT0FBTyxDQUFDLENBQUQsQ0FBUCxHQUFhLENBQWpCLEVBQW9CO0FBQ2xCO0FBQ0FpRCxjQUFNLENBQUN0OEMsSUFBUCxDQUFZd1ksYUFBWixHQUE0QnZyQixPQUE1QjtBQUNEOztBQUNELFVBQUlpd0QsT0FBTyxHQUFHWixNQUFNLENBQUN0OEMsSUFBUCxDQUFZbVksS0FBWixDQUFrQnZiLE1BQWxCLENBQXlCM1AsT0FBekIsQ0FBZCxDQUxlLENBTWY7O0FBQ0Fpd0QsYUFBTyxDQUFDandELE9BQVIsQ0FBZ0I0cUQsS0FBaEIsR0FBd0J5RSxNQUFNLENBQUNydkQsT0FBUCxDQUFlNHFELEtBQXZDO0FBQ0F5RSxZQUFNLENBQUN0OEMsSUFBUCxDQUFZL1MsT0FBWixHQUFzQml3RCxPQUFPLENBQUNqd0QsT0FBOUI7QUFDQXF2RCxZQUFNLENBQUN0OEMsSUFBUCxDQUFZcUMsR0FBWixHQUFrQjY2QyxPQUFPLENBQUM3NkMsR0FBMUI7QUFDQWk2QyxZQUFNLENBQUN0OEMsSUFBUCxDQUFZcHVDLFNBQVosR0FBd0JzckYsT0FBTyxDQUFDdHJGLFNBQWhDOztBQUNBLFVBQUlzckYsT0FBTyxDQUFDQyxPQUFaLEVBQXFCO0FBQ25CO0FBQ0FELGVBQU8sQ0FBQ0MsT0FBUjtBQUNEO0FBQ0YsS0FmRCxNQWVPO0FBQ0xYLG1CQUFhLENBQUNGLE1BQU0sQ0FBQ3J2RCxPQUFSLEVBQWlCQSxPQUFqQixDQUFiO0FBQ0Q7QUFDRjs7QUFDRHF2RCxRQUFNLENBQUNILFNBQVAsQ0FBaUJwbkQsS0FBakIsR0FBeUJ0cEIsT0FBekIsQ0FBaUMsVUFBVW14RSxRQUFWLEVBQW9CO0FBQ25ELFFBQUlBLFFBQVEsQ0FBQy83QixNQUFULElBQW1CKzdCLFFBQVEsQ0FBQy83QixNQUFULENBQWdCLzJCLE9BQXZDLEVBQWdEO0FBQzlDOHlELGNBQVEsQ0FBQy83QixNQUFULENBQWdCLzJCLE9BQWhCLENBQXdCeTRCLFlBQXhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0w5MkIsYUFBTyxDQUFDQyxJQUFSLENBQ0UsbUVBREY7QUFHRDtBQUNGLEdBUkQ7QUFTRCxDQW5DdUIsQ0FBeEIsQyxDQXFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTb3hELGdCQUFULENBQTJCRixRQUEzQixFQUFxQztBQUNuQyxNQUFJLENBQUNBLFFBQVEsQ0FBQ3YvQixFQUFkLEVBQWtCO0FBQUU7QUFBUSxHQURPLENBRW5DOzs7QUFDQSxNQUFJaHBCLFFBQVEsR0FBR3VvRCxRQUFRLENBQUN2L0IsRUFBeEI7O0FBQ0F1L0IsVUFBUSxDQUFDdi9CLEVBQVQsR0FBYyxVQUFVdkUsS0FBVixFQUFpQjtBQUM3QixRQUFJO0FBQ0Y7QUFDQSxhQUFPemtCLFFBQVEsQ0FBQ3lrQixLQUFELEVBQVEsSUFBUixDQUFmO0FBQ0QsS0FIRCxDQUdFLE9BQU9qcUIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQSxhQUFPd0YsUUFBUSxDQUFDeWtCLEtBQUQsRUFBUSxJQUFSLEVBQWMsSUFBZCxDQUFmO0FBQ0Q7QUFDRixHQVJEOztBQVNBLFNBQU8sWUFBWTtBQUNqQjhqQyxZQUFRLENBQUN2L0IsRUFBVCxHQUFjaHBCLFFBQWQ7QUFDRCxHQUZEO0FBR0QsQzs7Ozs7Ozs7QUNoUkQ7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ2ZW5kb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHlwZXMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdHlwZXNcIik7XG52YXIga25vd25Db2xvcnMgPSByZXF1aXJlKFwiLi9rbm93bi1jb2xvcnNcIik7XG52YXIgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vY3NzL3BhcnNlclwiKTtcbnZhciBTSEFSUCA9IFwiI1wiO1xudmFyIEhFWF9SRUdFWCA9IC8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCl8KF4jWzAtOUEtRl17OH0kKS9pO1xudmFyIENvbG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xvcigpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHZhciBhcmcgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBpZiAodHlwZXMuaXNTdHJpbmcoYXJnKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1JnYk9yUmdiYShhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FyZ2IgPSBhcmdiRnJvbVJnYk9yUmdiYShhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0hzbE9ySHNsYShhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FyZ2IgPSBhcmdiRnJvbUhzbE9ySHNsYShhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrbm93bkNvbG9ycy5pc0tub3duTmFtZShhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZXggPSBrbm93bkNvbG9ycy5nZXRLbm93bkNvbG9yKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25hbWUgPSBhcmc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FyZ2IgPSB0aGlzLl9hcmdiRnJvbVN0cmluZyhoZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChIRVhfUkVHRVgudGVzdChhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZXggPSB0aGlzLl9ub3JtYWxpemVIZXgoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJnYiA9IHRoaXMuX2FyZ2JGcm9tU3RyaW5nKGhleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yOiBcIiArIGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZXMuaXNOdW1iZXIoYXJnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FyZ2IgPSBhcmcgPj4+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCAxIG9yIDQgY29uc3RydWN0b3IgcGFyYW1ldGVycy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgdGhpcy5fYXJnYiA9IChhcmd1bWVudHNbMF0gJiAweEZGKSAqIDB4MDEwMDAwMDBcbiAgICAgICAgICAgICAgICArIChhcmd1bWVudHNbMV0gJiAweEZGKSAqIDB4MDAwMTAwMDBcbiAgICAgICAgICAgICAgICArIChhcmd1bWVudHNbMl0gJiAweEZGKSAqIDB4MDAwMDAxMDBcbiAgICAgICAgICAgICAgICArIChhcmd1bWVudHNbM10gJiAweEZGKSAqIDB4MDAwMDAwMDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCAxIG9yIDQgY29uc3RydWN0b3IgcGFyYW1ldGVycy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJhXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fYXJnYiAvIDB4MDEwMDAwMDApICYgMHhGRjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fYXJnYiAvIDB4MDAwMTAwMDApICYgMHhGRjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJnXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fYXJnYiAvIDB4MDAwMDAxMDApICYgMHhGRjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJiXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fYXJnYiAvIDB4MDAwMDAwMDEpICYgMHhGRjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJhcmdiXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJnYjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJoZXhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmEgPT09IDB4RkYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFwiI1wiICsgdGhpcy5fY29tcG9uZW50VG9IZXgodGhpcy5yKSArIHRoaXMuX2NvbXBvbmVudFRvSGV4KHRoaXMuZykgKyB0aGlzLl9jb21wb25lbnRUb0hleCh0aGlzLmIpKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIiNcIiArIHRoaXMuX2NvbXBvbmVudFRvSGV4KHRoaXMuYSkgKyB0aGlzLl9jb21wb25lbnRUb0hleCh0aGlzLnIpICsgdGhpcy5fY29tcG9uZW50VG9IZXgodGhpcy5nKSArIHRoaXMuX2NvbXBvbmVudFRvSGV4KHRoaXMuYikpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwibmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwiaW9zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcImFuZHJvaWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIENvbG9yLnByb3RvdHlwZS5fYXJnYkZyb21TdHJpbmcgPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgICAgIGlmIChoZXguY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICAgICAgaGV4ID0gaGV4LnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgaGV4ID0gaGV4WzBdICsgaGV4WzBdICsgaGV4WzFdICsgaGV4WzFdICsgaGV4WzJdICsgaGV4WzJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIGhleCA9IGhleFswXSArIGhleFswXSArIGhleFsxXSArIGhleFsxXSArIGhleFsyXSArIGhleFsyXSArIGhleFszXSArIGhleFszXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW50VmFsID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgICAgIGlmIChoZXgubGVuZ3RoID09PSA2KSB7XG4gICAgICAgICAgICBpbnRWYWwgPSAoaW50VmFsICYgMHgwMEZGRkZGRikgKyAweEZGMDAwMDAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRWYWw7XG4gICAgfTtcbiAgICBDb2xvci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiB0aGlzLmFyZ2IgPT09IHZhbHVlLmFyZ2I7XG4gICAgfTtcbiAgICBDb2xvci5lcXVhbHMgPSBmdW5jdGlvbiAodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgaWYgKCF2YWx1ZTEgJiYgIXZhbHVlMikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWx1ZTEgfHwgIXZhbHVlMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTEuZXF1YWxzKHZhbHVlMik7XG4gICAgfTtcbiAgICBDb2xvci5pc1ZhbGlkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlcy5pc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0eXBlcy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa25vd25Db2xvcnMuaXNLbm93bk5hbWUodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSEVYX1JFR0VYLnRlc3QodmFsdWUpIHx8IGlzUmdiT3JSZ2JhKHZhbHVlKSB8fCBpc0hzbE9ySHNsYSh2YWx1ZSk7XG4gICAgfTtcbiAgICBDb2xvci5wcm90b3R5cGUuX2NvbXBvbmVudFRvSGV4ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgaGV4ID0gY29tcG9uZW50LnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGhleCA9IFwiMFwiICsgaGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZXg7XG4gICAgfTtcbiAgICBDb2xvci5wcm90b3R5cGUuX25vcm1hbGl6ZUhleCA9IGZ1bmN0aW9uIChoZXhTdHIpIHtcbiAgICAgICAgaWYgKGhleFN0ci5jaGFyQXQoMCkgPT09IFNIQVJQICYmIGhleFN0ci5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIGhleFN0ciA9IGhleFN0ci5jaGFyQXQoMClcbiAgICAgICAgICAgICAgICArIGhleFN0ci5jaGFyQXQoMSkgKyBoZXhTdHIuY2hhckF0KDEpXG4gICAgICAgICAgICAgICAgKyBoZXhTdHIuY2hhckF0KDIpICsgaGV4U3RyLmNoYXJBdCgyKVxuICAgICAgICAgICAgICAgICsgaGV4U3RyLmNoYXJBdCgzKSArIGhleFN0ci5jaGFyQXQoMyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleFN0cjtcbiAgICB9O1xuICAgIENvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGV4O1xuICAgIH07XG4gICAgQ29sb3IuZnJvbUlvc0NvbG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQ29sb3I7XG59KCkpO1xuZXhwb3J0cy5Db2xvciA9IENvbG9yO1xuZnVuY3Rpb24gaXNSZ2JPclJnYmEodmFsdWUpIHtcbiAgICB2YXIgdG9Mb3dlciA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuICh0b0xvd2VyLmluZGV4T2YoXCJyZ2IoXCIpID09PSAwIHx8IHRvTG93ZXIuaW5kZXhPZihcInJnYmEoXCIpID09PSAwKSAmJiB0b0xvd2VyLmluZGV4T2YoXCIpXCIpID09PSAodG9Mb3dlci5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIGlzSHNsT3JIc2xhKHZhbHVlKSB7XG4gICAgdmFyIHRvTG93ZXIgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAodG9Mb3dlci5pbmRleE9mKFwiaHNsKFwiKSA9PT0gMCB8fCB0b0xvd2VyLmluZGV4T2YoXCJoc2xhKFwiKSA9PT0gMCkgJiYgdG9Mb3dlci5pbmRleE9mKFwiKVwiKSA9PT0gKHRvTG93ZXIubGVuZ3RoIC0gMSk7XG59XG5mdW5jdGlvbiBwYXJzZUNvbG9yV2l0aEFscGhhKHZhbHVlKSB7XG4gICAgdmFyIHRvTG93ZXIgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBwYXJ0cyA9IHRvTG93ZXIucmVwbGFjZSgvKHJnYnxoc2wpYT9cXCgvLCBcIlwiKVxuICAgICAgICAucmVwbGFjZShcIilcIiwgXCJcIilcbiAgICAgICAgLnRyaW0oKS5zcGxpdChcIixcIik7XG4gICAgdmFyIGYgPSAyNTU7XG4gICAgdmFyIHMgPSAyNTU7XG4gICAgdmFyIHQgPSAyNTU7XG4gICAgdmFyIGEgPSAyNTU7XG4gICAgaWYgKHBhcnRzWzBdKSB7XG4gICAgICAgIGYgPSBwYXJzZUludChwYXJ0c1swXS50cmltKCkpO1xuICAgIH1cbiAgICBpZiAocGFydHNbMV0pIHtcbiAgICAgICAgcyA9IHBhcnNlSW50KHBhcnRzWzFdLnRyaW0oKSk7XG4gICAgfVxuICAgIGlmIChwYXJ0c1syXSkge1xuICAgICAgICB0ID0gcGFyc2VJbnQocGFydHNbMl0udHJpbSgpKTtcbiAgICB9XG4gICAgaWYgKHBhcnRzWzNdKSB7XG4gICAgICAgIGEgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQocGFydHNbM10udHJpbSgpKSAqIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiB7IGY6IGYsIHM6IHMsIHQ6IHQsIGE6IGEgfTtcbn1cbmZ1bmN0aW9uIGFyZ2JGcm9tUmdiT3JSZ2JhKHZhbHVlKSB7XG4gICAgdmFyIF9hID0gcGFyc2VDb2xvcldpdGhBbHBoYSh2YWx1ZSksIHIgPSBfYS5mLCBnID0gX2EucywgYiA9IF9hLnQsIGEgPSBfYS5hO1xuICAgIHJldHVybiAoYSAmIDB4RkYpICogMHgwMTAwMDAwMFxuICAgICAgICArIChyICYgMHhGRikgKiAweDAwMDEwMDAwXG4gICAgICAgICsgKGcgJiAweEZGKSAqIDB4MDAwMDAxMDBcbiAgICAgICAgKyAoYiAmIDB4RkYpO1xufVxuZnVuY3Rpb24gYXJnYkZyb21Ic2xPckhzbGEodmFsdWUpIHtcbiAgICB2YXIgX2EgPSBwYXJzZUNvbG9yV2l0aEFscGhhKHZhbHVlKSwgaCA9IF9hLmYsIHMgPSBfYS5zLCBsID0gX2EudCwgYSA9IF9hLmE7XG4gICAgdmFyIF9iID0gcGFyc2VyXzEuY29udmVydEhTTFRvUkdCQ29sb3IoaCwgcywgbCksIHIgPSBfYi5yLCBnID0gX2IuZywgYiA9IF9iLmI7XG4gICAgcmV0dXJuIChhICYgMHhGRikgKiAweDAxMDAwMDAwXG4gICAgICAgICsgKHIgJiAweEZGKSAqIDB4MDAwMTAwMDBcbiAgICAgICAgKyAoZyAmIDB4RkYpICogMHgwMDAwMDEwMFxuICAgICAgICArIChiICYgMHhGRik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvci1jb21tb24uanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbG9yLWNvbW1vblwiKTtcbnZhciBDb2xvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwiaW9zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lvcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lvcyA9IFVJQ29sb3IuYWxsb2MoKS5pbml0V2l0aFJlZEdyZWVuQmx1ZUFscGhhKHRoaXMuciAvIDI1NSwgdGhpcy5nIC8gMjU1LCB0aGlzLmIgLyAyNTUsIHRoaXMuYSAvIDI1NSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW9zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBDb2xvci5mcm9tSW9zQ29sb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJnYmEgPSBDR0NvbG9yR2V0Q29tcG9uZW50cyh2YWx1ZS5DR0NvbG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihNYXRoLnJvdW5kKHJnYmFbM10gKiAyNTUpLCBNYXRoLnJvdW5kKHJnYmFbMF0gKiAyNTUpLCBNYXRoLnJvdW5kKHJnYmFbMV0gKiAyNTUpLCBNYXRoLnJvdW5kKHJnYmFbMl0gKiAyNTUpKTtcbiAgICB9O1xuICAgIHJldHVybiBDb2xvcjtcbn0oY29tbW9uLkNvbG9yKSk7XG5leHBvcnRzLkNvbG9yID0gQ29sb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvci5pb3MuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIF9hbGxDb2xvcnMgPSB7fTtcbmZ1bmN0aW9uIHJlZ2lzdGVyQ29sb3IobmFtZSwgdmFsdWUpIHtcbiAgICBfYWxsQ29sb3JzW25hbWUudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBpc0tub3duTmFtZShuYW1lKSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCkgaW4gX2FsbENvbG9ycztcbn1cbmV4cG9ydHMuaXNLbm93bk5hbWUgPSBpc0tub3duTmFtZTtcbmZ1bmN0aW9uIGdldEtub3duQ29sb3IobmFtZSkge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gX2FsbENvbG9yc1tuYW1lLnRvTG93ZXJDYXNlKCldO1xufVxuZXhwb3J0cy5nZXRLbm93bkNvbG9yID0gZ2V0S25vd25Db2xvcjtcbmV4cG9ydHMuVHJhbnNwYXJlbnQgPSByZWdpc3RlckNvbG9yKFwiVHJhbnNwYXJlbnRcIiwgXCIjMDAwMDAwMDBcIik7XG5leHBvcnRzLkFsaWNlQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJBbGljZUJsdWVcIiwgXCIjRjBGOEZGXCIpO1xuZXhwb3J0cy5BbnRpcXVlV2hpdGUgPSByZWdpc3RlckNvbG9yKFwiQW50aXF1ZVdoaXRlXCIsIFwiI0ZBRUJEN1wiKTtcbmV4cG9ydHMuQXF1YSA9IHJlZ2lzdGVyQ29sb3IoXCJBcXVhXCIsIFwiIzAwRkZGRlwiKTtcbmV4cG9ydHMuQXF1YW1hcmluZSA9IHJlZ2lzdGVyQ29sb3IoXCJBcXVhbWFyaW5lXCIsIFwiIzdGRkZENFwiKTtcbmV4cG9ydHMuQXp1cmUgPSByZWdpc3RlckNvbG9yKFwiQXp1cmVcIiwgXCIjRjBGRkZGXCIpO1xuZXhwb3J0cy5CZWlnZSA9IHJlZ2lzdGVyQ29sb3IoXCJCZWlnZVwiLCBcIiNGNUY1RENcIik7XG5leHBvcnRzLkJpc3F1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJCaXNxdWVcIiwgXCIjRkZFNEM0XCIpO1xuZXhwb3J0cy5CbGFjayA9IHJlZ2lzdGVyQ29sb3IoXCJCbGFja1wiLCBcIiMwMDAwMDBcIik7XG5leHBvcnRzLkJsYW5jaGVkQWxtb25kID0gcmVnaXN0ZXJDb2xvcihcIkJsYW5jaGVkQWxtb25kXCIsIFwiI0ZGRUJDRFwiKTtcbmV4cG9ydHMuQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJCbHVlXCIsIFwiIzAwMDBGRlwiKTtcbmV4cG9ydHMuQmx1ZVZpb2xldCA9IHJlZ2lzdGVyQ29sb3IoXCJCbHVlVmlvbGV0XCIsIFwiIzhBMkJFMlwiKTtcbmV4cG9ydHMuQnJvd24gPSByZWdpc3RlckNvbG9yKFwiQnJvd25cIiwgXCIjQTUyQTJBXCIpO1xuZXhwb3J0cy5CdXJseVdvb2QgPSByZWdpc3RlckNvbG9yKFwiQnVybHlXb29kXCIsIFwiI0RFQjg4N1wiKTtcbmV4cG9ydHMuQ2FkZXRCbHVlID0gcmVnaXN0ZXJDb2xvcihcIkNhZGV0Qmx1ZVwiLCBcIiM1RjlFQTBcIik7XG5leHBvcnRzLkNoYXJ0cmV1c2UgPSByZWdpc3RlckNvbG9yKFwiQ2hhcnRyZXVzZVwiLCBcIiM3RkZGMDBcIik7XG5leHBvcnRzLkNob2NvbGF0ZSA9IHJlZ2lzdGVyQ29sb3IoXCJDaG9jb2xhdGVcIiwgXCIjRDI2OTFFXCIpO1xuZXhwb3J0cy5Db3JhbCA9IHJlZ2lzdGVyQ29sb3IoXCJDb3JhbFwiLCBcIiNGRjdGNTBcIik7XG5leHBvcnRzLkNvcm5mbG93ZXJCbHVlID0gcmVnaXN0ZXJDb2xvcihcIkNvcm5mbG93ZXJCbHVlXCIsIFwiIzY0OTVFRFwiKTtcbmV4cG9ydHMuQ29ybnNpbGsgPSByZWdpc3RlckNvbG9yKFwiQ29ybnNpbGtcIiwgXCIjRkZGOERDXCIpO1xuZXhwb3J0cy5Dcmltc29uID0gcmVnaXN0ZXJDb2xvcihcIkNyaW1zb25cIiwgXCIjREMxNDNDXCIpO1xuZXhwb3J0cy5DeWFuID0gcmVnaXN0ZXJDb2xvcihcIkN5YW5cIiwgXCIjMDBGRkZGXCIpO1xuZXhwb3J0cy5EYXJrQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrQmx1ZVwiLCBcIiMwMDAwOEJcIik7XG5leHBvcnRzLkRhcmtDeWFuID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtDeWFuXCIsIFwiIzAwOEI4QlwiKTtcbmV4cG9ydHMuRGFya0dvbGRlblJvZCA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrR29sZGVuUm9kXCIsIFwiI0I4ODYwQlwiKTtcbmV4cG9ydHMuRGFya0dyYXkgPSByZWdpc3RlckNvbG9yKFwiRGFya0dyYXlcIiwgXCIjQTlBOUE5XCIpO1xuZXhwb3J0cy5EYXJrR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiRGFya0dyZWVuXCIsIFwiIzAwNjQwMFwiKTtcbmV4cG9ydHMuRGFya0toYWtpID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtLaGFraVwiLCBcIiNCREI3NkJcIik7XG5leHBvcnRzLkRhcmtNYWdlbnRhID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtNYWdlbnRhXCIsIFwiIzhCMDA4QlwiKTtcbmV4cG9ydHMuRGFya09saXZlR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiRGFya09saXZlR3JlZW5cIiwgXCIjNTU2QjJGXCIpO1xuZXhwb3J0cy5EYXJrT3JhbmdlID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtPcmFuZ2VcIiwgXCIjRkY4QzAwXCIpO1xuZXhwb3J0cy5EYXJrT3JjaGlkID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtPcmNoaWRcIiwgXCIjOTkzMkNDXCIpO1xuZXhwb3J0cy5EYXJrUmVkID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtSZWRcIiwgXCIjOEIwMDAwXCIpO1xuZXhwb3J0cy5EYXJrU2FsbW9uID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtTYWxtb25cIiwgXCIjRTk5NjdBXCIpO1xuZXhwb3J0cy5EYXJrU2VhR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiRGFya1NlYUdyZWVuXCIsIFwiIzhGQkM4RlwiKTtcbmV4cG9ydHMuRGFya1NsYXRlQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrU2xhdGVCbHVlXCIsIFwiIzQ4M0Q4QlwiKTtcbmV4cG9ydHMuRGFya1NsYXRlR3JheSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrU2xhdGVHcmF5XCIsIFwiIzJGNEY0RlwiKTtcbmV4cG9ydHMuRGFya1R1cnF1b2lzZSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrVHVycXVvaXNlXCIsIFwiIzAwQ0VEMVwiKTtcbmV4cG9ydHMuRGFya1Zpb2xldCA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrVmlvbGV0XCIsIFwiIzk0MDBEM1wiKTtcbmV4cG9ydHMuRGVlcFBpbmsgPSByZWdpc3RlckNvbG9yKFwiRGVlcFBpbmtcIiwgXCIjRkYxNDkzXCIpO1xuZXhwb3J0cy5EZWVwU2t5Qmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJEZWVwU2t5Qmx1ZVwiLCBcIiMwMEJGRkZcIik7XG5leHBvcnRzLkRpbUdyYXkgPSByZWdpc3RlckNvbG9yKFwiRGltR3JheVwiLCBcIiM2OTY5NjlcIik7XG5leHBvcnRzLkRvZGdlckJsdWUgPSByZWdpc3RlckNvbG9yKFwiRG9kZ2VyQmx1ZVwiLCBcIiMxRTkwRkZcIik7XG5leHBvcnRzLkZpcmVCcmljayA9IHJlZ2lzdGVyQ29sb3IoXCJGaXJlQnJpY2tcIiwgXCIjQjIyMjIyXCIpO1xuZXhwb3J0cy5GbG9yYWxXaGl0ZSA9IHJlZ2lzdGVyQ29sb3IoXCJGbG9yYWxXaGl0ZVwiLCBcIiNGRkZBRjBcIik7XG5leHBvcnRzLkZvcmVzdEdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkZvcmVzdEdyZWVuXCIsIFwiIzIyOEIyMlwiKTtcbmV4cG9ydHMuRnVjaHNpYSA9IHJlZ2lzdGVyQ29sb3IoXCJGdWNoc2lhXCIsIFwiI0ZGMDBGRlwiKTtcbmV4cG9ydHMuR2FpbnNib3JvID0gcmVnaXN0ZXJDb2xvcihcIkdhaW5zYm9yb1wiLCBcIiNEQ0RDRENcIik7XG5leHBvcnRzLkdob3N0V2hpdGUgPSByZWdpc3RlckNvbG9yKFwiR2hvc3RXaGl0ZVwiLCBcIiNGOEY4RkZcIik7XG5leHBvcnRzLkdvbGQgPSByZWdpc3RlckNvbG9yKFwiR29sZFwiLCBcIiNGRkQ3MDBcIik7XG5leHBvcnRzLkdvbGRlblJvZCA9IHJlZ2lzdGVyQ29sb3IoXCJHb2xkZW5Sb2RcIiwgXCIjREFBNTIwXCIpO1xuZXhwb3J0cy5HcmF5ID0gcmVnaXN0ZXJDb2xvcihcIkdyYXlcIiwgXCIjODA4MDgwXCIpO1xuZXhwb3J0cy5HcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJHcmVlblwiLCBcIiMwMDgwMDBcIik7XG5leHBvcnRzLkdyZWVuWWVsbG93ID0gcmVnaXN0ZXJDb2xvcihcIkdyZWVuWWVsbG93XCIsIFwiI0FERkYyRlwiKTtcbmV4cG9ydHMuSG9uZXlEZXcgPSByZWdpc3RlckNvbG9yKFwiSG9uZXlEZXdcIiwgXCIjRjBGRkYwXCIpO1xuZXhwb3J0cy5Ib3RQaW5rID0gcmVnaXN0ZXJDb2xvcihcIkhvdFBpbmtcIiwgXCIjRkY2OUI0XCIpO1xuZXhwb3J0cy5JbmRpYW5SZWQgPSByZWdpc3RlckNvbG9yKFwiSW5kaWFuUmVkXCIsIFwiI0NENUM1Q1wiKTtcbmV4cG9ydHMuSW5kaWdvID0gcmVnaXN0ZXJDb2xvcihcIkluZGlnb1wiLCBcIiM0QjAwODJcIik7XG5leHBvcnRzLkl2b3J5ID0gcmVnaXN0ZXJDb2xvcihcIkl2b3J5XCIsIFwiI0ZGRkZGMFwiKTtcbmV4cG9ydHMuS2hha2kgPSByZWdpc3RlckNvbG9yKFwiS2hha2lcIiwgXCIjRjBFNjhDXCIpO1xuZXhwb3J0cy5MYXZlbmRlciA9IHJlZ2lzdGVyQ29sb3IoXCJMYXZlbmRlclwiLCBcIiNFNkU2RkFcIik7XG5leHBvcnRzLkxhdmVuZGVyQmx1c2ggPSByZWdpc3RlckNvbG9yKFwiTGF2ZW5kZXJCbHVzaFwiLCBcIiNGRkYwRjVcIik7XG5leHBvcnRzLkxhd25HcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJMYXduR3JlZW5cIiwgXCIjN0NGQzAwXCIpO1xuZXhwb3J0cy5MZW1vbkNoaWZmb24gPSByZWdpc3RlckNvbG9yKFwiTGVtb25DaGlmZm9uXCIsIFwiI0ZGRkFDRFwiKTtcbmV4cG9ydHMuTGlnaHRCbHVlID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0Qmx1ZVwiLCBcIiNBREQ4RTZcIik7XG5leHBvcnRzLkxpZ2h0Q29yYWwgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRDb3JhbFwiLCBcIiNGMDgwODBcIik7XG5leHBvcnRzLkxpZ2h0Q3lhbiA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodEN5YW5cIiwgXCIjRTBGRkZGXCIpO1xuZXhwb3J0cy5MaWdodEdvbGRlblJvZFllbGxvdyA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodEdvbGRlblJvZFllbGxvd1wiLCBcIiNGQUZBRDJcIik7XG5leHBvcnRzLkxpZ2h0R3JheSA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodEdyYXlcIiwgXCIjRDNEM0QzXCIpO1xuZXhwb3J0cy5MaWdodEdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0R3JlZW5cIiwgXCIjOTBFRTkwXCIpO1xuZXhwb3J0cy5MaWdodFBpbmsgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRQaW5rXCIsIFwiI0ZGQjZDMVwiKTtcbmV4cG9ydHMuTGlnaHRTYWxtb24gPSByZWdpc3RlckNvbG9yKFwiTGlnaHRTYWxtb25cIiwgXCIjRkZBMDdBXCIpO1xuZXhwb3J0cy5MaWdodFNlYUdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0U2VhR3JlZW5cIiwgXCIjMjBCMkFBXCIpO1xuZXhwb3J0cy5MaWdodFNreUJsdWUgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRTa3lCbHVlXCIsIFwiIzg3Q0VGQVwiKTtcbmV4cG9ydHMuTGlnaHRTbGF0ZUdyYXkgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRTbGF0ZUdyYXlcIiwgXCIjNzc4ODk5XCIpO1xuZXhwb3J0cy5MaWdodFN0ZWVsQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodFN0ZWVsQmx1ZVwiLCBcIiNCMEM0REVcIik7XG5leHBvcnRzLkxpZ2h0WWVsbG93ID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0WWVsbG93XCIsIFwiI0ZGRkZFMFwiKTtcbmV4cG9ydHMuTGltZSA9IHJlZ2lzdGVyQ29sb3IoXCJMaW1lXCIsIFwiIzAwRkYwMFwiKTtcbmV4cG9ydHMuTGltZUdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkxpbWVHcmVlblwiLCBcIiMzMkNEMzJcIik7XG5leHBvcnRzLkxpbmVuID0gcmVnaXN0ZXJDb2xvcihcIkxpbmVuXCIsIFwiI0ZBRjBFNlwiKTtcbmV4cG9ydHMuTWFnZW50YSA9IHJlZ2lzdGVyQ29sb3IoXCJNYWdlbnRhXCIsIFwiI0ZGMDBGRlwiKTtcbmV4cG9ydHMuTWFyb29uID0gcmVnaXN0ZXJDb2xvcihcIk1hcm9vblwiLCBcIiM4MDAwMDBcIik7XG5leHBvcnRzLk1lZGl1bUFxdWFNYXJpbmUgPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtQXF1YU1hcmluZVwiLCBcIiM2NkNEQUFcIik7XG5leHBvcnRzLk1lZGl1bUJsdWUgPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtQmx1ZVwiLCBcIiMwMDAwQ0RcIik7XG5leHBvcnRzLk1lZGl1bU9yY2hpZCA9IHJlZ2lzdGVyQ29sb3IoXCJNZWRpdW1PcmNoaWRcIiwgXCIjQkE1NUQzXCIpO1xuZXhwb3J0cy5NZWRpdW1QdXJwbGUgPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtUHVycGxlXCIsIFwiIzkzNzBEQlwiKTtcbmV4cG9ydHMuTWVkaXVtU2VhR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtU2VhR3JlZW5cIiwgXCIjM0NCMzcxXCIpO1xuZXhwb3J0cy5NZWRpdW1TbGF0ZUJsdWUgPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtU2xhdGVCbHVlXCIsIFwiIzdCNjhFRVwiKTtcbmV4cG9ydHMuTWVkaXVtU3ByaW5nR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtU3ByaW5nR3JlZW5cIiwgXCIjMDBGQTlBXCIpO1xuZXhwb3J0cy5NZWRpdW1UdXJxdW9pc2UgPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtVHVycXVvaXNlXCIsIFwiIzQ4RDFDQ1wiKTtcbmV4cG9ydHMuTWVkaXVtVmlvbGV0UmVkID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bVZpb2xldFJlZFwiLCBcIiNDNzE1ODVcIik7XG5leHBvcnRzLk1pZG5pZ2h0Qmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJNaWRuaWdodEJsdWVcIiwgXCIjMTkxOTcwXCIpO1xuZXhwb3J0cy5NaW50Q3JlYW0gPSByZWdpc3RlckNvbG9yKFwiTWludENyZWFtXCIsIFwiI0Y1RkZGQVwiKTtcbmV4cG9ydHMuTWlzdHlSb3NlID0gcmVnaXN0ZXJDb2xvcihcIk1pc3R5Um9zZVwiLCBcIiNGRkU0RTFcIik7XG5leHBvcnRzLk1vY2Nhc2luID0gcmVnaXN0ZXJDb2xvcihcIk1vY2Nhc2luXCIsIFwiI0ZGRTRCNVwiKTtcbmV4cG9ydHMuTmF2YWpvV2hpdGUgPSByZWdpc3RlckNvbG9yKFwiTmF2YWpvV2hpdGVcIiwgXCIjRkZERUFEXCIpO1xuZXhwb3J0cy5OYXZ5ID0gcmVnaXN0ZXJDb2xvcihcIk5hdnlcIiwgXCIjMDAwMDgwXCIpO1xuZXhwb3J0cy5PbGRMYWNlID0gcmVnaXN0ZXJDb2xvcihcIk9sZExhY2VcIiwgXCIjRkRGNUU2XCIpO1xuZXhwb3J0cy5PbGl2ZSA9IHJlZ2lzdGVyQ29sb3IoXCJPbGl2ZVwiLCBcIiM4MDgwMDBcIik7XG5leHBvcnRzLk9saXZlRHJhYiA9IHJlZ2lzdGVyQ29sb3IoXCJPbGl2ZURyYWJcIiwgXCIjNkI4RTIzXCIpO1xuZXhwb3J0cy5PcmFuZ2UgPSByZWdpc3RlckNvbG9yKFwiT3JhbmdlXCIsIFwiI0ZGQTUwMFwiKTtcbmV4cG9ydHMuT3JhbmdlUmVkID0gcmVnaXN0ZXJDb2xvcihcIk9yYW5nZVJlZFwiLCBcIiNGRjQ1MDBcIik7XG5leHBvcnRzLk9yY2hpZCA9IHJlZ2lzdGVyQ29sb3IoXCJPcmNoaWRcIiwgXCIjREE3MEQ2XCIpO1xuZXhwb3J0cy5QYWxlR29sZGVuUm9kID0gcmVnaXN0ZXJDb2xvcihcIlBhbGVHb2xkZW5Sb2RcIiwgXCIjRUVFOEFBXCIpO1xuZXhwb3J0cy5QYWxlR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiUGFsZUdyZWVuXCIsIFwiIzk4RkI5OFwiKTtcbmV4cG9ydHMuUGFsZVR1cnF1b2lzZSA9IHJlZ2lzdGVyQ29sb3IoXCJQYWxlVHVycXVvaXNlXCIsIFwiI0FGRUVFRVwiKTtcbmV4cG9ydHMuUGFsZVZpb2xldFJlZCA9IHJlZ2lzdGVyQ29sb3IoXCJQYWxlVmlvbGV0UmVkXCIsIFwiI0RCNzA5M1wiKTtcbmV4cG9ydHMuUGFwYXlhV2hpcCA9IHJlZ2lzdGVyQ29sb3IoXCJQYXBheWFXaGlwXCIsIFwiI0ZGRUZENVwiKTtcbmV4cG9ydHMuUGVhY2hQdWZmID0gcmVnaXN0ZXJDb2xvcihcIlBlYWNoUHVmZlwiLCBcIiNGRkRBQjlcIik7XG5leHBvcnRzLlBlcnUgPSByZWdpc3RlckNvbG9yKFwiUGVydVwiLCBcIiNDRDg1M0ZcIik7XG5leHBvcnRzLlBpbmsgPSByZWdpc3RlckNvbG9yKFwiUGlua1wiLCBcIiNGRkMwQ0JcIik7XG5leHBvcnRzLlBsdW0gPSByZWdpc3RlckNvbG9yKFwiUGx1bVwiLCBcIiNEREEwRERcIik7XG5leHBvcnRzLlBvd2RlckJsdWUgPSByZWdpc3RlckNvbG9yKFwiUG93ZGVyQmx1ZVwiLCBcIiNCMEUwRTZcIik7XG5leHBvcnRzLlB1cnBsZSA9IHJlZ2lzdGVyQ29sb3IoXCJQdXJwbGVcIiwgXCIjODAwMDgwXCIpO1xuZXhwb3J0cy5SZWJlY2NhUHVycGxlID0gcmVnaXN0ZXJDb2xvcihcIlJlYmVjY2FQdXJwbGVcIiwgXCIjNjYzMzk5XCIpO1xuZXhwb3J0cy5SZWQgPSByZWdpc3RlckNvbG9yKFwiUmVkXCIsIFwiI0ZGMDAwMFwiKTtcbmV4cG9ydHMuUm9zeUJyb3duID0gcmVnaXN0ZXJDb2xvcihcIlJvc3lCcm93blwiLCBcIiNCQzhGOEZcIik7XG5leHBvcnRzLlJveWFsQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJSb3lhbEJsdWVcIiwgXCIjNDE2OUUxXCIpO1xuZXhwb3J0cy5TYWRkbGVCcm93biA9IHJlZ2lzdGVyQ29sb3IoXCJTYWRkbGVCcm93blwiLCBcIiM4QjQ1MTNcIik7XG5leHBvcnRzLlNhbG1vbiA9IHJlZ2lzdGVyQ29sb3IoXCJTYWxtb25cIiwgXCIjRkE4MDcyXCIpO1xuZXhwb3J0cy5TYW5keUJyb3duID0gcmVnaXN0ZXJDb2xvcihcIlNhbmR5QnJvd25cIiwgXCIjRjRBNDYwXCIpO1xuZXhwb3J0cy5TZWFHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJTZWFHcmVlblwiLCBcIiMyRThCNTdcIik7XG5leHBvcnRzLlNlYVNoZWxsID0gcmVnaXN0ZXJDb2xvcihcIlNlYVNoZWxsXCIsIFwiI0ZGRjVFRVwiKTtcbmV4cG9ydHMuU2llbm5hID0gcmVnaXN0ZXJDb2xvcihcIlNpZW5uYVwiLCBcIiNBMDUyMkRcIik7XG5leHBvcnRzLlNpbHZlciA9IHJlZ2lzdGVyQ29sb3IoXCJTaWx2ZXJcIiwgXCIjQzBDMEMwXCIpO1xuZXhwb3J0cy5Ta3lCbHVlID0gcmVnaXN0ZXJDb2xvcihcIlNreUJsdWVcIiwgXCIjODdDRUVCXCIpO1xuZXhwb3J0cy5TbGF0ZUJsdWUgPSByZWdpc3RlckNvbG9yKFwiU2xhdGVCbHVlXCIsIFwiIzZBNUFDRFwiKTtcbmV4cG9ydHMuU2xhdGVHcmF5ID0gcmVnaXN0ZXJDb2xvcihcIlNsYXRlR3JheVwiLCBcIiM3MDgwOTBcIik7XG5leHBvcnRzLlNub3cgPSByZWdpc3RlckNvbG9yKFwiU25vd1wiLCBcIiNGRkZBRkFcIik7XG5leHBvcnRzLlNwcmluZ0dyZWVuID0gcmVnaXN0ZXJDb2xvcihcIlNwcmluZ0dyZWVuXCIsIFwiIzAwRkY3RlwiKTtcbmV4cG9ydHMuU3RlZWxCbHVlID0gcmVnaXN0ZXJDb2xvcihcIlN0ZWVsQmx1ZVwiLCBcIiM0NjgyQjRcIik7XG5leHBvcnRzLlRhbiA9IHJlZ2lzdGVyQ29sb3IoXCJUYW5cIiwgXCIjRDJCNDhDXCIpO1xuZXhwb3J0cy5UZWFsID0gcmVnaXN0ZXJDb2xvcihcIlRlYWxcIiwgXCIjMDA4MDgwXCIpO1xuZXhwb3J0cy5UaGlzdGxlID0gcmVnaXN0ZXJDb2xvcihcIlRoaXN0bGVcIiwgXCIjRDhCRkQ4XCIpO1xuZXhwb3J0cy5Ub21hdG8gPSByZWdpc3RlckNvbG9yKFwiVG9tYXRvXCIsIFwiI0ZGNjM0N1wiKTtcbmV4cG9ydHMuVHVycXVvaXNlID0gcmVnaXN0ZXJDb2xvcihcIlR1cnF1b2lzZVwiLCBcIiM0MEUwRDBcIik7XG5leHBvcnRzLlZpb2xldCA9IHJlZ2lzdGVyQ29sb3IoXCJWaW9sZXRcIiwgXCIjRUU4MkVFXCIpO1xuZXhwb3J0cy5XaGVhdCA9IHJlZ2lzdGVyQ29sb3IoXCJXaGVhdFwiLCBcIiNGNURFQjNcIik7XG5leHBvcnRzLldoaXRlID0gcmVnaXN0ZXJDb2xvcihcIldoaXRlXCIsIFwiI0ZGRkZGRlwiKTtcbmV4cG9ydHMuV2hpdGVTbW9rZSA9IHJlZ2lzdGVyQ29sb3IoXCJXaGl0ZVNtb2tlXCIsIFwiI0Y1RjVGNVwiKTtcbmV4cG9ydHMuWWVsbG93ID0gcmVnaXN0ZXJDb2xvcihcIlllbGxvd1wiLCBcIiNGRkZGMDBcIik7XG5leHBvcnRzLlllbGxvd0dyZWVuID0gcmVnaXN0ZXJDb2xvcihcIlllbGxvd0dyZWVuXCIsIFwiIzlBQ0QzMlwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtub3duLWNvbG9ycy5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXJsUmVnRXggPSAvXFxzKnVybFxcKCg/OignfFwiKShbXlxcMV0qKVxcMXwoW15cXCldKikpXFwpXFxzKi9neTtcbmZ1bmN0aW9uIHBhcnNlVVJMKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdXJsUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHVybFJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSB1cmxSZWdFeC5sYXN0SW5kZXg7XG4gICAgdmFyIHZhbHVlID0gcmVzdWx0WzJdIHx8IHJlc3VsdFszXTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VVUkwgPSBwYXJzZVVSTDtcbnZhciBoZXhDb2xvclJlZ0V4ID0gL1xccyojKCg/OlswLTlBLUZdezh9KXwoPzpbMC05QS1GXXs2fSl8KD86WzAtOUEtRl17M30pKVxccyovZ2l5O1xuZnVuY3Rpb24gcGFyc2VIZXhDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGhleENvbG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IGhleENvbG9yUmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGhleENvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciBoZXggPSByZXN1bHRbMV07XG4gICAgdmFyIGFyZ2I7XG4gICAgaWYgKGhleC5sZW5ndGggPT09IDgpIHtcbiAgICAgICAgYXJnYiA9IHBhcnNlSW50KFwiMHhcIiArIGhleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgYXJnYiA9IHBhcnNlSW50KFwiMHhGRlwiICsgaGV4KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICBhcmdiID0gcGFyc2VJbnQoXCIweEZGXCIgKyBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl0pO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogYXJnYiB9O1xufVxuZXhwb3J0cy5wYXJzZUhleENvbG9yID0gcGFyc2VIZXhDb2xvcjtcbmZ1bmN0aW9uIHJnYmFUb0FyZ2JOdW1iZXIociwgZywgYiwgYSkge1xuICAgIGlmIChhID09PSB2b2lkIDApIHsgYSA9IDE7IH1cbiAgICBpZiAociA+PSAwICYmIHIgPD0gMjU1ICYmIGcgPj0gMCAmJiBnIDw9IDI1NSAmJiBiID49IDAgJiYgYiA8PSAyNTUgJiYgYSA+PSAwICYmIGEgPD0gMSkge1xuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQoYSAqIDB4RkYpICogMHgwMTAwMDAwMCkgKyAociAqIDB4MDEwMDAwKSArIChnICogMHgwMDAxMDApICsgYjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbnZhciByZ2JDb2xvclJlZ0V4ID0gL1xccyoocmdiXFwoXFxzKihcXGQqKVxccyosXFxzKihcXGQqKVxccyosXFxzKihcXGQqKVxccypcXCkpL2d5O1xuZnVuY3Rpb24gcGFyc2VSR0JDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHJnYkNvbG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHJnYkNvbG9yUmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IHJnYkNvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IHJlc3VsdFsxXSAmJiByZ2JhVG9BcmdiTnVtYmVyKHBhcnNlSW50KHJlc3VsdFsyXSksIHBhcnNlSW50KHJlc3VsdFszXSksIHBhcnNlSW50KHJlc3VsdFs0XSkpO1xuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0cy5wYXJzZVJHQkNvbG9yID0gcGFyc2VSR0JDb2xvcjtcbnZhciByZ2JhQ29sb3JSZWdFeCA9IC9cXHMqKHJnYmFcXChcXHMqKFxcZCopXFxzKixcXHMqKFxcZCopXFxzKixcXHMqKFxcZCopXFxzKixcXHMqKFswMV0/XFwuP1xcZCopXFxzKlxcKSkvZ3k7XG5mdW5jdGlvbiBwYXJzZVJHQkFDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHJnYmFDb2xvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSByZ2JhQ29sb3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gcmdiYUNvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IHJnYmFUb0FyZ2JOdW1iZXIocGFyc2VJbnQocmVzdWx0WzJdKSwgcGFyc2VJbnQocmVzdWx0WzNdKSwgcGFyc2VJbnQocmVzdWx0WzRdKSwgcGFyc2VGbG9hdChyZXN1bHRbNV0pKTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VSR0JBQ29sb3IgPSBwYXJzZVJHQkFDb2xvcjtcbmZ1bmN0aW9uIGNvbnZlcnRIU0xUb1JHQkNvbG9yKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzKSB7XG4gICAgaHVlIC89IDYwO1xuICAgIGxpZ2h0bmVzcyAvPSAxMDA7XG4gICAgdmFyIGNocm9tYSA9ICgxIC0gTWF0aC5hYnMoMiAqIGxpZ2h0bmVzcyAtIDEpKSAqIHNhdHVyYXRpb24gLyAxMDAsIFggPSBjaHJvbWEgKiAoMSAtIE1hdGguYWJzKGh1ZSAlIDIgLSAxKSksIF9hID0geyBtOiBsaWdodG5lc3MgLSBjaHJvbWEgLyAyIH0sIHIgPSBfYS5tLCBnID0gX2EubSwgYiA9IF9hLm07XG4gICAgaWYgKDAgPD0gaHVlICYmIGh1ZSA8IDEpIHtcbiAgICAgICAgciArPSBjaHJvbWE7XG4gICAgICAgIGcgKz0gWDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHVlIDwgMikge1xuICAgICAgICByICs9IFg7XG4gICAgICAgIGcgKz0gY2hyb21hO1xuICAgIH1cbiAgICBlbHNlIGlmIChodWUgPCAzKSB7XG4gICAgICAgIGcgKz0gY2hyb21hO1xuICAgICAgICBiICs9IFg7XG4gICAgfVxuICAgIGVsc2UgaWYgKGh1ZSA8IDQpIHtcbiAgICAgICAgZyArPSBYO1xuICAgICAgICBiICs9IGNocm9tYTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHVlIDwgNSkge1xuICAgICAgICByICs9IFg7XG4gICAgICAgIGIgKz0gY2hyb21hO1xuICAgIH1cbiAgICBlbHNlIGlmIChodWUgPCA2KSB7XG4gICAgICAgIHIgKz0gY2hyb21hO1xuICAgICAgICBiICs9IFg7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHI6IE1hdGgucm91bmQociAqIDB4RkYpLFxuICAgICAgICBnOiBNYXRoLnJvdW5kKGcgKiAweEZGKSxcbiAgICAgICAgYjogTWF0aC5yb3VuZChiICogMHhGRilcbiAgICB9O1xufVxuZXhwb3J0cy5jb252ZXJ0SFNMVG9SR0JDb2xvciA9IGNvbnZlcnRIU0xUb1JHQkNvbG9yO1xuZnVuY3Rpb24gaHNsYVRvQXJnYk51bWJlcihoLCBzLCBsLCBhKSB7XG4gICAgaWYgKGEgPT09IHZvaWQgMCkgeyBhID0gMTsgfVxuICAgIHZhciBfYSA9IGNvbnZlcnRIU0xUb1JHQkNvbG9yKGgsIHMsIGwpLCByID0gX2EuciwgZyA9IF9hLmcsIGIgPSBfYS5iO1xuICAgIGlmIChyID49IDAgJiYgciA8PSAyNTUgJiYgZyA+PSAwICYmIGcgPD0gMjU1ICYmIGIgPj0gMCAmJiBiIDw9IDI1NSAmJiBhID49IDAgJiYgYSA8PSAxKSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5yb3VuZChhICogMHhGRikgKiAweDAxMDAwMDAwKSArIChyICogMHgwMTAwMDApICsgKGcgKiAweDAwMDEwMCkgKyBiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxudmFyIGhzbENvbG9yUmVnRXggPSAvXFxzKihoc2xcXChcXHMqKFtcXGQuXSopXFxzKixcXHMqKFtcXGQuXSopJVxccyosXFxzKihbXFxkLl0qKSVcXHMqXFwpKS9neTtcbmZ1bmN0aW9uIHBhcnNlSFNMQ29sb3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBoc2xDb2xvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBoc2xDb2xvclJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBoc2xDb2xvclJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgdmFsdWUgPSByZXN1bHRbMV0gJiYgaHNsYVRvQXJnYk51bWJlcihwYXJzZUZsb2F0KHJlc3VsdFsyXSksIHBhcnNlRmxvYXQocmVzdWx0WzNdKSwgcGFyc2VGbG9hdChyZXN1bHRbNF0pKTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VIU0xDb2xvciA9IHBhcnNlSFNMQ29sb3I7XG52YXIgaHNsYUNvbG9yUmVnRXggPSAvXFxzKihoc2xhXFwoXFxzKihbXFxkLl0qKVxccyosXFxzKihbXFxkLl0qKSVcXHMqLFxccyooW1xcZC5dKiklXFxzKixcXHMqKFswMV0/XFwuP1xcZCopXFxzKlxcKSkvZ3k7XG5mdW5jdGlvbiBwYXJzZUhTTEFDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGhzbGFDb2xvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBoc2xhQ29sb3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gaHNsYUNvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IGhzbGFUb0FyZ2JOdW1iZXIocGFyc2VGbG9hdChyZXN1bHRbMl0pLCBwYXJzZUZsb2F0KHJlc3VsdFszXSksIHBhcnNlRmxvYXQocmVzdWx0WzRdKSwgcGFyc2VGbG9hdChyZXN1bHRbNV0pKTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VIU0xBQ29sb3IgPSBwYXJzZUhTTEFDb2xvcjtcbnZhciBjb2xvcnM7XG4oZnVuY3Rpb24gKGNvbG9ycykge1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ0cmFuc3BhcmVudFwiXSA9IDBdID0gXCJ0cmFuc3BhcmVudFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJhbGljZWJsdWVcIl0gPSA0MjkzOTgyNDYzXSA9IFwiYWxpY2VibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImFudGlxdWV3aGl0ZVwiXSA9IDQyOTQ2MzQ0NTVdID0gXCJhbnRpcXVld2hpdGVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiYXF1YVwiXSA9IDQyNzgyNTU2MTVdID0gXCJhcXVhXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImFxdWFtYXJpbmVcIl0gPSA0Mjg2NTc4NjQ0XSA9IFwiYXF1YW1hcmluZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJhenVyZVwiXSA9IDQyOTM5ODQyNTVdID0gXCJhenVyZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJiZWlnZVwiXSA9IDQyOTQzMDkzNDBdID0gXCJiZWlnZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJiaXNxdWVcIl0gPSA0Mjk0OTYwMzI0XSA9IFwiYmlzcXVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImJsYWNrXCJdID0gNDI3ODE5MDA4MF0gPSBcImJsYWNrXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImJsYW5jaGVkYWxtb25kXCJdID0gNDI5NDk2MjEyNV0gPSBcImJsYW5jaGVkYWxtb25kXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImJsdWVcIl0gPSA0Mjc4MTkwMzM1XSA9IFwiYmx1ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJibHVldmlvbGV0XCJdID0gNDI4NzI0NTI4Ml0gPSBcImJsdWV2aW9sZXRcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiYnJvd25cIl0gPSA0Mjg5MDE0MzE0XSA9IFwiYnJvd25cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiYnVybHl3b29kXCJdID0gNDI5Mjc4NjMxMV0gPSBcImJ1cmx5d29vZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJjYWRldGJsdWVcIl0gPSA0Mjg0NDU2NjA4XSA9IFwiY2FkZXRibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNoYXJ0cmV1c2VcIl0gPSA0Mjg2NTc4NDMyXSA9IFwiY2hhcnRyZXVzZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJjaG9jb2xhdGVcIl0gPSA0MjkxOTc5NTUwXSA9IFwiY2hvY29sYXRlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNvcmFsXCJdID0gNDI5NDkzNDM1Ml0gPSBcImNvcmFsXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNvcm5mbG93ZXJibHVlXCJdID0gNDI4NDc4MjA2MV0gPSBcImNvcm5mbG93ZXJibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNvcm5zaWxrXCJdID0gNDI5NDk2NTQ2OF0gPSBcImNvcm5zaWxrXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNyaW1zb25cIl0gPSA0MjkyNjEzMTgwXSA9IFwiY3JpbXNvblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJjeWFuXCJdID0gNDI3ODI1NTYxNV0gPSBcImN5YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2JsdWVcIl0gPSA0Mjc4MTkwMjE5XSA9IFwiZGFya2JsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2N5YW5cIl0gPSA0Mjc4MjI1ODAzXSA9IFwiZGFya2N5YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2dvbGRlbnJvZFwiXSA9IDQyOTAyODMwMTldID0gXCJkYXJrZ29sZGVucm9kXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtncmF5XCJdID0gNDI4OTMwOTA5N10gPSBcImRhcmtncmF5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtncmVlblwiXSA9IDQyNzgyMTU2ODBdID0gXCJkYXJrZ3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2dyZXlcIl0gPSA0Mjg5MzA5MDk3XSA9IFwiZGFya2dyZXlcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2toYWtpXCJdID0gNDI5MDYyMzMzOV0gPSBcImRhcmtraGFraVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrbWFnZW50YVwiXSA9IDQyODcyOTk3MjNdID0gXCJkYXJrbWFnZW50YVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrb2xpdmVncmVlblwiXSA9IDQyODM3ODgwNzldID0gXCJkYXJrb2xpdmVncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrb3JhbmdlXCJdID0gNDI5NDkzNzYwMF0gPSBcImRhcmtvcmFuZ2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya29yY2hpZFwiXSA9IDQyODgyMzAwOTJdID0gXCJkYXJrb3JjaGlkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtyZWRcIl0gPSA0Mjg3Mjk5NTg0XSA9IFwiZGFya3JlZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrc2FsbW9uXCJdID0gNDI5MzQ5ODQ5MF0gPSBcImRhcmtzYWxtb25cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya3NlYWdyZWVuXCJdID0gNDI4NzYwOTk5OV0gPSBcImRhcmtzZWFncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrc2xhdGVibHVlXCJdID0gNDI4MjkyNDQyN10gPSBcImRhcmtzbGF0ZWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya3NsYXRlZ3JheVwiXSA9IDQyODEyOTA1NzVdID0gXCJkYXJrc2xhdGVncmF5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtzbGF0ZWdyZXlcIl0gPSA0MjgxMjkwNTc1XSA9IFwiZGFya3NsYXRlZ3JleVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrdHVycXVvaXNlXCJdID0gNDI3ODI0MzAyNV0gPSBcImRhcmt0dXJxdW9pc2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya3Zpb2xldFwiXSA9IDQyODc4ODk2MTldID0gXCJkYXJrdmlvbGV0XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRlZXBwaW5rXCJdID0gNDI5NDkwNzAyN10gPSBcImRlZXBwaW5rXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRlZXBza3libHVlXCJdID0gNDI3ODIzOTIzMV0gPSBcImRlZXBza3libHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRpbWdyYXlcIl0gPSA0Mjg1MDk4MzQ1XSA9IFwiZGltZ3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkaW1ncmV5XCJdID0gNDI4NTA5ODM0NV0gPSBcImRpbWdyZXlcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZG9kZ2VyYmx1ZVwiXSA9IDQyODAxOTMyNzldID0gXCJkb2RnZXJibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImZpcmVicmlja1wiXSA9IDQyODk4NjQyMjZdID0gXCJmaXJlYnJpY2tcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZmxvcmFsd2hpdGVcIl0gPSA0Mjk0OTY2MDAwXSA9IFwiZmxvcmFsd2hpdGVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZm9yZXN0Z3JlZW5cIl0gPSA0MjgwNDUzOTIyXSA9IFwiZm9yZXN0Z3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZnVjaHNpYVwiXSA9IDQyOTQ5MDIwMTVdID0gXCJmdWNoc2lhXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImdhaW5zYm9yb1wiXSA9IDQyOTI2NjQ1NDBdID0gXCJnYWluc2Jvcm9cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZ2hvc3R3aGl0ZVwiXSA9IDQyOTQ1MDY3NTFdID0gXCJnaG9zdHdoaXRlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImdvbGRcIl0gPSA0Mjk0OTU2ODAwXSA9IFwiZ29sZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJnb2xkZW5yb2RcIl0gPSA0MjkyNTE5MjAwXSA9IFwiZ29sZGVucm9kXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImdyYXlcIl0gPSA0Mjg2NjExNTg0XSA9IFwiZ3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJncmVlblwiXSA9IDQyNzgyMjI4NDhdID0gXCJncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJncmVlbnllbGxvd1wiXSA9IDQyODk1OTMxMzVdID0gXCJncmVlbnllbGxvd1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJncmV5XCJdID0gNDI4NjYxMTU4NF0gPSBcImdyZXlcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiaG9uZXlkZXdcIl0gPSA0MjkzOTg0MjQwXSA9IFwiaG9uZXlkZXdcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiaG90cGlua1wiXSA9IDQyOTQ5Mjg4MjBdID0gXCJob3RwaW5rXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImluZGlhbnJlZFwiXSA9IDQyOTE2NDg2MDRdID0gXCJpbmRpYW5yZWRcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiaW5kaWdvXCJdID0gNDI4MzEwNTQxMF0gPSBcImluZGlnb1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJpdm9yeVwiXSA9IDQyOTQ5NjcyODBdID0gXCJpdm9yeVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJraGFraVwiXSA9IDQyOTM5Nzc3NDBdID0gXCJraGFraVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsYXZlbmRlclwiXSA9IDQyOTMzMjI0OTBdID0gXCJsYXZlbmRlclwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsYXZlbmRlcmJsdXNoXCJdID0gNDI5NDk2MzQ0NV0gPSBcImxhdmVuZGVyYmx1c2hcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGF3bmdyZWVuXCJdID0gNDI4NjM4MTA1Nl0gPSBcImxhd25ncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsZW1vbmNoaWZmb25cIl0gPSA0Mjk0OTY1OTY1XSA9IFwibGVtb25jaGlmZm9uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0Ymx1ZVwiXSA9IDQyODk1ODMzMzRdID0gXCJsaWdodGJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRjb3JhbFwiXSA9IDQyOTM5NTE2MTZdID0gXCJsaWdodGNvcmFsXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0Y3lhblwiXSA9IDQyOTI5MzU2NzldID0gXCJsaWdodGN5YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIl0gPSA0Mjk0NjM4MjkwXSA9IFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRncmF5XCJdID0gNDI5MjA3MjQwM10gPSBcImxpZ2h0Z3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaWdodGdyZWVuXCJdID0gNDI4NzY4ODMzNl0gPSBcImxpZ2h0Z3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRncmV5XCJdID0gNDI5MjA3MjQwM10gPSBcImxpZ2h0Z3JleVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaWdodHBpbmtcIl0gPSA0Mjk0OTQ4NTQ1XSA9IFwibGlnaHRwaW5rXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2FsbW9uXCJdID0gNDI5NDk0Mjg0Ml0gPSBcImxpZ2h0c2FsbW9uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2VhZ3JlZW5cIl0gPSA0MjgwMzMyOTcwXSA9IFwibGlnaHRzZWFncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaWdodHNreWJsdWVcIl0gPSA0Mjg3MDkwNDI2XSA9IFwibGlnaHRza3libHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2xhdGVncmF5XCJdID0gNDI4NjAyMzgzM10gPSBcImxpZ2h0c2xhdGVncmF5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2xhdGVncmV5XCJdID0gNDI4NjAyMzgzM10gPSBcImxpZ2h0c2xhdGVncmV5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c3RlZWxibHVlXCJdID0gNDI4OTc3NDgxNF0gPSBcImxpZ2h0c3RlZWxibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0eWVsbG93XCJdID0gNDI5NDk2NzI2NF0gPSBcImxpZ2h0eWVsbG93XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpbWVcIl0gPSA0Mjc4MjU1MzYwXSA9IFwibGltZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaW1lZ3JlZW5cIl0gPSA0MjgxNTE5NDEwXSA9IFwibGltZWdyZWVuXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpbmVuXCJdID0gNDI5NDYzNTc1MF0gPSBcImxpbmVuXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1hZ2VudGFcIl0gPSA0Mjk0OTAyMDE1XSA9IFwibWFnZW50YVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtYXJvb25cIl0gPSA0Mjg2NTc4Njg4XSA9IFwibWFyb29uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1lZGl1bWFxdWFtYXJpbmVcIl0gPSA0Mjg0OTI3NDAyXSA9IFwibWVkaXVtYXF1YW1hcmluZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtZWRpdW1ibHVlXCJdID0gNDI3ODE5MDI4NV0gPSBcIm1lZGl1bWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWVkaXVtb3JjaGlkXCJdID0gNDI5MDQwMTc0N10gPSBcIm1lZGl1bW9yY2hpZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtZWRpdW1wdXJwbGVcIl0gPSA0Mjg3ODUyNzYzXSA9IFwibWVkaXVtcHVycGxlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1lZGl1bXNlYWdyZWVuXCJdID0gNDI4MjE2ODE3N10gPSBcIm1lZGl1bXNlYWdyZWVuXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1lZGl1bXNsYXRlYmx1ZVwiXSA9IDQyODYyNzc4NzBdID0gXCJtZWRpdW1zbGF0ZWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWVkaXVtc3ByaW5nZ3JlZW5cIl0gPSA0Mjc4MjU0MjM0XSA9IFwibWVkaXVtc3ByaW5nZ3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWVkaXVtdHVycXVvaXNlXCJdID0gNDI4Mjk2MjM4MF0gPSBcIm1lZGl1bXR1cnF1b2lzZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtZWRpdW12aW9sZXRyZWRcIl0gPSA0MjkxMjM3MjUzXSA9IFwibWVkaXVtdmlvbGV0cmVkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1pZG5pZ2h0Ymx1ZVwiXSA9IDQyNzk4MzQ5OTJdID0gXCJtaWRuaWdodGJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWludGNyZWFtXCJdID0gNDI5NDMxMTkzMF0gPSBcIm1pbnRjcmVhbVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtaXN0eXJvc2VcIl0gPSA0Mjk0OTYwMzUzXSA9IFwibWlzdHlyb3NlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1vY2Nhc2luXCJdID0gNDI5NDk2MDMwOV0gPSBcIm1vY2Nhc2luXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm5hdmFqb3doaXRlXCJdID0gNDI5NDk1ODc2NV0gPSBcIm5hdmFqb3doaXRlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm5hdnlcIl0gPSA0Mjc4MTkwMjA4XSA9IFwibmF2eVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJvbGRsYWNlXCJdID0gNDI5NDgzMzYzOF0gPSBcIm9sZGxhY2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wib2xpdmVcIl0gPSA0Mjg2NjExNDU2XSA9IFwib2xpdmVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wib2xpdmVkcmFiXCJdID0gNDI4NTIzODgxOV0gPSBcIm9saXZlZHJhYlwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJvcmFuZ2VcIl0gPSA0Mjk0OTQ0MDAwXSA9IFwib3JhbmdlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm9yYW5nZXJlZFwiXSA9IDQyOTQ5MTk0MjRdID0gXCJvcmFuZ2VyZWRcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wib3JjaGlkXCJdID0gNDI5MjUwNTgxNF0gPSBcIm9yY2hpZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwYWxlZ29sZGVucm9kXCJdID0gNDI5Mzg0NzIxMF0gPSBcInBhbGVnb2xkZW5yb2RcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicGFsZWdyZWVuXCJdID0gNDI4ODIxNTk2MF0gPSBcInBhbGVncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwYWxldHVycXVvaXNlXCJdID0gNDI4OTcyMDA0Nl0gPSBcInBhbGV0dXJxdW9pc2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicGFsZXZpb2xldHJlZFwiXSA9IDQyOTI1NzEyODNdID0gXCJwYWxldmlvbGV0cmVkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInBhcGF5YXdoaXBcIl0gPSA0Mjk0OTYzMTU3XSA9IFwicGFwYXlhd2hpcFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwZWFjaHB1ZmZcIl0gPSA0Mjk0OTU3NzUzXSA9IFwicGVhY2hwdWZmXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInBlcnVcIl0gPSA0MjkxNjU5MDcxXSA9IFwicGVydVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwaW5rXCJdID0gNDI5NDk1MTExNV0gPSBcInBpbmtcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicGx1bVwiXSA9IDQyOTI3MTQ3MTddID0gXCJwbHVtXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInBvd2RlcmJsdWVcIl0gPSA0Mjg5NzgxOTkwXSA9IFwicG93ZGVyYmx1ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwdXJwbGVcIl0gPSA0Mjg2NTc4ODE2XSA9IFwicHVycGxlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInJlYmVjY2FwdXJwbGVcIl0gPSA0Mjg0ODg3OTYxXSA9IFwicmViZWNjYXB1cnBsZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJyZWRcIl0gPSA0Mjk0OTAxNzYwXSA9IFwicmVkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInJvc3licm93blwiXSA9IDQyOTA1NDc1OTldID0gXCJyb3N5YnJvd25cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicm95YWxibHVlXCJdID0gNDI4MjQ3NzAyNV0gPSBcInJveWFsYmx1ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzYWRkbGVicm93blwiXSA9IDQyODczMTcyNjddID0gXCJzYWRkbGVicm93blwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzYWxtb25cIl0gPSA0Mjk0NjA2OTYyXSA9IFwic2FsbW9uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNhbmR5YnJvd25cIl0gPSA0Mjk0MjIyOTQ0XSA9IFwic2FuZHlicm93blwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzZWFncmVlblwiXSA9IDQyODEyNDA0MDddID0gXCJzZWFncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzZWFzaGVsbFwiXSA9IDQyOTQ5NjQ3MThdID0gXCJzZWFzaGVsbFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzaWVubmFcIl0gPSA0Mjg4Njk2ODc3XSA9IFwic2llbm5hXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNpbHZlclwiXSA9IDQyOTA4MjIzMzZdID0gXCJzaWx2ZXJcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wic2t5Ymx1ZVwiXSA9IDQyODcwOTA0MTFdID0gXCJza3libHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNsYXRlYmx1ZVwiXSA9IDQyODUxNjAxNDFdID0gXCJzbGF0ZWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wic2xhdGVncmF5XCJdID0gNDI4NTU2MzAyNF0gPSBcInNsYXRlZ3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzbGF0ZWdyZXlcIl0gPSA0Mjg1NTYzMDI0XSA9IFwic2xhdGVncmV5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNub3dcIl0gPSA0Mjk0OTY2MDEwXSA9IFwic25vd1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzcHJpbmdncmVlblwiXSA9IDQyNzgyNTU0ODddID0gXCJzcHJpbmdncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzdGVlbGJsdWVcIl0gPSA0MjgyODExMDYwXSA9IFwic3RlZWxibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInRhblwiXSA9IDQyOTE5OTg4NjBdID0gXCJ0YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1widGVhbFwiXSA9IDQyNzgyMjI5NzZdID0gXCJ0ZWFsXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInRoaXN0bGVcIl0gPSA0MjkyMzk0OTY4XSA9IFwidGhpc3RsZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ0b21hdG9cIl0gPSA0Mjk0OTI3MTc1XSA9IFwidG9tYXRvXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInR1cnF1b2lzZVwiXSA9IDQyODI0NDE5MzZdID0gXCJ0dXJxdW9pc2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1widmlvbGV0XCJdID0gNDI5MzgyMTE2Nl0gPSBcInZpb2xldFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ3aGVhdFwiXSA9IDQyOTQzMDM0MTFdID0gXCJ3aGVhdFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ3aGl0ZVwiXSA9IDQyOTQ5NjcyOTVdID0gXCJ3aGl0ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ3aGl0ZXNtb2tlXCJdID0gNDI5NDMwOTM2NV0gPSBcIndoaXRlc21va2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wieWVsbG93XCJdID0gNDI5NDk2NzA0MF0gPSBcInllbGxvd1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ5ZWxsb3dncmVlblwiXSA9IDQyODgzMzUxNTRdID0gXCJ5ZWxsb3dncmVlblwiO1xufSkoY29sb3JzID0gZXhwb3J0cy5jb2xvcnMgfHwgKGV4cG9ydHMuY29sb3JzID0ge30pKTtcbmZ1bmN0aW9uIHBhcnNlQ29sb3JLZXl3b3JkKHZhbHVlLCBzdGFydCwga2V5d29yZCkge1xuICAgIGlmIChrZXl3b3JkID09PSB2b2lkIDApIHsga2V5d29yZCA9IHBhcnNlS2V5d29yZCh2YWx1ZSwgc3RhcnQpOyB9XG4gICAgaWYgKGtleXdvcmQgJiYga2V5d29yZC52YWx1ZSBpbiBjb2xvcnMpIHtcbiAgICAgICAgdmFyIGVuZCA9IGtleXdvcmQuZW5kO1xuICAgICAgICB2YXIgdmFsdWVfMSA9IGNvbG9yc1trZXl3b3JkLnZhbHVlXTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlXzEgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLnBhcnNlQ29sb3JLZXl3b3JkID0gcGFyc2VDb2xvcktleXdvcmQ7XG5mdW5jdGlvbiBwYXJzZUNvbG9yKHZhbHVlLCBzdGFydCwga2V5d29yZCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGlmIChrZXl3b3JkID09PSB2b2lkIDApIHsga2V5d29yZCA9IHBhcnNlS2V5d29yZCh2YWx1ZSwgc3RhcnQpOyB9XG4gICAgcmV0dXJuIHBhcnNlSGV4Q29sb3IodmFsdWUsIHN0YXJ0KSB8fFxuICAgICAgICBwYXJzZUNvbG9yS2V5d29yZCh2YWx1ZSwgc3RhcnQsIGtleXdvcmQpIHx8XG4gICAgICAgIHBhcnNlUkdCQ29sb3IodmFsdWUsIHN0YXJ0KSB8fFxuICAgICAgICBwYXJzZVJHQkFDb2xvcih2YWx1ZSwgc3RhcnQpIHx8XG4gICAgICAgIHBhcnNlSFNMQ29sb3IodmFsdWUsIHN0YXJ0KSB8fFxuICAgICAgICBwYXJzZUhTTEFDb2xvcih2YWx1ZSwgc3RhcnQpO1xufVxuZXhwb3J0cy5wYXJzZUNvbG9yID0gcGFyc2VDb2xvcjtcbnZhciBrZXl3b3JkUmVnRXggPSAvXFxzKihbYS16XVtcXHdcXC1dKilcXHMqL2dpeTtcbmZ1bmN0aW9uIHBhcnNlS2V5d29yZCh0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGtleXdvcmRSZWdFeC5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgcmVzdWx0ID0ga2V5d29yZFJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBrZXl3b3JkUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IHJlc3VsdFsxXTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbnZhciBiYWNrZ3JvdW5kUmVwZWF0S2V5d29yZHMgPSBuZXcgU2V0KFtcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgXCJuby1yZXBlYXRcIl0pO1xuZnVuY3Rpb24gcGFyc2VSZXBlYXQodmFsdWUsIHN0YXJ0LCBrZXl3b3JkKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgaWYgKGtleXdvcmQgPT09IHZvaWQgMCkgeyBrZXl3b3JkID0gcGFyc2VLZXl3b3JkKHZhbHVlLCBzdGFydCk7IH1cbiAgICBpZiAoa2V5d29yZCAmJiBiYWNrZ3JvdW5kUmVwZWF0S2V5d29yZHMuaGFzKGtleXdvcmQudmFsdWUpKSB7XG4gICAgICAgIHZhciBlbmQgPSBrZXl3b3JkLmVuZDtcbiAgICAgICAgdmFyIHZhbHVlXzIgPSBrZXl3b3JkLnZhbHVlO1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWVfMiB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMucGFyc2VSZXBlYXQgPSBwYXJzZVJlcGVhdDtcbnZhciB1bml0UmVnRXggPSAvXFxzKihbXFwrXFwtXT8oPzpcXGQrXFwuXFxkK3xcXGQrfFxcLlxcZCspKD86W2VFXVtcXCtcXC1dP1xcZCspPykoW2EtekEtWl0rfCUpP1xccyovZ3k7XG5mdW5jdGlvbiBwYXJzZVVuaXQodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICB1bml0UmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHVuaXRSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gdW5pdFJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHJlc3VsdFsxXSk7XG4gICAgdmFyIHVuaXQgPSByZXN1bHRbMl0gfHwgXCJkaXBcIjtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyB2YWx1ZTogdmFsdWUsIHVuaXQ6IHVuaXQgfSB9O1xufVxuZXhwb3J0cy5wYXJzZVVuaXQgPSBwYXJzZVVuaXQ7XG5mdW5jdGlvbiBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHZhciB1bml0UmVzdWx0ID0gcGFyc2VVbml0KHRleHQsIHN0YXJ0KTtcbiAgICBpZiAodW5pdFJlc3VsdCkge1xuICAgICAgICB2YXIgc3RhcnRfMSA9IHVuaXRSZXN1bHQuc3RhcnQsIGVuZCA9IHVuaXRSZXN1bHQuZW5kO1xuICAgICAgICB2YXIgdmFsdWUgPSB1bml0UmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUudW5pdCA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlIC89IDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdmFsdWUudW5pdCkge1xuICAgICAgICAgICAgdmFsdWUudW5pdCA9IFwiZGlwXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUudW5pdCA9PT0gXCJweFwiIHx8IHZhbHVlLnVuaXQgPT09IFwiZGlwXCIpIHtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydF8xLCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5wYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCA9IHBhcnNlUGVyY2VudGFnZU9yTGVuZ3RoO1xudmFyIGFuZ2xlVW5pdHNUb1JhZE1hcCA9IHtcbiAgICBcImRlZ1wiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZGVnKSB7IHJldHVybiAoeyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogZGVnIC8gMTgwICogTWF0aC5QSSB9KTsgfSxcbiAgICBcInJhZFwiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcmFkKSB7IHJldHVybiAoeyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogcmFkIH0pOyB9LFxuICAgIFwiZ3JhZFwiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZ3JhZCkgeyByZXR1cm4gKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IGdyYWQgLyAyMDAgKiBNYXRoLlBJIH0pOyB9LFxuICAgIFwidHVyblwiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdHVybikgeyByZXR1cm4gKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHR1cm4gKiBNYXRoLlBJICogMiB9KTsgfVxufTtcbmZ1bmN0aW9uIHBhcnNlQW5nbGUodmFsdWUsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdmFyIGFuZ2xlUmVzdWx0ID0gcGFyc2VVbml0KHZhbHVlLCBzdGFydCk7XG4gICAgaWYgKGFuZ2xlUmVzdWx0KSB7XG4gICAgICAgIHZhciBzdGFydF8yID0gYW5nbGVSZXN1bHQuc3RhcnQsIGVuZCA9IGFuZ2xlUmVzdWx0LmVuZCwgdmFsdWVfMyA9IGFuZ2xlUmVzdWx0LnZhbHVlO1xuICAgICAgICByZXR1cm4gKGFuZ2xlVW5pdHNUb1JhZE1hcFt2YWx1ZV8zLnVuaXRdIHx8IChmdW5jdGlvbiAoXywgX18sIF9fXykgeyByZXR1cm4gbnVsbDsgfSkpKHN0YXJ0XzIsIGVuZCwgdmFsdWVfMy52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5wYXJzZUFuZ2xlID0gcGFyc2VBbmdsZTtcbnZhciBiYWNrZ3JvdW5kU2l6ZUtleXdvcmRzID0gbmV3IFNldChbXCJhdXRvXCIsIFwiY29udGFpblwiLCBcImNvdmVyXCJdKTtcbmZ1bmN0aW9uIHBhcnNlQmFja2dyb3VuZFNpemUodmFsdWUsIHN0YXJ0LCBrZXl3b3JkKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgaWYgKGtleXdvcmQgPT09IHZvaWQgMCkgeyBrZXl3b3JkID0gcGFyc2VLZXl3b3JkKHZhbHVlLCBzdGFydCk7IH1cbiAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgaWYgKGtleXdvcmQgJiYgYmFja2dyb3VuZFNpemVLZXl3b3Jkcy5oYXMoa2V5d29yZC52YWx1ZSkpIHtcbiAgICAgICAgZW5kID0ga2V5d29yZC5lbmQ7XG4gICAgICAgIHZhciB2YWx1ZV80ID0ga2V5d29yZC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlXzQgfTtcbiAgICB9XG4gICAgdmFyIGZpcnN0TGVuZ3RoID0gcGFyc2VQZXJjZW50YWdlT3JMZW5ndGgodmFsdWUsIGVuZCk7XG4gICAgaWYgKGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgIGVuZCA9IGZpcnN0TGVuZ3RoLmVuZDtcbiAgICAgICAgdmFyIHNlY29uZExlbmd0aCA9IHBhcnNlUGVyY2VudGFnZU9yTGVuZ3RoKHZhbHVlLCBmaXJzdExlbmd0aC5lbmQpO1xuICAgICAgICBpZiAoc2Vjb25kTGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgPSBzZWNvbmRMZW5ndGguZW5kO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogZmlyc3RMZW5ndGgudmFsdWUsIHk6IHNlY29uZExlbmd0aC52YWx1ZSB9IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyB4OiBmaXJzdExlbmd0aC52YWx1ZSwgeTogXCJhdXRvXCIgfSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5wYXJzZUJhY2tncm91bmRTaXplID0gcGFyc2VCYWNrZ3JvdW5kU2l6ZTtcbnZhciBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3JkcyA9IE9iamVjdC5mcmVlemUobmV3IFNldChbXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJjZW50ZXJcIl0pKTtcbnZhciBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbiA9IHtcbiAgICBcImxlZnRcIjogXCJ4XCIsXG4gICAgXCJyaWdodFwiOiBcInhcIixcbiAgICBcImNlbnRlclwiOiBcImNlbnRlclwiLFxuICAgIFwidG9wXCI6IFwieVwiLFxuICAgIFwiYm90dG9tXCI6IFwieVwiXG59O1xuZnVuY3Rpb24gcGFyc2VCYWNrZ3JvdW5kUG9zaXRpb24odGV4dCwgc3RhcnQsIGtleXdvcmQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBpZiAoa2V5d29yZCA9PT0gdm9pZCAwKSB7IGtleXdvcmQgPSBwYXJzZUtleXdvcmQodGV4dCwgc3RhcnQpOyB9XG4gICAgZnVuY3Rpb24gZm9ybWF0SChhbGlnbiwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChhbGlnbi52YWx1ZSA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCAmJiBvZmZzZXQudmFsdWUudmFsdWUgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IGFsaWduOiBhbGlnbi52YWx1ZSwgb2Zmc2V0OiBvZmZzZXQudmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxpZ24udmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFYoYWxpZ24sIG9mZnNldCkge1xuICAgICAgICBpZiAoYWxpZ24udmFsdWUgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgJiYgb2Zmc2V0LnZhbHVlLnZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBhbGlnbjogYWxpZ24udmFsdWUsIG9mZnNldDogb2Zmc2V0LnZhbHVlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsaWduLnZhbHVlO1xuICAgIH1cbiAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgaWYgKGtleXdvcmQgJiYgYmFja2dyb3VuZFBvc2l0aW9uS2V5d29yZHMuaGFzKGtleXdvcmQudmFsdWUpKSB7XG4gICAgICAgIGVuZCA9IGtleXdvcmQuZW5kO1xuICAgICAgICB2YXIgZmlyc3REaXJlY3Rpb24gPSBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbltrZXl3b3JkLnZhbHVlXTtcbiAgICAgICAgdmFyIGZpcnN0TGVuZ3RoID0gZmlyc3REaXJlY3Rpb24gIT09IFwiY2VudGVyXCIgJiYgcGFyc2VQZXJjZW50YWdlT3JMZW5ndGgodGV4dCwgZW5kKTtcbiAgICAgICAgaWYgKGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgPSBmaXJzdExlbmd0aC5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlY29uZEtleXdvcmQgPSBwYXJzZUtleXdvcmQodGV4dCwgZW5kKTtcbiAgICAgICAgaWYgKHNlY29uZEtleXdvcmQgJiYgYmFja2dyb3VuZFBvc2l0aW9uS2V5d29yZHMuaGFzKHNlY29uZEtleXdvcmQudmFsdWUpKSB7XG4gICAgICAgICAgICBlbmQgPSBzZWNvbmRLZXl3b3JkLmVuZDtcbiAgICAgICAgICAgIHZhciBzZWNvbmREaXJlY3Rpb24gPSBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbltzZWNvbmRLZXl3b3JkLmVuZF07XG4gICAgICAgICAgICBpZiAoZmlyc3REaXJlY3Rpb24gPT09IHNlY29uZERpcmVjdGlvbiAmJiBmaXJzdERpcmVjdGlvbiAhPT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlY29uZExlbmd0aCA9IHNlY29uZERpcmVjdGlvbiAhPT0gXCJjZW50ZXJcIiAmJiBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBlbmQpO1xuICAgICAgICAgICAgaWYgKHNlY29uZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHNlY29uZExlbmd0aC5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGZpcnN0RGlyZWN0aW9uID09PSBzZWNvbmREaXJlY3Rpb24gJiYgc2Vjb25kRGlyZWN0aW9uID09PSBcImNlbnRlclwiKSB8fCAoZmlyc3REaXJlY3Rpb24gPT09IFwieFwiIHx8IHNlY29uZERpcmVjdGlvbiA9PT0gXCJ5XCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGZvcm1hdEgoa2V5d29yZCwgZmlyc3RMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogZm9ybWF0VihzZWNvbmRLZXl3b3JkLCBzZWNvbmRMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGZvcm1hdEgoc2Vjb25kS2V5d29yZCwgc2Vjb25kTGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGZvcm1hdFYoa2V5d29yZCwgZmlyc3RMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmaXJzdERpcmVjdGlvbiA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB7IHg6IFwiY2VudGVyXCIsIHk6IFwiY2VudGVyXCIgfSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmlyc3REaXJlY3Rpb24gPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogZm9ybWF0SChrZXl3b3JkLCBmaXJzdExlbmd0aCksIHk6IFwiY2VudGVyXCIgfSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogXCJjZW50ZXJcIiwgeTogZm9ybWF0VihrZXl3b3JkLCBmaXJzdExlbmd0aCkgfSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZmlyc3RMZW5ndGggPSBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBlbmQpO1xuICAgICAgICBpZiAoZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIGVuZCA9IGZpcnN0TGVuZ3RoLmVuZDtcbiAgICAgICAgICAgIHZhciBzZWNvbmRMZW5ndGggPSBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBlbmQpO1xuICAgICAgICAgICAgaWYgKHNlY29uZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHNlY29uZExlbmd0aC5lbmQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogeyBhbGlnbjogXCJsZWZ0XCIsIG9mZnNldDogZmlyc3RMZW5ndGgudmFsdWUgfSwgeTogeyBhbGlnbjogXCJ0b3BcIiwgb2Zmc2V0OiBzZWNvbmRMZW5ndGgudmFsdWUgfSB9IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyB4OiB7IGFsaWduOiBcImxlZnRcIiwgb2Zmc2V0OiBmaXJzdExlbmd0aC52YWx1ZSB9LCB5OiBcImNlbnRlclwiIH0gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wYXJzZUJhY2tncm91bmRQb3NpdGlvbiA9IHBhcnNlQmFja2dyb3VuZFBvc2l0aW9uO1xudmFyIGRpcmVjdGlvblJlZ0V4ID0gL1xccyp0b1xccyoobGVmdHxyaWdodHx0b3B8Ym90dG9tKVxccyoobGVmdHxyaWdodHx0b3B8Ym90dG9tKT9cXHMqL2d5O1xudmFyIHNpZGVEaXJlY3Rpb25zID0ge1xuICAgIHRvcDogTWF0aC5QSSAqIDAgLyAyLFxuICAgIHJpZ2h0OiBNYXRoLlBJICogMSAvIDIsXG4gICAgYm90dG9tOiBNYXRoLlBJICogMiAvIDIsXG4gICAgbGVmdDogTWF0aC5QSSAqIDMgLyAyXG59O1xudmFyIGNvcm5lckRpcmVjdGlvbnMgPSB7XG4gICAgdG9wOiB7XG4gICAgICAgIHJpZ2h0OiBNYXRoLlBJICogMSAvIDQsXG4gICAgICAgIGxlZnQ6IE1hdGguUEkgKiA3IC8gNFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgICAgdG9wOiBNYXRoLlBJICogMSAvIDQsXG4gICAgICAgIGJvdHRvbTogTWF0aC5QSSAqIDMgLyA0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgICAgcmlnaHQ6IE1hdGguUEkgKiAzIC8gNCxcbiAgICAgICAgbGVmdDogTWF0aC5QSSAqIDUgLyA0XG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICAgIHRvcDogTWF0aC5QSSAqIDcgLyA0LFxuICAgICAgICBib3R0b206IE1hdGguUEkgKiA1IC8gNFxuICAgIH1cbn07XG5mdW5jdGlvbiBwYXJzZURpcmVjdGlvbih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGRpcmVjdGlvblJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBkaXJlY3Rpb25SZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gZGlyZWN0aW9uUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciBmaXJzdERpcmVjdGlvbiA9IHJlc3VsdFsxXTtcbiAgICBpZiAocmVzdWx0WzJdKSB7XG4gICAgICAgIHZhciBzZWNvbmREaXJlY3Rpb24gPSByZXN1bHRbMl07XG4gICAgICAgIHZhciB2YWx1ZSA9IGNvcm5lckRpcmVjdGlvbnNbZmlyc3REaXJlY3Rpb25dW3NlY29uZERpcmVjdGlvbl07XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogc2lkZURpcmVjdGlvbnNbZmlyc3REaXJlY3Rpb25dIH07XG4gICAgfVxufVxudmFyIG9wZW5pbmdCcmFja2V0UmVnRXggPSAvXFxzKlxcKFxccyovZ3k7XG52YXIgY2xvc2luZ0JyYWNrZXRSZWdFeCA9IC9cXHMqXFwpXFxzKi9neTtcbnZhciBjbG9zaW5nQnJhY2tldE9yQ29tbWFSZWdFeCA9IC9cXHMqKFxcKXwsKVxccyovZ3k7XG5mdW5jdGlvbiBwYXJzZUFyZ3VtZW50c0xpc3QodGV4dCwgc3RhcnQsIGFyZ3VtZW50KSB7XG4gICAgb3BlbmluZ0JyYWNrZXRSZWdFeC5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgb3BlbmluZ0JyYWNrZXQgPSBvcGVuaW5nQnJhY2tldFJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFvcGVuaW5nQnJhY2tldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IG9wZW5pbmdCcmFja2V0UmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgIGNsb3NpbmdCcmFja2V0UmVnRXgubGFzdEluZGV4ID0gZW5kO1xuICAgIHZhciBjbG9zaW5nQnJhY2tldCA9IGNsb3NpbmdCcmFja2V0UmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoY2xvc2luZ0JyYWNrZXQpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIGZvciAodmFyIGluZGV4XzEgPSAwOyB0cnVlOyBpbmRleF8xKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHRleHQsIGVuZCwgaW5kZXhfMSk7XG4gICAgICAgIGlmICghYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbmQgPSBhcmcuZW5kO1xuICAgICAgICB2YWx1ZS5wdXNoKGFyZyk7XG4gICAgICAgIGNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4Lmxhc3RJbmRleCA9IGVuZDtcbiAgICAgICAgdmFyIGNsb3NpbmdCcmFja2V0T3JDb21tYSA9IGNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4LmV4ZWModGV4dCk7XG4gICAgICAgIGlmIChjbG9zaW5nQnJhY2tldE9yQ29tbWEpIHtcbiAgICAgICAgICAgIGVuZCA9IGNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4Lmxhc3RJbmRleDtcbiAgICAgICAgICAgIGlmIChjbG9zaW5nQnJhY2tldE9yQ29tbWFbMV0gPT09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbG9zaW5nQnJhY2tldE9yQ29tbWFbMV0gPT09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlQ29sb3JTdG9wKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdmFyIGNvbG9yID0gcGFyc2VDb2xvcih0ZXh0LCBzdGFydCk7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGNvbG9yLmVuZDtcbiAgICB2YXIgb2Zmc2V0ID0gcGFyc2VQZXJjZW50YWdlT3JMZW5ndGgodGV4dCwgZW5kKTtcbiAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgIGVuZCA9IG9mZnNldC5lbmQ7XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB7IGFyZ2I6IGNvbG9yLnZhbHVlLCBvZmZzZXQ6IG9mZnNldC52YWx1ZSB9IH07XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB7IGFyZ2I6IGNvbG9yLnZhbHVlIH0gfTtcbn1cbmV4cG9ydHMucGFyc2VDb2xvclN0b3AgPSBwYXJzZUNvbG9yU3RvcDtcbnZhciBsaW5lYXJHcmFkaWVudFN0YXJ0UmVnRXggPSAvXFxzKmxpbmVhci1ncmFkaWVudFxccyovZ3k7XG5mdW5jdGlvbiBwYXJzZUxpbmVhckdyYWRpZW50KHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgbGluZWFyR3JhZGllbnRTdGFydFJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciBsZ3MgPSBsaW5lYXJHcmFkaWVudFN0YXJ0UmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoIWxncykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGxpbmVhckdyYWRpZW50U3RhcnRSZWdFeC5sYXN0SW5kZXg7XG4gICAgdmFyIGFuZ2xlID0gTWF0aC5QSTtcbiAgICB2YXIgY29sb3JzID0gW107XG4gICAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUFyZ3VtZW50c0xpc3QodGV4dCwgZW5kLCBmdW5jdGlvbiAodGV4dCwgc3RhcnQsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlQXJnID0gcGFyc2VBbmdsZSh0ZXh0LCBzdGFydCkgfHwgcGFyc2VEaXJlY3Rpb24odGV4dCwgc3RhcnQpO1xuICAgICAgICAgICAgaWYgKGFuZ2xlQXJnKSB7XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBhbmdsZUFyZy52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5nbGVBcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbG9yU3RvcCA9IHBhcnNlQ29sb3JTdG9wKHRleHQsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGNvbG9yU3RvcCkge1xuICAgICAgICAgICAgY29sb3JzLnB1c2goY29sb3JTdG9wLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvclN0b3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gICAgaWYgKCFwYXJzZWRBcmdzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbmQgPSBwYXJzZWRBcmdzLmVuZDtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyBhbmdsZTogYW5nbGUsIGNvbG9yczogY29sb3JzIH0gfTtcbn1cbmV4cG9ydHMucGFyc2VMaW5lYXJHcmFkaWVudCA9IHBhcnNlTGluZWFyR3JhZGllbnQ7XG52YXIgc2xhc2hSZWdFeCA9IC9cXHMqKFxcLylcXHMqL2d5O1xuZnVuY3Rpb24gcGFyc2VTbGFzaCh0ZXh0LCBzdGFydCkge1xuICAgIHNsYXNoUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHNsYXNoID0gc2xhc2hSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghc2xhc2gpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBzbGFzaFJlZ0V4Lmxhc3RJbmRleDtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogXCIvXCIgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmFja2dyb3VuZCh0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgIHZhciBlbmQgPSBzdGFydDtcbiAgICB3aGlsZSAoZW5kIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleXdvcmQgPSBwYXJzZUtleXdvcmQodGV4dCwgZW5kKTtcbiAgICAgICAgdmFyIGNvbG9yID0gcGFyc2VDb2xvcih0ZXh0LCBlbmQsIGtleXdvcmQpO1xuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgIHZhbHVlLmNvbG9yID0gY29sb3IudmFsdWU7XG4gICAgICAgICAgICBlbmQgPSBjb2xvci5lbmQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVwZWF0ID0gcGFyc2VSZXBlYXQodGV4dCwgZW5kLCBrZXl3b3JkKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgdmFsdWUucmVwZWF0ID0gcmVwZWF0LnZhbHVlO1xuICAgICAgICAgICAgZW5kID0gcmVwZWF0LmVuZDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHBhcnNlQmFja2dyb3VuZFBvc2l0aW9uKHRleHQsIGVuZCwga2V5d29yZCk7XG4gICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgICAgcG9zaXRpb24udmFsdWUudGV4dCA9IHRleHQuc3Vic3RyaW5nKHBvc2l0aW9uLnN0YXJ0LCBwb3NpdGlvbi5lbmQpO1xuICAgICAgICAgICAgdmFsdWUucG9zaXRpb24gPSBwb3NpdGlvbi52YWx1ZTtcbiAgICAgICAgICAgIGVuZCA9IHBvc2l0aW9uLmVuZDtcbiAgICAgICAgICAgIHZhciBzbGFzaCA9IHBhcnNlU2xhc2godGV4dCwgZW5kKTtcbiAgICAgICAgICAgIGlmIChzbGFzaCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHNsYXNoLmVuZDtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHBhcnNlQmFja2dyb3VuZFNpemUodGV4dCwgZW5kKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlLnNpemUgPSBzaXplLnZhbHVlO1xuICAgICAgICAgICAgICAgIGVuZCA9IHNpemUuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVybCA9IHBhcnNlVVJMKHRleHQsIGVuZCk7XG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgIHZhbHVlLmltYWdlID0gdXJsLnZhbHVlO1xuICAgICAgICAgICAgZW5kID0gdXJsLmVuZDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncmFkaWVudCA9IHBhcnNlTGluZWFyR3JhZGllbnQodGV4dCwgZW5kKTtcbiAgICAgICAgaWYgKGdyYWRpZW50KSB7XG4gICAgICAgICAgICB2YWx1ZS5pbWFnZSA9IGdyYWRpZW50LnZhbHVlO1xuICAgICAgICAgICAgZW5kID0gZ3JhZGllbnQuZW5kO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0cy5wYXJzZUJhY2tncm91bmQgPSBwYXJzZUJhY2tncm91bmQ7XG52YXIgdW5pdmVyc2FsU2VsZWN0b3JSZWdFeCA9IC9cXCovZ3k7XG5mdW5jdGlvbiBwYXJzZVVuaXZlcnNhbFNlbGVjdG9yKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdW5pdmVyc2FsU2VsZWN0b3JSZWdFeC5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgcmVzdWx0ID0gdW5pdmVyc2FsU2VsZWN0b3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gdW5pdmVyc2FsU2VsZWN0b3JSZWdFeC5sYXN0SW5kZXg7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgdHlwZTogXCIqXCIgfSB9O1xufVxuZXhwb3J0cy5wYXJzZVVuaXZlcnNhbFNlbGVjdG9yID0gcGFyc2VVbml2ZXJzYWxTZWxlY3RvcjtcbnZhciBzaW1wbGVJZGVudGlmaWVyU2VsZWN0b3JSZWdFeCA9IC8oI3xcXC58OnxcXGIpKFtfLVxcd11bXy1cXHdcXGRcXFxcL10qKS9neTtcbmZ1bmN0aW9uIHBhcnNlU2ltcGxlSWRlbnRpZmllclNlbGVjdG9yKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgc2ltcGxlSWRlbnRpZmllclNlbGVjdG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHNpbXBsZUlkZW50aWZpZXJTZWxlY3RvclJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBzaW1wbGVJZGVudGlmaWVyU2VsZWN0b3JSZWdFeC5sYXN0SW5kZXg7XG4gICAgdmFyIHR5cGUgPSByZXN1bHRbMV07XG4gICAgdmFyIGlkZW50aWZpZXIgPSByZXN1bHRbMl0ucmVwbGFjZSgvXFxcXC9nLCBcIlwiKTtcbiAgICB2YXIgdmFsdWUgPSB7IHR5cGU6IHR5cGUsIGlkZW50aWZpZXI6IGlkZW50aWZpZXIgfTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VTaW1wbGVJZGVudGlmaWVyU2VsZWN0b3IgPSBwYXJzZVNpbXBsZUlkZW50aWZpZXJTZWxlY3RvcjtcbnZhciBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4ID0gL1xcW1xccyooW18tXFx3XVtfLVxcd1xcZF0qKVxccyooPzooPXxcXF49fFxcJD18XFwqPXxcXH49fFxcfD0pXFxzKig/OihbXy1cXHddW18tXFx3XFxkXSopfFwiKCg/OlteXFxcXFwiXXxcXFxcKD86XCJ8bnxyfGZ8XFxcXHwwLTlhLWYpKSopXCJ8JygoPzpbXlxcXFwnXXxcXFxcKD86J3xufHJ8ZnxcXFxcfDAtOWEtZikpKiknKVxccyopP1xcXS9neTtcbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlU2VsZWN0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgcHJvcGVydHkgPSByZXN1bHRbMV07XG4gICAgaWYgKHJlc3VsdFsyXSkge1xuICAgICAgICB2YXIgdGVzdF8xID0gcmVzdWx0WzJdO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHRbM10gfHwgcmVzdWx0WzRdIHx8IHJlc3VsdFs1XTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgdHlwZTogXCJbXVwiLCBwcm9wZXJ0eTogcHJvcGVydHksIHRlc3Q6IHRlc3RfMSwgdmFsdWU6IHZhbHVlIH0gfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgdHlwZTogXCJbXVwiLCBwcm9wZXJ0eTogcHJvcGVydHkgfSB9O1xufVxuZXhwb3J0cy5wYXJzZUF0dHJpYnV0ZVNlbGVjdG9yID0gcGFyc2VBdHRyaWJ1dGVTZWxlY3RvcjtcbmZ1bmN0aW9uIHBhcnNlU2ltcGxlU2VsZWN0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICByZXR1cm4gcGFyc2VVbml2ZXJzYWxTZWxlY3Rvcih0ZXh0LCBzdGFydCkgfHxcbiAgICAgICAgcGFyc2VTaW1wbGVJZGVudGlmaWVyU2VsZWN0b3IodGV4dCwgc3RhcnQpIHx8XG4gICAgICAgIHBhcnNlQXR0cmlidXRlU2VsZWN0b3IodGV4dCwgc3RhcnQpO1xufVxuZXhwb3J0cy5wYXJzZVNpbXBsZVNlbGVjdG9yID0gcGFyc2VTaW1wbGVTZWxlY3RvcjtcbmZ1bmN0aW9uIHBhcnNlU2ltcGxlU2VsZWN0b3JTZXF1ZW5jZSh0ZXh0LCBzdGFydCkge1xuICAgIHZhciBzaW1wbGVTZWxlY3RvciA9IHBhcnNlU2ltcGxlU2VsZWN0b3IodGV4dCwgc3RhcnQpO1xuICAgIGlmICghc2ltcGxlU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBzaW1wbGVTZWxlY3Rvci5lbmQ7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgd2hpbGUgKHNpbXBsZVNlbGVjdG9yKSB7XG4gICAgICAgIHZhbHVlLnB1c2goc2ltcGxlU2VsZWN0b3IudmFsdWUpO1xuICAgICAgICBlbmQgPSBzaW1wbGVTZWxlY3Rvci5lbmQ7XG4gICAgICAgIHNpbXBsZVNlbGVjdG9yID0gcGFyc2VTaW1wbGVTZWxlY3Rvcih0ZXh0LCBlbmQpO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VTaW1wbGVTZWxlY3RvclNlcXVlbmNlID0gcGFyc2VTaW1wbGVTZWxlY3RvclNlcXVlbmNlO1xudmFyIGNvbWJpbmF0b3JSZWdFeCA9IC9cXHMqKFxcK3x+fD4pP1xccyovZ3k7XG5mdW5jdGlvbiBwYXJzZUNvbWJpbmF0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBjb21iaW5hdG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IGNvbWJpbmF0b3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gY29tYmluYXRvclJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgdmFsdWUgPSByZXN1bHRbMV0gfHwgXCIgXCI7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG59XG5leHBvcnRzLnBhcnNlQ29tYmluYXRvciA9IHBhcnNlQ29tYmluYXRvcjtcbnZhciB3aGl0ZVNwYWNlUmVnRXggPSAvXFxzKi9neTtcbmZ1bmN0aW9uIHBhcnNlU2VsZWN0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgd2hpdGVTcGFjZVJlZ0V4Lmxhc3RJbmRleCA9IGVuZDtcbiAgICB2YXIgbGVhZGluZ1doaXRlU3BhY2UgPSB3aGl0ZVNwYWNlUmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAobGVhZGluZ1doaXRlU3BhY2UpIHtcbiAgICAgICAgZW5kID0gd2hpdGVTcGFjZVJlZ0V4Lmxhc3RJbmRleDtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgdmFyIGNvbWJpbmF0b3I7XG4gICAgdmFyIGV4cGVjdFNpbXBsZVNlbGVjdG9yID0gdHJ1ZTtcbiAgICB2YXIgcGFpcjtcbiAgICBkbyB7XG4gICAgICAgIHZhciBzaW1wbGVTZWxlY3RvclNlcXVlbmNlID0gcGFyc2VTaW1wbGVTZWxlY3RvclNlcXVlbmNlKHRleHQsIGVuZCk7XG4gICAgICAgIGlmICghc2ltcGxlU2VsZWN0b3JTZXF1ZW5jZSkge1xuICAgICAgICAgICAgaWYgKGV4cGVjdFNpbXBsZVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbmQgPSBzaW1wbGVTZWxlY3RvclNlcXVlbmNlLmVuZDtcbiAgICAgICAgaWYgKGNvbWJpbmF0b3IpIHtcbiAgICAgICAgICAgIHBhaXJbMV0gPSBjb21iaW5hdG9yLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHBhaXIgPSBbc2ltcGxlU2VsZWN0b3JTZXF1ZW5jZS52YWx1ZSwgdW5kZWZpbmVkXTtcbiAgICAgICAgdmFsdWUucHVzaChwYWlyKTtcbiAgICAgICAgY29tYmluYXRvciA9IHBhcnNlQ29tYmluYXRvcih0ZXh0LCBlbmQpO1xuICAgICAgICBpZiAoY29tYmluYXRvcikge1xuICAgICAgICAgICAgZW5kID0gY29tYmluYXRvci5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgZXhwZWN0U2ltcGxlU2VsZWN0b3IgPSBjb21iaW5hdG9yICYmIGNvbWJpbmF0b3IudmFsdWUgIT09IFwiIFwiO1xuICAgIH0gd2hpbGUgKGNvbWJpbmF0b3IpO1xuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0cy5wYXJzZVNlbGVjdG9yID0gcGFyc2VTZWxlY3RvcjtcbnZhciB3aGl0ZXNwYWNlUmVnRXggPSAvW1xcc1xcdFxcblxcclxcZl0qL2d5bTtcbnZhciBzaW5nbGVRdW90ZVN0cmluZ1JlZ0V4ID0gLycoKD86W15cXG5cXHJcXGZcXCddfFxcXFwoPzpcXCR8XFxufFswLTlhLWZBLUZdezEsNn1cXHM/KSkqKSg6Pyd8JCkvZ3ltO1xudmFyIGRvdWJsZVF1b3RlU3RyaW5nUmVnRXggPSAvXCIoKD86W15cXG5cXHJcXGZcXFwiXXxcXFxcKD86XFwkfFxcbnxbMC05YS1mQS1GXXsxLDZ9XFxzPykpKikoOj9cInwkKS9neW07XG52YXIgY29tbWVudFJlZ0V4ID0gLyhcXC9cXCooPzpbXlxcKl18XFwqW15cXC9dKSpcXCpcXC8pL2d5bTtcbnZhciBudW1iZXJSZWdFeCA9IC9bXFwrXFwtXT8oPzpcXGQrXFwuXFxkK3xcXGQrfFxcLlxcZCspKD86W2VFXVtcXCtcXC1dP1xcZCspPy9neW07XG52YXIgbmFtZVJlZ0V4ID0gLy0/KD86KD86W2EtekEtWl9dfFteXFx4MDAtXFx4N0ZdfFxcXFwoPzpcXCR8XFxufFswLTlhLWZBLUZdezEsNn1cXHM/KSkoPzpbYS16QS1aXzAtOVxcLV0qfFxcXFwoPzpcXCR8XFxufFswLTlhLWZBLUZdezEsNn1cXHM/KSkqKS9neW07XG52YXIgQ1NTM1BhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ1NTM1BhcnNlcih0ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPSAwO1xuICAgIH1cbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgICB2YXIgaW5wdXRUb2tlbjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaW5wdXRUb2tlbiA9IHRoaXMuY29uc3VtZUFUb2tlbigpO1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goaW5wdXRUb2tlbik7XG4gICAgICAgIH0gd2hpbGUgKGlucHV0VG9rZW4pO1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjb25zdW1lZElucHV0VG9rZW4pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlY29uc3VtZWRJbnB1dFRva2VuO1xuICAgICAgICAgICAgdGhpcy5yZWNvbnN1bWVkSW5wdXRUb2tlbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFyID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdO1xuICAgICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6IHJldHVybiB0aGlzLmNvbnN1bWVBU3RyaW5nVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCInXCI6IHJldHVybiB0aGlzLmNvbnN1bWVBU3RyaW5nVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCIoXCI6XG4gICAgICAgICAgICBjYXNlIFwiKVwiOlxuICAgICAgICAgICAgY2FzZSBcIixcIjpcbiAgICAgICAgICAgIGNhc2UgXCI6XCI6XG4gICAgICAgICAgICBjYXNlIFwiO1wiOlxuICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgIGNhc2UgXCJdXCI6XG4gICAgICAgICAgICBjYXNlIFwie1wiOlxuICAgICAgICAgICAgY2FzZSBcIn1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXI7XG4gICAgICAgICAgICBjYXNlIFwiI1wiOiByZXR1cm4gdGhpcy5jb25zdW1lQUhhc2hUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcdFwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcclwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcZlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgY2FzZSBcIkBcIjogcmV0dXJuIHRoaXMuY29uc3VtZUF0S2V5d29yZCgpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiXFxcXFwiOiByZXR1cm4gdGhpcy5jb25zdW1lQW5JZGVudExpa2VUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICBjYXNlIFwiM1wiOlxuICAgICAgICAgICAgY2FzZSBcIjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCI1XCI6XG4gICAgICAgICAgICBjYXNlIFwiNlwiOlxuICAgICAgICAgICAgY2FzZSBcIjdcIjpcbiAgICAgICAgICAgIGNhc2UgXCI4XCI6XG4gICAgICAgICAgICBjYXNlIFwiOVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBTnVtZXJpY1Rva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwidVwiOlxuICAgICAgICAgICAgY2FzZSBcIlVcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggKyAxXSA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXJkQ2hhciA9IHRoaXMudGV4dFt0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ICsgMl07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlyZENoYXIgPj0gXCIwXCIgJiYgdGhpcmRDaGFyIDw9IFwiOVwiIHx8IHRoaXJkQ2hhciA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuaWNvZGUgdG9rZW5zIG5vdCBzdXBwb3J0ZWQhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBbklkZW50TGlrZVRva2VuKCkgfHwgdGhpcy5jb25zdW1lQURlbGltVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCIkXCI6XG4gICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgY2FzZSBcIl5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJ8XCI6XG4gICAgICAgICAgICBjYXNlIFwiflwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBTWF0Y2hUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiLVwiOiByZXR1cm4gdGhpcy5jb25zdW1lQU51bWVyaWNUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFuSWRlbnRMaWtlVG9rZW4oKSB8fCB0aGlzLmNvbnN1bWVDREMoKSB8fCB0aGlzLmNvbnN1bWVBRGVsaW1Ub2tlbigpO1xuICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgIGNhc2UgXCIuXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZUFOdW1lcmljVG9rZW4oKSB8fCB0aGlzLmNvbnN1bWVBRGVsaW1Ub2tlbigpO1xuICAgICAgICAgICAgY2FzZSBcIi9cIjogcmV0dXJuIHRoaXMuY29uc3VtZUFDb21tZW50KCkgfHwgdGhpcy5jb25zdW1lQURlbGltVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCI8XCI6IHJldHVybiB0aGlzLmNvbnN1bWVDRE8oKSB8fCB0aGlzLmNvbnN1bWVBRGVsaW1Ub2tlbigpO1xuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6IHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gdGhpcy5jb25zdW1lQW5JZGVudExpa2VUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBRGVsaW1Ub2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogMiwgdGV4dDogdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrK10gfTtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBV2hpdGVzcGFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpdGVzcGFjZVJlZ0V4Lmxhc3RJbmRleCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgIHdoaXRlc3BhY2VSZWdFeC5leGVjKHRoaXMudGV4dCk7XG4gICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPSB3aGl0ZXNwYWNlUmVnRXgubGFzdEluZGV4O1xuICAgICAgICByZXR1cm4gXCIgXCI7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQUhhc2hUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICB2YXIgaGFzaE5hbWUgPSB0aGlzLmNvbnN1bWVBTmFtZSgpO1xuICAgICAgICBpZiAoaGFzaE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IDEyLCB0ZXh0OiBcIiNcIiArIGhhc2hOYW1lLnRleHQgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4LS07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUNETyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5zdWJzdHIodGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCwgNCkgPT09IFwiPCEtLVwiKSB7XG4gICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ICs9IDQ7XG4gICAgICAgICAgICByZXR1cm4gXCI8IS0tXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQ0RDID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50ZXh0LnN1YnN0cih0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4LCAzKSA9PT0gXCItLT5cIikge1xuICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCArPSAzO1xuICAgICAgICAgICAgcmV0dXJuIFwiLS0+XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQU1hdGNoVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCArIDFdID09PSBcIj1cIikge1xuICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy50ZXh0LnN1YnN0cih0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4LCAyKTtcbiAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggKz0gMjtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBTnVtZXJpY1Rva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBudW1iZXJSZWdFeC5sYXN0SW5kZXggPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4O1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyUmVnRXguZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA9IG51bWJlclJlZ0V4Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKHRoaXMudGV4dFt0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4XSA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IDQsIHRleHQ6IHJlc3VsdFswXSB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5jb25zdW1lQU5hbWUoKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IDUsIHRleHQ6IHJlc3VsdFswXSArIG5hbWUudGV4dCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6IDMsIHRleHQ6IHJlc3VsdFswXSB9O1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFuSWRlbnRMaWtlVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5jb25zdW1lQU5hbWUoKTtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdID09PSBcIihcIikge1xuICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICAgICAgaWYgKG5hbWUudGV4dC50b0xvd2VyQ2FzZSgpID09PSBcInVybFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZUFVUkxUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogOCwgbmFtZTogbmFtZS50ZXh0LCB0ZXh0OiBuYW1lLnRleHQgKyBcIihcIiB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFTdHJpbmdUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoYXIgPSB0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF07XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmIChjaGFyID09PSBcIidcIikge1xuICAgICAgICAgICAgc2luZ2xlUXVvdGVTdHJpbmdSZWdFeC5sYXN0SW5kZXggPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4O1xuICAgICAgICAgICAgcmVzdWx0ID0gc2luZ2xlUXVvdGVTdHJpbmdSZWdFeC5leGVjKHRoaXMudGV4dCk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA9IHNpbmdsZVF1b3RlU3RyaW5nUmVnRXgubGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiXFxcIlwiKSB7XG4gICAgICAgICAgICBkb3VibGVRdW90ZVN0cmluZ1JlZ0V4Lmxhc3RJbmRleCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgICAgICByZXN1bHQgPSBkb3VibGVRdW90ZVN0cmluZ1JlZ0V4LmV4ZWModGhpcy50ZXh0KTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ID0gZG91YmxlUXVvdGVTdHJpbmdSZWdFeC5sYXN0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogMSwgdGV4dDogcmVzdWx0WzBdIH07XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQVVSTFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4IC0gMyAtIDE7XG4gICAgICAgIHZhciB1cmxUb2tlbiA9IHsgdHlwZTogNywgdGV4dDogdW5kZWZpbmVkIH07XG4gICAgICAgIHRoaXMuY29uc3VtZUFXaGl0ZXNwYWNlKCk7XG4gICAgICAgIGlmICh0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ID49IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmxUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dElucHV0Q29kZVBvaW50ID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdO1xuICAgICAgICBpZiAobmV4dElucHV0Q29kZVBvaW50ID09PSBcIlxcXCJcIiB8fCBuZXh0SW5wdXRDb2RlUG9pbnQgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nVG9rZW4gPSB0aGlzLmNvbnN1bWVBU3RyaW5nVG9rZW4oKTtcbiAgICAgICAgICAgIHVybFRva2VuLnRleHQgPSBzdHJpbmdUb2tlbi50ZXh0O1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lQVdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF0gPT09IFwiKVwiIHx8IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPj0gdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleDtcbiAgICAgICAgICAgICAgICB1cmxUb2tlbi50ZXh0ID0gdGhpcy50ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGFyID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrK107XG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiKVwiOiByZXR1cm4gdXJsVG9rZW47XG4gICAgICAgICAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFx0XCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJcXHJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFxmXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZUFXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF0gPT09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIlxcJ1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXFwiOlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFc2NhcGluZyBub3QgeWV0IHN1cHBvcnRlZCFcIik7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdXJsVG9rZW4udGV4dCArPSBjaGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmxUb2tlbjtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmFtZVJlZ0V4Lmxhc3RJbmRleCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgIHZhciByZXN1bHQgPSBuYW1lUmVnRXguZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA9IG5hbWVSZWdFeC5sYXN0SW5kZXg7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IDYsIHRleHQ6IHJlc3VsdFswXSB9O1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUF0S2V5d29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuY29uc3VtZUFOYW1lKCk7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAxMSwgdGV4dDogbmFtZS50ZXh0IH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleC0tO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dFt0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ICsgMV0gPT09IFwiKlwiKSB7XG4gICAgICAgICAgICBjb21tZW50UmVnRXgubGFzdEluZGV4ID0gdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleDtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb21tZW50UmVnRXguZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPSBjb21tZW50UmVnRXgubGFzdEluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZUFUb2tlbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUucmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4gPSBmdW5jdGlvbiAoY3VycmVudElucHV0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5yZWNvbnN1bWVkSW5wdXRUb2tlbiA9IGN1cnJlbnRJbnB1dFRva2VuO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUucGFyc2VBU3R5bGVzaGVldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b3BMZXZlbEZsYWcgPSB0cnVlO1xuICAgICAgICB2YXIgc3R5bGVzaGVldCA9IHtcbiAgICAgICAgICAgIHJ1bGVzOiB0aGlzLmNvbnN1bWVBTGlzdE9mUnVsZXMoKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3R5bGVzaGVldDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBTGlzdE9mUnVsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBydWxlcyA9IFtdO1xuICAgICAgICB2YXIgaW5wdXRUb2tlbjtcbiAgICAgICAgd2hpbGUgKGlucHV0VG9rZW4gPSB0aGlzLmNvbnN1bWVBVG9rZW4oKSkge1xuICAgICAgICAgICAgc3dpdGNoIChpbnB1dFRva2VuKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIiBcIjogY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjwhLS1cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLS0+XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRvcExldmVsRmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN1bWVUaGVDdXJyZW50SW5wdXRUb2tlbihpbnB1dFRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0UnVsZSA9IHRoaXMuY29uc3VtZUFuQXRSdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdFJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2goYXRSdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnB1dFRva2VuLnR5cGUgPT09IDExKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN1bWVUaGVDdXJyZW50SW5wdXRUb2tlbihpbnB1dFRva2VuKTtcbiAgICAgICAgICAgICAgICB2YXIgYXRSdWxlID0gdGhpcy5jb25zdW1lQW5BdFJ1bGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoYXRSdWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2goYXRSdWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlY29uc3VtZVRoZUN1cnJlbnRJbnB1dFRva2VuKGlucHV0VG9rZW4pO1xuICAgICAgICAgICAgdmFyIHF1YWxpZmllZFJ1bGUgPSB0aGlzLmNvbnN1bWVBUXVhbGlmaWVkUnVsZSgpO1xuICAgICAgICAgICAgaWYgKHF1YWxpZmllZFJ1bGUpIHtcbiAgICAgICAgICAgICAgICBydWxlcy5wdXNoKHF1YWxpZmllZFJ1bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBbkF0UnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0VG9rZW4gPSB0aGlzLmNvbnN1bWVBVG9rZW4oKTtcbiAgICAgICAgdmFyIGF0UnVsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYXQtcnVsZVwiLFxuICAgICAgICAgICAgbmFtZTogaW5wdXRUb2tlbi50ZXh0LFxuICAgICAgICAgICAgcHJlbHVkZTogW10sXG4gICAgICAgICAgICBibG9jazogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlIChpbnB1dFRva2VuID0gdGhpcy5jb25zdW1lQVRva2VuKCkpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dFRva2VuID09PSBcIjtcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdFJ1bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnB1dFRva2VuID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgIGF0UnVsZS5ibG9jayA9IHRoaXMuY29uc3VtZUFTaW1wbGVCbG9jayhpbnB1dFRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXRSdWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5wdXRUb2tlbi50eXBlID09PSA5ICYmIGlucHV0VG9rZW4uYXNzb2NpYXRlZFRva2VuID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgIGF0UnVsZS5ibG9jayA9IGlucHV0VG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0UnVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4oaW5wdXRUb2tlbik7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5jb25zdW1lQUNvbXBvbmVudFZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgYXRSdWxlLnByZWx1ZGUucHVzaChjb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdFJ1bGU7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQVF1YWxpZmllZFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBxdWFsaWZpZWRSdWxlID0ge1xuICAgICAgICAgICAgdHlwZTogXCJxdWFsaWZpZWQtcnVsZVwiLFxuICAgICAgICAgICAgcHJlbHVkZTogW10sXG4gICAgICAgICAgICBibG9jazogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbnB1dFRva2VuO1xuICAgICAgICB3aGlsZSAoaW5wdXRUb2tlbiA9IHRoaXMuY29uc3VtZUFUb2tlbigpKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXRUb2tlbiA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSB0aGlzLmNvbnN1bWVBU2ltcGxlQmxvY2soaW5wdXRUb2tlbik7XG4gICAgICAgICAgICAgICAgcXVhbGlmaWVkUnVsZS5ibG9jayA9IGJsb2NrO1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWFsaWZpZWRSdWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5wdXRUb2tlbi50eXBlID09PSA5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpbXBsZUJsb2NrID0gaW5wdXRUb2tlbjtcbiAgICAgICAgICAgICAgICBpZiAoc2ltcGxlQmxvY2suYXNzb2NpYXRlZFRva2VuID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgICAgICBxdWFsaWZpZWRSdWxlLmJsb2NrID0gc2ltcGxlQmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWFsaWZpZWRSdWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4oaW5wdXRUb2tlbik7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50VmFsdWUgPSB0aGlzLmNvbnN1bWVBQ29tcG9uZW50VmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHF1YWxpZmllZFJ1bGUucHJlbHVkZS5wdXNoKGNvbXBvbmVudFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBQ29tcG9uZW50VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dFRva2VuID0gdGhpcy5jb25zdW1lQVRva2VuKCk7XG4gICAgICAgIHN3aXRjaCAoaW5wdXRUb2tlbikge1xuICAgICAgICAgICAgY2FzZSBcIntcIjpcbiAgICAgICAgICAgIGNhc2UgXCJbXCI6XG4gICAgICAgICAgICBjYXNlIFwiKFwiOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdW1lQVNpbXBsZUJsb2NrKGlucHV0VG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXRUb2tlbiA9PT0gXCJvYmplY3RcIiAmJiBpbnB1dFRva2VuLnR5cGUgPT09IDgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBRnVuY3Rpb24oaW5wdXRUb2tlbi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXRUb2tlbjtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBU2ltcGxlQmxvY2sgPSBmdW5jdGlvbiAoYXNzb2NpYXRlZFRva2VuKSB7XG4gICAgICAgIHZhciBlbmRpYW5Ub2tlbiA9IHtcbiAgICAgICAgICAgIFwiW1wiOiBcIl1cIixcbiAgICAgICAgICAgIFwie1wiOiBcIn1cIixcbiAgICAgICAgICAgIFwiKFwiOiBcIilcIlxuICAgICAgICB9W2Fzc29jaWF0ZWRUb2tlbl07XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggLSAxO1xuICAgICAgICB2YXIgYmxvY2sgPSB7XG4gICAgICAgICAgICB0eXBlOiA5LFxuICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXNzb2NpYXRlZFRva2VuOiBhc3NvY2lhdGVkVG9rZW4sXG4gICAgICAgICAgICB2YWx1ZXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHZhciBuZXh0SW5wdXRUb2tlbjtcbiAgICAgICAgd2hpbGUgKG5leHRJbnB1dFRva2VuID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdKSB7XG4gICAgICAgICAgICBpZiAobmV4dElucHV0VG9rZW4gPT09IGVuZGlhblRva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4O1xuICAgICAgICAgICAgICAgIGJsb2NrLnRleHQgPSB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuY29uc3VtZUFDb21wb25lbnRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYmxvY2sudmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJsb2NrLnRleHQgPSB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0KTtcbiAgICAgICAgcmV0dXJuIGJsb2NrO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFGdW5jdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgIHZhciBmdW5jVG9rZW4gPSB7IHR5cGU6IDE0LCBuYW1lOiBuYW1lLCB0ZXh0OiB1bmRlZmluZWQsIGNvbXBvbmVudHM6IFtdIH07XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ID49IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmdW5jVG9rZW4udGV4dCA9IG5hbWUgKyBcIihcIiArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV4dElucHV0VG9rZW4gPSB0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF07XG4gICAgICAgICAgICBzd2l0Y2ggKG5leHRJbnB1dFRva2VuKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIilcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgZnVuY1Rva2VuLnRleHQgPSBuYW1lICsgXCIoXCIgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY1Rva2VuO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbnN1bWVBQ29tcG9uZW50VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY1Rva2VuLmNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgIH07XG4gICAgcmV0dXJuIENTUzNQYXJzZXI7XG59KCkpO1xuZXhwb3J0cy5DU1MzUGFyc2VyID0gQ1NTM1BhcnNlcjtcbnZhciBDU1NOYXRpdmVTY3JpcHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENTU05hdGl2ZVNjcmlwdCgpIHtcbiAgICB9XG4gICAgQ1NTTmF0aXZlU2NyaXB0LnByb3RvdHlwZS5wYXJzZVN0eWxlc2hlZXQgPSBmdW5jdGlvbiAoc3R5bGVzaGVldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgICAgICBzdHlsZXNoZWV0OiB7XG4gICAgICAgICAgICAgICAgcnVsZXM6IHRoaXMucGFyc2VSdWxlcyhzdHlsZXNoZWV0LnJ1bGVzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ1NTTmF0aXZlU2NyaXB0LnByb3RvdHlwZS5wYXJzZVJ1bGVzID0gZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHsgcmV0dXJuIF90aGlzLnBhcnNlUnVsZShydWxlKTsgfSk7XG4gICAgfTtcbiAgICBDU1NOYXRpdmVTY3JpcHQucHJvdG90eXBlLnBhcnNlUnVsZSA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIGlmIChydWxlLnR5cGUgPT09IFwiYXQtcnVsZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUF0UnVsZShydWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChydWxlLnR5cGUgPT09IFwicXVhbGlmaWVkLXJ1bGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VRdWFsaWZpZWRSdWxlKHJ1bGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDU1NOYXRpdmVTY3JpcHQucHJvdG90eXBlLnBhcnNlQXRSdWxlID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgaWYgKHJ1bGUubmFtZSA9PT0gXCJpbXBvcnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbXBvcnQ6IHJ1bGUucHJlbHVkZS5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIHR5cGVvZiBtID09PSBcInN0cmluZ1wiID8gbSA6IG0udGV4dDsgfSkuam9pbihcIlwiKS50cmltKCksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbXBvcnRcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICBDU1NOYXRpdmVTY3JpcHQucHJvdG90eXBlLnBhcnNlUXVhbGlmaWVkUnVsZSA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcInJ1bGVcIixcbiAgICAgICAgICAgIHNlbGVjdG9yczogdGhpcy5wcmVsdWRlVG9TZWxlY3RvcnNTdHJpbmdBcnJheShydWxlLnByZWx1ZGUpLFxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiB0aGlzLnJ1bGVCbG9ja1RvRGVjbGFyYXRpb25zKHJ1bGUuYmxvY2sudmFsdWVzKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ1NTTmF0aXZlU2NyaXB0LnByb3RvdHlwZS5ydWxlQmxvY2tUb0RlY2xhcmF0aW9ucyA9IGZ1bmN0aW9uIChkZWNsYXJhdGlvbnNJbnB1dFRva2Vucykge1xuICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gW107XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IFwiXCI7XG4gICAgICAgIHZhciB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIHZhciByZWFkaW5nID0gXCJwcm9wZXJ0eVwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlY2xhcmF0aW9uc0lucHV0VG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRUb2tlbiA9IGRlY2xhcmF0aW9uc0lucHV0VG9rZW5zW2ldO1xuICAgICAgICAgICAgaWYgKHJlYWRpbmcgPT09IFwicHJvcGVydHlcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFRva2VuID09PSBcIjpcIikge1xuICAgICAgICAgICAgICAgICAgICByZWFkaW5nID0gXCJ2YWx1ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXRUb2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSArPSBpbnB1dFRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgKz0gaW5wdXRUb2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFRva2VuID09PSBcIjtcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5wdXNoKHsgdHlwZTogXCJkZWNsYXJhdGlvblwiLCBwcm9wZXJ0eTogcHJvcGVydHksIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRpbmcgPSBcInByb3BlcnR5XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dFRva2VuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGlucHV0VG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBpbnB1dFRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkudHJpbSgpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHByb3BlcnR5IHx8IHZhbHVlKSB7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbnMucHVzaCh7IHR5cGU6IFwiZGVjbGFyYXRpb25cIiwgcHJvcGVydHk6IHByb3BlcnR5LCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY2xhcmF0aW9ucztcbiAgICB9O1xuICAgIENTU05hdGl2ZVNjcmlwdC5wcm90b3R5cGUucHJlbHVkZVRvU2VsZWN0b3JzU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAocHJlbHVkZSkge1xuICAgICAgICB2YXIgc2VsZWN0b3JzID0gW107XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFwiXCI7XG4gICAgICAgIHByZWx1ZGUuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXRUb2tlbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dFRva2VuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0VG9rZW4gPT09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLnB1c2goc2VsZWN0b3IudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciArPSBpbnB1dFRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dFRva2VuID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgKz0gaW5wdXRUb2tlbi50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBzZWxlY3RvcnMucHVzaChzZWxlY3Rvci50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RvcnM7XG4gICAgfTtcbiAgICByZXR1cm4gQ1NTTmF0aXZlU2NyaXB0O1xufSgpKTtcbmV4cG9ydHMuQ1NTTmF0aXZlU2NyaXB0ID0gQ1NTTmF0aXZlU2NyaXB0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VyLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcjtcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbjtcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZXhwb3J0cy5pc0RlZmluZWQgPSBpc0RlZmluZWQ7XG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuZnVuY3Rpb24gdmVyaWZ5Q2FsbGJhY2sodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgIWlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYWxsYmFjayBtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMudmVyaWZ5Q2FsbGJhY2sgPSB2ZXJpZnlDYWxsYmFjaztcbnZhciBjbGFzc0luZm9zTWFwID0gbmV3IE1hcCgpO1xudmFyIGZ1bmNOYW1lUmVnZXggPSAvZnVuY3Rpb24gKFtfYS16QS1aMC05XXsxLH0pXFwoLztcbmZ1bmN0aW9uIGdldENsYXNzKG9iamVjdCkge1xuICAgIHJldHVybiBnZXRDbGFzc0luZm8ob2JqZWN0KS5uYW1lO1xufVxuZXhwb3J0cy5nZXRDbGFzcyA9IGdldENsYXNzO1xuZnVuY3Rpb24gZ2V0Q2xhc3NJbmZvKG9iamVjdCkge1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgcmVzdWx0ID0gY2xhc3NJbmZvc01hcC5nZXQoY29uc3RydWN0b3IpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBDbGFzc0luZm8oY29uc3RydWN0b3IpO1xuICAgICAgICBjbGFzc0luZm9zTWFwLnNldChjb25zdHJ1Y3RvciwgcmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0Q2xhc3NJbmZvID0gZ2V0Q2xhc3NJbmZvO1xuZnVuY3Rpb24gZ2V0QmFzZUNsYXNzZXMob2JqZWN0KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbmZvID0gZ2V0Q2xhc3NJbmZvKG9iamVjdCk7XG4gICAgd2hpbGUgKGluZm8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaW5mby5uYW1lKTtcbiAgICAgICAgaW5mbyA9IGluZm8uYmFzZUNsYXNzSW5mbztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0QmFzZUNsYXNzZXMgPSBnZXRCYXNlQ2xhc3NlcztcbnZhciBDbGFzc0luZm8gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENsYXNzSW5mbyh0eXBlQ29zbnRydWN0b3IpIHtcbiAgICAgICAgdGhpcy5fdHlwZUNvc250cnVjdG9yID0gdHlwZUNvc250cnVjdG9yO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xhc3NJbmZvLnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX25hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IChmdW5jTmFtZVJlZ2V4KS5leGVjKHRoaXMuX3R5cGVDb3NudHJ1Y3Rvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9uYW1lID0gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0gOiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGFzc0luZm8ucHJvdG90eXBlLCBcImJhc2VDbGFzc0luZm9cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGlzLl9iYXNlQ2xhc3NJbmZvKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Jhc2VDbGFzc0luZm8gPSBDbGFzc0luZm8uX2dldEJhc2UodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Jhc2VDbGFzc0luZm8gJiYgdGhpcy5fYmFzZUNsYXNzSW5mby5uYW1lID09PSB0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFzZUNsYXNzSW5mbyA9IENsYXNzSW5mby5fZ2V0QmFzZSh0aGlzLl9iYXNlQ2xhc3NJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFzZUNsYXNzSW5mbztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ2xhc3NJbmZvLl9nZXRCYXNlID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclByb3RvID0gaW5mby5fdHlwZUNvc250cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yUHJvdG8uX19wcm90b19fKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBnZXRDbGFzc0luZm8oY29uc3RydWN0b3JQcm90by5fX3Byb3RvX18pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICByZXR1cm4gQ2xhc3NJbmZvO1xufSgpKTtcbmV4cG9ydHMuQ2xhc3NJbmZvID0gQ2xhc3NJbmZvO1xuZnVuY3Rpb24gdG9VSVN0cmluZyhvYmopIHtcbiAgICByZXR1cm4gaXNOdWxsT3JVbmRlZmluZWQob2JqKSA/IFwiXCIgOiBvYmogKyBcIlwiO1xufVxuZXhwb3J0cy50b1VJU3RyaW5nID0gdG9VSVN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHZpZXdfMSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2NvcmUvdmlld1wiKTtcbnZhciBidWlsZGVyXzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91aS9idWlsZGVyXCIpO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiKTtcbnZhciBvYnNlcnZhYmxlX2FycmF5XzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUtYXJyYXlcIik7XG52YXIgd2Vha19ldmVudF9saXN0ZW5lcl8xID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvY29yZS93ZWFrLWV2ZW50LWxpc3RlbmVyXCIpO1xudmFyIGxhYmVsXzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91aS9sYWJlbFwiKTtcbnZhciBwbGF0Zm9ybV8xID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm1cIik7XG52YXIgYXV0b0VmZmVjdGl2ZVJvd0hlaWdodCA9IC0xO1xudmFyIGtub3duQ29sbGVjdGlvbnM7XG4oZnVuY3Rpb24gKGtub3duQ29sbGVjdGlvbnMpIHtcbiAgICBrbm93bkNvbGxlY3Rpb25zLml0ZW1zID0gJ2l0ZW1zJztcbn0pKGtub3duQ29sbGVjdGlvbnMgPSBleHBvcnRzLmtub3duQ29sbGVjdGlvbnMgfHwgKGV4cG9ydHMua25vd25Db2xsZWN0aW9ucyA9IHt9KSk7XG52YXIga25vd25UZW1wbGF0ZXM7XG4oZnVuY3Rpb24gKGtub3duVGVtcGxhdGVzKSB7XG4gICAga25vd25UZW1wbGF0ZXMuaXRlbUhlYWRlclRlbXBsYXRlID0gJ2l0ZW1IZWFkZXJUZW1wbGF0ZSc7XG4gICAga25vd25UZW1wbGF0ZXMuaXRlbUNvbnRlbnRUZW1wbGF0ZSA9ICdpdGVtQ29udGVudFRlbXBsYXRlJztcbiAgICBrbm93blRlbXBsYXRlcy5oZWFkZXJUZW1wbGF0ZSA9ICdoZWFkZXJUZW1wbGF0ZSc7XG4gICAga25vd25UZW1wbGF0ZXMuZm9vdGVyVGVtcGxhdGUgPSAnZm9vdGVyVGVtcGxhdGUnO1xufSkoa25vd25UZW1wbGF0ZXMgPSBleHBvcnRzLmtub3duVGVtcGxhdGVzIHx8IChleHBvcnRzLmtub3duVGVtcGxhdGVzID0ge30pKTtcbnZhciBrbm93bk11bHRpVGVtcGxhdGVzO1xuKGZ1bmN0aW9uIChrbm93bk11bHRpVGVtcGxhdGVzKSB7XG4gICAga25vd25NdWx0aVRlbXBsYXRlcy5pdGVtSGVhZGVyVGVtcGxhdGVzID0gJ2l0ZW1IZWFkZXJUZW1wbGF0ZXMnO1xuICAgIGtub3duTXVsdGlUZW1wbGF0ZXMuaXRlbUNvbnRlbnRUZW1wbGF0ZXMgPSAnaXRlbUNvbnRlbnRUZW1wbGF0ZXMnO1xuICAgIGtub3duTXVsdGlUZW1wbGF0ZXMuaGVhZGVyVGVtcGxhdGVzID0gJ2hlYWRlclRlbXBsYXRlcyc7XG4gICAga25vd25NdWx0aVRlbXBsYXRlcy5mb290ZXJUZW1wbGF0ZXMgPSAnZm9vdGVyVGVtcGxhdGVzJztcbn0pKGtub3duTXVsdGlUZW1wbGF0ZXMgPSBleHBvcnRzLmtub3duTXVsdGlUZW1wbGF0ZXMgfHwgKGV4cG9ydHMua25vd25NdWx0aVRlbXBsYXRlcyA9IHt9KSk7XG52YXIgQWNjb3JkaW9uQmFzZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjY29yZGlvbkJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWNjb3JkaW9uQmFzZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9hbGxvd011bHRpcGxlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9lZmZlY3RpdmVIZWFkZXJSb3dIZWlnaHQgPSBhdXRvRWZmZWN0aXZlUm93SGVpZ2h0O1xuICAgICAgICBfdGhpcy5fZWZmZWN0aXZlSXRlbUhlYWRlclJvd0hlaWdodCA9IGF1dG9FZmZlY3RpdmVSb3dIZWlnaHQ7XG4gICAgICAgIF90aGlzLl9lZmZlY3RpdmVJdGVtQ29udGVudFJvd0hlaWdodCA9IGF1dG9FZmZlY3RpdmVSb3dIZWlnaHQ7XG4gICAgICAgIF90aGlzLl9lZmZlY3RpdmVGb290ZXJSb3dIZWlnaHQgPSBhdXRvRWZmZWN0aXZlUm93SGVpZ2h0O1xuICAgICAgICBfdGhpcy5jaGlsZEl0ZW1zID0gJ2l0ZW1zJztcbiAgICAgICAgX3RoaXMuX2l0ZW1JZEdlbmVyYXRvciA9IGZ1bmN0aW9uIChfaXRlbSwgaW5kZXgpIHsgcmV0dXJuIGluZGV4OyB9O1xuICAgICAgICBfdGhpcy5fY2hpbGRJZEdlbmVyYXRvciA9IGZ1bmN0aW9uIChfaXRlbSwgaW5kZXgpIHsgcmV0dXJuIGluZGV4OyB9O1xuICAgICAgICBfdGhpcy5faGVhZGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlID0gbmV3IGxhYmVsXzEuTGFiZWwoKTtcbiAgICAgICAgX3RoaXMuX2RlZmF1bHRIZWFkZXJUZW1wbGF0ZSA9IHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgY3JlYXRlVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5oZWFkZXJUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRlcl8xLnBhcnNlKF90aGlzLmhlYWRlclRlbXBsYXRlLCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9oZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbCA9IG5ldyBBcnJheShfdGhpcy5fZGVmYXVsdEhlYWRlclRlbXBsYXRlKTtcbiAgICAgICAgX3RoaXMuX2l0ZW1IZWFkZXJUZW1wbGF0ZVNlbGVjdG9yQmluZGFibGUgPSBuZXcgbGFiZWxfMS5MYWJlbCgpO1xuICAgICAgICBfdGhpcy5fZGVmYXVsdEl0ZW1IZWFkZXJUZW1wbGF0ZSA9IHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgY3JlYXRlVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pdGVtSGVhZGVyVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXJfMS5wYXJzZShfdGhpcy5pdGVtSGVhZGVyVGVtcGxhdGUsIF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2l0ZW1IZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbCA9IG5ldyBBcnJheShfdGhpcy5fZGVmYXVsdEl0ZW1IZWFkZXJUZW1wbGF0ZSk7XG4gICAgICAgIF90aGlzLl9pdGVtQ29udGVudFRlbXBsYXRlU2VsZWN0b3JCaW5kYWJsZSA9IG5ldyBsYWJlbF8xLkxhYmVsKCk7XG4gICAgICAgIF90aGlzLl9kZWZhdWx0SXRlbUNvbnRlbnRUZW1wbGF0ZSA9IHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgY3JlYXRlVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pdGVtQ29udGVudFRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidWlsZGVyXzEucGFyc2UoX3RoaXMuaXRlbUNvbnRlbnRUZW1wbGF0ZSwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5faXRlbUNvbnRlbnRUZW1wbGF0ZXNJbnRlcm5hbCA9IG5ldyBBcnJheShfdGhpcy5fZGVmYXVsdEl0ZW1Db250ZW50VGVtcGxhdGUpO1xuICAgICAgICBfdGhpcy5fZm9vdGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlID0gbmV3IGxhYmVsXzEuTGFiZWwoKTtcbiAgICAgICAgX3RoaXMuX2RlZmF1bHRGb290ZXJUZW1wbGF0ZSA9IHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgY3JlYXRlVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5mb290ZXJUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRlcl8xLnBhcnNlKF90aGlzLmZvb3RlclRlbXBsYXRlLCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9mb290ZXJUZW1wbGF0ZXNJbnRlcm5hbCA9IG5ldyBBcnJheShfdGhpcy5fZGVmYXVsdEZvb3RlclRlbXBsYXRlKTtcbiAgICAgICAgX3RoaXMuX2dldEhhc0hlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb250YWlucyA9IF90aGlzLl9oZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbCAmJiBfdGhpcy5faGVhZGVyVGVtcGxhdGVzSW50ZXJuYWwubGVuZ3RoID4gMTtcbiAgICAgICAgICAgIHJldHVybiAhIShfdGhpcy5oZWFkZXJUZW1wbGF0ZSB8fCBjb250YWlucyk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9nZXRIYXNGb290ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbnMgPSBfdGhpcy5fZm9vdGVyVGVtcGxhdGVzSW50ZXJuYWwgJiYgX3RoaXMuX2Zvb3RlclRlbXBsYXRlc0ludGVybmFsLmxlbmd0aCA+IDE7XG4gICAgICAgICAgICByZXR1cm4gISEoX3RoaXMuZm9vdGVyVGVtcGxhdGUgfHwgY29udGFpbnMpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY2NvcmRpb25CYXNlLnByb3RvdHlwZSwgXCJpdGVtSWRHZW5lcmF0b3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtSWRHZW5lcmF0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGdlbmVyYXRvckZuKSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtSWRHZW5lcmF0b3IgPSBnZW5lcmF0b3JGbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjY29yZGlvbkJhc2UucHJvdG90eXBlLCBcImNoaWxkSWRHZW5lcmF0b3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtSWRHZW5lcmF0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGdlbmVyYXRvckZuKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGlsZElkR2VuZXJhdG9yID0gZ2VuZXJhdG9yRm47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY2NvcmRpb25CYXNlLnByb3RvdHlwZSwgXCJoZWFkZXJUZW1wbGF0ZVNlbGVjdG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGVhZGVyVGVtcGxhdGVTZWxlY3RvcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlclRlbXBsYXRlU2VsZWN0b3JCaW5kYWJsZS5iaW5kKHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlUHJvcGVydHk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFByb3BlcnR5OiAndGVtcGxhdGVLZXknLFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlclRlbXBsYXRlU2VsZWN0b3IgPSBmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bJyRpbmRleCddID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9oZWFkZXJUZW1wbGF0ZVNlbGVjdG9yQmluZGFibGUuYmluZGluZ0NvbnRleHQgPSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2hlYWRlclRlbXBsYXRlU2VsZWN0b3JCaW5kYWJsZS5nZXQoJ3RlbXBsYXRlS2V5Jyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlclRlbXBsYXRlU2VsZWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjY29yZGlvbkJhc2UucHJvdG90eXBlLCBcIml0ZW1IZWFkZXJUZW1wbGF0ZVNlbGVjdG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtSGVhZGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlLmJpbmQoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VQcm9wZXJ0eTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UHJvcGVydHk6ICd0ZW1wbGF0ZUtleScsXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3IgPSBmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bJyRpbmRleCddID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9pdGVtSGVhZGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlLmJpbmRpbmdDb250ZXh0ID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9pdGVtSGVhZGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlLmdldCgndGVtcGxhdGVLZXknKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjY29yZGlvbkJhc2UucHJvdG90eXBlLCBcIml0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlLmJpbmQoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VQcm9wZXJ0eTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UHJvcGVydHk6ICd0ZW1wbGF0ZUtleScsXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbUNvbnRlbnRUZW1wbGF0ZVNlbGVjdG9yID0gZnVuY3Rpb24gKGl0ZW0sIHBhcmVudEluZGV4LCBpbmRleCwgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVsnJGluZGV4J10gPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVsnJHBhcmVudEluZGV4J10gPSBwYXJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlLmJpbmRpbmdDb250ZXh0ID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9pdGVtQ29udGVudFRlbXBsYXRlU2VsZWN0b3JCaW5kYWJsZS5nZXQoJ3RlbXBsYXRlS2V5Jyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvciA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUsIFwiZm9vdGVyVGVtcGxhdGVTZWxlY3RvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvb3RlclRlbXBsYXRlU2VsZWN0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb290ZXJUZW1wbGF0ZVNlbGVjdG9yQmluZGFibGUuYmluZCh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVByb3BlcnR5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRQcm9wZXJ0eTogJ3RlbXBsYXRlS2V5JyxcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb290ZXJUZW1wbGF0ZVNlbGVjdG9yID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtWyckaW5kZXgnXSA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZm9vdGVyVGVtcGxhdGVTZWxlY3RvckJpbmRhYmxlLmJpbmRpbmdDb250ZXh0ID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9mb290ZXJUZW1wbGF0ZVNlbGVjdG9yQmluZGFibGUuZ2V0KCd0ZW1wbGF0ZUtleScpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb290ZXJUZW1wbGF0ZVNlbGVjdG9yID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9nZXRIZWFkZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgdGVtcGxhdGVLZXkgPSAnZGVmYXVsdCc7XG4gICAgICAgIGlmICh0aGlzLmhlYWRlclRlbXBsYXRlU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBkYXRhSXRlbSA9IHRoaXMuX2dldFBhcmVudERhdGEoaW5kZXgpO1xuICAgICAgICAgICAgdGVtcGxhdGVLZXkgPSB0aGlzLl9oZWFkZXJUZW1wbGF0ZVNlbGVjdG9yKGRhdGFJdGVtLCBpbmRleCwgdGhpcy5pdGVtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aF8xID0gdGhpcy5faGVhZGVyVGVtcGxhdGVzSW50ZXJuYWwubGVuZ3RoOyBpIDwgbGVuZ3RoXzE7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hlYWRlclRlbXBsYXRlc0ludGVybmFsW2ldLmtleSA9PT0gdGVtcGxhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGVhZGVyVGVtcGxhdGVzSW50ZXJuYWxbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlclRlbXBsYXRlc0ludGVybmFsWzBdO1xuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX2dldEl0ZW1IZWFkZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgdGVtcGxhdGVLZXkgPSAnZGVmYXVsdCc7XG4gICAgICAgIGlmICh0aGlzLml0ZW1IZWFkZXJUZW1wbGF0ZVNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgZGF0YUl0ZW0gPSB0aGlzLl9nZXRQYXJlbnREYXRhKGluZGV4KTtcbiAgICAgICAgICAgIHRlbXBsYXRlS2V5ID0gdGhpcy5faXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3IoZGF0YUl0ZW0sIGluZGV4LCB0aGlzLml0ZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoXzIgPSB0aGlzLl9pdGVtSGVhZGVyVGVtcGxhdGVzSW50ZXJuYWwubGVuZ3RoOyBpIDwgbGVuZ3RoXzI7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2l0ZW1IZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbFtpXS5rZXkgPT09IHRlbXBsYXRlS2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1IZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbFtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbUhlYWRlclRlbXBsYXRlc0ludGVybmFsWzBdO1xuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX2dldEl0ZW1Db250ZW50VGVtcGxhdGUgPSBmdW5jdGlvbiAoaW5kZXgsIGNoaWxkSW5kZXgpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlS2V5ID0gJ2RlZmF1bHQnO1xuICAgICAgICBpZiAodGhpcy5pdGVtQ29udGVudFRlbXBsYXRlU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBfY2hpbGRJbmRleCA9IChwbGF0Zm9ybV8xLmlzSU9TID8gY2hpbGRJbmRleCAtIDEgOiBjaGlsZEluZGV4KTtcbiAgICAgICAgICAgIHZhciBkYXRhSXRlbSA9IHRoaXMuX2dldENoaWxkRGF0YShpbmRleCwgdGhpcy5fZ2V0SGFzSGVhZGVyKCkgPyBfY2hpbGRJbmRleCAtIDEgOiBfY2hpbGRJbmRleCk7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zLmdldEl0ZW0gPyB0aGlzLml0ZW1zLmdldEl0ZW0oaW5kZXgpW3RoaXMuY2hpbGRJdGVtc10gOiB0aGlzLml0ZW1zW3RoaXMuY2hpbGRJdGVtc107XG4gICAgICAgICAgICB0ZW1wbGF0ZUtleSA9IHRoaXMuX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvcihkYXRhSXRlbSwgaW5kZXgsIGNoaWxkSW5kZXgsIGl0ZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoXzMgPSB0aGlzLl9pdGVtQ29udGVudFRlbXBsYXRlc0ludGVybmFsLmxlbmd0aDsgaSA8IGxlbmd0aF8zOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pdGVtQ29udGVudFRlbXBsYXRlc0ludGVybmFsW2ldLmtleSA9PT0gdGVtcGxhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbUNvbnRlbnRUZW1wbGF0ZXNJbnRlcm5hbFtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbUNvbnRlbnRUZW1wbGF0ZXNJbnRlcm5hbFswXTtcbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9nZXRGb290ZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgdGVtcGxhdGVLZXkgPSAnZGVmYXVsdCc7XG4gICAgICAgIGlmICh0aGlzLmZvb3RlclRlbXBsYXRlU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBkYXRhSXRlbSA9IHRoaXMuX2dldFBhcmVudERhdGEoaW5kZXgpO1xuICAgICAgICAgICAgdGVtcGxhdGVLZXkgPSB0aGlzLl9mb290ZXJUZW1wbGF0ZVNlbGVjdG9yKGRhdGFJdGVtLCBpbmRleCwgdGhpcy5pdGVtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aF80ID0gdGhpcy5fZm9vdGVyVGVtcGxhdGVzSW50ZXJuYWwubGVuZ3RoOyBpIDwgbGVuZ3RoXzQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Zvb3RlclRlbXBsYXRlc0ludGVybmFsW2ldLmtleSA9PT0gdGVtcGxhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9vdGVyVGVtcGxhdGVzSW50ZXJuYWxbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvb3RlclRlbXBsYXRlc0ludGVybmFsWzBdO1xuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX2dldERlZmF1bHRIZWFkZXJDb250ZW50ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBsYmwgPSBuZXcgbGFiZWxfMS5MYWJlbCgpO1xuICAgICAgICBsYmwuYmluZCh7XG4gICAgICAgICAgICB0YXJnZXRQcm9wZXJ0eTogJ3RleHQnLFxuICAgICAgICAgICAgc291cmNlUHJvcGVydHk6ICckdmFsdWUnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbGJsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX2dldERlZmF1bHRJdGVtSGVhZGVyQ29udGVudCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgbGJsID0gbmV3IGxhYmVsXzEuTGFiZWwoKTtcbiAgICAgICAgbGJsLmJpbmQoe1xuICAgICAgICAgICAgdGFyZ2V0UHJvcGVydHk6ICd0ZXh0JyxcbiAgICAgICAgICAgIHNvdXJjZVByb3BlcnR5OiAnJHZhbHVlJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxibDtcbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9nZXREZWZhdWx0SXRlbUNvbnRlbnRDb250ZW50ID0gZnVuY3Rpb24gKGluZGV4LCBjaGlsZEluZGV4KSB7XG4gICAgICAgIHZhciBsYmwgPSBuZXcgbGFiZWxfMS5MYWJlbCgpO1xuICAgICAgICBsYmwuYmluZCh7XG4gICAgICAgICAgICB0YXJnZXRQcm9wZXJ0eTogJ3RleHQnLFxuICAgICAgICAgICAgc291cmNlUHJvcGVydHk6ICckdmFsdWUnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbGJsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX2dldERlZmF1bHRGb290ZXJDb250ZW50ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBsYmwgPSBuZXcgbGFiZWxfMS5MYWJlbCgpO1xuICAgICAgICBsYmwuYmluZCh7XG4gICAgICAgICAgICB0YXJnZXRQcm9wZXJ0eTogJ3RleHQnLFxuICAgICAgICAgICAgc291cmNlUHJvcGVydHk6ICckdmFsdWUnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbGJsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX3ByZXBhcmVIZWFkZXJJdGVtID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLmJpbmRpbmdDb250ZXh0ID0gdGhpcy5fZ2V0UGFyZW50RGF0YShpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9wcmVwYXJlSXRlbUhlYWRlciA9IGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgaXRlbS5iaW5kaW5nQ29udGV4dCA9IHRoaXMuX2dldFBhcmVudERhdGEoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2NvcmRpb25CYXNlLnByb3RvdHlwZS5fcHJlcGFyZUl0ZW1Db250ZW50ID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBjaGlsZEluZGV4KSB7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLmJpbmRpbmdDb250ZXh0ID0gdGhpcy5fZ2V0Q2hpbGREYXRhKGluZGV4LCBjaGlsZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUuX3ByZXBhcmVGb290ZXJJdGVtID0gZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLmJpbmRpbmdDb250ZXh0ID0gdGhpcy5fZ2V0UGFyZW50RGF0YShpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9vbkhlYWRlclJvd0hlaWdodFByb3BlcnR5Q2hhbmdlZCA9IGZ1bmN0aW9uIChvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb25CYXNlLnByb3RvdHlwZS5fb25JdGVtSGVhZGVyUm93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9vbkl0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9vbkZvb3RlclJvd0hlaWdodFByb3BlcnR5Q2hhbmdlZCA9IGZ1bmN0aW9uIChvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb25CYXNlLnByb3RvdHlwZS51cGRhdGVFZmZlY3RpdmVJdGVtSGVhZGVyUm93SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBvcnRzLml0ZW1IZWFkZXJSb3dIZWlnaHRQcm9wZXJ0eS5jb2VyY2UodGhpcyk7XG4gICAgfTtcbiAgICBBY2NvcmRpb25CYXNlLnByb3RvdHlwZS51cGRhdGVFZmZlY3RpdmVJdGVtQ29udGVudFJvd0hlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwb3J0cy5pdGVtQ29udGVudFJvd0hlaWdodFByb3BlcnR5LmNvZXJjZSh0aGlzKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UucHJvdG90eXBlLl9nZXRQYXJlbnREYXRhID0gZnVuY3Rpb24gKHBhcmVudEluZGV4KSB7XG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIHJldHVybiBpdGVtcy5nZXRJdGVtID8gaXRlbXMuZ2V0SXRlbShwYXJlbnRJbmRleCkgOiBpdGVtc1twYXJlbnRJbmRleF07XG4gICAgfTtcbiAgICBBY2NvcmRpb25CYXNlLnByb3RvdHlwZS5fZ2V0Q2hpbGREYXRhID0gZnVuY3Rpb24gKHBhcmVudEluZGV4LCBjaGlsZEluZGV4KSB7XG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIHJldHVybiBpdGVtcy5nZXRJdGVtID8gaXRlbXMuZ2V0SXRlbShwYXJlbnRJbmRleClbdGhpcy5jaGlsZEl0ZW1zXVtjaGlsZEluZGV4XSA6IGl0ZW1zW3BhcmVudEluZGV4XVt0aGlzLmNoaWxkSXRlbXNdW2NoaWxkSW5kZXhdO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjY29yZGlvbkJhc2UucHJvdG90eXBlLCBcImFsbG93TXVsdGlwbGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbGxvd011bHRpcGxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fYWxsb3dNdWx0aXBsZSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWNjb3JkaW9uQmFzZS5wcm90b3R5cGUsIFwic2VwYXJhdG9yQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0eWxlLnNlcGFyYXRvckNvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5zZXBhcmF0b3JDb2xvciA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBBY2NvcmRpb25CYXNlLnByb3RvdHlwZS5fb25JdGVtc0NoYW5nZWQgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbkJhc2UuaGVhZGVyTG9hZGluZ0V2ZW50ID0gJ2hlYWRlckxvYWRpbmcnO1xuICAgIEFjY29yZGlvbkJhc2UuZm9vdGVyTG9hZGluZ0V2ZW50ID0gJ2Zvb3RlckxvYWRpbmcnO1xuICAgIEFjY29yZGlvbkJhc2UuaXRlbUhlYWRlckxvYWRpbmdFdmVudCA9ICdpdGVtSGVhZGVyTG9hZGluZyc7XG4gICAgQWNjb3JkaW9uQmFzZS5pdGVtQ29udGVudExvYWRpbmdFdmVudCA9ICdpdGVtQ29udGVudExvYWRpbmcnO1xuICAgIEFjY29yZGlvbkJhc2UuaXRlbUhlYWRlclRhcEV2ZW50ID0gJ2l0ZW1IZWFkZXJUYXAnO1xuICAgIEFjY29yZGlvbkJhc2UuaXRlbUNvbnRlbnRUYXBFdmVudCA9ICdpdGVtQ29udGVudFRhcCc7XG4gICAgQWNjb3JkaW9uQmFzZS5sb2FkTW9yZUl0ZW1zRXZlbnQgPSAnbG9hZE1vcmVJdGVtcyc7XG4gICAgQWNjb3JkaW9uQmFzZS5zZWxlY3RlZEluZGV4ZXNDaGFuZ2VkRXZlbnQgPSAnc2VsZWN0ZWRJbmRleGVzQ2hhbmdlZCc7XG4gICAgQWNjb3JkaW9uQmFzZS5rbm93bkZ1bmN0aW9ucyA9IFsnaXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3InLCAnaXRlbUNvbnRlbnRUZW1wbGF0ZVNlbGVjdG9yJywgJ2hlYWRlclRlbXBsYXRlU2VsZWN0b3InLFxuICAgICAgICAnZm9vdGVyVGVtcGxhdGVTZWxlY3RvcicsICdpdGVtSWRHZW5lcmF0b3InLCAnY2hpbGRJZEdlbmVyYXRvciddO1xuICAgIEFjY29yZGlvbkJhc2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgdmlld18xLkNTU1R5cGUoJ0FjY29yZGlvbicpXG4gICAgXSwgQWNjb3JkaW9uQmFzZSk7XG4gICAgcmV0dXJuIEFjY29yZGlvbkJhc2U7XG59KHZpZXdfMS5Db250YWluZXJWaWV3KSk7XG5leHBvcnRzLkFjY29yZGlvbkJhc2UgPSBBY2NvcmRpb25CYXNlO1xuZXhwb3J0cy5zZXBhcmF0b3JDb2xvclByb3BlcnR5ID0gbmV3IHZpZXdfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogJ3NlcGFyYXRvckNvbG9yJyxcbiAgICBjc3NOYW1lOiAnc2VwYXJhdG9yLWNvbG9yJyxcbiAgICB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFN0cmluZyh2KTsgfVxufSk7XG5leHBvcnRzLnNlcGFyYXRvckNvbG9yUHJvcGVydHkucmVnaXN0ZXIodmlld18xLlN0eWxlKTtcbmV4cG9ydHMuaGVhZGVyVGVtcGxhdGVQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdoZWFkZXJUZW1wbGF0ZScsXG4gICAgYWZmZWN0c0xheW91dDogdHJ1ZSxcbiAgICB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0LnJlZnJlc2goKTtcbiAgICB9XG59KTtcbmV4cG9ydHMuaGVhZGVyVGVtcGxhdGVQcm9wZXJ0eS5yZWdpc3RlcihBY2NvcmRpb25CYXNlKTtcbmV4cG9ydHMuaGVhZGVyVGVtcGxhdGVzUHJvcGVydHkgPSBuZXcgdmlld18xLlByb3BlcnR5KHtcbiAgICBuYW1lOiAnaGVhZGVyVGVtcGxhdGVzJywgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXJfMS5wYXJzZU11bHRpcGxlVGVtcGxhdGVzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufSk7XG5leHBvcnRzLmhlYWRlclRlbXBsYXRlc1Byb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pdGVtSGVhZGVyVGVtcGxhdGVQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdpdGVtSGVhZGVyVGVtcGxhdGUnLFxuICAgIGFmZmVjdHNMYXlvdXQ6IHRydWUsXG4gICAgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldC5yZWZyZXNoKCk7XG4gICAgfVxufSk7XG5leHBvcnRzLml0ZW1IZWFkZXJUZW1wbGF0ZVByb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pdGVtSGVhZGVyVGVtcGxhdGVzUHJvcGVydHkgPSBuZXcgdmlld18xLlByb3BlcnR5KHtcbiAgICBuYW1lOiAnaXRlbUhlYWRlclRlbXBsYXRlcycsIHZhbHVlQ29udmVydGVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyXzEucGFyc2VNdWx0aXBsZVRlbXBsYXRlcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn0pO1xuZXhwb3J0cy5pdGVtSGVhZGVyVGVtcGxhdGVzUHJvcGVydHkucmVnaXN0ZXIoQWNjb3JkaW9uQmFzZSk7XG5leHBvcnRzLml0ZW1Db250ZW50VGVtcGxhdGVQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdpdGVtQ29udGVudFRlbXBsYXRlJyxcbiAgICBhZmZlY3RzTGF5b3V0OiB0cnVlLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQucmVmcmVzaCgpO1xuICAgIH1cbn0pO1xuZXhwb3J0cy5pdGVtQ29udGVudFRlbXBsYXRlUHJvcGVydHkucmVnaXN0ZXIoQWNjb3JkaW9uQmFzZSk7XG5leHBvcnRzLml0ZW1Db250ZW50VGVtcGxhdGVzUHJvcGVydHkgPSBuZXcgdmlld18xLlByb3BlcnR5KHtcbiAgICBuYW1lOiAnaXRlbUNvbnRlbnRUZW1wbGF0ZXMnLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcl8xLnBhcnNlTXVsdGlwbGVUZW1wbGF0ZXModmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59KTtcbmV4cG9ydHMuaXRlbUNvbnRlbnRUZW1wbGF0ZXNQcm9wZXJ0eS5yZWdpc3RlcihBY2NvcmRpb25CYXNlKTtcbmV4cG9ydHMuZm9vdGVyVGVtcGxhdGVQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdmb290ZXJUZW1wbGF0ZScsXG4gICAgYWZmZWN0c0xheW91dDogdHJ1ZSxcbiAgICB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0LnJlZnJlc2goKTtcbiAgICB9XG59KTtcbmV4cG9ydHMuZm9vdGVyVGVtcGxhdGVQcm9wZXJ0eS5yZWdpc3RlcihBY2NvcmRpb25CYXNlKTtcbmV4cG9ydHMuZm9vdGVyVGVtcGxhdGVzUHJvcGVydHkgPSBuZXcgdmlld18xLlByb3BlcnR5KHtcbiAgICBuYW1lOiAnZm9vdGVyVGVtcGxhdGVzJywgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXJfMS5wYXJzZU11bHRpcGxlVGVtcGxhdGVzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufSk7XG5leHBvcnRzLmZvb3RlclRlbXBsYXRlc1Byb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pdGVtc1Byb3BlcnR5ID0gbmV3IHZpZXdfMS5Qcm9wZXJ0eSh7XG4gICAgbmFtZTogJ2l0ZW1zJyxcbiAgICBhZmZlY3RzTGF5b3V0OiB0cnVlLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSBpbnN0YW5jZW9mIG9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICB3ZWFrX2V2ZW50X2xpc3RlbmVyXzEucmVtb3ZlV2Vha0V2ZW50TGlzdGVuZXIob2xkVmFsdWUsIG9ic2VydmFibGVfYXJyYXlfMS5PYnNlcnZhYmxlQXJyYXkuY2hhbmdlRXZlbnQsIHRhcmdldC5fb25JdGVtc0NoYW5nZWQsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2Ygb2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHdlYWtfZXZlbnRfbGlzdGVuZXJfMS5hZGRXZWFrRXZlbnRMaXN0ZW5lcihuZXdWYWx1ZSwgb2JzZXJ2YWJsZV9hcnJheV8xLk9ic2VydmFibGVBcnJheS5jaGFuZ2VFdmVudCwgdGFyZ2V0Ll9vbkl0ZW1zQ2hhbmdlZCwgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQucmVmcmVzaCgpO1xuICAgIH1cbn0pO1xuZXhwb3J0cy5pdGVtc1Byb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5zZWxlY3RlZEluZGV4ZXNQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdzZWxlY3RlZEluZGV4ZXMnLFxuICAgIGRlZmF1bHRWYWx1ZTogW10sXG4gICAgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0Lm5vdGlmeSh7XG4gICAgICAgICAgICBldmVudE5hbWU6IEFjY29yZGlvbkJhc2Uuc2VsZWN0ZWRJbmRleGVzQ2hhbmdlZEV2ZW50LFxuICAgICAgICAgICAgb2JqZWN0OiB0YXJnZXQsXG4gICAgICAgICAgICBvbGRJbmRleDogb2xkVmFsdWUsXG4gICAgICAgICAgICBuZXdJbmRleDogbmV3VmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRhcmdldC51cGRhdGVOYXRpdmVJbmRleGVzKG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgfVxufSk7XG5leHBvcnRzLnNlbGVjdGVkSW5kZXhlc1Byb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xudmFyIGRlZmF1bHRSb3dIZWlnaHQgPSAnYXV0byc7XG5leHBvcnRzLmhlYWRlclJvd0hlaWdodFByb3BlcnR5ID0gbmV3IHZpZXdfMS5Db2VyY2libGVQcm9wZXJ0eSh7XG4gICAgbmFtZTogJ2hlYWRlclJvd0hlaWdodCcsIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFJvd0hlaWdodCwgZXF1YWxpdHlDb21wYXJlcjogdmlld18xLkxlbmd0aC5lcXVhbHMsXG4gICAgY29lcmNlVmFsdWU6IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQubmF0aXZlVmlld1Byb3RlY3RlZCA/IHZhbHVlIDogZGVmYXVsdFJvd0hlaWdodDtcbiAgICB9LFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRhcmdldC5fZWZmZWN0aXZlSGVhZGVyUm93SGVpZ2h0ID0gdmlld18xLkxlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgYXV0b0VmZmVjdGl2ZVJvd0hlaWdodCk7XG4gICAgICAgIHRhcmdldC5fb25IZWFkZXJSb3dIZWlnaHRQcm9wZXJ0eUNoYW5nZWQob2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogdmlld18xLkxlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLmhlYWRlclJvd0hlaWdodFByb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pdGVtSGVhZGVyUm93SGVpZ2h0UHJvcGVydHkgPSBuZXcgdmlld18xLkNvZXJjaWJsZVByb3BlcnR5KHtcbiAgICBuYW1lOiAnaXRlbUhlYWRlclJvd0hlaWdodCcsIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFJvd0hlaWdodCwgZXF1YWxpdHlDb21wYXJlcjogdmlld18xLkxlbmd0aC5lcXVhbHMsXG4gICAgY29lcmNlVmFsdWU6IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQubmF0aXZlVmlld1Byb3RlY3RlZCA/IHZhbHVlIDogZGVmYXVsdFJvd0hlaWdodDtcbiAgICB9LFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRhcmdldC5fZWZmZWN0aXZlSXRlbUhlYWRlclJvd0hlaWdodCA9IHZpZXdfMS5MZW5ndGgudG9EZXZpY2VQaXhlbHMobmV3VmFsdWUsIGF1dG9FZmZlY3RpdmVSb3dIZWlnaHQpO1xuICAgICAgICB0YXJnZXQuX29uSXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5Q2hhbmdlZChvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIH0sIHZhbHVlQ29udmVydGVyOiB2aWV3XzEuTGVuZ3RoLnBhcnNlXG59KTtcbmV4cG9ydHMuaXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pdGVtQ29udGVudFJvd0hlaWdodFByb3BlcnR5ID0gbmV3IHZpZXdfMS5Db2VyY2libGVQcm9wZXJ0eSh7XG4gICAgbmFtZTogJ2l0ZW1Db250ZW50Um93SGVpZ2h0JywgZGVmYXVsdFZhbHVlOiBkZWZhdWx0Um93SGVpZ2h0LCBlcXVhbGl0eUNvbXBhcmVyOiB2aWV3XzEuTGVuZ3RoLmVxdWFscyxcbiAgICBjb2VyY2VWYWx1ZTogZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5uYXRpdmVWaWV3UHJvdGVjdGVkID8gdmFsdWUgOiBkZWZhdWx0Um93SGVpZ2h0O1xuICAgIH0sXG4gICAgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0Ll9lZmZlY3RpdmVJdGVtQ29udGVudFJvd0hlaWdodCA9IHZpZXdfMS5MZW5ndGgudG9EZXZpY2VQaXhlbHMobmV3VmFsdWUsIGF1dG9FZmZlY3RpdmVSb3dIZWlnaHQpO1xuICAgICAgICB0YXJnZXQuX29uSXRlbUNvbnRlbnRSb3dIZWlnaHRQcm9wZXJ0eUNoYW5nZWQob2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogdmlld18xLkxlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLml0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHkucmVnaXN0ZXIoQWNjb3JkaW9uQmFzZSk7XG5leHBvcnRzLmZvb3RlclJvd0hlaWdodFByb3BlcnR5ID0gbmV3IHZpZXdfMS5Db2VyY2libGVQcm9wZXJ0eSh7XG4gICAgbmFtZTogJ2Zvb3RlclJvd0hlaWdodCcsIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFJvd0hlaWdodCwgZXF1YWxpdHlDb21wYXJlcjogdmlld18xLkxlbmd0aC5lcXVhbHMsXG4gICAgY29lcmNlVmFsdWU6IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQubmF0aXZlVmlld1Byb3RlY3RlZCA/IHZhbHVlIDogZGVmYXVsdFJvd0hlaWdodDtcbiAgICB9LFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRhcmdldC5fZWZmZWN0aXZlRm9vdGVyUm93SGVpZ2h0ID0gdmlld18xLkxlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgYXV0b0VmZmVjdGl2ZVJvd0hlaWdodCk7XG4gICAgICAgIHRhcmdldC5fb25Gb290ZXJSb3dIZWlnaHRQcm9wZXJ0eUNoYW5nZWQob2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogdmlld18xLkxlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLmZvb3RlclJvd0hlaWdodFByb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pb3NFc3RpbWF0ZWRIZWFkZXJSb3dIZWlnaHRQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdpb3NFc3RpbWF0ZWRIZWFkZXJSb3dIZWlnaHQnLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZpZXdfMS5MZW5ndGgucGFyc2Uodik7IH1cbn0pO1xuZXhwb3J0cy5pb3NFc3RpbWF0ZWRIZWFkZXJSb3dIZWlnaHRQcm9wZXJ0eS5yZWdpc3RlcihBY2NvcmRpb25CYXNlKTtcbmV4cG9ydHMuaW9zRXN0aW1hdGVkSXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5ID0gbmV3IHZpZXdfMS5Qcm9wZXJ0eSh7XG4gICAgbmFtZTogJ2lvc0VzdGltYXRlZEl0ZW1IZWFkZXJSb3dIZWlnaHQnLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZpZXdfMS5MZW5ndGgucGFyc2Uodik7IH1cbn0pO1xuZXhwb3J0cy5pb3NFc3RpbWF0ZWRJdGVtSGVhZGVyUm93SGVpZ2h0UHJvcGVydHkucmVnaXN0ZXIoQWNjb3JkaW9uQmFzZSk7XG5leHBvcnRzLmlvc0VzdGltYXRlZEl0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHkgPSBuZXcgdmlld18xLlByb3BlcnR5KHtcbiAgICBuYW1lOiAnaW9zRXN0aW1hdGVkSXRlbUNvbnRlbnRSb3dIZWlnaHQnLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZpZXdfMS5MZW5ndGgucGFyc2Uodik7IH1cbn0pO1xuZXhwb3J0cy5pb3NFc3RpbWF0ZWRJdGVtQ29udGVudFJvd0hlaWdodFByb3BlcnR5LnJlZ2lzdGVyKEFjY29yZGlvbkJhc2UpO1xuZXhwb3J0cy5pb3NFc3RpbWF0ZWRGb290ZXJSb3dIZWlnaHRQcm9wZXJ0eSA9IG5ldyB2aWV3XzEuUHJvcGVydHkoe1xuICAgIG5hbWU6ICdpb3NFc3RpbWF0ZWRGb290ZXJSb3dIZWlnaHQnLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZpZXdfMS5MZW5ndGgucGFyc2Uodik7IH1cbn0pO1xuZXhwb3J0cy5pb3NFc3RpbWF0ZWRGb290ZXJSb3dIZWlnaHRQcm9wZXJ0eS5yZWdpc3RlcihBY2NvcmRpb25CYXNlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY29yZGlvbi5jb21tb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdmlld18xID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvY29yZS92aWV3XCIpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoXCIuL2FjY29yZGlvbi5jb21tb25cIik7XG52YXIgYWNjb3JkaW9uX2NvbW1vbl8xID0gcmVxdWlyZShcIi4vYWNjb3JkaW9uLmNvbW1vblwiKTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvY29sb3JcIik7XG52YXIgdXRpbHMgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91dGlscy91dGlsc1wiKTtcbnZhciBwcm9maWxpbmdfMSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3Byb2ZpbGluZ1wiKTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIik7XG52YXIgcHJveHlfdmlld19jb250YWluZXJfMSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3Byb3h5LXZpZXctY29udGFpbmVyXCIpO1xudmFyIHN0YWNrX2xheW91dF8xID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9zdGFjay1sYXlvdXRcIik7XG5leHBvcnRzLklURU1UQVAgPSAnaXRlbVRhcCc7XG52YXIgTkdfVklFVyA9ICdfbmdWaWV3UmVmJztcbmdsb2JhbC5tb2R1bGVNZXJnZShjb21tb24sIGV4cG9ydHMpO1xudmFyIERFRkFVTFRfSEVJR0hUID0gNDQ7XG52YXIgaW5maW5pdHkgPSB1dGlscy5sYXlvdXQubWFrZU1lYXN1cmVTcGVjKDAsIHV0aWxzLmxheW91dC5VTlNQRUNJRklFRCk7XG52YXIgbWFqb3JWZXJzaW9uID0gdXRpbHMuaW9zLk1ham9yVmVyc2lvbjtcbmZ1bmN0aW9uIG5vdGlmeUZvckl0ZW1BdEluZGV4KG93bmVyLCBuYXRpdmVWaWV3LCB2aWV3LCBldmVudE5hbWUsIGluZGV4UGF0aCkge1xuICAgIHZhciBhcmdzID0ge1xuICAgICAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgb2JqZWN0OiBvd25lcixcbiAgICAgICAgaW5kZXg6IGluZGV4UGF0aC5zZWN0aW9uLFxuICAgICAgICBjaGlsZEluZGV4OiBpbmRleFBhdGgucm93LFxuICAgICAgICB2aWV3OiB2aWV3LFxuICAgICAgICBpb3M6IG5hdGl2ZVZpZXcsXG4gICAgICAgIGFuZHJvaWQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgb3duZXIubm90aWZ5KGFyZ3MpO1xuICAgIHJldHVybiBhcmdzO1xufVxuZnVuY3Rpb24gbm90aWZ5Rm9ySGVhZGVyT3JGb290ZXJBdEluZGV4KG93bmVyLCBuYXRpdmVWaWV3LCB2aWV3LCBldmVudE5hbWUsIHBhcmVudEluZGV4KSB7XG4gICAgdmFyIGFyZ3MgPSB7XG4gICAgICAgIGV2ZW50TmFtZTogZXZlbnROYW1lLFxuICAgICAgICBvYmplY3Q6IG93bmVyLFxuICAgICAgICBpbmRleDogcGFyZW50SW5kZXgsXG4gICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgIGlvczogbmF0aXZlVmlldyxcbiAgICAgICAgYW5kcm9pZDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBvd25lci5ub3RpZnkoYXJncyk7XG4gICAgcmV0dXJuIGFyZ3M7XG59XG52YXIgRGVmYXVsdEFjY29yZGlvbkhlYWRlclZpZXdIZWlnaHQgPSA0NC4wO1xudmFyIEFjY29yZGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjY29yZGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY2NvcmRpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVzdGltYXRlZEl0ZW1IZWFkZXJSb3dIZWlnaHQgPSBERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgX3RoaXMuZXN0aW1hdGVkSXRlbUNvbnRlbnRSb3dIZWlnaHQgPSBERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgX3RoaXMuZXN0aW1hdGVkSGVhZGVyUm93SGVpZ2h0ID0gREVGQVVMVF9IRUlHSFQ7XG4gICAgICAgIF90aGlzLmVzdGltYXRlZEZvb3RlclJvd0hlaWdodCA9IERFRkFVTFRfSEVJR0hUO1xuICAgICAgICBfdGhpcy5faXRlbUNvbnRlbnRIZWlnaHRzID0gW107XG4gICAgICAgIF90aGlzLl9pdGVtSGVhZGVySGVpZ2h0cyA9IFtdO1xuICAgICAgICBfdGhpcy5faGVhZGVySGVpZ2h0cyA9IFtdO1xuICAgICAgICBfdGhpcy5fZm9vdGVySGVpZ2h0cyA9IFtdO1xuICAgICAgICBfdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBfdGhpcy5fbWFwSXRlbUNvbnRlbnQgPSBuZXcgTWFwKCk7XG4gICAgICAgIF90aGlzLl9tYXBJdGVtSGVhZGVyID0gbmV3IE1hcCgpO1xuICAgICAgICBfdGhpcy5fbWFwSGVhZGVyID0gbmV3IE1hcCgpO1xuICAgICAgICBfdGhpcy5fbWFwRm9vdGVyID0gbmV3IE1hcCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFjY29yZGlvbi5wcm90b3R5cGUudXBkYXRlTmF0aXZlSXRlbXMgPSBmdW5jdGlvbiAob2xkSXRlbXMsIG5ld0l0ZW1zKSB7XG4gICAgICAgIHRoaXMuX2lvcy5yZWxvYWREYXRhKCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLmNyZWF0ZU5hdGl2ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBVSVRhYmxlVmlld0ltcGwuaW5pdFdpdGhPd25lcihuZXcgV2Vha1JlZih0aGlzKSk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLmluaXROYXRpdmVWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXROYXRpdmVWaWV3LmNhbGwodGhpcyk7XG4gICAgICAgIHZhciBuYXRpdmVWaWV3ID0gdGhpcy5uYXRpdmVWaWV3UHJvdGVjdGVkO1xuICAgICAgICBuYXRpdmVWaWV3LnJlZ2lzdGVyQ2xhc3NGb3JDZWxsUmV1c2VJZGVudGlmaWVyKEFjY29yZGlvbkl0ZW1IZWFkZXJDZWxsLmNsYXNzKCksIHRoaXMuX2RlZmF1bHRJdGVtSGVhZGVyVGVtcGxhdGUua2V5KTtcbiAgICAgICAgbmF0aXZlVmlldy5yZWdpc3RlckNsYXNzRm9yQ2VsbFJldXNlSWRlbnRpZmllcihBY2NvcmRpb25JdGVtQ29udGVudENlbGwuY2xhc3MoKSwgdGhpcy5fZGVmYXVsdEl0ZW1Db250ZW50VGVtcGxhdGUua2V5KTtcbiAgICAgICAgbmF0aXZlVmlldy5yZWdpc3RlckNsYXNzRm9yQ2VsbFJldXNlSWRlbnRpZmllcihBY2NvcmRpb25IZWFkZXJDZWxsLmNsYXNzKCksIHRoaXMuX2RlZmF1bHRIZWFkZXJUZW1wbGF0ZS5rZXkpO1xuICAgICAgICBuYXRpdmVWaWV3LnJlZ2lzdGVyQ2xhc3NGb3JDZWxsUmV1c2VJZGVudGlmaWVyKEFjY29yZGlvbkZvb3RlckNlbGwuY2xhc3MoKSwgdGhpcy5fZGVmYXVsdEZvb3RlclRlbXBsYXRlLmtleSk7XG4gICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkUm93SGVpZ2h0ID0gREVGQVVMVF9IRUlHSFQ7XG4gICAgICAgIG5hdGl2ZVZpZXcucm93SGVpZ2h0ID0gVUlUYWJsZVZpZXdBdXRvbWF0aWNEaW1lbnNpb247XG4gICAgICAgIHRoaXMuaW9zLnNlcGFyYXRvckNvbG9yID0gVUlDb2xvci5jbGVhckNvbG9yO1xuICAgICAgICB0aGlzLmlvcy50YWJsZUZvb3RlclZpZXcgPSBVSVZpZXcubmV3KCk7XG4gICAgICAgIGlmICh0aGlzLnNlcGFyYXRvckNvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLmlvcy5zZXBhcmF0b3JDb2xvciA9IG5ldyBjb2xvcl8xLkNvbG9yKHRoaXMuc2VwYXJhdG9yQ29sb3IpLmlvcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gQWNjb3JkaW9uRGF0YVNvdXJjZS5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBVSVRhYmxlVmlld0RlbGVnYXRlSW1wbC5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fc2V0TmF0aXZlQ2xpcFRvQm91bmRzKCk7XG4gICAgICAgIHRoaXMuX2V4cGFuZGVkVmlld3MgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2luZGV4U2V0ID0gTlNNdXRhYmxlSW5kZXhTZXQuYWxsb2MoKS5pbml0KCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLm9uTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9uTG9hZGVkLmNhbGwodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9pc0RhdGFEaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0TGF5b3V0KCk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlvcy5kYXRhU291cmNlID0gdGhpcy5fZGF0YVNvdXJjZTtcbiAgICAgICAgdGhpcy5pb3MuZGVsZWdhdGUgPSB0aGlzLl9kZWxlZ2F0ZTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUub25VbmxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pb3MuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9uVW5sb2FkZWQuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuZ2V0SXRlbUhlYWRlckhlaWdodCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbUhlYWRlckhlaWdodHNbaW5kZXhdO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5zZXRJdGVtSGVhZGVySGVpZ2h0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9pdGVtSGVhZGVySGVpZ2h0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuZ2V0SXRlbUNvbnRlbnRIZWlnaHQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1Db250ZW50SGVpZ2h0c1tpbmRleF07XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLnNldEl0ZW1Db250ZW50SGVpZ2h0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9pdGVtQ29udGVudEhlaWdodHNbaW5kZXhdID0gdmFsdWU7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLmdldEhlYWRlckhlaWdodCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGVhZGVySGVpZ2h0c1tpbmRleF07XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLnNldEhlYWRlckhlaWdodCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGVhZGVySGVpZ2h0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuZ2V0Rm9vdGVySGVpZ2h0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb290ZXJIZWlnaHRzW2luZGV4XTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuc2V0Rm9vdGVySGVpZ2h0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9mb290ZXJIZWlnaHRzW2luZGV4XSA9IHZhbHVlO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5kaXNwb3NlTmF0aXZlVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pb3MuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5faW5kZXhTZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4U2V0LnJlbW92ZUFsbEluZGV4ZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fc2V0TmF0aXZlQ2xpcFRvQm91bmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlvcy5jbGlwc1RvQm91bmRzID0gdHJ1ZTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY2NvcmRpb24ucHJvdG90eXBlLCBcImlvc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlVmlld1Byb3RlY3RlZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChmdW5jdGlvbiAodmlldywgbmF0aXZlVmlldywgbWFwKSB7XG4gICAgICAgICAgICBpZiAoISh2aWV3LmJpbmRpbmdDb250ZXh0IGluc3RhbmNlb2Ygb2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKSB7XG4gICAgICAgICAgICAgICAgdmlldy5iaW5kaW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYXBJdGVtQ29udGVudC5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3LCBuYXRpdmVWaWV3LCBtYXApIHtcbiAgICAgICAgICAgIGlmICghKHZpZXcuYmluZGluZ0NvbnRleHQgaW5zdGFuY2VvZiBvYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmJpbmRpbmdDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX21hcEl0ZW1IZWFkZXIuZm9yRWFjaChmdW5jdGlvbiAodmlldywgbmF0aXZlVmlldywgbWFwKSB7XG4gICAgICAgICAgICBpZiAoISh2aWV3LmJpbmRpbmdDb250ZXh0IGluc3RhbmNlb2Ygb2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKSB7XG4gICAgICAgICAgICAgICAgdmlldy5iaW5kaW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYXBIZWFkZXIuZm9yRWFjaChmdW5jdGlvbiAodmlldywgbmF0aXZlVmlldywgbWFwKSB7XG4gICAgICAgICAgICBpZiAoISh2aWV3LmJpbmRpbmdDb250ZXh0IGluc3RhbmNlb2Ygb2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKSB7XG4gICAgICAgICAgICAgICAgdmlldy5iaW5kaW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYXBGb290ZXIuZm9yRWFjaChmdW5jdGlvbiAodmlldywgbmF0aXZlVmlldywgbWFwKSB7XG4gICAgICAgICAgICBpZiAoISh2aWV3LmJpbmRpbmdDb250ZXh0IGluc3RhbmNlb2Ygb2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKSB7XG4gICAgICAgICAgICAgICAgdmlldy5iaW5kaW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5pb3MucmVsb2FkRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0TGF5b3V0KCk7XG4gICAgICAgICAgICB0aGlzLl9pc0RhdGFEaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEYXRhRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLl9zZWxlY3RlZEluZGV4ZXNVcGRhdGVkRnJvbU5hdGl2ZSA9IGZ1bmN0aW9uIChuZXdJbmRleGVzKSB7XG4gICAgICAgIGFjY29yZGlvbl9jb21tb25fMS5zZWxlY3RlZEluZGV4ZXNQcm9wZXJ0eS5uYXRpdmVWYWx1ZUNoYW5nZSh0aGlzLCBuZXdJbmRleGVzKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuc2Nyb2xsVG9JbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5pb3MpIHtcbiAgICAgICAgICAgIHRoaXMuaW9zLnNjcm9sbFRvUm93QXRJbmRleFBhdGhBdFNjcm9sbFBvc2l0aW9uQW5pbWF0ZWQoTlNJbmRleFBhdGguaW5kZXhQYXRoRm9ySXRlbUluU2VjdGlvbihpbmRleCwgMCksIDEsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5yZXF1ZXN0TGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3ByZXBhcmluZ0l0ZW1IZWFkZXJDZWxsIHx8ICF0aGlzLl9wcmVwYXJpbmdJdGVtQ29udGVudENlbGwgfHwgIXRoaXMuX3ByZXBhcmluZ0Zvb3RlckNlbGwgfHwgIXRoaXMuX3ByZXBhcmluZ0hlYWRlckNlbGwpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVxdWVzdExheW91dC5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbiAod2lkdGhNZWFzdXJlU3BlYywgaGVpZ2h0TWVhc3VyZVNwZWMpIHtcbiAgICAgICAgdGhpcy53aWR0aE1lYXN1cmVTcGVjID0gd2lkdGhNZWFzdXJlU3BlYztcbiAgICAgICAgdmFyIGNoYW5nZWQgPSB0aGlzLl9zZXRDdXJyZW50TWVhc3VyZVNwZWNzKHdpZHRoTWVhc3VyZVNwZWMsIGhlaWdodE1lYXN1cmVTcGVjKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5tZWFzdXJlLmNhbGwodGhpcywgd2lkdGhNZWFzdXJlU3BlYywgaGVpZ2h0TWVhc3VyZVNwZWMpO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5pb3MucmVsb2FkRGF0YSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLm9uTGF5b3V0ID0gZnVuY3Rpb24gKGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9uTGF5b3V0LmNhbGwodGhpcywgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tKTtcbiAgICAgICAgdGhpcy5fbWFwSXRlbUhlYWRlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFZpZXcsIGFjY29yZGlvbkhlYWRlcikge1xuICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IF90aGlzLl9lZmZlY3RpdmVJdGVtSGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGNlbGxIZWlnaHQgPSByb3dIZWlnaHQgPiAwID8gcm93SGVpZ2h0IDogX3RoaXMuZ2V0SXRlbUhlYWRlckhlaWdodChjaGlsZFZpZXcuX2FjY29yZGlvbkl0ZW1JbmRleCk7XG4gICAgICAgICAgICBpZiAoY2VsbEhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHZpZXdfMS5sYXlvdXQuZ2V0TWVhc3VyZVNwZWNTaXplKF90aGlzLndpZHRoTWVhc3VyZVNwZWMpO1xuICAgICAgICAgICAgICAgIHZpZXdfMS5WaWV3LmxheW91dENoaWxkKF90aGlzLCBjaGlsZFZpZXcsIDAsIDAsIHdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX21hcC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFZpZXcsIGFjY29yZGlvbkNlbGwpIHtcbiAgICAgICAgICAgIHZhciByb3dIZWlnaHQgPSBfdGhpcy5fZWZmZWN0aXZlSXRlbUNvbnRlbnRSb3dIZWlnaHQ7XG4gICAgICAgICAgICB2YXIgY2VsbEhlaWdodCA9IHJvd0hlaWdodCA+IDAgPyByb3dIZWlnaHQgOiBfdGhpcy5nZXRJdGVtQ29udGVudEhlaWdodChwYXJzZUludChcIlwiICsgKGNoaWxkVmlldy5fYWNjb3JkaW9uSXRlbUluZGV4ICsgMSkgKyAoY2hpbGRWaWV3Ll9hY2NvcmRpb25DaGlsZEl0ZW1JbmRleCAtIDEgLSAoX3RoaXMuX2dldEhhc0hlYWRlcigpID8gMSA6IDApKSkpO1xuICAgICAgICAgICAgaWYgKGNlbGxIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB2aWV3XzEubGF5b3V0LmdldE1lYXN1cmVTcGVjU2l6ZShfdGhpcy53aWR0aE1lYXN1cmVTcGVjKTtcbiAgICAgICAgICAgICAgICB2aWV3XzEuVmlldy5sYXlvdXRDaGlsZChfdGhpcywgY2hpbGRWaWV3LCAwLCAwLCB3aWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYXBIZWFkZXIuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRWaWV3LCBhY2NvcmRpb25IZWFkZXJDZWxsKSB7XG4gICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gX3RoaXMuX2VmZmVjdGl2ZUhlYWRlclJvd0hlaWdodDtcbiAgICAgICAgICAgIHZhciBjZWxsSGVpZ2h0ID0gcm93SGVpZ2h0ID4gMCA/IHJvd0hlaWdodCA6IF90aGlzLmdldEl0ZW1IZWFkZXJIZWlnaHQoY2hpbGRWaWV3Ll9hY2NvcmRpb25JdGVtSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGNlbGxIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB2aWV3XzEubGF5b3V0LmdldE1lYXN1cmVTcGVjU2l6ZShfdGhpcy53aWR0aE1lYXN1cmVTcGVjKTtcbiAgICAgICAgICAgICAgICB2aWV3XzEuVmlldy5sYXlvdXRDaGlsZChfdGhpcywgY2hpbGRWaWV3LCAwLCAwLCB3aWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYXBGb290ZXIuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRWaWV3LCBhY2NvcmRpb25Gb290ZXJDZWxsKSB7XG4gICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gX3RoaXMuX2VmZmVjdGl2ZUZvb3RlclJvd0hlaWdodDtcbiAgICAgICAgICAgIHZhciBjZWxsSGVpZ2h0ID0gcm93SGVpZ2h0ID4gMCA/IHJvd0hlaWdodCA6IF90aGlzLmdldEl0ZW1IZWFkZXJIZWlnaHQoY2hpbGRWaWV3Ll9hY2NvcmRpb25JdGVtSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGNlbGxIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB2aWV3XzEubGF5b3V0LmdldE1lYXN1cmVTcGVjU2l6ZShfdGhpcy53aWR0aE1lYXN1cmVTcGVjKTtcbiAgICAgICAgICAgICAgICB2aWV3XzEuVmlldy5sYXlvdXRDaGlsZChfdGhpcywgY2hpbGRWaWV3LCAwLCAwLCB3aWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5vbk1lYXN1cmUgPSBmdW5jdGlvbiAod2lkdGhNZWFzdXJlU3BlYywgaGVpZ2h0TWVhc3VyZVNwZWMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vbk1lYXN1cmUuY2FsbCh0aGlzLCB3aWR0aE1lYXN1cmVTcGVjLCBoZWlnaHRNZWFzdXJlU3BlYyk7XG4gICAgICAgIHRoaXMuX21hcC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFZpZXcsIGFjY29yZGlvbkNlbGwpIHtcbiAgICAgICAgICAgIHZpZXdfMS5WaWV3Lm1lYXN1cmVDaGlsZChfdGhpcywgY2hpbGRWaWV3LCBjaGlsZFZpZXcuX2N1cnJlbnRXaWR0aE1lYXN1cmVTcGVjLCBjaGlsZFZpZXcuX2N1cnJlbnRIZWlnaHRNZWFzdXJlU3BlYyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYXBJdGVtSGVhZGVyLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkVmlldywgYWNjb3JkaW9uSGVhZGVyKSB7XG4gICAgICAgICAgICB2aWV3XzEuVmlldy5tZWFzdXJlQ2hpbGQoX3RoaXMsIGNoaWxkVmlldywgY2hpbGRWaWV3Ll9jdXJyZW50V2lkdGhNZWFzdXJlU3BlYywgY2hpbGRWaWV3Ll9jdXJyZW50SGVpZ2h0TWVhc3VyZVNwZWMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbWFwSXRlbUNvbnRlbnQuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRWaWV3LCBhY2NvcmRpb25DZWxsKSB7XG4gICAgICAgICAgICB2aWV3XzEuVmlldy5tZWFzdXJlQ2hpbGQoX3RoaXMsIGNoaWxkVmlldywgY2hpbGRWaWV3Ll9jdXJyZW50V2lkdGhNZWFzdXJlU3BlYywgY2hpbGRWaWV3Ll9jdXJyZW50SGVpZ2h0TWVhc3VyZVNwZWMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbWFwSGVhZGVyLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkVmlldywgYWNjb3JkaW9uSGVhZGVyQ2VsbCkge1xuICAgICAgICAgICAgdmlld18xLlZpZXcubWVhc3VyZUNoaWxkKF90aGlzLCBjaGlsZFZpZXcsIGNoaWxkVmlldy5fY3VycmVudFdpZHRoTWVhc3VyZVNwZWMsIGNoaWxkVmlldy5fY3VycmVudEhlaWdodE1lYXN1cmVTcGVjKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX21hcEZvb3Rlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFZpZXcsIGFjY29yZGlvbkZvb3RlckNlbGwpIHtcbiAgICAgICAgICAgIHZpZXdfMS5WaWV3Lm1lYXN1cmVDaGlsZChfdGhpcywgY2hpbGRWaWV3LCBjaGlsZFZpZXcuX2N1cnJlbnRXaWR0aE1lYXN1cmVTcGVjLCBjaGlsZFZpZXcuX2N1cnJlbnRIZWlnaHRNZWFzdXJlU3BlYyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fbGF5b3V0SXRlbUhlYWRlckNlbGwgPSBmdW5jdGlvbiAoY2VsbFZpZXcsIGluZGV4UGF0aCkge1xuICAgICAgICBpZiAoY2VsbFZpZXcpIHtcbiAgICAgICAgICAgIHZhciByb3dIZWlnaHQgPSB0aGlzLl9lZmZlY3RpdmVJdGVtSGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGhlaWdodE1lYXN1cmVTcGVjID0gcm93SGVpZ2h0ID49IDAgPyB2aWV3XzEubGF5b3V0Lm1ha2VNZWFzdXJlU3BlYyhyb3dIZWlnaHQsIHZpZXdfMS5sYXlvdXQuRVhBQ1RMWSkgOiBpbmZpbml0eTtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlZFNpemUgPSB2aWV3XzEuVmlldy5tZWFzdXJlQ2hpbGQodGhpcywgY2VsbFZpZXcsIHRoaXMud2lkdGhNZWFzdXJlU3BlYywgaGVpZ2h0TWVhc3VyZVNwZWMpO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IG1lYXN1cmVkU2l6ZS5tZWFzdXJlZEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuc2V0SXRlbUhlYWRlckhlaWdodChpbmRleFBhdGguc2VjdGlvbiwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW9zLmVzdGltYXRlZEl0ZW1IZWFkZXJSb3dIZWlnaHQ7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLl9sYXlvdXRIZWFkZXJDZWxsID0gZnVuY3Rpb24gKGNlbGxWaWV3LCBpbmRleFBhdGgpIHtcbiAgICAgICAgaWYgKGNlbGxWaWV3KSB7XG4gICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gdGhpcy5fZWZmZWN0aXZlSGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGhlaWdodE1lYXN1cmVTcGVjID0gcm93SGVpZ2h0ID49IDAgPyB2aWV3XzEubGF5b3V0Lm1ha2VNZWFzdXJlU3BlYyhyb3dIZWlnaHQsIHZpZXdfMS5sYXlvdXQuRVhBQ1RMWSkgOiBpbmZpbml0eTtcbiAgICAgICAgICAgIHZhciBtZWFzdXJlZFNpemUgPSB2aWV3XzEuVmlldy5tZWFzdXJlQ2hpbGQodGhpcywgY2VsbFZpZXcsIHRoaXMud2lkdGhNZWFzdXJlU3BlYywgaGVpZ2h0TWVhc3VyZVNwZWMpO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IG1lYXN1cmVkU2l6ZS5tZWFzdXJlZEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVySGVpZ2h0KGluZGV4UGF0aC5zZWN0aW9uLCBoZWlnaHQpO1xuICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pb3MuZXN0aW1hdGVkSGVhZGVyUm93SGVpZ2h0O1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fbGF5b3V0SXRlbUNvbnRlbnRDZWxsID0gZnVuY3Rpb24gKGNlbGxWaWV3LCBpbmRleFBhdGgpIHtcbiAgICAgICAgaWYgKGNlbGxWaWV3KSB7XG4gICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gdGhpcy5fZWZmZWN0aXZlSXRlbUNvbnRlbnRSb3dIZWlnaHQ7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0TWVhc3VyZVNwZWMgPSByb3dIZWlnaHQgPj0gMCA/IHZpZXdfMS5sYXlvdXQubWFrZU1lYXN1cmVTcGVjKHJvd0hlaWdodCwgdmlld18xLmxheW91dC5FWEFDVExZKSA6IGluZmluaXR5O1xuICAgICAgICAgICAgdmFyIG1lYXN1cmVkU2l6ZSA9IHZpZXdfMS5WaWV3Lm1lYXN1cmVDaGlsZCh0aGlzLCBjZWxsVmlldywgdGhpcy53aWR0aE1lYXN1cmVTcGVjLCBoZWlnaHRNZWFzdXJlU3BlYyk7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gbWVhc3VyZWRTaXplLm1lYXN1cmVkSGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5zZXRJdGVtQ29udGVudEhlaWdodChwYXJzZUludChcIlwiICsgKGluZGV4UGF0aC5zZWN0aW9uICsgMSkgKyAoaW5kZXhQYXRoLnJvdyAtIDEgLSAodGhpcy5fZ2V0SGFzSGVhZGVyKCkgPyAxIDogMCkpKSwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW9zLmVzdGltYXRlZEl0ZW1Db250ZW50Um93SGVpZ2h0O1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fbGF5b3V0Rm9vdGVyQ2VsbCA9IGZ1bmN0aW9uIChjZWxsVmlldywgaW5kZXhQYXRoKSB7XG4gICAgICAgIGlmIChjZWxsVmlldykge1xuICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IHRoaXMuX2VmZmVjdGl2ZUZvb3RlclJvd0hlaWdodDtcbiAgICAgICAgICAgIHZhciBoZWlnaHRNZWFzdXJlU3BlYyA9IHJvd0hlaWdodCA+PSAwID8gdmlld18xLmxheW91dC5tYWtlTWVhc3VyZVNwZWMocm93SGVpZ2h0LCB2aWV3XzEubGF5b3V0LkVYQUNUTFkpIDogaW5maW5pdHk7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZWRTaXplID0gdmlld18xLlZpZXcubWVhc3VyZUNoaWxkKHRoaXMsIGNlbGxWaWV3LCB0aGlzLndpZHRoTWVhc3VyZVNwZWMsIGhlaWdodE1lYXN1cmVTcGVjKTtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBtZWFzdXJlZFNpemUubWVhc3VyZWRIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnNldEZvb3RlckhlaWdodChpbmRleFBhdGguc2VjdGlvbiwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW9zLmVzdGltYXRlZEZvb3RlclJvd0hlaWdodDtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuX3ByZXBhcmVJdGVtSGVhZGVyQ2VsbCA9IGZ1bmN0aW9uIChjZWxsLCBpbmRleFBhdGgpIHtcbiAgICAgICAgY2VsbC5zZWxlY3Rpb25TdHlsZSA9IDA7XG4gICAgICAgIHZhciBjZWxsSGVpZ2h0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fcHJlcGFyaW5nSXRlbUhlYWRlckNlbGwgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHZpZXcgPSBjZWxsLnZpZXc7XG4gICAgICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy5fZ2V0SXRlbUhlYWRlclRlbXBsYXRlKGluZGV4UGF0aC5zZWN0aW9uKS5jcmVhdGVWaWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IGFjY29yZGlvbl9jb21tb25fMS5BY2NvcmRpb25CYXNlLml0ZW1IZWFkZXJMb2FkaW5nRXZlbnQsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFBhdGguc2VjdGlvbixcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3LFxuICAgICAgICAgICAgICAgIGlvczogbnVsbCxcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm5vdGlmeShhcmdzKTtcbiAgICAgICAgICAgIHZpZXcgPSBhcmdzLnZpZXcgfHwgdGhpcy5fZ2V0RGVmYXVsdEl0ZW1IZWFkZXJDb250ZW50KGluZGV4UGF0aC5zZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICh2aWV3IGluc3RhbmNlb2YgcHJveHlfdmlld19jb250YWluZXJfMS5Qcm94eVZpZXdDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3AgPSBuZXcgc3RhY2tfbGF5b3V0XzEuU3RhY2tMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICBzcC5hZGRDaGlsZCh2aWV3KTtcbiAgICAgICAgICAgICAgICB2aWV3ID0gc3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNlbGwudmlldykge1xuICAgICAgICAgICAgICAgIGNlbGwub3duZXIgPSBuZXcgV2Vha1JlZih2aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNlbGwudmlldyAhPT0gdmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUl0ZW1IZWFkZXJDb250YWluZXIoY2VsbCk7XG4gICAgICAgICAgICAgICAgY2VsbC52aWV3Lm5hdGl2ZVZpZXdQcm90ZWN0ZWQucmVtb3ZlRnJvbVN1cGVydmlldygpO1xuICAgICAgICAgICAgICAgIGNlbGwub3duZXIgPSBuZXcgV2Vha1JlZih2aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVJdGVtSGVhZGVyKHZpZXcsIGluZGV4UGF0aC5zZWN0aW9uKTtcbiAgICAgICAgICAgIHZpZXcuX2FjY29yZGlvbkl0ZW1JbmRleCA9IGluZGV4UGF0aC5zZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5fbWFwSXRlbUhlYWRlci5zZXQoY2VsbCwgdmlldyk7XG4gICAgICAgICAgICBpZiAodmlldyAmJiAhdmlldy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgIGNlbGwuY29udGVudFZpZXcuYWRkU3Vidmlldyh2aWV3Lm5hdGl2ZVZpZXdQcm90ZWN0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2VsbEhlaWdodCA9IHRoaXMuX2xheW91dEl0ZW1IZWFkZXJDZWxsKHZpZXcsIGluZGV4UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJpbmdJdGVtSGVhZGVyQ2VsbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZWxsSGVpZ2h0O1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fcHJlcGFyZUl0ZW1Db250ZW50Q2VsbCA9IGZ1bmN0aW9uIChjZWxsLCBpbmRleFBhdGgpIHtcbiAgICAgICAgdmFyIGNlbGxIZWlnaHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJpbmdJdGVtQ29udGVudENlbGwgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHZpZXcgPSBjZWxsLnZpZXc7XG4gICAgICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy5fZ2V0SXRlbUNvbnRlbnRUZW1wbGF0ZShpbmRleFBhdGguc2VjdGlvbiwgaW5kZXhQYXRoLnJvdykuY3JlYXRlVmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBhY2NvcmRpb25fY29tbW9uXzEuQWNjb3JkaW9uQmFzZS5pdGVtQ29udGVudExvYWRpbmdFdmVudCxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4UGF0aC5zZWN0aW9uLFxuICAgICAgICAgICAgICAgIGNoaWxkSW5kZXg6IChpbmRleFBhdGgucm93IC0gKDEgKyAodGhpcy5fZ2V0SGFzSGVhZGVyKCkgPyAxIDogMCkpKSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3LFxuICAgICAgICAgICAgICAgIGlvczogbnVsbCxcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm5vdGlmeShhcmdzKTtcbiAgICAgICAgICAgIHZpZXcgPSBhcmdzLnZpZXcgfHwgdGhpcy5fZ2V0RGVmYXVsdEl0ZW1Db250ZW50Q29udGVudChpbmRleFBhdGguc2VjdGlvbiwgaW5kZXhQYXRoLnJvdyk7XG4gICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIHByb3h5X3ZpZXdfY29udGFpbmVyXzEuUHJveHlWaWV3Q29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwID0gbmV3IHN0YWNrX2xheW91dF8xLlN0YWNrTGF5b3V0KCk7XG4gICAgICAgICAgICAgICAgc3AuYWRkQ2hpbGQodmlldyk7XG4gICAgICAgICAgICAgICAgdmlldyA9IHNwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZWxsLnZpZXcpIHtcbiAgICAgICAgICAgICAgICBjZWxsLm93bmVyID0gbmV3IFdlYWtSZWYodmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjZWxsLnZpZXcgIT09IHZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVJdGVtQ29udGVudENvbnRhaW5lcihjZWxsKTtcbiAgICAgICAgICAgICAgICBjZWxsLnZpZXcubmF0aXZlVmlld1Byb3RlY3RlZC5yZW1vdmVGcm9tU3VwZXJ2aWV3KCk7XG4gICAgICAgICAgICAgICAgY2VsbC5vd25lciA9IG5ldyBXZWFrUmVmKHZpZXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZUl0ZW1Db250ZW50KHZpZXcsIGluZGV4UGF0aC5zZWN0aW9uLCBpbmRleFBhdGgucm93KTtcbiAgICAgICAgICAgIHZpZXcuX2FjY29yZGlvbkNoaWxkSXRlbUluZGV4ID0gaW5kZXhQYXRoLnJvdztcbiAgICAgICAgICAgIHZpZXcuX2FjY29yZGlvbkl0ZW1JbmRleCA9IGluZGV4UGF0aC5zZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChjZWxsLCB2aWV3KTtcbiAgICAgICAgICAgIGlmICh2aWV3ICYmICF2aWV3LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFZpZXcodmlldyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jb250ZW50Vmlldy5hZGRTdWJ2aWV3KHZpZXcubmF0aXZlVmlld1Byb3RlY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsSGVpZ2h0ID0gdGhpcy5fbGF5b3V0SXRlbUNvbnRlbnRDZWxsKHZpZXcsIGluZGV4UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJpbmdJdGVtQ29udGVudENlbGwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2VsbEhlaWdodDtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuX3ByZXBhcmVIZWFkZXJDZWxsID0gZnVuY3Rpb24gKGNlbGwsIGluZGV4UGF0aCkge1xuICAgICAgICB2YXIgY2VsbEhlaWdodDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXBhcmluZ0hlYWRlckNlbGwgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHZpZXcgPSBjZWxsLnZpZXc7XG4gICAgICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy5fZ2V0SGVhZGVyVGVtcGxhdGUoaW5kZXhQYXRoLnNlY3Rpb24pLmNyZWF0ZVZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhcmdzID0ge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogYWNjb3JkaW9uX2NvbW1vbl8xLkFjY29yZGlvbkJhc2UuZm9vdGVyTG9hZGluZ0V2ZW50LFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXhQYXRoLnNlY3Rpb24sXG4gICAgICAgICAgICAgICAgdmlldzogdmlldyxcbiAgICAgICAgICAgICAgICBpb3M6IG51bGwsXG4gICAgICAgICAgICAgICAgYW5kcm9pZDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5ub3RpZnkoYXJncyk7XG4gICAgICAgICAgICB2aWV3ID0gYXJncy52aWV3IHx8IHRoaXMuX2dldERlZmF1bHRIZWFkZXJDb250ZW50KGluZGV4UGF0aC5yb3cpO1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBwcm94eV92aWV3X2NvbnRhaW5lcl8xLlByb3h5Vmlld0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHZhciBzcCA9IG5ldyBzdGFja19sYXlvdXRfMS5TdGFja0xheW91dCgpO1xuICAgICAgICAgICAgICAgIHNwLmFkZENoaWxkKHZpZXcpO1xuICAgICAgICAgICAgICAgIHZpZXcgPSBzcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2VsbC52aWV3KSB7XG4gICAgICAgICAgICAgICAgY2VsbC5vd25lciA9IG5ldyBXZWFrUmVmKHZpZXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2VsbC52aWV3ICE9PSB2aWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlSGVhZGVyQ29udGFpbmVyKGNlbGwpO1xuICAgICAgICAgICAgICAgIGNlbGwudmlldy5uYXRpdmVWaWV3UHJvdGVjdGVkLnJlbW92ZUZyb21TdXBlcnZpZXcoKTtcbiAgICAgICAgICAgICAgICBjZWxsLm93bmVyID0gbmV3IFdlYWtSZWYodmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlSXRlbUhlYWRlcih2aWV3LCBpbmRleFBhdGguc2VjdGlvbik7XG4gICAgICAgICAgICB2aWV3Ll9hY2NvcmRpb25DaGlsZEl0ZW1JbmRleCA9IGluZGV4UGF0aC5zZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChjZWxsLCB2aWV3KTtcbiAgICAgICAgICAgIGlmICh2aWV3ICYmICF2aWV3LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFZpZXcodmlldyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jb250ZW50Vmlldy5hZGRTdWJ2aWV3KHZpZXcubmF0aXZlVmlld1Byb3RlY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsSGVpZ2h0ID0gdGhpcy5fbGF5b3V0SGVhZGVyQ2VsbCh2aWV3LCBpbmRleFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fcHJlcGFyaW5nSGVhZGVyQ2VsbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZWxsSGVpZ2h0O1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fcHJlcGFyZUZvb3RlckNlbGwgPSBmdW5jdGlvbiAoY2VsbCwgaW5kZXhQYXRoKSB7XG4gICAgICAgIHZhciBjZWxsSGVpZ2h0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fcHJlcGFyaW5nRm9vdGVyQ2VsbCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgdmlldyA9IGNlbGwudmlldztcbiAgICAgICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgICAgICAgIHZpZXcgPSB0aGlzLl9nZXRGb290ZXJUZW1wbGF0ZShpbmRleFBhdGguc2VjdGlvbikuY3JlYXRlVmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBhY2NvcmRpb25fY29tbW9uXzEuQWNjb3JkaW9uQmFzZS5oZWFkZXJMb2FkaW5nRXZlbnQsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFBhdGguc2VjdGlvbixcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3LFxuICAgICAgICAgICAgICAgIGlvczogbnVsbCxcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm5vdGlmeShhcmdzKTtcbiAgICAgICAgICAgIHZpZXcgPSBhcmdzLnZpZXcgfHwgdGhpcy5fZ2V0RGVmYXVsdEZvb3RlckNvbnRlbnQoaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBwcm94eV92aWV3X2NvbnRhaW5lcl8xLlByb3h5Vmlld0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHZhciBzcCA9IG5ldyBzdGFja19sYXlvdXRfMS5TdGFja0xheW91dCgpO1xuICAgICAgICAgICAgICAgIHNwLmFkZENoaWxkKHZpZXcpO1xuICAgICAgICAgICAgICAgIHZpZXcgPSBzcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2VsbC52aWV3KSB7XG4gICAgICAgICAgICAgICAgY2VsbC5vd25lciA9IG5ldyBXZWFrUmVmKHZpZXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2VsbC52aWV3ICE9PSB2aWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRm9vdGVyQ29udGFpbmVyKGNlbGwpO1xuICAgICAgICAgICAgICAgIGNlbGwudmlldy5uYXRpdmVWaWV3UHJvdGVjdGVkLnJlbW92ZUZyb21TdXBlcnZpZXcoKTtcbiAgICAgICAgICAgICAgICBjZWxsLm93bmVyID0gbmV3IFdlYWtSZWYodmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlRm9vdGVySXRlbSh2aWV3LCBpbmRleFBhdGguc2VjdGlvbik7XG4gICAgICAgICAgICB2aWV3Ll9hY2NvcmRpb25DaGlsZEl0ZW1JbmRleCA9IGluZGV4UGF0aC5zZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChjZWxsLCB2aWV3KTtcbiAgICAgICAgICAgIGlmICh2aWV3ICYmICF2aWV3LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFZpZXcodmlldyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jb250ZW50Vmlldy5hZGRTdWJ2aWV3KHZpZXcubmF0aXZlVmlld1Byb3RlY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsSGVpZ2h0ID0gdGhpcy5fbGF5b3V0Rm9vdGVyQ2VsbCh2aWV3LCBpbmRleFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fcHJlcGFyaW5nRm9vdGVyQ2VsbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZWxsSGVpZ2h0O1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5fcmVtb3ZlSXRlbUhlYWRlckNvbnRhaW5lciA9IGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBoZWFkZXIudmlldztcbiAgICAgICAgaWYgKCEodmlldy5wYXJlbnQgaW5zdGFuY2VvZiBBY2NvcmRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVWaWV3KHZpZXcucGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlcGFyaW5nID0gdGhpcy5fcHJlcGFyaW5nSXRlbUhlYWRlckNlbGw7XG4gICAgICAgIHRoaXMuX3ByZXBhcmluZ0l0ZW1IZWFkZXJDZWxsID0gdHJ1ZTtcbiAgICAgICAgdmlldy5wYXJlbnQuX3JlbW92ZVZpZXcodmlldyk7XG4gICAgICAgIHZpZXcuX2FjY29yZGlvbkl0ZW1JbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcHJlcGFyaW5nSXRlbUhlYWRlckNlbGwgPSBwcmVwYXJpbmc7XG4gICAgICAgIHRoaXMuX21hcEl0ZW1IZWFkZXIuZGVsZXRlKGhlYWRlcik7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLl9yZW1vdmVJdGVtQ29udGVudENvbnRhaW5lciA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgICAgIHZhciB2aWV3ID0gY2VsbC52aWV3O1xuICAgICAgICBpZiAoISh2aWV3LnBhcmVudCBpbnN0YW5jZW9mIEFjY29yZGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZVZpZXcodmlldy5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVwYXJpbmcgPSB0aGlzLl9wcmVwYXJpbmdJdGVtQ29udGVudENlbGw7XG4gICAgICAgIHRoaXMuX3ByZXBhcmluZ0l0ZW1Db250ZW50Q2VsbCA9IHRydWU7XG4gICAgICAgIHZpZXcucGFyZW50Ll9yZW1vdmVWaWV3KHZpZXcpO1xuICAgICAgICB2aWV3Ll9hY2NvcmRpb25DaGlsZEl0ZW1JbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmlldy5fYWNjb3JkaW9uSXRlbUluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wcmVwYXJpbmdJdGVtQ29udGVudENlbGwgPSBwcmVwYXJpbmc7XG4gICAgICAgIHRoaXMuX21hcC5kZWxldGUoY2VsbCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLl9yZW1vdmVIZWFkZXJDb250YWluZXIgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgICAgICB2YXIgdmlldyA9IGNlbGwudmlldztcbiAgICAgICAgaWYgKCEodmlldy5wYXJlbnQgaW5zdGFuY2VvZiBBY2NvcmRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVWaWV3KHZpZXcucGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlcGFyaW5nID0gdGhpcy5fcHJlcGFyaW5nSGVhZGVyQ2VsbDtcbiAgICAgICAgdGhpcy5fcHJlcGFyaW5nSGVhZGVyQ2VsbCA9IHRydWU7XG4gICAgICAgIHZpZXcucGFyZW50Ll9yZW1vdmVWaWV3KHZpZXcpO1xuICAgICAgICB2aWV3Ll9hY2NvcmRpb25DaGlsZEl0ZW1JbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcHJlcGFyaW5nSGVhZGVyQ2VsbCA9IHByZXBhcmluZztcbiAgICAgICAgdGhpcy5fbWFwSGVhZGVyLmRlbGV0ZShjZWxsKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuX3JlbW92ZUZvb3RlckNvbnRhaW5lciA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgICAgIHZhciB2aWV3ID0gY2VsbC52aWV3O1xuICAgICAgICBpZiAoISh2aWV3LnBhcmVudCBpbnN0YW5jZW9mIEFjY29yZGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZVZpZXcodmlldy5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVwYXJpbmcgPSB0aGlzLl9wcmVwYXJpbmdGb290ZXJDZWxsO1xuICAgICAgICB0aGlzLl9wcmVwYXJpbmdGb290ZXJDZWxsID0gdHJ1ZTtcbiAgICAgICAgdmlldy5wYXJlbnQuX3JlbW92ZVZpZXcodmlldyk7XG4gICAgICAgIHZpZXcuX2FjY29yZGlvbkNoaWxkSXRlbUluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wcmVwYXJpbmdGb290ZXJDZWxsID0gcHJlcGFyaW5nO1xuICAgICAgICB0aGlzLl9tYXBGb290ZXIuZGVsZXRlKGNlbGwpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjY29yZGlvbi5wcm90b3R5cGUsIFwiX2NoaWxkcmVuQ291bnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXAuc2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5lYWNoQ2hpbGRWaWV3ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX21hcC5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3LCBrZXkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHZpZXcpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUudXBkYXRlTmF0aXZlSW5kZXhlcyA9IGZ1bmN0aW9uIChvbGRJbmRleGVzLCBuZXdJbmRleGVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhbGxvd011bHRpcGxlID0gU3RyaW5nKHRoaXMuYWxsb3dNdWx0aXBsZSkgPT09ICd0cnVlJztcbiAgICAgICAgaWYgKHRoaXMuX2V4cGFuZGVkVmlld3MpXG4gICAgICAgICAgICBpZiAobmV3SW5kZXhlcy50b1N0cmluZygpID09PSBBcnJheS5mcm9tKHRoaXMuX2V4cGFuZGVkVmlld3Mua2V5cygpKS50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGFsbG93TXVsdGlwbGUpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLl9leHBhbmRlZFZpZXdzLmdldChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V4cGFuZGVkVmlld3Muc2V0KGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2luZGV4U2V0LmFkZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaW9zLnJlbG9hZERhdGEoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChuZXdJbmRleGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhfMSA9IG5ld0luZGV4ZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3SXRlbXMgPSBbaW5kZXhfMV07XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kZWRWaWV3cy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4U2V0LnJlbW92ZUFsbEluZGV4ZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2V4cGFuZGVkVmlld3MuZ2V0KGluZGV4XzEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZGVkVmlld3Muc2V0KGluZGV4XzEsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleFNldC5hZGRJbmRleChpbmRleF8xKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pb3MucmVsb2FkRGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5leHBhbmRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLml0ZW1zID8gdGhpcy5pdGVtcy5sZW5ndGggOiAwO1xuICAgICAgICB2YXIgYWxsb3dNdWx0aXBsZSA9IFN0cmluZyh0aGlzLmFsbG93TXVsdGlwbGUpID09PSAndHJ1ZSc7XG4gICAgICAgIGlmICghYWxsb3dNdWx0aXBsZSkge1xuICAgICAgICAgICAgdGhpcy5fZXhwYW5kZWRWaWV3cy5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5faW5kZXhTZXQucmVtb3ZlQWxsSW5kZXhlcygpO1xuICAgICAgICAgICAgdGhpcy5fZXhwYW5kZWRWaWV3cy5zZXQobGVuZ3RoIC0gMSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9pbmRleFNldC5hZGRJbmRleChsZW5ndGggLSAxKTtcbiAgICAgICAgICAgIHRoaXMuaW9zLnJlbG9hZERhdGEoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBhbmRlZFZpZXdzLnNldChpLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4U2V0LmFkZEluZGV4KDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW9zLnJlbG9hZERhdGEoKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuY29sbGFwc2VBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2V4cGFuZGVkVmlld3MuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5faW5kZXhTZXQucmVtb3ZlQWxsSW5kZXhlcygpO1xuICAgICAgICB0aGlzLmlvcy5yZWxvYWREYXRhKCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLmNvbGxhcHNlSXRlbSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5fZXhwYW5kZWRWaWV3cy5oYXMoaW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBhbmRlZFZpZXdzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLl9pbmRleFNldC5yZW1vdmVJbmRleChpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmlvcy5yZWxvYWREYXRhKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuZXhwYW5kSXRlbSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVsb2FkU2VjdGlvbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSBOU011dGFibGVJbmRleFNldC5hbGxvYygpLmluaXRXaXRoSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgX3RoaXMuaW9zLnJlbG9hZFNlY3Rpb25zV2l0aFJvd0FuaW1hdGlvbihzZWN0aW9uLCAxMDApO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVtb3ZlU2VjdGlvbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSBOU011dGFibGVJbmRleFNldC5hbGxvYygpLmluaXRXaXRoSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgX3RoaXMuaW9zLnJlbG9hZFNlY3Rpb25zV2l0aFJvd0FuaW1hdGlvbihzZWN0aW9uLCA0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFsbG93TXVsdGlwbGUgPSBTdHJpbmcodGhpcy5hbGxvd011bHRpcGxlKSA9PT0gJ3RydWUnO1xuICAgICAgICBpZiAoYWxsb3dNdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9leHBhbmRlZFZpZXdzLmdldChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1FeHBhbmRlZChpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kZWRWaWV3cy5zZXQoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4U2V0LmFkZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZGVkVmlld3MuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleFNldC5yZW1vdmVJbmRleChpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtQ29sbGFwc2VkKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbG9hZFNlY3Rpb24oaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRJbmRleGVzVXBkYXRlZEZyb21OYXRpdmUoQXJyYXkuZnJvbSh0aGlzLl9leHBhbmRlZFZpZXdzLmtleXMoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V4cGFuZGVkVmlld3MuaGFzKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZGVkVmlld3MuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleFNldC5yZW1vdmVJbmRleChpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtQ29sbGFwc2VkKGluZGV4KTtcbiAgICAgICAgICAgICAgICByZWxvYWRTZWN0aW9uKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2V4cGFuZGVkVmlld3Muc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkID0gdGhpcy5fZXhwYW5kZWRWaWV3cy5rZXlzKCkubmV4dCgpLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZGVkVmlld3MuZGVsZXRlKG9sZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXhTZXQucmVtb3ZlSW5kZXgob2xkKTtcbiAgICAgICAgICAgICAgICByZWxvYWRTZWN0aW9uKG9sZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtQ29sbGFwc2VkKG9sZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kZWRWaWV3cy5zZXQoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4U2V0LmFkZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgICAgICByZWxvYWRTZWN0aW9uKGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1FeHBhbmRlZChpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHBhbmRlZFZpZXdzLnNldChpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXhTZXQuYWRkSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUV4cGFuZGVkKGluZGV4KTtcbiAgICAgICAgICAgICAgICByZWxvYWRTZWN0aW9uKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkSW5kZXhlc1VwZGF0ZWRGcm9tTmF0aXZlKEFycmF5LmZyb20odGhpcy5fZXhwYW5kZWRWaWV3cy5rZXlzKCkpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5pdGVtSXNFeHBhbmRlZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5fZXhwYW5kZWRWaWV3cy5oYXMoaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXhwYW5kZWRWaWV3cy5nZXQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuaXRlbUV4cGFuZGVkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMubm90aWZ5KHtcbiAgICAgICAgICAgIGV2ZW50TmFtZTogJ2l0ZW1FeHBhbmRlZCcsXG4gICAgICAgICAgICBvYmplY3Q6IG9ic2VydmFibGVfMS5mcm9tT2JqZWN0KHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogaW5kZXhcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZS5pdGVtQ29sbGFwc2VkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMubm90aWZ5KHtcbiAgICAgICAgICAgIGV2ZW50TmFtZTogJ2l0ZW1Db2xsYXBzZWQnLFxuICAgICAgICAgICAgb2JqZWN0OiBvYnNlcnZhYmxlXzEuZnJvbU9iamVjdCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGluZGV4XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuX29uSGVhZGVyUm93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHModGhpcy5fZWZmZWN0aXZlSGVhZGVyUm93SGVpZ2h0KTtcbiAgICAgICAgdmFyIG5hdGl2ZVZpZXcgPSB0aGlzLmlvcztcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgbmF0aXZlVmlldy5zZWN0aW9uSGVhZGVySGVpZ2h0ID0gVUlUYWJsZVZpZXdBdXRvbWF0aWNEaW1lbnNpb247XG4gICAgICAgICAgICBuYXRpdmVWaWV3LmVzdGltYXRlZFNlY3Rpb25IZWFkZXJIZWlnaHQgPSBERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRlID0gVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGwuaW5pdFdpdGhPd25lcihuZXcgV2Vha1JlZih0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuYXRpdmVWaWV3LnNlY3Rpb25IZWFkZXJIZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkU2VjdGlvbkhlYWRlckhlaWdodCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbC5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xuICAgICAgICAgICAgbmF0aXZlVmlldy5kZWxlZ2F0ZSA9IHRoaXMuX2RlbGVnYXRlO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uSXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5Q2hhbmdlZC5jYWxsKHRoaXMsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLl9vbkl0ZW1IZWFkZXJSb3dIZWlnaHRQcm9wZXJ0eUNoYW5nZWQgPSBmdW5jdGlvbiAob2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZpZXdfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyh0aGlzLl9lZmZlY3RpdmVJdGVtSGVhZGVyUm93SGVpZ2h0KTtcbiAgICAgICAgdmFyIG5hdGl2ZVZpZXcgPSB0aGlzLmlvcztcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgbmF0aXZlVmlldy5zZWN0aW9uSGVhZGVySGVpZ2h0ID0gVUlUYWJsZVZpZXdBdXRvbWF0aWNEaW1lbnNpb247XG4gICAgICAgICAgICBuYXRpdmVWaWV3LmVzdGltYXRlZFNlY3Rpb25IZWFkZXJIZWlnaHQgPSBERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRlID0gVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGwuaW5pdFdpdGhPd25lcihuZXcgV2Vha1JlZih0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuYXRpdmVWaWV3LnNlY3Rpb25IZWFkZXJIZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkU2VjdGlvbkhlYWRlckhlaWdodCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbC5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xuICAgICAgICAgICAgbmF0aXZlVmlldy5kZWxlZ2F0ZSA9IHRoaXMuX2RlbGVnYXRlO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uSXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5Q2hhbmdlZC5jYWxsKHRoaXMsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlLl9vbkl0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHModGhpcy5fZWZmZWN0aXZlSXRlbUNvbnRlbnRSb3dIZWlnaHQpO1xuICAgICAgICB2YXIgbmF0aXZlVmlldyA9IHRoaXMuaW9zO1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgICBuYXRpdmVWaWV3LnJvd0hlaWdodCA9IFVJVGFibGVWaWV3QXV0b21hdGljRGltZW5zaW9uO1xuICAgICAgICAgICAgbmF0aXZlVmlldy5lc3RpbWF0ZWRSb3dIZWlnaHQgPSBERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRlID0gVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGwuaW5pdFdpdGhPd25lcihuZXcgV2Vha1JlZih0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuYXRpdmVWaWV3LnJvd0hlaWdodCA9IHZhbHVlO1xuICAgICAgICAgICAgbmF0aXZlVmlldy5lc3RpbWF0ZWRSb3dIZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRlID0gVUlUYWJsZVZpZXdSb3dIZWlnaHREZWxlZ2F0ZUltcGwuaW5pdFdpdGhPd25lcihuZXcgV2Vha1JlZih0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNMb2FkZWQpIHtcbiAgICAgICAgICAgIG5hdGl2ZVZpZXcuZGVsZWdhdGUgPSB0aGlzLl9kZWxlZ2F0ZTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkl0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkLmNhbGwodGhpcywgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGUuX29uRm9vdGVyUm93SGVpZ2h0UHJvcGVydHlDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHModGhpcy5fZWZmZWN0aXZlRm9vdGVyUm93SGVpZ2h0KTtcbiAgICAgICAgdmFyIG5hdGl2ZVZpZXcgPSB0aGlzLmlvcztcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgbmF0aXZlVmlldy5zZWN0aW9uSGVhZGVySGVpZ2h0ID0gVUlUYWJsZVZpZXdBdXRvbWF0aWNEaW1lbnNpb247XG4gICAgICAgICAgICBuYXRpdmVWaWV3LmVzdGltYXRlZFNlY3Rpb25IZWFkZXJIZWlnaHQgPSBERUZBVUxUX0hFSUdIVDtcbiAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRlID0gVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGwuaW5pdFdpdGhPd25lcihuZXcgV2Vha1JlZih0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuYXRpdmVWaWV3LnNlY3Rpb25IZWFkZXJIZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkU2VjdGlvbkhlYWRlckhlaWdodCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbC5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xuICAgICAgICAgICAgbmF0aXZlVmlldy5kZWxlZ2F0ZSA9IHRoaXMuX2RlbGVnYXRlO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uSXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5Q2hhbmdlZC5jYWxsKHRoaXMsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlW2FjY29yZGlvbl9jb21tb25fMS5pdGVtSGVhZGVyVGVtcGxhdGVzUHJvcGVydHkuZ2V0RGVmYXVsdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuaXRlbUhlYWRlclRlbXBsYXRlc1Byb3BlcnR5LnNldE5hdGl2ZV0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faXRlbUhlYWRlclRlbXBsYXRlc0ludGVybmFsID0gbmV3IEFycmF5KHRoaXMuX2RlZmF1bHRJdGVtSGVhZGVyVGVtcGxhdGUpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGhfMSA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aF8xOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlvcy5yZWdpc3RlckNsYXNzRm9yQ2VsbFJldXNlSWRlbnRpZmllcihBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbC5jbGFzcygpLCBcIml0ZW0taGVhZGVyLVwiICsgdmFsdWVbaV0ua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2l0ZW1IZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbCA9IHRoaXMuX2l0ZW1IZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbC5jb25jYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuaXRlbUNvbnRlbnRUZW1wbGF0ZXNQcm9wZXJ0eS5nZXREZWZhdWx0XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlW2FjY29yZGlvbl9jb21tb25fMS5pdGVtQ29udGVudFRlbXBsYXRlc1Byb3BlcnR5LnNldE5hdGl2ZV0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faXRlbUNvbnRlbnRUZW1wbGF0ZXNJbnRlcm5hbCA9IG5ldyBBcnJheSh0aGlzLl9kZWZhdWx0SXRlbUNvbnRlbnRUZW1wbGF0ZSk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aF8yID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoXzI7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW9zLnJlZ2lzdGVyQ2xhc3NGb3JDZWxsUmV1c2VJZGVudGlmaWVyKEFjY29yZGlvbkl0ZW1Db250ZW50Q2VsbC5jbGFzcygpLCBcIml0ZW0tY29udGVudC1cIiArIHZhbHVlW2ldLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pdGVtQ29udGVudFRlbXBsYXRlc0ludGVybmFsID0gdGhpcy5faXRlbUNvbnRlbnRUZW1wbGF0ZXNJbnRlcm5hbC5jb25jYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuZm9vdGVyVGVtcGxhdGVzUHJvcGVydHkuZ2V0RGVmYXVsdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuZm9vdGVyVGVtcGxhdGVzUHJvcGVydHkuc2V0TmF0aXZlXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9mb290ZXJUZW1wbGF0ZXNJbnRlcm5hbCA9IG5ldyBBcnJheSh0aGlzLl9kZWZhdWx0Rm9vdGVyVGVtcGxhdGUpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGhfMyA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aF8zOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlvcy5yZWdpc3RlckNsYXNzRm9yQ2VsbFJldXNlSWRlbnRpZmllcihBY2NvcmRpb25Gb290ZXJDZWxsLmNsYXNzKCksIFwiZm9vdGVyLVwiICsgdmFsdWVbaV0ua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Zvb3RlclRlbXBsYXRlc0ludGVybmFsID0gdGhpcy5fZm9vdGVyVGVtcGxhdGVzSW50ZXJuYWwuY29uY2F0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGVbYWNjb3JkaW9uX2NvbW1vbl8xLmhlYWRlclRlbXBsYXRlc1Byb3BlcnR5LmdldERlZmF1bHRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGVbYWNjb3JkaW9uX2NvbW1vbl8xLmhlYWRlclRlbXBsYXRlc1Byb3BlcnR5LnNldE5hdGl2ZV0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGVhZGVyVGVtcGxhdGVzSW50ZXJuYWwgPSBuZXcgQXJyYXkodGhpcy5fZGVmYXVsdEhlYWRlclRlbXBsYXRlKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoXzQgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW5ndGhfNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pb3MucmVnaXN0ZXJDbGFzc0ZvckNlbGxSZXVzZUlkZW50aWZpZXIoQWNjb3JkaW9uSGVhZGVyQ2VsbC5jbGFzcygpLCBcImhlYWRlci1cIiArIHZhbHVlW2ldLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9oZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbCA9IHRoaXMuX2hlYWRlclRlbXBsYXRlc0ludGVybmFsLmNvbmNhdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlW2FjY29yZGlvbl9jb21tb25fMS5pb3NFc3RpbWF0ZWRIZWFkZXJSb3dIZWlnaHRQcm9wZXJ0eS5nZXREZWZhdWx0XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERFRkFVTFRfSEVJR0hUO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuaW9zRXN0aW1hdGVkSGVhZGVyUm93SGVpZ2h0UHJvcGVydHkuc2V0TmF0aXZlXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbmF0aXZlVmlldyA9IHRoaXMuaW9zO1xuICAgICAgICB2YXIgZXN0aW1hdGVkSGVpZ2h0ID0gdmlld18xLkxlbmd0aC50b0RldmljZVBpeGVscyh2YWx1ZSwgMCk7XG4gICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkSGVhZGVyUm93SGVpZ2h0ID0gZXN0aW1hdGVkSGVpZ2h0IDwgMCA/IERFRkFVTFRfSEVJR0hUIDogZXN0aW1hdGVkSGVpZ2h0O1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuaW9zRXN0aW1hdGVkSXRlbUhlYWRlclJvd0hlaWdodFByb3BlcnR5LmdldERlZmF1bHRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gREVGQVVMVF9IRUlHSFQ7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlW2FjY29yZGlvbl9jb21tb25fMS5pb3NFc3RpbWF0ZWRJdGVtSGVhZGVyUm93SGVpZ2h0UHJvcGVydHkuc2V0TmF0aXZlXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbmF0aXZlVmlldyA9IHRoaXMuaW9zO1xuICAgICAgICB2YXIgZXN0aW1hdGVkSGVpZ2h0ID0gdmlld18xLkxlbmd0aC50b0RldmljZVBpeGVscyh2YWx1ZSwgMCk7XG4gICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkSXRlbUhlYWRlclJvd0hlaWdodCA9IGVzdGltYXRlZEhlaWdodCA8IDAgPyBERUZBVUxUX0hFSUdIVCA6IGVzdGltYXRlZEhlaWdodDtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGVbYWNjb3JkaW9uX2NvbW1vbl8xLmlvc0VzdGltYXRlZEl0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHkuZ2V0RGVmYXVsdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBERUZBVUxUX0hFSUdIVDtcbiAgICB9O1xuICAgIEFjY29yZGlvbi5wcm90b3R5cGVbYWNjb3JkaW9uX2NvbW1vbl8xLmlvc0VzdGltYXRlZEl0ZW1Db250ZW50Um93SGVpZ2h0UHJvcGVydHkuc2V0TmF0aXZlXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbmF0aXZlVmlldyA9IHRoaXMuaW9zO1xuICAgICAgICB2YXIgZXN0aW1hdGVkSGVpZ2h0ID0gdmlld18xLkxlbmd0aC50b0RldmljZVBpeGVscyh2YWx1ZSwgMCk7XG4gICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkSXRlbUNvbnRlbnRSb3dIZWlnaHQgPSBlc3RpbWF0ZWRIZWlnaHQgPCAwID8gREVGQVVMVF9IRUlHSFQgOiBlc3RpbWF0ZWRIZWlnaHQ7XG4gICAgfTtcbiAgICBBY2NvcmRpb24ucHJvdG90eXBlW2FjY29yZGlvbl9jb21tb25fMS5pb3NFc3RpbWF0ZWRGb290ZXJSb3dIZWlnaHRQcm9wZXJ0eS5nZXREZWZhdWx0XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERFRkFVTFRfSEVJR0hUO1xuICAgIH07XG4gICAgQWNjb3JkaW9uLnByb3RvdHlwZVthY2NvcmRpb25fY29tbW9uXzEuaW9zRXN0aW1hdGVkRm9vdGVyUm93SGVpZ2h0UHJvcGVydHkuc2V0TmF0aXZlXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbmF0aXZlVmlldyA9IHRoaXMuaW9zO1xuICAgICAgICB2YXIgZXN0aW1hdGVkSGVpZ2h0ID0gdmlld18xLkxlbmd0aC50b0RldmljZVBpeGVscyh2YWx1ZSwgMCk7XG4gICAgICAgIG5hdGl2ZVZpZXcuZXN0aW1hdGVkRm9vdGVyUm93SGVpZ2h0ID0gZXN0aW1hdGVkSGVpZ2h0IDwgMCA/IERFRkFVTFRfSEVJR0hUIDogZXN0aW1hdGVkSGVpZ2h0O1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHByb2ZpbGluZ18xLnByb2ZpbGUsXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdW5jdGlvbiksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbXSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLCB2b2lkIDApXG4gICAgXSwgQWNjb3JkaW9uLnByb3RvdHlwZSwgXCJvbkxvYWRlZFwiLCBudWxsKTtcbiAgICByZXR1cm4gQWNjb3JkaW9uO1xufShhY2NvcmRpb25fY29tbW9uXzEuQWNjb3JkaW9uQmFzZSkpO1xuZXhwb3J0cy5BY2NvcmRpb24gPSBBY2NvcmRpb247XG52YXIgQWNjb3JkaW9uSXRlbUhlYWRlckNlbGwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNlbGwgPSBBY2NvcmRpb25IZWFkZXJDZWxsLm5ldygpO1xuICAgICAgICBjZWxsLmJhY2tncm91bmRDb2xvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uSXRlbUhlYWRlckNlbGwucHJvdG90eXBlLmluaXRXaXRoU3R5bGVSZXVzZUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoc3R5bGUsIHJldXNlSWRlbnRpZmllcikge1xuICAgICAgICB2YXIgY2VsbCA9IF9zdXBlci5wcm90b3R5cGUuaW5pdFdpdGhTdHlsZVJldXNlSWRlbnRpZmllci5jYWxsKHRoaXMsIHN0eWxlLCByZXVzZUlkZW50aWZpZXIpO1xuICAgICAgICBjZWxsLmJhY2tncm91bmRDb2xvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uSXRlbUhlYWRlckNlbGwucHJvdG90eXBlLndpbGxNb3ZlVG9TdXBlcnZpZXcgPSBmdW5jdGlvbiAobmV3U3VwZXJ2aWV3KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSAodGhpcy52aWV3ID8gdGhpcy52aWV3LnBhcmVudCA6IG51bGwpO1xuICAgICAgICBpZiAocGFyZW50ICYmICFuZXdTdXBlcnZpZXcpIHtcbiAgICAgICAgICAgIHBhcmVudC5fcmVtb3ZlSXRlbUNvbnRlbnRDb250YWluZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbC5wcm90b3R5cGUsIFwidmlld1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3duZXIgPyB0aGlzLm93bmVyLmdldCgpIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEFjY29yZGlvbkl0ZW1IZWFkZXJDZWxsO1xufShVSVRhYmxlVmlld0NlbGwpKTtcbmV4cG9ydHMuQWNjb3JkaW9uSXRlbUhlYWRlckNlbGwgPSBBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbDtcbnZhciBBY2NvcmRpb25JdGVtQ29udGVudENlbGwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY2NvcmRpb25JdGVtQ29udGVudENlbGwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjY29yZGlvbkl0ZW1Db250ZW50Q2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNlbGwgPSBBY2NvcmRpb25JdGVtQ29udGVudENlbGwubmV3KCk7XG4gICAgICAgIGNlbGwuYmFja2dyb3VuZENvbG9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfTtcbiAgICBBY2NvcmRpb25JdGVtQ29udGVudENlbGwucHJvdG90eXBlLmluaXRXaXRoU3R5bGVSZXVzZUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoc3R5bGUsIHJldXNlSWRlbnRpZmllcikge1xuICAgICAgICB2YXIgY2VsbCA9IF9zdXBlci5wcm90b3R5cGUuaW5pdFdpdGhTdHlsZVJldXNlSWRlbnRpZmllci5jYWxsKHRoaXMsIHN0eWxlLCByZXVzZUlkZW50aWZpZXIpO1xuICAgICAgICBjZWxsLmJhY2tncm91bmRDb2xvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsLnByb3RvdHlwZS53aWxsTW92ZVRvU3VwZXJ2aWV3ID0gZnVuY3Rpb24gKG5ld1N1cGVydmlldykge1xuICAgICAgICB2YXIgcGFyZW50ID0gKHRoaXMudmlldyA/IHRoaXMudmlldy5wYXJlbnQgOiBudWxsKTtcbiAgICAgICAgaWYgKHBhcmVudCAmJiAhbmV3U3VwZXJ2aWV3KSB7XG4gICAgICAgICAgICBwYXJlbnQuX3JlbW92ZUl0ZW1Db250ZW50Q29udGFpbmVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsLnByb3RvdHlwZSwgXCJ2aWV3XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vd25lciA/IHRoaXMub3duZXIuZ2V0KCkgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsO1xufShVSVRhYmxlVmlld0NlbGwpKTtcbmV4cG9ydHMuQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsID0gQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsO1xudmFyIEFjY29yZGlvbkhlYWRlckNlbGwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY2NvcmRpb25IZWFkZXJDZWxsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjY29yZGlvbkhlYWRlckNlbGwoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQWNjb3JkaW9uSGVhZGVyQ2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNlbGwgPSBBY2NvcmRpb25IZWFkZXJDZWxsLm5ldygpO1xuICAgICAgICBjZWxsLmJhY2tncm91bmRDb2xvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH07XG4gICAgQWNjb3JkaW9uSGVhZGVyQ2VsbC5wcm90b3R5cGUuaW5pdFdpdGhTdHlsZVJldXNlSWRlbnRpZmllciA9IGZ1bmN0aW9uIChzdHlsZSwgcmV1c2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBjZWxsID0gX3N1cGVyLnByb3RvdHlwZS5pbml0V2l0aFN0eWxlUmV1c2VJZGVudGlmaWVyLmNhbGwodGhpcywgc3R5bGUsIHJldXNlSWRlbnRpZmllcik7XG4gICAgICAgIGNlbGwuYmFja2dyb3VuZENvbG9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfTtcbiAgICBBY2NvcmRpb25IZWFkZXJDZWxsLnByb3RvdHlwZS53aWxsTW92ZVRvU3VwZXJ2aWV3ID0gZnVuY3Rpb24gKG5ld1N1cGVydmlldykge1xuICAgICAgICB2YXIgcGFyZW50ID0gKHRoaXMudmlldyA/IHRoaXMudmlldy5wYXJlbnQgOiBudWxsKTtcbiAgICAgICAgaWYgKHBhcmVudCAmJiAhbmV3U3VwZXJ2aWV3KSB7XG4gICAgICAgICAgICBwYXJlbnQuX3JlbW92ZUhlYWRlckNvbnRhaW5lcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjY29yZGlvbkhlYWRlckNlbGwucHJvdG90eXBlLCBcInZpZXdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm93bmVyID8gdGhpcy5vd25lci5nZXQoKSA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBBY2NvcmRpb25IZWFkZXJDZWxsO1xufShVSVRhYmxlVmlld0NlbGwpKTtcbmV4cG9ydHMuQWNjb3JkaW9uSGVhZGVyQ2VsbCA9IEFjY29yZGlvbkhlYWRlckNlbGw7XG52YXIgQWNjb3JkaW9uRm9vdGVyQ2VsbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjY29yZGlvbkZvb3RlckNlbGwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWNjb3JkaW9uRm9vdGVyQ2VsbCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY2NvcmRpb25Gb290ZXJDZWxsLmluaXRXaXRoRW1wdHlCYWNrZ3JvdW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2VsbCA9IEFjY29yZGlvbkZvb3RlckNlbGwubmV3KCk7XG4gICAgICAgIGNlbGwuYmFja2dyb3VuZENvbG9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfTtcbiAgICBBY2NvcmRpb25Gb290ZXJDZWxsLnByb3RvdHlwZS5pbml0V2l0aFN0eWxlUmV1c2VJZGVudGlmaWVyID0gZnVuY3Rpb24gKHN0eWxlLCByZXVzZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGNlbGwgPSBfc3VwZXIucHJvdG90eXBlLmluaXRXaXRoU3R5bGVSZXVzZUlkZW50aWZpZXIuY2FsbCh0aGlzLCBzdHlsZSwgcmV1c2VJZGVudGlmaWVyKTtcbiAgICAgICAgY2VsbC5iYWNrZ3JvdW5kQ29sb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9O1xuICAgIEFjY29yZGlvbkZvb3RlckNlbGwucHJvdG90eXBlLndpbGxNb3ZlVG9TdXBlcnZpZXcgPSBmdW5jdGlvbiAobmV3U3VwZXJ2aWV3KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSAodGhpcy52aWV3ID8gdGhpcy52aWV3LnBhcmVudCA6IG51bGwpO1xuICAgICAgICBpZiAocGFyZW50ICYmICFuZXdTdXBlcnZpZXcpIHtcbiAgICAgICAgICAgIHBhcmVudC5fcmVtb3ZlRm9vdGVyQ29udGFpbmVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWNjb3JkaW9uRm9vdGVyQ2VsbC5wcm90b3R5cGUsIFwidmlld1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3duZXIgPyB0aGlzLm93bmVyLmdldCgpIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEFjY29yZGlvbkZvb3RlckNlbGw7XG59KFVJVGFibGVWaWV3Q2VsbCkpO1xuZXhwb3J0cy5BY2NvcmRpb25Gb290ZXJDZWxsID0gQWNjb3JkaW9uRm9vdGVyQ2VsbDtcbnZhciBBY2NvcmRpb25EYXRhU291cmNlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWNjb3JkaW9uRGF0YVNvdXJjZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY2NvcmRpb25EYXRhU291cmNlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjY29yZGlvbkRhdGFTb3VyY2UuaW5pdFdpdGhPd25lciA9IGZ1bmN0aW9uIChvd25lcikge1xuICAgICAgICB2YXIgZGF0YVNvdXJjZSA9IEFjY29yZGlvbkRhdGFTb3VyY2UubmV3KCk7XG4gICAgICAgIGRhdGFTb3VyY2UuX293bmVyID0gb3duZXI7XG4gICAgICAgIHJldHVybiBkYXRhU291cmNlO1xuICAgIH07XG4gICAgQWNjb3JkaW9uRGF0YVNvdXJjZS5wcm90b3R5cGUudGFibGVWaWV3TnVtYmVyT2ZSb3dzSW5TZWN0aW9uID0gZnVuY3Rpb24gKHRhYmxlVmlldywgc2VjdGlvbikge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLl9vd25lci5nZXQoKTtcbiAgICAgICAgaWYgKG93bmVyLl9leHBhbmRlZFZpZXdzLmhhcyhzZWN0aW9uKSAmJiBvd25lci5fZXhwYW5kZWRWaWV3cy5nZXQoc2VjdGlvbikpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnREYXRhID0gb3duZXIgJiYgb3duZXIuaXRlbXMgPyBvd25lci5fZ2V0UGFyZW50RGF0YShzZWN0aW9uKSA6IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudERhdGFbb3duZXIuY2hpbGRJdGVtc10gPyAocGFyZW50RGF0YVtvd25lci5jaGlsZEl0ZW1zXS5sZW5ndGggKyAxICsgKG93bmVyLl9nZXRIYXNIZWFkZXIoKSA/IDEgOiAwKSArIChvd25lci5fZ2V0SGFzRm9vdGVyKCkgPyAxIDogMCkpIDogMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2NvcmRpb25EYXRhU291cmNlLnByb3RvdHlwZS5udW1iZXJPZlNlY3Rpb25zSW5UYWJsZVZpZXcgPSBmdW5jdGlvbiAodGFibGVWaWV3KSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMuX293bmVyLmdldCgpO1xuICAgICAgICByZXR1cm4gKG93bmVyICYmIG93bmVyLml0ZW1zKSA/IG93bmVyLml0ZW1zLmxlbmd0aCA6IDA7XG4gICAgfTtcbiAgICBBY2NvcmRpb25EYXRhU291cmNlLnByb3RvdHlwZS50YWJsZVZpZXdDZWxsRm9yUm93QXRJbmRleFBhdGggPSBmdW5jdGlvbiAodGFibGVWaWV3LCBpbmRleFBhdGgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcy5fb3duZXIuZ2V0KCk7XG4gICAgICAgIHZhciBjZWxsO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnRhYmxlVmlld051bWJlck9mUm93c0luU2VjdGlvbih0YWJsZVZpZXcsIGluZGV4UGF0aC5zZWN0aW9uKTtcbiAgICAgICAgaWYgKGluZGV4UGF0aC5yb3cgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChvd25lcikge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IG93bmVyLl9nZXRJdGVtSGVhZGVyVGVtcGxhdGUoaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNlbGwgPSAodGFibGVWaWV3LmRlcXVldWVSZXVzYWJsZUNlbGxXaXRoSWRlbnRpZmllcihcIml0ZW0taGVhZGVyLVwiICsgdGVtcGxhdGUua2V5KSB8fCBBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCgpKTtcbiAgICAgICAgICAgICAgICBvd25lci5fcHJlcGFyZUl0ZW1IZWFkZXJDZWxsKGNlbGwsIGluZGV4UGF0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGNlbGxWaWV3ID0gY2VsbC52aWV3O1xuICAgICAgICAgICAgICAgIGlmIChjZWxsVmlldyAmJiBjZWxsVmlldy5pc0xheW91dFJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHZpZXdfMS5sYXlvdXQuZ2V0TWVhc3VyZVNwZWNTaXplKG93bmVyLndpZHRoTWVhc3VyZVNwZWMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gb3duZXIuX2VmZmVjdGl2ZUl0ZW1IZWFkZXJSb3dIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjZWxsSGVpZ2h0ID0gcm93SGVpZ2h0ID4gMCA/IHJvd0hlaWdodCA6IG93bmVyLmdldEl0ZW1IZWFkZXJIZWlnaHQoaW5kZXhQYXRoLnJvdyk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdfMS5WaWV3LmxheW91dENoaWxkKG93bmVyLCBjZWxsVmlldywgMCwgMCwgd2lkdGgsIGNlbGxIZWlnaHQgPyBjZWxsSGVpZ2h0IDogMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbCA9IEFjY29yZGlvbkl0ZW1IZWFkZXJDZWxsLmluaXRXaXRoRW1wdHlCYWNrZ3JvdW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2VsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXhQYXRoLnJvdyA9PT0gMSAmJiBvd25lci5fZ2V0SGFzSGVhZGVyKCkpIHtcbiAgICAgICAgICAgIGlmIChvd25lcikge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IG93bmVyLl9nZXRIZWFkZXJUZW1wbGF0ZShpbmRleFBhdGguc2VjdGlvbik7XG4gICAgICAgICAgICAgICAgY2VsbCA9ICh0YWJsZVZpZXcuZGVxdWV1ZVJldXNhYmxlQ2VsbFdpdGhJZGVudGlmaWVyKFwiaGVhZGVyLVwiICsgdGVtcGxhdGUua2V5KSB8fCBBY2NvcmRpb25IZWFkZXJDZWxsLmluaXRXaXRoRW1wdHlCYWNrZ3JvdW5kKCkpO1xuICAgICAgICAgICAgICAgIG93bmVyLl9wcmVwYXJlSGVhZGVyQ2VsbChjZWxsLCBpbmRleFBhdGgpO1xuICAgICAgICAgICAgICAgIHZhciBjZWxsVmlldyA9IGNlbGwudmlldztcbiAgICAgICAgICAgICAgICBpZiAoY2VsbFZpZXcgJiYgY2VsbFZpZXcuaXNMYXlvdXRSZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB2aWV3XzEubGF5b3V0LmdldE1lYXN1cmVTcGVjU2l6ZShvd25lci53aWR0aE1lYXN1cmVTcGVjKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IG93bmVyLl9lZmZlY3RpdmVIZWFkZXJSb3dIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjZWxsSGVpZ2h0ID0gcm93SGVpZ2h0ID4gMCA/IHJvd0hlaWdodCA6IG93bmVyLmdldEhlYWRlckhlaWdodChpbmRleFBhdGgucm93KTtcbiAgICAgICAgICAgICAgICAgICAgdmlld18xLlZpZXcubGF5b3V0Q2hpbGQob3duZXIsIGNlbGxWaWV3LCAwLCAwLCB3aWR0aCwgY2VsbEhlaWdodCA/IGNlbGxIZWlnaHQgOiAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjZWxsID0gQWNjb3JkaW9uSGVhZGVyQ2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4UGF0aC5yb3cgIT09IDAgJiYgaW5kZXhQYXRoLnJvdyA9PT0gdG90YWwgLSAxICYmIG93bmVyLl9nZXRIYXNGb290ZXIoKSkge1xuICAgICAgICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gb3duZXIuX2dldEZvb3RlclRlbXBsYXRlKGluZGV4UGF0aC5zZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBjZWxsID0gKHRhYmxlVmlldy5kZXF1ZXVlUmV1c2FibGVDZWxsV2l0aElkZW50aWZpZXIoXCJmb290ZXItXCIgKyB0ZW1wbGF0ZS5rZXkpIHx8IEFjY29yZGlvbkZvb3RlckNlbGwuaW5pdFdpdGhFbXB0eUJhY2tncm91bmQoKSk7XG4gICAgICAgICAgICAgICAgb3duZXIuX3ByZXBhcmVGb290ZXJDZWxsKGNlbGwsIGluZGV4UGF0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGNlbGxWaWV3ID0gY2VsbC52aWV3O1xuICAgICAgICAgICAgICAgIGlmIChjZWxsVmlldyAmJiBjZWxsVmlldy5pc0xheW91dFJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHZpZXdfMS5sYXlvdXQuZ2V0TWVhc3VyZVNwZWNTaXplKG93bmVyLndpZHRoTWVhc3VyZVNwZWMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gb3duZXIuX2VmZmVjdGl2ZUZvb3RlclJvd0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxIZWlnaHQgPSByb3dIZWlnaHQgPiAwID8gcm93SGVpZ2h0IDogb3duZXIuZ2V0Rm9vdGVySGVpZ2h0KGluZGV4UGF0aC5yb3cpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3XzEuVmlldy5sYXlvdXRDaGlsZChvd25lciwgY2VsbFZpZXcsIDAsIDAsIHdpZHRoLCBjZWxsSGVpZ2h0ID8gY2VsbEhlaWdodCA6IDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNlbGwgPSBBY2NvcmRpb25Gb290ZXJDZWxsLmluaXRXaXRoRW1wdHlCYWNrZ3JvdW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2VsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IG93bmVyLl9nZXRJdGVtQ29udGVudFRlbXBsYXRlKGluZGV4UGF0aC5zZWN0aW9uLCBpbmRleFBhdGgucm93KTtcbiAgICAgICAgICAgIGNlbGwgPSAodGFibGVWaWV3LmRlcXVldWVSZXVzYWJsZUNlbGxXaXRoSWRlbnRpZmllcihcIml0ZW0tY29udGVudC1cIiArIHRlbXBsYXRlLmtleSkgfHwgQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsLmluaXRXaXRoRW1wdHlCYWNrZ3JvdW5kKCkpO1xuICAgICAgICAgICAgb3duZXIuX3ByZXBhcmVJdGVtQ29udGVudENlbGwoY2VsbCwgaW5kZXhQYXRoKTtcbiAgICAgICAgICAgIHZhciBjZWxsVmlldyA9IGNlbGwudmlldztcbiAgICAgICAgICAgIGlmIChjZWxsVmlldyAmJiBjZWxsVmlldy5pc0xheW91dFJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gdmlld18xLmxheW91dC5nZXRNZWFzdXJlU3BlY1NpemUob3duZXIud2lkdGhNZWFzdXJlU3BlYyk7XG4gICAgICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IG93bmVyLl9lZmZlY3RpdmVJdGVtQ29udGVudFJvd0hlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgY2VsbEhlaWdodCA9IHJvd0hlaWdodCA+IDAgPyByb3dIZWlnaHQgOiBvd25lci5nZXRJdGVtQ29udGVudEhlaWdodChwYXJzZUludChcIlwiICsgKGluZGV4UGF0aC5zZWN0aW9uICsgMSkgKyAoaW5kZXhQYXRoLnJvdyAtIDEgLSAob3duZXIuX2dldEhhc0hlYWRlcigpID8gMSA6IDApKSkpO1xuICAgICAgICAgICAgICAgIHZpZXdfMS5WaWV3LmxheW91dENoaWxkKG93bmVyLCBjZWxsVmlldywgMCwgMCwgd2lkdGgsIGNlbGxIZWlnaHQgPyBjZWxsSGVpZ2h0IDogMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjZWxsID0gQWNjb3JkaW9uSXRlbUNvbnRlbnRDZWxsLmluaXRXaXRoRW1wdHlCYWNrZ3JvdW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfTtcbiAgICBBY2NvcmRpb25EYXRhU291cmNlLk9iakNQcm90b2NvbHMgPSBbVUlUYWJsZVZpZXdEYXRhU291cmNlXTtcbiAgICByZXR1cm4gQWNjb3JkaW9uRGF0YVNvdXJjZTtcbn0oTlNPYmplY3QpKTtcbmV4cG9ydHMuQWNjb3JkaW9uRGF0YVNvdXJjZSA9IEFjY29yZGlvbkRhdGFTb3VyY2U7XG52YXIgVUlUYWJsZVZpZXdSb3dIZWlnaHREZWxlZ2F0ZUltcGwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbC5pbml0V2l0aE93bmVyID0gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFVJVGFibGVWaWV3Um93SGVpZ2h0RGVsZWdhdGVJbXBsLm5ldygpO1xuICAgICAgICBkZWxlZ2F0ZS5fb3duZXIgPSBvd25lcjtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlO1xuICAgIH07XG4gICAgVUlUYWJsZVZpZXdSb3dIZWlnaHREZWxlZ2F0ZUltcGwucHJvdG90eXBlLnRhYmxlVmlld1dpbGxEaXNwbGF5Q2VsbEZvclJvd0F0SW5kZXhQYXRoID0gZnVuY3Rpb24gKHRhYmxlVmlldywgY2VsbCwgaW5kZXhQYXRoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMuX293bmVyLmdldCgpO1xuICAgICAgICBpZiAob3duZXIgJiYgKGluZGV4UGF0aC5yb3cgPT09IG93bmVyLml0ZW1zLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICBvd25lci5ub3RpZnkoeyBldmVudE5hbWU6IEFjY29yZGlvbi5sb2FkTW9yZUl0ZW1zRXZlbnQsIG9iamVjdDogb3duZXIgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFVJVGFibGVWaWV3Um93SGVpZ2h0RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdXaWxsU2VsZWN0Um93QXRJbmRleFBhdGggPSBmdW5jdGlvbiAodGFibGVWaWV3LCBpbmRleFBhdGgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcy5fb3duZXIuZ2V0KCk7XG4gICAgICAgIHZhciBpb3MgPSB0YWJsZVZpZXcuY2VsbEZvclJvd0F0SW5kZXhQYXRoKGluZGV4UGF0aCk7XG4gICAgICAgIHZhciB0b3RhbCA9IHRhYmxlVmlldy5udW1iZXJPZlJvd3NJblNlY3Rpb24oaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgICAgIGV2ZW50TmFtZTogJycsXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgb2JqZWN0OiBvd25lcixcbiAgICAgICAgICAgIGNoaWxkSW5kZXg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGluZGV4OiBudWxsLFxuICAgICAgICAgICAgdmlldzogbnVsbCxcbiAgICAgICAgICAgIGlvczogaW9zLFxuICAgICAgICAgICAgYW5kcm9pZDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpbmRleFBhdGgucm93ID09PSAwKSB7XG4gICAgICAgICAgICBoYW5kbGVUYXAob3duZXIsIGluZGV4UGF0aC5zZWN0aW9uLCBpb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4UGF0aC5yb3cgPT09IDEgJiYgb3duZXIuX2dldEhhc0hlYWRlcigpKSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXhQYXRoLnJvdyAhPT0gMCAmJiBpbmRleFBhdGgucm93ID09PSB0b3RhbCAtIDEgJiYgb3duZXIuX2dldEhhc0Zvb3RlcigpKSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG93bmVyLl9nZXRDaGlsZERhdGEoaW5kZXhQYXRoLnNlY3Rpb24sIGluZGV4UGF0aC5yb3cpO1xuICAgICAgICAgICAgYXJncy5pbmRleCA9IGluZGV4UGF0aC5zZWN0aW9uO1xuICAgICAgICAgICAgYXJncy5jaGlsZEluZGV4ID0gaW5kZXhQYXRoLnJvdztcbiAgICAgICAgICAgIGFyZ3MuZXZlbnROYW1lID0gYWNjb3JkaW9uX2NvbW1vbl8xLkFjY29yZGlvbkJhc2UuaXRlbUNvbnRlbnRUYXBFdmVudDtcbiAgICAgICAgICAgIGFyZ3MuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICBvd25lci5ub3RpZnkoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4UGF0aDtcbiAgICB9O1xuICAgIFVJVGFibGVWaWV3Um93SGVpZ2h0RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdEaWRTZWxlY3RSb3dBdEluZGV4UGF0aCA9IGZ1bmN0aW9uICh0YWJsZVZpZXcsIGluZGV4UGF0aCkge1xuICAgICAgICB0YWJsZVZpZXcuZGVzZWxlY3RSb3dBdEluZGV4UGF0aEFuaW1hdGVkKGluZGV4UGF0aCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBpbmRleFBhdGg7XG4gICAgfTtcbiAgICBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbC5wcm90b3R5cGUudGFibGVWaWV3SGVpZ2h0Rm9yUm93QXRJbmRleFBhdGggPSBmdW5jdGlvbiAodGFibGVWaWV3LCBpbmRleFBhdGgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcy5fb3duZXIuZ2V0KCk7XG4gICAgICAgIHZhciB0b3RhbCA9IHRhYmxlVmlldy5udW1iZXJPZlJvd3NJblNlY3Rpb24oaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICBpZiAoaW5kZXhQYXRoLnJvdyA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKCFvd25lcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZVZpZXcuZXN0aW1hdGVkSXRlbUhlYWRlclJvd0hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMob3duZXIuX2VmZmVjdGl2ZUl0ZW1IZWFkZXJSb3dIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4UGF0aC5yb3cgPT09IDEgJiYgb3duZXIuX2dldEhhc0hlYWRlcigpKSB7XG4gICAgICAgICAgICBpZiAoIW93bmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlVmlldy5lc3RpbWF0ZWRIZWFkZXJSb3dIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmlld18xLmxheW91dC50b0RldmljZUluZGVwZW5kZW50UGl4ZWxzKG93bmVyLl9lZmZlY3RpdmVIZWFkZXJSb3dIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4UGF0aC5yb3cgIT09IDAgJiYgaW5kZXhQYXRoLnJvdyA9PT0gdG90YWwgLSAxICYmIG93bmVyLl9nZXRIYXNGb290ZXIoKSkge1xuICAgICAgICAgICAgaWYgKCFvd25lcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZVZpZXcuZXN0aW1hdGVkRm9vdGVyUm93SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZpZXdfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhvd25lci5fZWZmZWN0aXZlRm9vdGVyUm93SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghb3duZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVWaWV3LmVzdGltYXRlZEl0ZW1Db250ZW50Um93SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZpZXdfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhvd25lci5fZWZmZWN0aXZlSXRlbUNvbnRlbnRSb3dIZWlnaHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBVSVRhYmxlVmlld1Jvd0hlaWdodERlbGVnYXRlSW1wbC5wcm90b3R5cGUudGFibGVWaWV3SGVpZ2h0Rm9yRm9vdGVySW5TZWN0aW9uID0gZnVuY3Rpb24gKHRhYmxlVmlldywgc2VjdGlvbikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIFVJVGFibGVWaWV3Um93SGVpZ2h0RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdIZWlnaHRGb3JIZWFkZXJJblNlY3Rpb24gPSBmdW5jdGlvbiAodGFibGVWaWV3LCBzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgVUlUYWJsZVZpZXdSb3dIZWlnaHREZWxlZ2F0ZUltcGwuT2JqQ1Byb3RvY29scyA9IFtVSVRhYmxlVmlld0RlbGVnYXRlXTtcbiAgICByZXR1cm4gVUlUYWJsZVZpZXdSb3dIZWlnaHREZWxlZ2F0ZUltcGw7XG59KE5TT2JqZWN0KSk7XG5leHBvcnRzLlVJVGFibGVWaWV3Um93SGVpZ2h0RGVsZWdhdGVJbXBsID0gVUlUYWJsZVZpZXdSb3dIZWlnaHREZWxlZ2F0ZUltcGw7XG52YXIgVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhVSVRhYmxlVmlld0RlbGVnYXRlSW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBVSVRhYmxlVmlld0RlbGVnYXRlSW1wbCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBVSVRhYmxlVmlld0RlbGVnYXRlSW1wbC5pbml0V2l0aE93bmVyID0gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IFVJVGFibGVWaWV3RGVsZWdhdGVJbXBsLm5ldygpO1xuICAgICAgICBkZWxlZ2F0ZS5fb3duZXIgPSBvd25lcjtcbiAgICAgICAgZGVsZWdhdGUuX21lYXN1cmVJdGVtSGVhZGVyTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBkZWxlZ2F0ZS5fbWVhc3VyZUl0ZW1Db250ZW50TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBkZWxlZ2F0ZS5fbWVhc3VyZUhlYWRlck1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgZGVsZWdhdGUuX21lYXN1cmVGb290ZXJNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJldHVybiBkZWxlZ2F0ZTtcbiAgICB9O1xuICAgIFVJVGFibGVWaWV3RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdIZWlnaHRGb3JSb3dBdEluZGV4UGF0aCA9IGZ1bmN0aW9uICh0YWJsZVZpZXcsIGluZGV4UGF0aCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLl9vd25lci5nZXQoKTtcbiAgICAgICAgdmFyIGhlaWdodDtcbiAgICAgICAgdmFyIHRvdGFsID0gdGFibGVWaWV3Lm51bWJlck9mUm93c0luU2VjdGlvbihpbmRleFBhdGguc2VjdGlvbik7XG4gICAgICAgIGlmIChpbmRleFBhdGgucm93ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoIW93bmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlVmlldy5lc3RpbWF0ZWRJdGVtSGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVpZ2h0ID0gb3duZXIuZ2V0SXRlbUhlYWRlckhlaWdodChpbmRleFBhdGguc2VjdGlvbik7XG4gICAgICAgICAgICBpZiAoaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBvd25lci5fZ2V0SXRlbUhlYWRlclRlbXBsYXRlKGluZGV4UGF0aC5zZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuX21lYXN1cmVJdGVtSGVhZGVyTWFwLmdldCh0ZW1wbGF0ZS5rZXkpO1xuICAgICAgICAgICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsID0gdGFibGVWaWV3LmRlcXVldWVSZXVzYWJsZUNlbGxXaXRoSWRlbnRpZmllcihcIml0ZW0taGVhZGVyLVwiICsgdGVtcGxhdGUua2V5KSB8fCBBY2NvcmRpb25JdGVtSGVhZGVyQ2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWFzdXJlSXRlbUhlYWRlck1hcC5zZXQodGVtcGxhdGUua2V5LCBjZWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gb3duZXIuX3ByZXBhcmVJdGVtSGVhZGVyQ2VsbChjZWxsLCBpbmRleFBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZpZXdfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhoZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleFBhdGgucm93ID09PSAxICYmIG93bmVyLl9nZXRIYXNIZWFkZXIoKSkge1xuICAgICAgICAgICAgaWYgKCFvd25lcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZVZpZXcuZXN0aW1hdGVkSGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVpZ2h0ID0gb3duZXIuZ2V0SGVhZGVySGVpZ2h0KGluZGV4UGF0aC5zZWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IG93bmVyLl9nZXRIZWFkZXJUZW1wbGF0ZShpbmRleFBhdGguc2VjdGlvbik7XG4gICAgICAgICAgICAgICAgdmFyIGNlbGwgPSB0aGlzLl9tZWFzdXJlSGVhZGVyTWFwLmdldCh0ZW1wbGF0ZS5rZXkpO1xuICAgICAgICAgICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsID0gdGFibGVWaWV3LmRlcXVldWVSZXVzYWJsZUNlbGxXaXRoSWRlbnRpZmllcihcImhlYWRlci1cIiArIHRlbXBsYXRlLmtleSkgfHwgQWNjb3JkaW9uSGVhZGVyQ2VsbC5pbml0V2l0aEVtcHR5QmFja2dyb3VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWFzdXJlSGVhZGVyTWFwLnNldCh0ZW1wbGF0ZS5rZXksIGNlbGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBvd25lci5fcHJlcGFyZUhlYWRlckNlbGwoY2VsbCwgaW5kZXhQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXhQYXRoLnJvdyAhPT0gMCAmJiBpbmRleFBhdGgucm93ID09PSB0b3RhbCAtIDEgJiYgb3duZXIuX2dldEhhc0Zvb3RlcigpKSB7XG4gICAgICAgICAgICBpZiAoIW93bmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlVmlldy5lc3RpbWF0ZWRGb290ZXJSb3dIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGVpZ2h0XzEgPSBvd25lci5nZXRGb290ZXJIZWlnaHQoaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKGhlaWdodF8xID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBvd25lci5fZ2V0Rm9vdGVyVGVtcGxhdGUoaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5fbWVhc3VyZUZvb3Rlck1hcC5nZXQodGVtcGxhdGUua2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbCA9IHRhYmxlVmlldy5kZXF1ZXVlUmV1c2FibGVDZWxsV2l0aElkZW50aWZpZXIoXCJmb290ZXItXCIgKyB0ZW1wbGF0ZS5rZXkpIHx8IEFjY29yZGlvbkZvb3RlckNlbGwuaW5pdFdpdGhFbXB0eUJhY2tncm91bmQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVhc3VyZUZvb3Rlck1hcC5zZXQodGVtcGxhdGUua2V5LCBjZWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVpZ2h0XzEgPSBvd25lci5fcHJlcGFyZUZvb3RlckNlbGwoY2VsbCwgaW5kZXhQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoaGVpZ2h0XzEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3duZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZVZpZXcuZXN0aW1hdGVkSXRlbUNvbnRlbnRSb3dIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaGVpZ2h0ID0gb3duZXIuZ2V0SXRlbUNvbnRlbnRIZWlnaHQocGFyc2VJbnQoXCJcIiArIChpbmRleFBhdGguc2VjdGlvbiArIDEpICsgKGluZGV4UGF0aC5yb3cgLSAxIC0gKG93bmVyLl9nZXRIYXNIZWFkZXIoKSA/IDEgOiAwKSkpKTtcbiAgICAgICAgaWYgKGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBvd25lci5fZ2V0SXRlbUNvbnRlbnRUZW1wbGF0ZShpbmRleFBhdGguc2VjdGlvbiwgaW5kZXhQYXRoLnJvdyk7XG4gICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuX21lYXN1cmVJdGVtQ29udGVudE1hcC5nZXQodGVtcGxhdGUua2V5KTtcbiAgICAgICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgICAgICAgIGNlbGwgPSB0YWJsZVZpZXcuZGVxdWV1ZVJldXNhYmxlQ2VsbFdpdGhJZGVudGlmaWVyKFwiaXRlbS1jb250ZW50LVwiICsgdGVtcGxhdGUua2V5KSB8fCBBY2NvcmRpb25JdGVtQ29udGVudENlbGwuaW5pdFdpdGhFbXB0eUJhY2tncm91bmQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tZWFzdXJlSXRlbUNvbnRlbnRNYXAuc2V0KHRlbXBsYXRlLmtleSwgY2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWlnaHQgPSBvd25lci5fcHJlcGFyZUl0ZW1Db250ZW50Q2VsbChjZWxsLCBpbmRleFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3XzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoaGVpZ2h0KTtcbiAgICB9O1xuICAgIFVJVGFibGVWaWV3RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdXaWxsU2VsZWN0Um93QXRJbmRleFBhdGggPSBmdW5jdGlvbiAodGFibGVWaWV3LCBpbmRleFBhdGgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcy5fb3duZXIuZ2V0KCk7XG4gICAgICAgIHZhciBpb3MgPSB0YWJsZVZpZXcuY2VsbEZvclJvd0F0SW5kZXhQYXRoKGluZGV4UGF0aCk7XG4gICAgICAgIHZhciB0b3RhbCA9IHRhYmxlVmlldy5udW1iZXJPZlJvd3NJblNlY3Rpb24oaW5kZXhQYXRoLnNlY3Rpb24pO1xuICAgICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgICAgIGV2ZW50TmFtZTogJycsXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgb2JqZWN0OiBvd25lcixcbiAgICAgICAgICAgIGNoaWxkSW5kZXg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGluZGV4OiBudWxsLFxuICAgICAgICAgICAgdmlldzogbnVsbCxcbiAgICAgICAgICAgIGlvczogaW9zLFxuICAgICAgICAgICAgYW5kcm9pZDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpbmRleFBhdGgucm93ID09PSAwKSB7XG4gICAgICAgICAgICBoYW5kbGVUYXAob3duZXIsIGluZGV4UGF0aC5zZWN0aW9uLCBpb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4UGF0aC5yb3cgPT09IDEgJiYgb3duZXIuX2dldEhhc0hlYWRlcigpKSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXhQYXRoLnJvdyAhPT0gMCAmJiBpbmRleFBhdGgucm93ID09PSB0b3RhbCAtIDEgJiYgb3duZXIuX2dldEhhc0Zvb3RlcigpKSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG93bmVyLl9nZXRDaGlsZERhdGEoaW5kZXhQYXRoLnNlY3Rpb24sIGluZGV4UGF0aC5yb3cpO1xuICAgICAgICAgICAgYXJncy5pbmRleCA9IGluZGV4UGF0aC5zZWN0aW9uO1xuICAgICAgICAgICAgYXJncy5jaGlsZEluZGV4ID0gaW5kZXhQYXRoLnJvdztcbiAgICAgICAgICAgIGFyZ3MuZXZlbnROYW1lID0gYWNjb3JkaW9uX2NvbW1vbl8xLkFjY29yZGlvbkJhc2UuaXRlbUNvbnRlbnRUYXBFdmVudDtcbiAgICAgICAgICAgIGFyZ3MuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICBvd25lci5ub3RpZnkoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4UGF0aDtcbiAgICB9O1xuICAgIFVJVGFibGVWaWV3RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdEaWRTZWxlY3RSb3dBdEluZGV4UGF0aCA9IGZ1bmN0aW9uICh0YWJsZVZpZXcsIGluZGV4UGF0aCkge1xuICAgICAgICB0YWJsZVZpZXcuZGVzZWxlY3RSb3dBdEluZGV4UGF0aEFuaW1hdGVkKGluZGV4UGF0aCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBpbmRleFBhdGg7XG4gICAgfTtcbiAgICBVSVRhYmxlVmlld0RlbGVnYXRlSW1wbC5wcm90b3R5cGUudGFibGVWaWV3SGVpZ2h0Rm9yRm9vdGVySW5TZWN0aW9uID0gZnVuY3Rpb24gKHRhYmxlVmlldywgc2VjdGlvbikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIFVJVGFibGVWaWV3RGVsZWdhdGVJbXBsLnByb3RvdHlwZS50YWJsZVZpZXdIZWlnaHRGb3JIZWFkZXJJblNlY3Rpb24gPSBmdW5jdGlvbiAodGFibGVWaWV3LCBzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGwuT2JqQ1Byb3RvY29scyA9IFtVSVRhYmxlVmlld0RlbGVnYXRlXTtcbiAgICByZXR1cm4gVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGw7XG59KE5TT2JqZWN0KSk7XG5leHBvcnRzLlVJVGFibGVWaWV3RGVsZWdhdGVJbXBsID0gVUlUYWJsZVZpZXdEZWxlZ2F0ZUltcGw7XG5mdW5jdGlvbiBoYW5kbGVUYXAob3duZXIsIGN1cnJlbnQsIHZpZXcpIHtcbiAgICB2YXIgZGF0YSA9IG93bmVyLl9nZXRQYXJlbnREYXRhKGN1cnJlbnQpO1xuICAgIHZhciBfYXJncyA9IHtcbiAgICAgICAgZXZlbnROYW1lOiBhY2NvcmRpb25fY29tbW9uXzEuQWNjb3JkaW9uQmFzZS5pdGVtSGVhZGVyVGFwRXZlbnQsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIG9iamVjdDogb3duZXIsXG4gICAgICAgIHBhcmVudEluZGV4OiBjdXJyZW50LFxuICAgICAgICB2aWV3OiBudWxsLFxuICAgICAgICBpb3M6IHZpZXcsXG4gICAgICAgIGFuZHJvaWQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgb3duZXIubm90aWZ5KF9hcmdzKTtcbiAgICB2YXIgcmVsb2FkU2VjdGlvbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IE5TTXV0YWJsZUluZGV4U2V0LmFsbG9jKCkuaW5pdFdpdGhJbmRleChpbmRleCk7XG4gICAgICAgIG93bmVyLmlvcy5yZWxvYWRTZWN0aW9uc1dpdGhSb3dBbmltYXRpb24oc2VjdGlvbiwgMTAwKTtcbiAgICB9O1xuICAgIHZhciByZW1vdmVTZWN0aW9uID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBzZWN0aW9uID0gTlNNdXRhYmxlSW5kZXhTZXQuYWxsb2MoKS5pbml0V2l0aEluZGV4KGluZGV4KTtcbiAgICAgICAgb3duZXIuaW9zLnJlbG9hZFNlY3Rpb25zV2l0aFJvd0FuaW1hdGlvbihzZWN0aW9uLCA0KTtcbiAgICB9O1xuICAgIHZhciBhbGxvd011bHRpcGxlID0gU3RyaW5nKG93bmVyLmFsbG93TXVsdGlwbGUpID09PSAndHJ1ZSc7XG4gICAgaWYgKGFsbG93TXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKCFvd25lci5fZXhwYW5kZWRWaWV3cy5nZXQoY3VycmVudCkpIHtcbiAgICAgICAgICAgIG93bmVyLml0ZW1FeHBhbmRlZChjdXJyZW50KTtcbiAgICAgICAgICAgIG93bmVyLl9leHBhbmRlZFZpZXdzLnNldChjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgICAgIG93bmVyLl9pbmRleFNldC5hZGRJbmRleChjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG93bmVyLl9leHBhbmRlZFZpZXdzLmRlbGV0ZShjdXJyZW50KTtcbiAgICAgICAgICAgIG93bmVyLl9pbmRleFNldC5yZW1vdmVJbmRleChjdXJyZW50KTtcbiAgICAgICAgICAgIG93bmVyLml0ZW1Db2xsYXBzZWQoY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVsb2FkU2VjdGlvbihjdXJyZW50KTtcbiAgICAgICAgb3duZXIuX3NlbGVjdGVkSW5kZXhlc1VwZGF0ZWRGcm9tTmF0aXZlKEFycmF5LmZyb20ob3duZXIuX2V4cGFuZGVkVmlld3Mua2V5cygpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAob3duZXIuX2V4cGFuZGVkVmlld3MuaGFzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBvd25lci5fZXhwYW5kZWRWaWV3cy5kZWxldGUoY3VycmVudCk7XG4gICAgICAgICAgICBvd25lci5faW5kZXhTZXQucmVtb3ZlSW5kZXgoY3VycmVudCk7XG4gICAgICAgICAgICBvd25lci5pdGVtQ29sbGFwc2VkKGN1cnJlbnQpO1xuICAgICAgICAgICAgcmVsb2FkU2VjdGlvbihjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvd25lci5fZXhwYW5kZWRWaWV3cy5zaXplID4gMCkge1xuICAgICAgICAgICAgdmFyIG9sZCA9IG93bmVyLl9leHBhbmRlZFZpZXdzLmtleXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgICAgICBvd25lci5fZXhwYW5kZWRWaWV3cy5kZWxldGUob2xkKTtcbiAgICAgICAgICAgIG93bmVyLl9pbmRleFNldC5yZW1vdmVJbmRleChvbGQpO1xuICAgICAgICAgICAgcmVsb2FkU2VjdGlvbihvbGQpO1xuICAgICAgICAgICAgb3duZXIuaXRlbUNvbGxhcHNlZChvbGQpO1xuICAgICAgICAgICAgb3duZXIuX2V4cGFuZGVkVmlld3Muc2V0KGN1cnJlbnQsIHRydWUpO1xuICAgICAgICAgICAgb3duZXIuX2luZGV4U2V0LmFkZEluZGV4KGN1cnJlbnQpO1xuICAgICAgICAgICAgcmVsb2FkU2VjdGlvbihjdXJyZW50KTtcbiAgICAgICAgICAgIG93bmVyLml0ZW1FeHBhbmRlZChjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG93bmVyLl9leHBhbmRlZFZpZXdzLnNldChjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgICAgIG93bmVyLl9pbmRleFNldC5hZGRJbmRleChjdXJyZW50KTtcbiAgICAgICAgICAgIG93bmVyLml0ZW1FeHBhbmRlZChjdXJyZW50KTtcbiAgICAgICAgICAgIHJlbG9hZFNlY3Rpb24oY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgb3duZXIuX3NlbGVjdGVkSW5kZXhlc1VwZGF0ZWRGcm9tTmF0aXZlKEFycmF5LmZyb20ob3duZXIuX2V4cGFuZGVkVmlld3Mua2V5cygpKSk7XG4gICAgfVxufVxudmFyIFVJVGFibGVWaWV3SW1wbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVJVGFibGVWaWV3SW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBVSVRhYmxlVmlld0ltcGwoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5lc3RpbWF0ZWRJdGVtSGVhZGVyUm93SGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMuZXN0aW1hdGVkSXRlbUNvbnRlbnRSb3dIZWlnaHQgPSAwO1xuICAgICAgICBfdGhpcy5lc3RpbWF0ZWRIZWFkZXJSb3dIZWlnaHQgPSAwO1xuICAgICAgICBfdGhpcy5lc3RpbWF0ZWRGb290ZXJSb3dIZWlnaHQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFVJVGFibGVWaWV3SW1wbC5pbml0V2l0aE93bmVyID0gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgICAgIHZhciB0YWJsZSA9IFVJVGFibGVWaWV3SW1wbC5uZXcoKTtcbiAgICAgICAgdGFibGUub3duZXIgPSBvd25lcjtcbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH07XG4gICAgcmV0dXJuIFVJVGFibGVWaWV3SW1wbDtcbn0oVUlUYWJsZVZpZXcpKTtcbmV4cG9ydHMuVUlUYWJsZVZpZXdJbXBsID0gVUlUYWJsZVZpZXdJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3JkaW9uLmlvcy5qcy5tYXAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFjY29yZGlvbihWdWUpIHtcblx0cmV0dXJuIHtcblx0XHRtb2RlbDoge1xuXHRcdFx0cHJvcDogJ3NlbGVjdGVkSW5kZXhlcycsXG5cdFx0XHRldmVudDogJ3NlbGVjdGVkSW5kZXhlc0NoYW5nZSdcblx0XHR9LFxuXHRcdHByb3BzOiB7XG5cdFx0XHRpdGVtczoge1xuXHRcdFx0XHR0eXBlOiBBcnJheSxcblx0XHRcdFx0cmVxdWlyZWQ6IHRydWVcblx0XHRcdH0sXG5cdFx0XHQnK2FsaWFzJzoge1xuXHRcdFx0XHR0eXBlOiBTdHJpbmcsXG5cdFx0XHRcdGRlZmF1bHQ6ICdpdGVtJ1xuXHRcdFx0fSxcblx0XHRcdCcraW5kZXgnOiB7XG5cdFx0XHRcdHR5cGU6IFN0cmluZyxcblx0XHRcdFx0ZGVmYXVsdDogJyRpbmRleCdcblx0XHRcdH0sXG5cdFx0XHRzZWxlY3RlZEluZGV4ZXM6IHtcblx0XHRcdFx0dHlwZTogQXJyYXksXG5cdFx0XHRcdGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gW11cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dGVtcGxhdGU6IGBcbiAgICA8TmF0aXZlQWNjb3JkaW9uXG4gICAgICByZWY9XCJhY2NvcmRpb25cIlxuICAgICAgOml0ZW1zPVwiaXRlbXNcIlxuICAgICAgdi1iaW5kPVwiJGF0dHJzXCJcbiAgICAgIHYtb249XCJsaXN0ZW5lcnNcIlxuICAgICAgOnNlbGVjdGVkSW5kZXhlcz1cInNlbGVjdGVkSW5kZXhlc1wiXG4gICAgICBAaGVhZGVyTG9hZGluZz1cIm9uSGVhZGVyTG9hZGluZ1wiXG4gICAgICBAZm9vdGVyTG9hZGluZz1cIm9uRm9vdGVyTG9hZGluZ1wiXG4gICAgICBAaXRlbUhlYWRlckxvYWRpbmc9XCJvbkl0ZW1IZWFkZXJMb2FkaW5nXCJcbiAgICAgIEBpdGVtQ29udGVudExvYWRpbmc9XCJvbkl0ZW1Db250ZW50TG9hZGluZ1wiPlxuICAgICAgPHNsb3QgLz5cbiAgICA8L05hdGl2ZUFjY29yZGlvbj5cbiAgYCxcblx0XHR3YXRjaDoge1xuXHRcdFx0aXRlbXM6IHtcblx0XHRcdFx0aGFuZGxlcihuZXdWYWwpIHtcblx0XHRcdFx0XHR0aGlzLiRyZWZzLmFjY29yZGlvbi5zZXRBdHRyaWJ1dGUoJ2l0ZW1zJywgbmV3VmFsKTtcblx0XHRcdFx0XHR0aGlzLiRyZWZzLmFjY29yZGlvbi5uYXRpdmVWaWV3LnJlZnJlc2goKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGVlcDogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y29tcHV0ZWQ6IHtcblx0XHRcdGxpc3RlbmVycygpIHtcblx0XHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuJGxpc3RlbmVycywge1xuXHRcdFx0XHRcdHNlbGVjdGVkSW5kZXhlc0NoYW5nZTogdGhpcy5vblNlbGVjdGVkSW5kZXhlc0NoYW5nZVxuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bW91bnRlZCgpIHtcblx0XHRcdHRoaXMuZ2V0SXRlbUNvbnRleHQgPSAoaXRlbSwgaW5kZXgpID0+XG5cdFx0XHRcdGdldEl0ZW1Db250ZXh0KGl0ZW0sIGluZGV4LCB0aGlzLiRwcm9wc1sgJythbGlhcycgXSwgdGhpcy4kcHJvcHNbICcraW5kZXgnIF0pO1xuXG5cdFx0XHR0aGlzLmdldENoaWxkSXRlbUNvbnRleHQgPSAoaXRlbSwgcGFyZW50SW5kZXgsIGluZGV4KSA9PlxuXHRcdFx0XHRnZXRDaGlsZEl0ZW1Db250ZXh0KGl0ZW0sIHBhcmVudEluZGV4LCBpbmRleCwgdGhpcy4kcHJvcHNbICcrYWxpYXMnIF0sIHRoaXMuJHByb3BzWyAnK2luZGV4JyBdKTtcblxuXHRcdFx0dGhpcy5zZWxlY3RvckZuID0gKGl0ZW0sIHR5cGUpID0+IHNlbGVjdG9yRm4odGhpcy4kdGVtcGxhdGVzLCBpdGVtLCB0eXBlKTtcblxuXHRcdFx0dGhpcy4kcmVmcy5hY2NvcmRpb24uc2V0QXR0cmlidXRlKCdpdGVtcycsIHRoaXMuaXRlbXMpO1xuXG5cdFx0XHRjb25zdCBoZWFkZXJUZW1wbGF0ZXMgPSB0aGlzLiR0ZW1wbGF0ZXMuZ2V0S2V5ZWRUZW1wbGF0ZXMoKS5maWx0ZXIoaXRlbSA9PiB7XG5cdFx0XHRcdGlmIChpdGVtLmtleSA9PT0gJ2hlYWRlcicpIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXRlbS5rZXkuc3RhcnRzV2l0aCgnaGVhZGVyLScpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoaGVhZGVyVGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dGhpcy4kcmVmcy5hY2NvcmRpb24uc2V0QXR0cmlidXRlKCdfZ2V0SGFzSGVhZGVyJywgKCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBpdGVtQ29udGVudFRlbXBsYXRlcyA9IHRoaXMuJHRlbXBsYXRlcy5nZXRLZXllZFRlbXBsYXRlcygpLmZpbHRlcihpdGVtID0+IHtcblx0XHRcdFx0aWYgKGl0ZW0ua2V5ID09PSAnY29udGVudCcpIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpdGVtLmtleS5zdGFydHNXaXRoKCdjb250ZW50LScpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRjb25zdCBpdGVtSGVhZGVyVGVtcGxhdGVzID0gdGhpcy4kdGVtcGxhdGVzLmdldEtleWVkVGVtcGxhdGVzKCkuZmlsdGVyKGl0ZW0gPT4ge1xuXHRcdFx0XHRpZiAoaXRlbS5rZXkgPT09ICd0aXRsZScpIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXRlbS5rZXkuc3RhcnRzV2l0aCgndGl0bGUtJykpIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGNvbnN0IGZvb3RlclRlbXBsYXRlcyA9IHRoaXMuJHRlbXBsYXRlcy5nZXRLZXllZFRlbXBsYXRlcygpLmZpbHRlcihpdGVtID0+IHtcblx0XHRcdFx0aWYgKGl0ZW0ua2V5ID09PSAnZm9vdGVyJykge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGl0ZW0ua2V5LnN0YXJ0c1dpdGgoJ2Zvb3Rlci0nKSkge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKGZvb3RlclRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoaXMuJHJlZnMuYWNjb3JkaW9uLnNldEF0dHJpYnV0ZSgnX2dldEhhc0Zvb3RlcicsICgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdHRoaXMuJHJlZnMuYWNjb3JkaW9uLnNldEF0dHJpYnV0ZShcblx0XHRcdFx0J19oZWFkZXJUZW1wbGF0ZXNJbnRlcm5hbCcsXG5cdFx0XHRcdGhlYWRlclRlbXBsYXRlc1xuXHRcdFx0KTtcblxuXHRcdFx0dGhpcy4kcmVmcy5hY2NvcmRpb24uc2V0QXR0cmlidXRlKFxuXHRcdFx0XHQnX2hlYWRlclRlbXBsYXRlU2VsZWN0b3InLFxuXHRcdFx0XHQoaXRlbSwgaW5kZXgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZWxlY3RvckZuKHRoaXMuZ2V0SXRlbUNvbnRleHQoaXRlbSwgaW5kZXgpLCAnaGVhZGVyJyk7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cblx0XHRcdHRoaXMuJHJlZnMuYWNjb3JkaW9uLnNldEF0dHJpYnV0ZShcblx0XHRcdFx0J19pdGVtSGVhZGVyVGVtcGxhdGVzSW50ZXJuYWwnLFxuXHRcdFx0XHRpdGVtSGVhZGVyVGVtcGxhdGVzXG5cdFx0XHQpO1xuXG5cblx0XHRcdHRoaXMuJHJlZnMuYWNjb3JkaW9uLnNldEF0dHJpYnV0ZShcblx0XHRcdFx0J19pdGVtSGVhZGVyVGVtcGxhdGVTZWxlY3RvcicsXG5cdFx0XHRcdChpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnNlbGVjdG9yRm4odGhpcy5nZXRJdGVtQ29udGV4dChpdGVtLCBpbmRleCksICd0aXRsZScpO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXG5cdFx0XHR0aGlzLiRyZWZzLmFjY29yZGlvbi5zZXRBdHRyaWJ1dGUoXG5cdFx0XHRcdCdfaXRlbUNvbnRlbnRUZW1wbGF0ZXNJbnRlcm5hbCcsXG5cdFx0XHRcdGl0ZW1Db250ZW50VGVtcGxhdGVzXG5cdFx0XHQpO1xuXHRcdFx0dGhpcy4kcmVmcy5hY2NvcmRpb24uc2V0QXR0cmlidXRlKFxuXHRcdFx0XHQnX2l0ZW1Db250ZW50VGVtcGxhdGVTZWxlY3RvcicsXG5cdFx0XHRcdChpdGVtLCBwYXJlbnRJbmRleCwgaW5kZXgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZWxlY3RvckZuKHRoaXMuZ2V0Q2hpbGRJdGVtQ29udGV4dChpdGVtLCBwYXJlbnRJbmRleCwgaW5kZXgpLCAnY29udGVudCcpO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXG5cdFx0XHR0aGlzLiRyZWZzLmFjY29yZGlvbi5zZXRBdHRyaWJ1dGUoXG5cdFx0XHRcdCdfZm9vdGVyVGVtcGxhdGVzSW50ZXJuYWwnLFxuXHRcdFx0XHRmb290ZXJUZW1wbGF0ZXNcblx0XHRcdCk7XG5cdFx0XHR0aGlzLiRyZWZzLmFjY29yZGlvbi5zZXRBdHRyaWJ1dGUoXG5cdFx0XHRcdCdfZm9vdGVyVGVtcGxhdGVTZWxlY3RvcicsXG5cdFx0XHRcdChpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnNlbGVjdG9yRm4odGhpcy5nZXRJdGVtQ29udGV4dChpdGVtLCBpbmRleCksICdmb290ZXInKTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblxuXHRcdH0sXG5cdFx0bWV0aG9kczoge1xuXHRcdFx0b25IZWFkZXJMb2FkaW5nKGFyZ3MpIHtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBhcmdzLmluZGV4O1xuXHRcdFx0XHRjb25zdCBpdGVtcyA9IGFyZ3Mub2JqZWN0Lml0ZW1zO1xuXHRcdFx0XHRsZXQgY3VycmVudEl0ZW0gPVxuXHRcdFx0XHRcdHR5cGVvZiBpdGVtcy5nZXRJdGVtID09PSAnZnVuY3Rpb24nXG5cdFx0XHRcdFx0XHQ/IGl0ZW1zLmdldEl0ZW0oaW5kZXgpXG5cdFx0XHRcdFx0XHQ6IGl0ZW1zWyBpbmRleCBdO1xuXG5cdFx0XHRcdGxldCBuYW1lID0gYXJncy5vYmplY3QuX2hlYWRlclRlbXBsYXRlU2VsZWN0b3IoY3VycmVudEl0ZW0sIGluZGV4LCBpdGVtcyk7XG5cblx0XHRcdFx0aWYgKG5hbWUgPT09ICdkZWZhdWx0Jykge1xuXHRcdFx0XHRcdG5hbWUgPSAnaGVhZGVyJ1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXMuZ2V0SXRlbUNvbnRleHQoY3VycmVudEl0ZW0sIGluZGV4KTtcblx0XHRcdFx0Y29uc3Qgb2xkVm5vZGUgPSBhcmdzLnZpZXcgJiYgYXJncy52aWV3WyBWdWUuVlVFX1ZJRVcgXTtcblx0XHRcdFx0YXJncy52aWV3ID0gdGhpcy4kdGVtcGxhdGVzLnBhdGNoVGVtcGxhdGUobmFtZSwgY29udGV4dCwgb2xkVm5vZGUpO1xuXHRcdFx0fSxcblx0XHRcdG9uRm9vdGVyTG9hZGluZyhhcmdzKSB7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gYXJncy5pbmRleDtcblx0XHRcdFx0Y29uc3QgaXRlbXMgPSBhcmdzLm9iamVjdC5pdGVtcztcblx0XHRcdFx0bGV0IGN1cnJlbnRJdGVtID1cblx0XHRcdFx0XHR0eXBlb2YgaXRlbXMuZ2V0SXRlbSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0XHRcdFx0PyBpdGVtcy5nZXRJdGVtKGluZGV4KVxuXHRcdFx0XHRcdFx0OiBpdGVtc1sgaW5kZXggXTtcblxuXHRcdFx0XHRsZXQgbmFtZSA9IGFyZ3Mub2JqZWN0Ll9mb290ZXJUZW1wbGF0ZVNlbGVjdG9yKGN1cnJlbnRJdGVtLCBpbmRleCwgaXRlbXMpO1xuXG5cdFx0XHRcdGlmIChuYW1lID09PSAnZGVmYXVsdCcpIHtcblx0XHRcdFx0XHRuYW1lID0gJ2Zvb3Rlcidcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXMuZ2V0SXRlbUNvbnRleHQoY3VycmVudEl0ZW0sIGluZGV4KTtcblx0XHRcdFx0Y29uc3Qgb2xkVm5vZGUgPSBhcmdzLnZpZXcgJiYgYXJncy52aWV3WyBWdWUuVlVFX1ZJRVcgXTtcblx0XHRcdFx0YXJncy52aWV3ID0gdGhpcy4kdGVtcGxhdGVzLnBhdGNoVGVtcGxhdGUobmFtZSwgY29udGV4dCwgb2xkVm5vZGUpO1xuXHRcdFx0fSxcblx0XHRcdG9uSXRlbUhlYWRlckxvYWRpbmcoYXJncykge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IGFyZ3MuaW5kZXg7XG5cdFx0XHRcdGNvbnN0IGl0ZW1zID0gYXJncy5vYmplY3QuaXRlbXM7XG5cdFx0XHRcdGxldCBjdXJyZW50SXRlbSA9XG5cdFx0XHRcdFx0dHlwZW9mIGl0ZW1zLmdldEl0ZW0gPT09ICdmdW5jdGlvbidcblx0XHRcdFx0XHRcdD8gaXRlbXMuZ2V0SXRlbShpbmRleClcblx0XHRcdFx0XHRcdDogaXRlbXNbIGluZGV4IF07XG5cblx0XHRcdFx0bGV0IG5hbWUgPSBhcmdzLm9iamVjdC5faXRlbUhlYWRlclRlbXBsYXRlU2VsZWN0b3IoY3VycmVudEl0ZW0sIGluZGV4LCBpdGVtcyk7XG5cblx0XHRcdFx0aWYgKG5hbWUgPT09ICdkZWZhdWx0Jykge1xuXHRcdFx0XHRcdG5hbWUgPSAndGl0bGUnXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRJdGVtQ29udGV4dChjdXJyZW50SXRlbSwgaW5kZXgpO1xuXHRcdFx0XHRjb25zdCBvbGRWbm9kZSA9IGFyZ3MudmlldyAmJiBhcmdzLnZpZXdbIFZ1ZS5WVUVfVklFVyBdO1xuXG5cdFx0XHRcdGFyZ3MudmlldyA9IHRoaXMuJHRlbXBsYXRlcy5wYXRjaFRlbXBsYXRlKG5hbWUsIGNvbnRleHQsIG9sZFZub2RlKTtcblx0XHRcdH0sXG5cdFx0XHRvbkl0ZW1Db250ZW50TG9hZGluZyhhcmdzKSB7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gYXJncy5pbmRleDtcblx0XHRcdFx0Y29uc3QgY2hpbGRJbmRleCA9IGFyZ3MuY2hpbGRJbmRleDtcblx0XHRcdFx0Y29uc3QgaXRlbXMgPSBhcmdzLm9iamVjdC5pdGVtcztcblx0XHRcdFx0Y29uc3QgY2hpbGRJdGVtcyA9IHRoaXMuJHJlZnMuYWNjb3JkaW9uLmdldEF0dHJpYnV0ZSgnY2hpbGRJdGVtcycpO1xuXHRcdFx0XHRsZXQgY3VycmVudEl0ZW0gPVxuXHRcdFx0XHRcdHR5cGVvZiBpdGVtcy5nZXRJdGVtID09PSAnZnVuY3Rpb24nXG5cdFx0XHRcdFx0XHQ/IGl0ZW1zLmdldEl0ZW0oaW5kZXgpWyBjaGlsZEl0ZW1zIF1bIGNoaWxkSW5kZXggXVxuXHRcdFx0XHRcdFx0OiBpdGVtc1sgaW5kZXggXVsgY2hpbGRJdGVtcyBdWyBjaGlsZEluZGV4IF07XG5cblxuXHRcdFx0XHRsZXQgbmFtZSA9IGFyZ3Mub2JqZWN0Ll9pdGVtQ29udGVudFRlbXBsYXRlU2VsZWN0b3IoY3VycmVudEl0ZW0sIGluZGV4LCBpdGVtcyk7XG5cblx0XHRcdFx0aWYgKG5hbWUgPT09ICdkZWZhdWx0Jykge1xuXHRcdFx0XHRcdG5hbWUgPSAnY29udGVudCdcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzLmdldENoaWxkSXRlbUNvbnRleHQoY3VycmVudEl0ZW0sIGluZGV4LCBjaGlsZEluZGV4KTtcblx0XHRcdFx0Y29uc3Qgb2xkVm5vZGUgPSBhcmdzLnZpZXcgJiYgYXJncy52aWV3WyBWdWUuVlVFX1ZJRVcgXTtcblx0XHRcdFx0YXJncy52aWV3ID0gdGhpcy4kdGVtcGxhdGVzLnBhdGNoVGVtcGxhdGUobmFtZSwgY29udGV4dCwgb2xkVm5vZGUpO1xuXHRcdFx0fSxcblx0XHRcdG9uU2VsZWN0ZWRJbmRleGVzQ2hhbmdlKHsgdmFsdWUgfSkge1xuXHRcdFx0XHR0aGlzLiRlbWl0KCdzZWxlY3RlZEluZGV4ZXNDaGFuZ2UnLCB2YWx1ZSlcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0SXRlbUNvbnRleHQoaXRlbSwgaW5kZXgsIGFsaWFzLCBpbmRleF9hbGlhcykge1xuXHRcdHJldHVybiB7XG5cdFx0XHRbIGFsaWFzIF06IGl0ZW0sXG5cdFx0XHRbIGluZGV4X2FsaWFzIF06IGluZGV4LFxuXHRcdFx0JGV2ZW46IGluZGV4ICUgMiA9PT0gMCxcblx0XHRcdCRvZGQ6IGluZGV4ICUgMiAhPT0gMFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRDaGlsZEl0ZW1Db250ZXh0KGl0ZW0sIHBhcmVudEluZGV4LCBpbmRleCwgYWxpYXMsIGluZGV4X2FsaWFzKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdFsgYWxpYXMgXTogaXRlbSxcblx0XHRcdFsgaW5kZXhfYWxpYXMgXTogaW5kZXgsXG5cdFx0XHQkZXZlbjogaW5kZXggJSAyID09PSAwLFxuXHRcdFx0JG9kZDogaW5kZXggJSAyICE9PSAwLFxuXHRcdFx0JHBhcmVudEluZGV4OiBwYXJlbnRJbmRleFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBzZWxlY3RvckZuKHRlbXBsYXRlcywgaXRlbSwgdHlwZSkge1xuXHRcdGNvbnN0IHRlbXBsYXRlTWFwID0gdGVtcGxhdGVzLl90ZW1wbGF0ZU1hcDtcblx0XHRsZXQgaXRlcmF0b3IgPSB0ZW1wbGF0ZU1hcC5lbnRyaWVzKCk7XG5cdFx0bGV0IGN1cnI7XG5cdFx0d2hpbGUgKChjdXJyID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlKSkge1xuXHRcdFx0bGV0IG5hbWUgPSBjdXJyWyAwIF07XG5cdFx0XHRsZXQgY29uZGl0aW9uRm4gPSBjdXJyWyAxIF0uY29uZGl0aW9uRm47XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoY29uZGl0aW9uRm4oaXRlbSkgJiYgKG5hbWUgPT09IHR5cGUgfHwgbmFtZS5zdGFydHNXaXRoKGAke3R5cGV9LWApKSkge1xuXHRcdFx0XHRcdHJldHVybiBuYW1lXG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJ2RlZmF1bHQnXG5cdH1cbn0iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcblx0VnVlLnJlZ2lzdGVyRWxlbWVudCgnTmF0aXZlQWNjb3JkaW9uJywgKCkgPT4gcmVxdWlyZSgnLi4vJykuQWNjb3JkaW9uKTtcblx0VnVlLmNvbXBvbmVudCgnQWNjb3JkaW9uJywgcmVxdWlyZSgnLi9hY2NvcmRpb24nKShWdWUpKVxufSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaG90ID0gcmVxdWlyZShcIi4uL2hvdFwiKTtcbmNvbnN0IGZpbGVfc3lzdGVtXzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9maWxlLXN5c3RlbVwiKTtcbmZ1bmN0aW9uIGhtclVwZGF0ZSgpIHtcbiAgICBjb25zdCBjdXJyZW50QXBwRm9sZGVyID0gZmlsZV9zeXN0ZW1fMS5rbm93bkZvbGRlcnMuY3VycmVudEFwcCgpO1xuICAgIGNvbnN0IGxhdGVzdEhhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fW1wiaFwiXSgpO1xuICAgIHJldHVybiBob3QobGF0ZXN0SGFzaCwgZmlsZW5hbWUgPT4ge1xuICAgICAgICBjb25zdCBmdWxsRmlsZVBhdGggPSBmaWxlX3N5c3RlbV8xLnBhdGguam9pbihjdXJyZW50QXBwRm9sZGVyLnBhdGgsIGZpbGVuYW1lKTtcbiAgICAgICAgcmV0dXJuIGZpbGVfc3lzdGVtXzEuRmlsZS5leGlzdHMoZnVsbEZpbGVQYXRoKSA/IGN1cnJlbnRBcHBGb2xkZXIuZ2V0RmlsZShmaWxlbmFtZSkgOiBudWxsO1xuICAgIH0pO1xufVxuZXhwb3J0cy5obXJVcGRhdGUgPSBobXJVcGRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obXItdXBkYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhtcl91cGRhdGVfMSA9IHJlcXVpcmUoXCIuL2htci11cGRhdGVcIik7XG5leHBvcnRzLmhtclVwZGF0ZSA9IGhtcl91cGRhdGVfMS5obXJVcGRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJjb25zdCBobXJQcmVmaXggPSAnSE1SOic7XG5jb25zdCBsb2cgPSB7XG4gICAgaW5mbzogKG1lc3NhZ2UpID0+IGNvbnNvbGUuaW5mbyhgJHtobXJQcmVmaXh9ICR7bWVzc2FnZX1gKSxcbiAgICB3YXJuOiAobWVzc2FnZSkgPT4gY29uc29sZS53YXJuKGAke2htclByZWZpeH0gJHttZXNzYWdlfWApLFxuICAgIGVycm9yOiAobWVzc2FnZSkgPT4gY29uc29sZS5lcnJvcihgJHtobXJQcmVmaXh9ICR7bWVzc2FnZX1gKSxcbn07XG5jb25zdCByZWZyZXNoID0gJ0FwcGxpY2F0aW9uIG5lZWRzIHRvIGJlIHJlc3RhcnRlZCBpbiBvcmRlciB0byBhcHBseSB0aGUgY2hhbmdlcy4nO1xuY29uc3QgaG90T3B0aW9ucyA9IHtcbiAgICBpZ25vcmVVbmFjY2VwdGVkOiBmYWxzZSxcbiAgICBpZ25vcmVEZWNsaW5lZDogZmFsc2UsXG4gICAgaWdub3JlRXJyb3JlZDogZmFsc2UsXG4gICAgb25VbmFjY2VwdGVkKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY2hhaW4gPSBbXS5jb25jYXQoZGF0YS5jaGFpbik7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBjaGFpbltjaGFpbi5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAobGFzdCA9PT0gMCkge1xuICAgICAgICAgICAgY2hhaW4ucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2cud2FybihgSWdub3JlZCBhbiB1cGRhdGUgdG8gdW5hY2NlcHRlZCBtb2R1bGU6IGApO1xuICAgICAgICBjaGFpbi5mb3JFYWNoKG1vZCA9PiBsb2cud2FybihgICAgICAgICAg4p6tICR7bW9kfWApKTtcbiAgICB9LFxuICAgIG9uRGVjbGluZWQoZGF0YSkge1xuICAgICAgICBsb2cud2FybihgSWdub3JlZCBhbiB1cGRhdGUgdG8gZGVjbGluZWQgbW9kdWxlOmApO1xuICAgICAgICBkYXRhLmNoYWluLmZvckVhY2gobW9kID0+IGxvZy53YXJuKGAgICAgICAgICDinq0gJHttb2R9YCkpO1xuICAgIH0sXG4gICAgb25FcnJvcmVkKGRhdGEpIHtcbiAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICBgSWdub3JlZCBhbiBlcnJvciB3aGlsZSB1cGRhdGluZyBtb2R1bGUgJHtkYXRhLm1vZHVsZUlkfSA8JHtkYXRhLnR5cGV9PmBcbiAgICAgICAgKTtcbiAgICAgICAgbG9nLndhcm4oZGF0YS5lcnJvcik7XG4gICAgfSxcbn07XG5cbmxldCBuZXh0SGFzaDtcbmxldCBjdXJyZW50SGFzaDtcblxuZnVuY3Rpb24gdXBUb0RhdGUoKSB7XG4gICAgcmV0dXJuIG5leHRIYXNoLmluZGV4T2YoX193ZWJwYWNrX2hhc2hfXykgPj0gMDtcbn1cblxuZnVuY3Rpb24gcmVzdWx0KG1vZHVsZXMsIGFwcGxpZWRNb2R1bGVzKSB7XG4gICAgY29uc3QgdW5hY2NlcHRlZCA9IG1vZHVsZXMuZmlsdGVyKFxuICAgICAgICAobW9kdWxlSWQpID0+IGFwcGxpZWRNb2R1bGVzICYmIGFwcGxpZWRNb2R1bGVzLmluZGV4T2YobW9kdWxlSWQpIDwgMFxuICAgICk7XG5cbiAgICBpZiAodW5hY2NlcHRlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxvZy53YXJuKCdUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGQgbm90IGJlIHVwZGF0ZWQ6Jyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBtb2R1bGVJZCBvZiB1bmFjY2VwdGVkKSB7XG4gICAgICAgICAgICBsb2cud2FybihgICAgICAgICAgIOKmuyAke21vZHVsZUlkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEoYXBwbGllZE1vZHVsZXMgfHwgW10pLmxlbmd0aCkge1xuICAgICAgICBsb2cuaW5mbygnTm8gTW9kdWxlcyBVcGRhdGVkLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5pbmZvKCdUaGUgZm9sbG93aW5nIG1vZHVsZXMgd2VyZSB1cGRhdGVkOicpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbW9kdWxlSWQgb2YgYXBwbGllZE1vZHVsZXMpIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKGAgICAgICAgICDihrsgJHttb2R1bGVJZH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG51bWJlcklkcyA9IGFwcGxpZWRNb2R1bGVzLmV2ZXJ5KFxuICAgICAgICAgICAgKG1vZHVsZUlkKSA9PiB0eXBlb2YgbW9kdWxlSWQgPT09ICdudW1iZXInXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudW1iZXJJZHMpIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgICAgICAgICdQbGVhc2UgY29uc2lkZXIgdXNpbmcgdGhlIE5hbWVkTW9kdWxlc1BsdWdpbiBmb3IgbW9kdWxlIG5hbWVzLidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbW9kdWxlLmhvdFxuICAgICAgICAuY2hlY2soKVxuICAgICAgICAudGhlbigobW9kdWxlcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb2R1bGVzKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICAgICAgICAgIGBDYW5ub3QgZmluZCB1cGRhdGUuICR7cmVmcmVzaH1gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZS5ob3RcbiAgICAgICAgICAgICAgICAuYXBwbHkoaG90T3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigoYXBwbGllZE1vZHVsZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRDaGVjaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1cFRvRGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q2hlY2sgPSBjaGVjayhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdChtb2R1bGVzLCBhcHBsaWVkTW9kdWxlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwVG9EYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCBtb2RpZnkgbWVzc2FnZSAtIENMSSBkZXBlbmRzIG9uIHRoaXMgZXhhY3QgY29udGVudCB0byBkZXRlcm1pbmUgaG1yIG9wZXJhdGlvbiBzdGF0dXMuXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuaW5mbyhgU3VjY2Vzc2Z1bGx5IGFwcGxpZWQgdXBkYXRlIHdpdGggaG1yIGhhc2ggJHtjdXJyZW50SGFzaH0uIEFwcCBpcyB1cCB0byBkYXRlLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRDaGVjayB8fCBudWxsO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsnYWJvcnQnLCAnZmFpbCddLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3QgbW9kaWZ5IG1lc3NhZ2UgLSBDTEkgZGVwZW5kcyBvbiB0aGlzIGV4YWN0IGNvbnRlbnQgdG8gZGV0ZXJtaW5lIGhtciBvcGVyYXRpb24gc3RhdHVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGBDYW5ub3QgYXBwbHkgdXBkYXRlIHdpdGggaG1yIGhhc2ggJHtjdXJyZW50SGFzaH0uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZXJyLm1lc3NhZ2UgfHwgZXJyLnN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgVXBkYXRlIGZhaWxlZDogJHtlcnIubWVzc2FnZSB8fCBlcnIuc3RhY2t9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG4gICAgICAgICAgICBpZiAoWydhYm9ydCcsICdmYWlsJ10uaW5kZXhPZihzdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYENhbm5vdCBjaGVjayBmb3IgdXBkYXRlLiAke3JlZnJlc2h9YCk7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGVyci5tZXNzYWdlIHx8IGVyci5zdGFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgVXBkYXRlIGNoZWNrIGZhaWxlZDogJHtlcnIubWVzc2FnZSB8fCBlcnIuc3RhY2t9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuXG5pZiAobW9kdWxlLmhvdCkge1xuICAgIGxvZy5pbmZvKCdIb3QgTW9kdWxlIFJlcGxhY2VtZW50IEVuYWJsZWQuIFdhaXRpbmcgZm9yIHNpZ25hbC4nKTtcbn0gZWxzZSB7XG4gICAgbG9nLmVycm9yKCdIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLicpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUobGF0ZXN0SGFzaCwgb3B0aW9ucykge1xuICAgIG5leHRIYXNoID0gbGF0ZXN0SGFzaDtcbiAgICBpZiAoIXVwVG9EYXRlKCkpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcblxuICAgICAgICBpZiAoc3RhdHVzID09PSAnaWRsZScpIHtcbiAgICAgICAgICAgIC8vRG8gbm90IG1vZGlmeSBtZXNzYWdlIC0gQ0xJIGRlcGVuZHMgb24gdGhpcyBleGFjdCBjb250ZW50IHRvIGRldGVybWluZSBobXIgb3BlcmF0aW9uIHN0YXR1cy5cbiAgICAgICAgICAgIGxvZy5pbmZvKGBDaGVja2luZyBmb3IgdXBkYXRlcyB0byB0aGUgYnVuZGxlIHdpdGggaG1yIGhhc2ggJHtjdXJyZW50SGFzaH0uYCk7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2sob3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAoWydhYm9ydCcsICdmYWlsJ10uaW5kZXhPZihzdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgYXBwbHkgdXBkYXRlLiBBIHByZXZpb3VzIHVwZGF0ZSAke3N0YXR1c31lZC4gJHtyZWZyZXNofWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBnZXROZXh0SGFzaChoYXNoLCBnZXRGaWxlQ29udGVudCkge1xuICAgIGNvbnN0IGZpbGUgPSBnZXRGaWxlQ29udGVudChgJHtoYXNofS5ob3QtdXBkYXRlLmpzb25gKTtcbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZS5yZWFkVGV4dCgpLnRoZW4oaG90VXBkYXRlQ29udGVudCA9PiB7XG4gICAgICAgIGlmIChob3RVcGRhdGVDb250ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBtYW5pZmVzdCA9IEpTT04ucGFyc2UoaG90VXBkYXRlQ29udGVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdIYXNoID0gbWFuaWZlc3QuaDtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0SGFzaChuZXdIYXNoLCBnZXRGaWxlQ29udGVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4gUHJvbWlzZS5yZWplY3QoZXJyb3IpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjaGVja1N0YXRlKGluaXRpYWxIYXNoLCBnZXRGaWxlQ29udGVudCkge1xuICAgIGN1cnJlbnRIYXNoID0gaW5pdGlhbEhhc2g7XG4gICAgcmV0dXJuIGdldE5leHRIYXNoKGluaXRpYWxIYXNoLCBnZXRGaWxlQ29udGVudCkudGhlbihuZXh0SGFzaCA9PiB7XG4gICAgICAgIGlmIChuZXh0SGFzaCAhPSBpbml0aWFsSGFzaCkge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShuZXh0SGFzaCwge30pO1xuICAgICAgICB9XG4gICAgfSlcbn1cbiIsImNvbnN0IGxvYWRDc3MgPSByZXF1aXJlKFwiLi9sb2FkLWFwcGxpY2F0aW9uLWNzc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICBsb2FkQ3NzKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhcHBDc3NDb250ZXh0ID0gcmVxdWlyZS5jb250ZXh0KFwifi9cIiwgZmFsc2UsIC9eXFwuXFwvYXBwXFwuKGNzc3xzY3NzfGxlc3N8c2FzcykkLyk7XG4gICAgICAgIGdsb2JhbC5yZWdpc3RlcldlYnBhY2tNb2R1bGVzKGFwcENzc0NvbnRleHQpO1xuICAgIH0pO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobG9hZE1vZHVsZUZuKSB7XG4gICAgY29uc3QgYXBwbGljYXRpb24gPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvblwiKTtcbiAgICByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91aS9zdHlsaW5nL3N0eWxlLXNjb3BlXCIpO1xuXG4gICAgbG9hZE1vZHVsZUZuKCk7XG5cbiAgICBhcHBsaWNhdGlvbi5sb2FkQXBwQ3NzKCk7XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJcbi8qIVxuICogTmF0aXZlU2NyaXB0LVZ1ZSB2Mi40LjBcbiAqIChVc2luZyBWdWUgdjIuNi4xMClcbiAqIChjKSAyMDE3LTIwMTkgcmlnb3I3ODlcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuZ2xvYmFsLnByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcyB8fCB7fVxuZ2xvYmFsLnByb2Nlc3MuZW52ID0gZ2xvYmFsLnByb2Nlc3MuZW52IHx8IHt9XG5cblxudmFyIGFwcGxpY2F0aW9uID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbicpO1xucmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZScpO1xuXG52YXIgYXJyYXlNYXAgPSBmdW5jdGlvbiAoeHMsIGYpIHtcbiAgICBpZiAoeHMubWFwKSB7IHJldHVybiB4cy5tYXAoZik7IH1cbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgeCA9IHhzW2ldO1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwoeHMsIGkpKSB7IHJlcy5wdXNoKGYoeCwgaSwgeHMpKTsgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxudmFyIGluZGV4b2YgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSB7IHJldHVybiBhcnIuaW5kZXhPZihvYmopOyB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSB7IHJldHVybiBpOyB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxudmFyIGlzYXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaGFzT3duJDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGZvcmVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoIChvYmosIGZuLCBjdHgpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChmbikgIT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBsID0gb2JqLmxlbmd0aDtcbiAgICBpZiAobCA9PT0gK2wpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093biQxLmNhbGwob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpba10sIGssIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgaGFzT3duJDIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXJyYXlSZWR1Y2UgPSBmdW5jdGlvbiAoeHMsIGYsIGFjYykge1xuICAgIHZhciBoYXNBY2MgPSBhcmd1bWVudHMubGVuZ3RoID49IDM7XG4gICAgaWYgKGhhc0FjYyAmJiB4cy5yZWR1Y2UpIHsgcmV0dXJuIHhzLnJlZHVjZShmLCBhY2MpOyB9XG4gICAgaWYgKHhzLnJlZHVjZSkgeyByZXR1cm4geHMucmVkdWNlKGYpOyB9XG4gICAgXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWhhc093biQyLmNhbGwoeHMsIGkpKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIGlmICghaGFzQWNjKSB7XG4gICAgICAgICAgICBhY2MgPSB4c1tpXTtcbiAgICAgICAgICAgIGhhc0FjYyA9IHRydWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBhY2MgPSBmKGFjYywgeHNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xufTtcblxudmFyIGhhc093biQzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0cmluZyQxID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHx8IHRvU3RyaW5nJDEuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgZm9yZWFjaCQxID0gZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG5cdGlmICghaXNGdW5jdGlvbihmbikpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0fVxuXHR2YXIgaSwgayxcblx0XHRpc1N0cmluZyA9IHR5cGVvZiBvYmogPT09ICdzdHJpbmcnLFxuXHRcdGwgPSBvYmoubGVuZ3RoLFxuXHRcdGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cdGlmIChsID09PSArbCkge1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdGlmIChjb250ZXh0ID09PSBudWxsKSB7XG5cdFx0XHRcdGZuKGlzU3RyaW5nID8gb2JqLmNoYXJBdChpKSA6IG9ialtpXSwgaSwgb2JqKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZuLmNhbGwoY29udGV4dCwgaXNTdHJpbmcgPyBvYmouY2hhckF0KGkpIDogb2JqW2ldLCBpLCBvYmopO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmb3IgKGsgaW4gb2JqKSB7XG5cdFx0XHRpZiAoaGFzT3duJDMuY2FsbChvYmosIGspKSB7XG5cdFx0XHRcdGlmIChjb250ZXh0ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0Zm4ob2JqW2tdLCBrLCBvYmopO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZuLmNhbGwoY29udGV4dCwgb2JqW2tdLCBrLCBvYmopO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgdG9TdHJpbmckMiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0FyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0cmluZyQyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmd1bWVudHMgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJndW1lbnRzKSB7XG5cdFx0aXNBcmd1bWVudHMgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XSdcblx0XHRcdCYmIHZhbHVlICE9PSBudWxsXG5cdFx0XHQmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG5cdFx0XHQmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJ1xuXHRcdFx0JiYgdmFsdWUubGVuZ3RoID49IDBcblx0XHRcdCYmIHRvU3RyaW5nJDIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3VtZW50cztcbn07XG5cbi8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcblx0dG9TdHJpbmckMyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG5cdGhhc0RvbnRFbnVtQnVnID0gISh7J3RvU3RyaW5nJzogbnVsbH0pLnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLFxuXHRoYXNQcm90b0VudW1CdWcgPSAoZnVuY3Rpb24gKCkge30pLnByb3BlcnR5SXNFbnVtZXJhYmxlKCdwcm90b3R5cGUnKSxcblx0ZG9udEVudW1zID0gW1xuXHRcdFwidG9TdHJpbmdcIixcblx0XHRcInRvTG9jYWxlU3RyaW5nXCIsXG5cdFx0XCJ2YWx1ZU9mXCIsXG5cdFx0XCJoYXNPd25Qcm9wZXJ0eVwiLFxuXHRcdFwiaXNQcm90b3R5cGVPZlwiLFxuXHRcdFwicHJvcGVydHlJc0VudW1lcmFibGVcIixcblx0XHRcImNvbnN0cnVjdG9yXCJcblx0XTtcblxudmFyIGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnLFxuXHRcdGlzRnVuY3Rpb24gPSB0b1N0cmluZyQzLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcblx0XHRpc0FyZ3VtZW50cyQxID0gaXNBcmd1bWVudHMob2JqZWN0KSxcblx0XHR0aGVLZXlzID0gW107XG5cblx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMkMSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0XCIpO1xuXHR9XG5cblx0aWYgKGlzQXJndW1lbnRzJDEpIHtcblx0XHRmb3JlYWNoJDEob2JqZWN0LCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG5cdFx0XHR0aGVLZXlzLnB1c2goaW5kZXgpO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0c2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cblx0XHRmb3IgKG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKG5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdHZhciBjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuXHRcdFx0c2tpcENvbnN0cnVjdG9yID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gb2JqZWN0O1xuXG5cdFx0Zm9yZWFjaCQxKGRvbnRFbnVtcywgZnVuY3Rpb24gKGRvbnRFbnVtKSB7XG5cdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW0gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW0pKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHRoZUtleXM7XG59O1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmICghT2JqZWN0LmtleXMpIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbnZhciBvYmplY3RLZXlzID0ga2V5c1NoaW07XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIGpzb24zID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuKGZ1bmN0aW9uIChyb290KSB7XG4gIC8vIERldGVjdCB0aGUgYGRlZmluZWAgZnVuY3Rpb24gZXhwb3NlZCBieSBhc3luY2hyb25vdXMgbW9kdWxlIGxvYWRlcnMuIFRoZVxuICAvLyBzdHJpY3QgYGRlZmluZWAgY2hlY2sgaXMgbmVjZXNzYXJ5IGZvciBjb21wYXRpYmlsaXR5IHdpdGggYHIuanNgLlxuICB2YXIgaXNMb2FkZXIgPSB0eXBlb2YgdW5kZWZpbmVkID09PSBcImZ1bmN0aW9uXCIgJiYgdW5kZWZpbmVkLmFtZDtcblxuICAvLyBVc2UgdGhlIGBnbG9iYWxgIG9iamVjdCBleHBvc2VkIGJ5IE5vZGUgKGluY2x1ZGluZyBCcm93c2VyaWZ5IHZpYVxuICAvLyBgaW5zZXJ0LW1vZHVsZS1nbG9iYWxzYCksIE5hcndoYWwsIGFuZCBSaW5nbyBhcyB0aGUgZGVmYXVsdCBjb250ZXh0LlxuICAvLyBSaGlubyBleHBvcnRzIGEgYGdsb2JhbGAgZnVuY3Rpb24gaW5zdGVhZC5cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgY29tbW9uanNHbG9iYWwgPT0gXCJvYmplY3RcIiAmJiBjb21tb25qc0dsb2JhbDtcbiAgaWYgKGZyZWVHbG9iYWwgJiYgKGZyZWVHbG9iYWxbXCJnbG9iYWxcIl0gPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbFtcIndpbmRvd1wiXSA9PT0gZnJlZUdsb2JhbCkpIHtcbiAgICByb290ID0gZnJlZUdsb2JhbDtcbiAgfVxuXG4gIC8vIFB1YmxpYzogSW5pdGlhbGl6ZXMgSlNPTiAzIHVzaW5nIHRoZSBnaXZlbiBgY29udGV4dGAgb2JqZWN0LCBhdHRhY2hpbmcgdGhlXG4gIC8vIGBzdHJpbmdpZnlgIGFuZCBgcGFyc2VgIGZ1bmN0aW9ucyB0byB0aGUgc3BlY2lmaWVkIGBleHBvcnRzYCBvYmplY3QuXG4gIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0LCBleHBvcnRzKSB7XG4gICAgY29udGV4dCB8fCAoY29udGV4dCA9IHJvb3RbXCJPYmplY3RcIl0oKSk7XG4gICAgZXhwb3J0cyB8fCAoZXhwb3J0cyA9IHJvb3RbXCJPYmplY3RcIl0oKSk7XG5cbiAgICAvLyBOYXRpdmUgY29uc3RydWN0b3IgYWxpYXNlcy5cbiAgICB2YXIgTnVtYmVyID0gY29udGV4dFtcIk51bWJlclwiXSB8fCByb290W1wiTnVtYmVyXCJdLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0W1wiU3RyaW5nXCJdIHx8IHJvb3RbXCJTdHJpbmdcIl0sXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHRbXCJPYmplY3RcIl0gfHwgcm9vdFtcIk9iamVjdFwiXSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHRbXCJEYXRlXCJdIHx8IHJvb3RbXCJEYXRlXCJdLFxuICAgICAgICBTeW50YXhFcnJvciA9IGNvbnRleHRbXCJTeW50YXhFcnJvclwiXSB8fCByb290W1wiU3ludGF4RXJyb3JcIl0sXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHRbXCJUeXBlRXJyb3JcIl0gfHwgcm9vdFtcIlR5cGVFcnJvclwiXSxcbiAgICAgICAgTWF0aCA9IGNvbnRleHRbXCJNYXRoXCJdIHx8IHJvb3RbXCJNYXRoXCJdLFxuICAgICAgICBuYXRpdmVKU09OID0gY29udGV4dFtcIkpTT05cIl0gfHwgcm9vdFtcIkpTT05cIl07XG5cbiAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgbmF0aXZlIGBzdHJpbmdpZnlgIGFuZCBgcGFyc2VgIGltcGxlbWVudGF0aW9ucy5cbiAgICBpZiAodHlwZW9mIG5hdGl2ZUpTT04gPT0gXCJvYmplY3RcIiAmJiBuYXRpdmVKU09OKSB7XG4gICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IG5hdGl2ZUpTT04uc3RyaW5naWZ5O1xuICAgICAgZXhwb3J0cy5wYXJzZSA9IG5hdGl2ZUpTT04ucGFyc2U7XG4gICAgfVxuXG4gICAgLy8gQ29udmVuaWVuY2UgYWxpYXNlcy5cbiAgICB2YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBnZXRDbGFzcyA9IG9iamVjdFByb3RvLnRvU3RyaW5nLFxuICAgICAgICBpc1Byb3BlcnR5LCBmb3JFYWNoLCB1bmRlZjtcblxuICAgIC8vIFRlc3QgdGhlIGBEYXRlI2dldFVUQypgIG1ldGhvZHMuIEJhc2VkIG9uIHdvcmsgYnkgQFlhZmZsZS5cbiAgICB2YXIgaXNFeHRlbmRlZCA9IG5ldyBEYXRlKC0zNTA5ODI3MzM0NTczMjkyKTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlIGBnZXRVVENGdWxsWWVhcmAsIGBNb250aGAsIGFuZCBgRGF0ZWAgbWV0aG9kcyByZXR1cm4gbm9uc2Vuc2ljYWxcbiAgICAgIC8vIHJlc3VsdHMgZm9yIGNlcnRhaW4gZGF0ZXMgaW4gT3BlcmEgPj0gMTAuNTMuXG4gICAgICBpc0V4dGVuZGVkID0gaXNFeHRlbmRlZC5nZXRVVENGdWxsWWVhcigpID09IC0xMDkyNTIgJiYgaXNFeHRlbmRlZC5nZXRVVENNb250aCgpID09PSAwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDRGF0ZSgpID09PSAxICYmXG4gICAgICAgIC8vIFNhZmFyaSA8IDIuMC4yIHN0b3JlcyB0aGUgaW50ZXJuYWwgbWlsbGlzZWNvbmQgdGltZSB2YWx1ZSBjb3JyZWN0bHksXG4gICAgICAgIC8vIGJ1dCBjbGlwcyB0aGUgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBkYXRlIG1ldGhvZHMgdG8gdGhlIHJhbmdlIG9mXG4gICAgICAgIC8vIHNpZ25lZCAzMi1iaXQgaW50ZWdlcnMgKFstMiAqKiAzMSwgMiAqKiAzMSAtIDFdKS5cbiAgICAgICAgaXNFeHRlbmRlZC5nZXRVVENIb3VycygpID09IDEwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTWludXRlcygpID09IDM3ICYmIGlzRXh0ZW5kZWQuZ2V0VVRDU2Vjb25kcygpID09IDYgJiYgaXNFeHRlbmRlZC5nZXRVVENNaWxsaXNlY29uZHMoKSA9PSA3MDg7XG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuXG4gICAgLy8gSW50ZXJuYWw6IERldGVybWluZXMgd2hldGhlciB0aGUgbmF0aXZlIGBKU09OLnN0cmluZ2lmeWAgYW5kIGBwYXJzZWBcbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgYXJlIHNwZWMtY29tcGxpYW50LiBCYXNlZCBvbiB3b3JrIGJ5IEtlbiBTbnlkZXIuXG4gICAgZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICAgIGlmIChoYXNbbmFtZV0gIT09IHVuZGVmKSB7XG4gICAgICAgIC8vIFJldHVybiBjYWNoZWQgZmVhdHVyZSB0ZXN0IHJlc3VsdC5cbiAgICAgICAgcmV0dXJuIGhhc1tuYW1lXTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1N1cHBvcnRlZDtcbiAgICAgIGlmIChuYW1lID09IFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpIHtcbiAgICAgICAgLy8gSUUgPD0gNyBkb2Vzbid0IHN1cHBvcnQgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIHVzaW5nIHNxdWFyZVxuICAgICAgICAvLyBicmFja2V0IG5vdGF0aW9uLiBJRSA4IG9ubHkgc3VwcG9ydHMgdGhpcyBmb3IgcHJpbWl0aXZlcy5cbiAgICAgICAgaXNTdXBwb3J0ZWQgPSBcImFcIlswXSAhPSBcImFcIjtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSBcImpzb25cIikge1xuICAgICAgICAvLyBJbmRpY2F0ZXMgd2hldGhlciBib3RoIGBKU09OLnN0cmluZ2lmeWAgYW5kIGBKU09OLnBhcnNlYCBhcmVcbiAgICAgICAgLy8gc3VwcG9ydGVkLlxuICAgICAgICBpc1N1cHBvcnRlZCA9IGhhcyhcImpzb24tc3RyaW5naWZ5XCIpICYmIGhhcyhcImpzb24tcGFyc2VcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUsIHNlcmlhbGl6ZWQgPSAne1wiYVwiOlsxLHRydWUsZmFsc2UsbnVsbCxcIlxcXFx1MDAwMFxcXFxiXFxcXG5cXFxcZlxcXFxyXFxcXHRcIl19JztcbiAgICAgICAgLy8gVGVzdCBgSlNPTi5zdHJpbmdpZnlgLlxuICAgICAgICBpZiAobmFtZSA9PSBcImpzb24tc3RyaW5naWZ5XCIpIHtcbiAgICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJpbmdpZnksIHN0cmluZ2lmeVN1cHBvcnRlZCA9IHR5cGVvZiBzdHJpbmdpZnkgPT0gXCJmdW5jdGlvblwiICYmIGlzRXh0ZW5kZWQ7XG4gICAgICAgICAgaWYgKHN0cmluZ2lmeVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgLy8gQSB0ZXN0IGZ1bmN0aW9uIG9iamVjdCB3aXRoIGEgY3VzdG9tIGB0b0pTT05gIG1ldGhvZC5cbiAgICAgICAgICAgICh2YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9KS50b0pTT04gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCAzLjFiMSBhbmQgYjIgc2VyaWFsaXplIHN0cmluZywgbnVtYmVyLCBhbmQgYm9vbGVhblxuICAgICAgICAgICAgICAgIC8vIHByaW1pdGl2ZXMgYXMgb2JqZWN0IGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgwKSA9PT0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIsIGFuZCBKU09OIDIgc2VyaWFsaXplIHdyYXBwZWQgcHJpbWl0aXZlcyBhcyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IE51bWJlcigpKSA9PT0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IFN0cmluZygpKSA9PSAnXCJcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiB0aHJvdyBhbiBlcnJvciBpZiB0aGUgdmFsdWUgaXMgYG51bGxgLCBgdW5kZWZpbmVkYCwgb3JcbiAgICAgICAgICAgICAgICAvLyBkb2VzIG5vdCBkZWZpbmUgYSBjYW5vbmljYWwgSlNPTiByZXByZXNlbnRhdGlvbiAodGhpcyBhcHBsaWVzIHRvXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGB0b0pTT05gIHByb3BlcnRpZXMgYXMgd2VsbCwgKnVubGVzcyogdGhleSBhcmUgbmVzdGVkXG4gICAgICAgICAgICAgICAgLy8gd2l0aGluIGFuIG9iamVjdCBvciBhcnJheSkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KGdldENsYXNzKSA9PT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAvLyBJRSA4IHNlcmlhbGl6ZXMgYHVuZGVmaW5lZGAgYXMgYFwidW5kZWZpbmVkXCJgLiBTYWZhcmkgPD0gNS4xLjcgYW5kXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjMgcGFzcyB0aGlzIHRlc3QuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KHVuZGVmKSA9PT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjcgYW5kIEZGIDMuMWIzIHRocm93IGBFcnJvcmBzIGFuZCBgVHlwZUVycm9yYHMsXG4gICAgICAgICAgICAgICAgLy8gcmVzcGVjdGl2ZWx5LCBpZiB0aGUgdmFsdWUgaXMgb21pdHRlZCBlbnRpcmVseS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoKSA9PT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiB0aHJvdyBhbiBlcnJvciBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbm90IGEgbnVtYmVyLFxuICAgICAgICAgICAgICAgIC8vIHN0cmluZywgYXJyYXksIG9iamVjdCwgQm9vbGVhbiwgb3IgYG51bGxgIGxpdGVyYWwuIFRoaXMgYXBwbGllcyB0b1xuICAgICAgICAgICAgICAgIC8vIG9iamVjdHMgd2l0aCBjdXN0b20gYHRvSlNPTmAgbWV0aG9kcyBhcyB3ZWxsLCB1bmxlc3MgdGhleSBhcmUgbmVzdGVkXG4gICAgICAgICAgICAgICAgLy8gaW5zaWRlIG9iamVjdCBvciBhcnJheSBsaXRlcmFscy4gWVVJIDMuMC4wYjEgaWdub3JlcyBjdXN0b20gYHRvSlNPTmBcbiAgICAgICAgICAgICAgICAvLyBtZXRob2RzIGVudGlyZWx5LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh2YWx1ZSkgPT09IFwiMVwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt2YWx1ZV0pID09IFwiWzFdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBQcm90b3R5cGUgPD0gMS42LjEgc2VyaWFsaXplcyBgW3VuZGVmaW5lZF1gIGFzIGBcIltdXCJgIGluc3RlYWQgb2ZcbiAgICAgICAgICAgICAgICAvLyBgXCJbbnVsbF1cImAuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt1bmRlZl0pID09IFwiW251bGxdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBZVUkgMy4wLjBiMSBmYWlscyB0byBzZXJpYWxpemUgYG51bGxgIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShudWxsKSA9PSBcIm51bGxcIiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIGhhbHRzIHNlcmlhbGl6YXRpb24gaWYgYW4gYXJyYXkgY29udGFpbnMgYSBmdW5jdGlvbjpcbiAgICAgICAgICAgICAgICAvLyBgWzEsIHRydWUsIGdldENsYXNzLCAxXWAgc2VyaWFsaXplcyBhcyBcIlsxLHRydWUsXSxcIi4gRkYgMy4xYjNcbiAgICAgICAgICAgICAgICAvLyBlbGlkZXMgbm9uLUpTT04gdmFsdWVzIGZyb20gb2JqZWN0cyBhbmQgYXJyYXlzLCB1bmxlc3MgdGhleVxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBjdXN0b20gYHRvSlNPTmAgbWV0aG9kcy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3VuZGVmLCBnZXRDbGFzcywgbnVsbF0pID09IFwiW251bGwsbnVsbCxudWxsXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gU2ltcGxlIHNlcmlhbGl6YXRpb24gdGVzdC4gRkYgMy4xYjEgdXNlcyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZXNcbiAgICAgICAgICAgICAgICAvLyB3aGVyZSBjaGFyYWN0ZXIgZXNjYXBlIGNvZGVzIGFyZSBleHBlY3RlZCAoZS5nLiwgYFxcYmAgPT4gYFxcdTAwMDhgKS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoeyBcImFcIjogW3ZhbHVlLCB0cnVlLCBmYWxzZSwgbnVsbCwgXCJcXHgwMFxcYlxcblxcZlxcclxcdFwiXSB9KSA9PSBzZXJpYWxpemVkICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEgYW5kIGIyIGlnbm9yZSB0aGUgYGZpbHRlcmAgYW5kIGB3aWR0aGAgYXJndW1lbnRzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShudWxsLCB2YWx1ZSkgPT09IFwiMVwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFsxLCAyXSwgbnVsbCwgMSkgPT0gXCJbXFxuIDEsXFxuIDJcXG5dXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBKU09OIDIsIFByb3RvdHlwZSA8PSAxLjcsIGFuZCBvbGRlciBXZWJLaXQgYnVpbGRzIGluY29ycmVjdGx5XG4gICAgICAgICAgICAgICAgLy8gc2VyaWFsaXplIGV4dGVuZGVkIHllYXJzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtOC42NGUxNSkpID09ICdcIi0yNzE4MjEtMDQtMjBUMDA6MDA6MDAuMDAwWlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIFRoZSBtaWxsaXNlY29uZHMgYXJlIG9wdGlvbmFsIGluIEVTIDUsIGJ1dCByZXF1aXJlZCBpbiA1LjEuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKDguNjRlMTUpKSA9PSAnXCIrMjc1NzYwLTA5LTEzVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDw9IDExLjAgaW5jb3JyZWN0bHkgc2VyaWFsaXplcyB5ZWFycyBwcmlvciB0byAwIGFzIG5lZ2F0aXZlXG4gICAgICAgICAgICAgICAgLy8gZm91ci1kaWdpdCB5ZWFycyBpbnN0ZWFkIG9mIHNpeC1kaWdpdCB5ZWFycy4gQ3JlZGl0czogQFlhZmZsZS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTYyMTk4NzU1MmU1KSkgPT0gJ1wiLTAwMDAwMS0wMS0wMVQwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDUuMS41IGFuZCBPcGVyYSA+PSAxMC41MyBpbmNvcnJlY3RseSBzZXJpYWxpemUgbWlsbGlzZWNvbmRcbiAgICAgICAgICAgICAgICAvLyB2YWx1ZXMgbGVzcyB0aGFuIDEwMDAuIENyZWRpdHM6IEBZYWZmbGUuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC0xKSkgPT0gJ1wiMTk2OS0xMi0zMVQyMzo1OTo1OS45OTlaXCInO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpc1N1cHBvcnRlZCA9IHN0cmluZ2lmeVN1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUZXN0IGBKU09OLnBhcnNlYC5cbiAgICAgICAgaWYgKG5hbWUgPT0gXCJqc29uLXBhcnNlXCIpIHtcbiAgICAgICAgICB2YXIgcGFyc2UgPSBleHBvcnRzLnBhcnNlO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYSBiYXJlIGxpdGVyYWwgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICAgIC8vIENvbmZvcm1pbmcgaW1wbGVtZW50YXRpb25zIHNob3VsZCBhbHNvIGNvZXJjZSB0aGUgaW5pdGlhbCBhcmd1bWVudCB0b1xuICAgICAgICAgICAgICAvLyBhIHN0cmluZyBwcmlvciB0byBwYXJzaW5nLlxuICAgICAgICAgICAgICBpZiAocGFyc2UoXCIwXCIpID09PSAwICYmICFwYXJzZShmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgcGFyc2luZyB0ZXN0LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2Uoc2VyaWFsaXplZCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlU3VwcG9ydGVkID0gdmFsdWVbXCJhXCJdLmxlbmd0aCA9PSA1ICYmIHZhbHVlW1wiYVwiXVswXSA9PT0gMTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuMiBhbmQgRkYgMy4xYjEgYWxsb3cgdW5lc2NhcGVkIHRhYnMgaW4gc3RyaW5ncy5cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSAhcGFyc2UoJ1wiXFx0XCInKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEZGIDQuMCBhbmQgNC4wLjEgYWxsb3cgbGVhZGluZyBgK2Agc2lnbnMgYW5kIGxlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAvLyBkZWNpbWFsIHBvaW50cy4gRkYgNC4wLCA0LjAuMSwgYW5kIElFIDktMTAgYWxzbyBhbGxvd1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNlcnRhaW4gb2N0YWwgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZShcIjAxXCIpICE9PSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBGRiA0LjAsIDQuMC4xLCBhbmQgUmhpbm8gMS43UjMtUjQgYWxsb3cgdHJhaWxpbmcgZGVjaW1hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHBvaW50cy4gVGhlc2UgZW52aXJvbm1lbnRzLCBhbG9uZyB3aXRoIEZGIDMuMWIxIGFuZCAyLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsc28gYWxsb3cgdHJhaWxpbmcgY29tbWFzIGluIEpTT04gb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gcGFyc2UoXCIxLlwiKSAhPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzU3VwcG9ydGVkID0gcGFyc2VTdXBwb3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNbbmFtZV0gPSAhIWlzU3VwcG9ydGVkO1xuICAgIH1cblxuICAgIGlmICghaGFzKFwianNvblwiKSkge1xuICAgICAgLy8gQ29tbW9uIGBbW0NsYXNzXV1gIG5hbWUgYWxpYXNlcy5cbiAgICAgIHZhciBmdW5jdGlvbkNsYXNzID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiLFxuICAgICAgICAgIGRhdGVDbGFzcyA9IFwiW29iamVjdCBEYXRlXVwiLFxuICAgICAgICAgIG51bWJlckNsYXNzID0gXCJbb2JqZWN0IE51bWJlcl1cIixcbiAgICAgICAgICBzdHJpbmdDbGFzcyA9IFwiW29iamVjdCBTdHJpbmddXCIsXG4gICAgICAgICAgYXJyYXlDbGFzcyA9IFwiW29iamVjdCBBcnJheV1cIixcbiAgICAgICAgICBib29sZWFuQ2xhc3MgPSBcIltvYmplY3QgQm9vbGVhbl1cIjtcblxuICAgICAgLy8gRGV0ZWN0IGluY29tcGxldGUgc3VwcG9ydCBmb3IgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIGJ5IGluZGV4LlxuICAgICAgdmFyIGNoYXJJbmRleEJ1Z2d5ID0gaGFzKFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpO1xuXG4gICAgICAvLyBEZWZpbmUgYWRkaXRpb25hbCB1dGlsaXR5IG1ldGhvZHMgaWYgdGhlIGBEYXRlYCBtZXRob2RzIGFyZSBidWdneS5cbiAgICAgIGlmICghaXNFeHRlbmRlZCkge1xuICAgICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgICAgICAvLyBBIG1hcHBpbmcgYmV0d2VlbiB0aGUgbW9udGhzIG9mIHRoZSB5ZWFyIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgYmV0d2VlblxuICAgICAgICAvLyBKYW51YXJ5IDFzdCBhbmQgdGhlIGZpcnN0IG9mIHRoZSByZXNwZWN0aXZlIG1vbnRoLlxuICAgICAgICB2YXIgTW9udGhzID0gWzAsIDMxLCA1OSwgOTAsIDEyMCwgMTUxLCAxODEsIDIxMiwgMjQzLCAyNzMsIDMwNCwgMzM0XTtcbiAgICAgICAgLy8gSW50ZXJuYWw6IENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBkYXlzIGJldHdlZW4gdGhlIFVuaXggZXBvY2ggYW5kIHRoZVxuICAgICAgICAvLyBmaXJzdCBkYXkgb2YgdGhlIGdpdmVuIG1vbnRoLlxuICAgICAgICB2YXIgZ2V0RGF5ID0gZnVuY3Rpb24gKHllYXIsIG1vbnRoKSB7XG4gICAgICAgICAgcmV0dXJuIE1vbnRoc1ttb250aF0gKyAzNjUgKiAoeWVhciAtIDE5NzApICsgZmxvb3IoKHllYXIgLSAxOTY5ICsgKG1vbnRoID0gKyhtb250aCA+IDEpKSkgLyA0KSAtIGZsb29yKCh5ZWFyIC0gMTkwMSArIG1vbnRoKSAvIDEwMCkgKyBmbG9vcigoeWVhciAtIDE2MDEgKyBtb250aCkgLyA0MDApO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBJbnRlcm5hbDogRGV0ZXJtaW5lcyBpZiBhIHByb3BlcnR5IGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIHRoZSBnaXZlblxuICAgICAgLy8gb2JqZWN0LiBEZWxlZ2F0ZXMgdG8gdGhlIG5hdGl2ZSBgT2JqZWN0I2hhc093blByb3BlcnR5YCBtZXRob2QuXG4gICAgICBpZiAoIShpc1Byb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHkpKSB7XG4gICAgICAgIGlzUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICB2YXIgbWVtYmVycyA9IHt9LCBjb25zdHJ1Y3RvcjtcbiAgICAgICAgICBpZiAoKG1lbWJlcnMuX19wcm90b19fID0gbnVsbCwgbWVtYmVycy5fX3Byb3RvX18gPSB7XG4gICAgICAgICAgICAvLyBUaGUgKnByb3RvKiBwcm9wZXJ0eSBjYW5ub3QgYmUgc2V0IG11bHRpcGxlIHRpbWVzIGluIHJlY2VudFxuICAgICAgICAgICAgLy8gdmVyc2lvbnMgb2YgRmlyZWZveCBhbmQgU2VhTW9ua2V5LlxuICAgICAgICAgICAgXCJ0b1N0cmluZ1wiOiAxXG4gICAgICAgICAgfSwgbWVtYmVycykudG9TdHJpbmcgIT0gZ2V0Q2xhc3MpIHtcbiAgICAgICAgICAgIC8vIFNhZmFyaSA8PSAyLjAuMyBkb2Vzbid0IGltcGxlbWVudCBgT2JqZWN0I2hhc093blByb3BlcnR5YCwgYnV0XG4gICAgICAgICAgICAvLyBzdXBwb3J0cyB0aGUgbXV0YWJsZSAqcHJvdG8qIHByb3BlcnR5LlxuICAgICAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAvLyBDYXB0dXJlIGFuZCBicmVhayB0aGUgb2JqZWN0Z3MgcHJvdG90eXBlIGNoYWluIChzZWUgc2VjdGlvbiA4LjYuMlxuICAgICAgICAgICAgICAvLyBvZiB0aGUgRVMgNS4xIHNwZWMpLiBUaGUgcGFyZW50aGVzaXplZCBleHByZXNzaW9uIHByZXZlbnRzIGFuXG4gICAgICAgICAgICAgIC8vIHVuc2FmZSB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgQ2xvc3VyZSBDb21waWxlci5cbiAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsID0gdGhpcy5fX3Byb3RvX18sIHJlc3VsdCA9IHByb3BlcnR5IGluICh0aGlzLl9fcHJvdG9fXyA9IG51bGwsIHRoaXMpO1xuICAgICAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAgICAgIHRoaXMuX19wcm90b19fID0gb3JpZ2luYWw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDYXB0dXJlIGEgcmVmZXJlbmNlIHRvIHRoZSB0b3AtbGV2ZWwgYE9iamVjdGAgY29uc3RydWN0b3IuXG4gICAgICAgICAgICBjb25zdHJ1Y3RvciA9IG1lbWJlcnMuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgdG8gc2ltdWxhdGUgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAgaW5cbiAgICAgICAgICAgIC8vIG90aGVyIGVudmlyb25tZW50cy5cbiAgICAgICAgICAgIGlzUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9ICh0aGlzLmNvbnN0cnVjdG9yIHx8IGNvbnN0cnVjdG9yKS5wcm90b3R5cGU7XG4gICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmICEocHJvcGVydHkgaW4gcGFyZW50ICYmIHRoaXNbcHJvcGVydHldID09PSBwYXJlbnRbcHJvcGVydHldKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIG1lbWJlcnMgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBpc1Byb3BlcnR5LmNhbGwodGhpcywgcHJvcGVydHkpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBJbnRlcm5hbDogQSBzZXQgb2YgcHJpbWl0aXZlIHR5cGVzIHVzZWQgYnkgYGlzSG9zdFR5cGVgLlxuICAgICAgdmFyIFByaW1pdGl2ZVR5cGVzID0ge1xuICAgICAgICBcImJvb2xlYW5cIjogMSxcbiAgICAgICAgXCJudW1iZXJcIjogMSxcbiAgICAgICAgXCJzdHJpbmdcIjogMSxcbiAgICAgICAgXCJ1bmRlZmluZWRcIjogMVxuICAgICAgfTtcblxuICAgICAgLy8gSW50ZXJuYWw6IERldGVybWluZXMgaWYgdGhlIGdpdmVuIG9iamVjdCBgcHJvcGVydHlgIHZhbHVlIGlzIGFcbiAgICAgIC8vIG5vbi1wcmltaXRpdmUuXG4gICAgICB2YXIgaXNIb3N0VHlwZSA9IGZ1bmN0aW9uIChvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgIHJldHVybiB0eXBlID09IFwib2JqZWN0XCIgPyAhIW9iamVjdFtwcm9wZXJ0eV0gOiAhUHJpbWl0aXZlVHlwZXNbdHlwZV07XG4gICAgICB9O1xuXG4gICAgICAvLyBJbnRlcm5hbDogTm9ybWFsaXplcyB0aGUgYGZvci4uLmluYCBpdGVyYXRpb24gYWxnb3JpdGhtIGFjcm9zc1xuICAgICAgLy8gZW52aXJvbm1lbnRzLiBFYWNoIGVudW1lcmF0ZWQga2V5IGlzIHlpZWxkZWQgdG8gYSBgY2FsbGJhY2tgIGZ1bmN0aW9uLlxuICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzaXplID0gMCwgUHJvcGVydGllcywgbWVtYmVycywgcHJvcGVydHk7XG5cbiAgICAgICAgLy8gVGVzdHMgZm9yIGJ1Z3MgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQncyBgZm9yLi4uaW5gIGFsZ29yaXRobS4gVGhlXG4gICAgICAgIC8vIGB2YWx1ZU9mYCBwcm9wZXJ0eSBpbmhlcml0cyB0aGUgbm9uLWVudW1lcmFibGUgZmxhZyBmcm9tXG4gICAgICAgIC8vIGBPYmplY3QucHJvdG90eXBlYCBpbiBvbGRlciB2ZXJzaW9ucyBvZiBJRSwgTmV0c2NhcGUsIGFuZCBNb3ppbGxhLlxuICAgICAgICAoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlT2YgPSAwO1xuICAgICAgICB9KS5wcm90b3R5cGUudmFsdWVPZiA9IDA7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBgUHJvcGVydGllc2AgY2xhc3MuXG4gICAgICAgIG1lbWJlcnMgPSBuZXcgUHJvcGVydGllcygpO1xuICAgICAgICBmb3IgKHByb3BlcnR5IGluIG1lbWJlcnMpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgYWxsIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gYE9iamVjdC5wcm90b3R5cGVgLlxuICAgICAgICAgIGlmIChpc1Byb3BlcnR5LmNhbGwobWVtYmVycywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFByb3BlcnRpZXMgPSBtZW1iZXJzID0gbnVsbDtcblxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIGl0ZXJhdGlvbiBhbGdvcml0aG0uXG4gICAgICAgIGlmICghc2l6ZSkge1xuICAgICAgICAgIC8vIEEgbGlzdCBvZiBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC5cbiAgICAgICAgICBtZW1iZXJzID0gW1widmFsdWVPZlwiLCBcInRvU3RyaW5nXCIsIFwidG9Mb2NhbGVTdHJpbmdcIiwgXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLCBcImlzUHJvdG90eXBlT2ZcIiwgXCJoYXNPd25Qcm9wZXJ0eVwiLCBcImNvbnN0cnVjdG9yXCJdO1xuICAgICAgICAgIC8vIElFIDw9IDgsIE1vemlsbGEgMS4wLCBhbmQgTmV0c2NhcGUgNi4yIGlnbm9yZSBzaGFkb3dlZCBub24tZW51bWVyYWJsZVxuICAgICAgICAgIC8vIHByb3BlcnRpZXMuXG4gICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eSwgbGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGhhc1Byb3BlcnR5ID0gIWlzRnVuY3Rpb24gJiYgdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciAhPSBcImZ1bmN0aW9uXCIgJiYgaXNIb3N0VHlwZShvYmplY3QsIFwiaGFzT3duUHJvcGVydHlcIikgPyBvYmplY3QuaGFzT3duUHJvcGVydHkgOiBpc1Byb3BlcnR5O1xuICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gR2Vja28gPD0gMS4wIGVudW1lcmF0ZXMgdGhlIGBwcm90b3R5cGVgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyB1bmRlclxuICAgICAgICAgICAgICAvLyBjZXJ0YWluIGNvbmRpdGlvbnM7IElFIGRvZXMgbm90LlxuICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09IFwicHJvdG90eXBlXCIpICYmIGhhc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IGludm9rZSB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggbm9uLWVudW1lcmFibGUgcHJvcGVydHkuXG4gICAgICAgICAgICBmb3IgKGxlbmd0aCA9IG1lbWJlcnMubGVuZ3RoOyBwcm9wZXJ0eSA9IG1lbWJlcnNbLS1sZW5ndGhdOyBoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpICYmIGNhbGxiYWNrKHByb3BlcnR5KSl7IH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNpemUgPT0gMikge1xuICAgICAgICAgIC8vIFNhZmFyaSA8PSAyLjAuNCBlbnVtZXJhdGVzIHNoYWRvd2VkIHByb3BlcnRpZXMgdHdpY2UuXG4gICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBzZXQgb2YgaXRlcmF0ZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgIHZhciBtZW1iZXJzID0ge30sIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHk7XG4gICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAvLyBTdG9yZSBlYWNoIHByb3BlcnR5IG5hbWUgdG8gcHJldmVudCBkb3VibGUgZW51bWVyYXRpb24uIFRoZVxuICAgICAgICAgICAgICAvLyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgaXMgbm90IGVudW1lcmF0ZWQgZHVlIHRvIGNyb3NzLVxuICAgICAgICAgICAgICAvLyBlbnZpcm9ubWVudCBpbmNvbnNpc3RlbmNpZXMuXG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgIWlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkgJiYgKG1lbWJlcnNbcHJvcGVydHldID0gMSkgJiYgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBObyBidWdzIGRldGVjdGVkOyB1c2UgdGhlIHN0YW5kYXJkIGBmb3IuLi5pbmAgYWxnb3JpdGhtLlxuICAgICAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHksIGlzQ29uc3RydWN0b3I7XG4gICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09IFwicHJvdG90eXBlXCIpICYmIGlzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSAmJiAhKGlzQ29uc3RydWN0b3IgPSBwcm9wZXJ0eSA9PT0gXCJjb25zdHJ1Y3RvclwiKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFudWFsbHkgaW52b2tlIHRoZSBjYWxsYmFjayBmb3IgdGhlIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgZHVlIHRvXG4gICAgICAgICAgICAvLyBjcm9zcy1lbnZpcm9ubWVudCBpbmNvbnNpc3RlbmNpZXMuXG4gICAgICAgICAgICBpZiAoaXNDb25zdHJ1Y3RvciB8fCBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCAocHJvcGVydHkgPSBcImNvbnN0cnVjdG9yXCIpKSkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9yRWFjaChvYmplY3QsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFB1YmxpYzogU2VyaWFsaXplcyBhIEphdmFTY3JpcHQgYHZhbHVlYCBhcyBhIEpTT04gc3RyaW5nLiBUaGUgb3B0aW9uYWxcbiAgICAgIC8vIGBmaWx0ZXJgIGFyZ3VtZW50IG1heSBzcGVjaWZ5IGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgYWx0ZXJzIGhvdyBvYmplY3QgYW5kXG4gICAgICAvLyBhcnJheSBtZW1iZXJzIGFyZSBzZXJpYWxpemVkLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIGFuZCBudW1iZXJzIHRoYXRcbiAgICAgIC8vIGluZGljYXRlcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBzZXJpYWxpemVkLiBUaGUgb3B0aW9uYWwgYHdpZHRoYFxuICAgICAgLy8gYXJndW1lbnQgbWF5IGJlIGVpdGhlciBhIHN0cmluZyBvciBudW1iZXIgdGhhdCBzcGVjaWZpZXMgdGhlIGluZGVudGF0aW9uXG4gICAgICAvLyBsZXZlbCBvZiB0aGUgb3V0cHV0LlxuICAgICAgaWYgKCFoYXMoXCJqc29uLXN0cmluZ2lmeVwiKSkge1xuICAgICAgICAvLyBJbnRlcm5hbDogQSBtYXAgb2YgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB0aGVpciBlc2NhcGVkIGVxdWl2YWxlbnRzLlxuICAgICAgICB2YXIgRXNjYXBlcyA9IHtcbiAgICAgICAgICA5MjogXCJcXFxcXFxcXFwiLFxuICAgICAgICAgIDM0OiAnXFxcXFwiJyxcbiAgICAgICAgICA4OiBcIlxcXFxiXCIsXG4gICAgICAgICAgMTI6IFwiXFxcXGZcIixcbiAgICAgICAgICAxMDogXCJcXFxcblwiLFxuICAgICAgICAgIDEzOiBcIlxcXFxyXCIsXG4gICAgICAgICAgOTogXCJcXFxcdFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IENvbnZlcnRzIGB2YWx1ZWAgaW50byBhIHplcm8tcGFkZGVkIHN0cmluZyBzdWNoIHRoYXQgaXRzXG4gICAgICAgIC8vIGxlbmd0aCBpcyBhdCBsZWFzdCBlcXVhbCB0byBgd2lkdGhgLiBUaGUgYHdpZHRoYCBtdXN0IGJlIDw9IDYuXG4gICAgICAgIHZhciBsZWFkaW5nWmVyb2VzID0gXCIwMDAwMDBcIjtcbiAgICAgICAgdmFyIHRvUGFkZGVkU3RyaW5nID0gZnVuY3Rpb24gKHdpZHRoLCB2YWx1ZSkge1xuICAgICAgICAgIC8vIFRoZSBgfHwgMGAgZXhwcmVzc2lvbiBpcyBuZWNlc3NhcnkgdG8gd29yayBhcm91bmQgYSBidWcgaW5cbiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgd2hlcmUgYDAgPT0gLTBgLCBidXQgYFN0cmluZygtMCkgIT09IFwiMFwiYC5cbiAgICAgICAgICByZXR1cm4gKGxlYWRpbmdaZXJvZXMgKyAodmFsdWUgfHwgMCkpLnNsaWNlKC13aWR0aCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IERvdWJsZS1xdW90ZXMgYSBzdHJpbmcgYHZhbHVlYCwgcmVwbGFjaW5nIGFsbCBBU0NJSSBjb250cm9sXG4gICAgICAgIC8vIGNoYXJhY3RlcnMgKGNoYXJhY3RlcnMgd2l0aCBjb2RlIHVuaXQgdmFsdWVzIGJldHdlZW4gMCBhbmQgMzEpIHdpdGhcbiAgICAgICAgLy8gdGhlaXIgZXNjYXBlZCBlcXVpdmFsZW50cy4gVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGVcbiAgICAgICAgLy8gYFF1b3RlKHZhbHVlKWAgb3BlcmF0aW9uIGRlZmluZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy5cbiAgICAgICAgdmFyIHVuaWNvZGVQcmVmaXggPSBcIlxcXFx1MDBcIjtcbiAgICAgICAgdmFyIHF1b3RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9ICdcIicsIGluZGV4ID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoLCB1c2VDaGFySW5kZXggPSAhY2hhckluZGV4QnVnZ3kgfHwgbGVuZ3RoID4gMTA7XG4gICAgICAgICAgdmFyIHN5bWJvbHMgPSB1c2VDaGFySW5kZXggJiYgKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuc3BsaXQoXCJcIikgOiB2YWx1ZSk7XG4gICAgICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgYSBjb250cm9sIGNoYXJhY3RlciwgYXBwZW5kIGl0cyBVbmljb2RlIG9yXG4gICAgICAgICAgICAvLyBzaG9ydGhhbmQgZXNjYXBlIHNlcXVlbmNlOyBvdGhlcndpc2UsIGFwcGVuZCB0aGUgY2hhcmFjdGVyIGFzLWlzLlxuICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDg6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMjogY2FzZSAxMzogY2FzZSAzNDogY2FzZSA5MjpcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gRXNjYXBlc1tjaGFyQ29kZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB1bmljb2RlUHJlZml4ICsgdG9QYWRkZWRTdHJpbmcoMiwgY2hhckNvZGUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gdXNlQ2hhckluZGV4ID8gc3ltYm9sc1tpbmRleF0gOiB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ1wiJztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVjdXJzaXZlbHkgc2VyaWFsaXplcyBhbiBvYmplY3QuIEltcGxlbWVudHMgdGhlXG4gICAgICAgIC8vIGBTdHIoa2V5LCBob2xkZXIpYCwgYEpPKHZhbHVlKWAsIGFuZCBgSkEodmFsdWUpYCBvcGVyYXRpb25zLlxuICAgICAgICB2YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKHByb3BlcnR5LCBvYmplY3QsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUsIGNsYXNzTmFtZSwgeWVhciwgbW9udGgsIGRhdGUsIHRpbWUsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMsIHJlc3VsdHMsIGVsZW1lbnQsIGluZGV4LCBsZW5ndGgsIHByZWZpeCwgcmVzdWx0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBOZWNlc3NhcnkgZm9yIGhvc3Qgb2JqZWN0IHN1cHBvcnQuXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGRhdGVDbGFzcyAmJiAhaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLCBcInRvSlNPTlwiKSkge1xuICAgICAgICAgICAgICBpZiAodmFsdWUgPiAtMSAvIDAgJiYgdmFsdWUgPCAxIC8gMCkge1xuICAgICAgICAgICAgICAgIC8vIERhdGVzIGFyZSBzZXJpYWxpemVkIGFjY29yZGluZyB0byB0aGUgYERhdGUjdG9KU09OYCBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWZpZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuOS41LjQ0LiBTZWUgc2VjdGlvbiAxNS45LjEuMTVcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGhlIElTTyA4NjAxIGRhdGUgdGltZSBzdHJpbmcgZm9ybWF0LlxuICAgICAgICAgICAgICAgIGlmIChnZXREYXkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIE1hbnVhbGx5IGNvbXB1dGUgdGhlIHllYXIsIG1vbnRoLCBkYXRlLCBob3VycywgbWludXRlcyxcbiAgICAgICAgICAgICAgICAgIC8vIHNlY29uZHMsIGFuZCBtaWxsaXNlY29uZHMgaWYgdGhlIGBnZXRVVEMqYCBtZXRob2RzIGFyZVxuICAgICAgICAgICAgICAgICAgLy8gYnVnZ3kuIEFkYXB0ZWQgZnJvbSBAWWFmZmxlJ3MgYGRhdGUtc2hpbWAgcHJvamVjdC5cbiAgICAgICAgICAgICAgICAgIGRhdGUgPSBmbG9vcih2YWx1ZSAvIDg2NGU1KTtcbiAgICAgICAgICAgICAgICAgIGZvciAoeWVhciA9IGZsb29yKGRhdGUgLyAzNjUuMjQyNSkgKyAxOTcwIC0gMTsgZ2V0RGF5KHllYXIgKyAxLCAwKSA8PSBkYXRlOyB5ZWFyKyspeyB9XG4gICAgICAgICAgICAgICAgICBmb3IgKG1vbnRoID0gZmxvb3IoKGRhdGUgLSBnZXREYXkoeWVhciwgMCkpIC8gMzAuNDIpOyBnZXREYXkoeWVhciwgbW9udGggKyAxKSA8PSBkYXRlOyBtb250aCsrKXsgfVxuICAgICAgICAgICAgICAgICAgZGF0ZSA9IDEgKyBkYXRlIC0gZ2V0RGF5KHllYXIsIG1vbnRoKTtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBgdGltZWAgdmFsdWUgc3BlY2lmaWVzIHRoZSB0aW1lIHdpdGhpbiB0aGUgZGF5IChzZWUgRVNcbiAgICAgICAgICAgICAgICAgIC8vIDUuMSBzZWN0aW9uIDE1LjkuMS4yKS4gVGhlIGZvcm11bGEgYChBICUgQiArIEIpICUgQmAgaXMgdXNlZFxuICAgICAgICAgICAgICAgICAgLy8gdG8gY29tcHV0ZSBgQSBtb2R1bG8gQmAsIGFzIHRoZSBgJWAgb3BlcmF0b3IgZG9lcyBub3RcbiAgICAgICAgICAgICAgICAgIC8vIGNvcnJlc3BvbmQgdG8gdGhlIGBtb2R1bG9gIG9wZXJhdGlvbiBmb3IgbmVnYXRpdmUgbnVtYmVycy5cbiAgICAgICAgICAgICAgICAgIHRpbWUgPSAodmFsdWUgJSA4NjRlNSArIDg2NGU1KSAlIDg2NGU1O1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzIGFyZSBvYnRhaW5lZCBieVxuICAgICAgICAgICAgICAgICAgLy8gZGVjb21wb3NpbmcgdGhlIHRpbWUgd2l0aGluIHRoZSBkYXkuIFNlZSBzZWN0aW9uIDE1LjkuMS4xMC5cbiAgICAgICAgICAgICAgICAgIGhvdXJzID0gZmxvb3IodGltZSAvIDM2ZTUpICUgMjQ7XG4gICAgICAgICAgICAgICAgICBtaW51dGVzID0gZmxvb3IodGltZSAvIDZlNCkgJSA2MDtcbiAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBmbG9vcih0aW1lIC8gMWUzKSAlIDYwO1xuICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGltZSAlIDFlMztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgeWVhciA9IHZhbHVlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICBtb250aCA9IHZhbHVlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICAgICAgICBkYXRlID0gdmFsdWUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgaG91cnMgPSB2YWx1ZS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgICAgICAgbWludXRlcyA9IHZhbHVlLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSB2YWx1ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB2YWx1ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2VyaWFsaXplIGV4dGVuZGVkIHllYXJzIGNvcnJlY3RseS5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh5ZWFyIDw9IDAgfHwgeWVhciA+PSAxZTQgPyAoeWVhciA8IDAgPyBcIi1cIiA6IFwiK1wiKSArIHRvUGFkZGVkU3RyaW5nKDYsIHllYXIgPCAwID8gLXllYXIgOiB5ZWFyKSA6IHRvUGFkZGVkU3RyaW5nKDQsIHllYXIpKSArXG4gICAgICAgICAgICAgICAgICBcIi1cIiArIHRvUGFkZGVkU3RyaW5nKDIsIG1vbnRoICsgMSkgKyBcIi1cIiArIHRvUGFkZGVkU3RyaW5nKDIsIGRhdGUpICtcbiAgICAgICAgICAgICAgICAgIC8vIE1vbnRocywgZGF0ZXMsIGhvdXJzLCBtaW51dGVzLCBhbmQgc2Vjb25kcyBzaG91bGQgaGF2ZSB0d29cbiAgICAgICAgICAgICAgICAgIC8vIGRpZ2l0czsgbWlsbGlzZWNvbmRzIHNob3VsZCBoYXZlIHRocmVlLlxuICAgICAgICAgICAgICAgICAgXCJUXCIgKyB0b1BhZGRlZFN0cmluZygyLCBob3VycykgKyBcIjpcIiArIHRvUGFkZGVkU3RyaW5nKDIsIG1pbnV0ZXMpICsgXCI6XCIgKyB0b1BhZGRlZFN0cmluZygyLCBzZWNvbmRzKSArXG4gICAgICAgICAgICAgICAgICAvLyBNaWxsaXNlY29uZHMgYXJlIG9wdGlvbmFsIGluIEVTIDUuMCwgYnV0IHJlcXVpcmVkIGluIDUuMS5cbiAgICAgICAgICAgICAgICAgIFwiLlwiICsgdG9QYWRkZWRTdHJpbmcoMywgbWlsbGlzZWNvbmRzKSArIFwiWlwiO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09IFwiZnVuY3Rpb25cIiAmJiAoKGNsYXNzTmFtZSAhPSBudW1iZXJDbGFzcyAmJiBjbGFzc05hbWUgIT0gc3RyaW5nQ2xhc3MgJiYgY2xhc3NOYW1lICE9IGFycmF5Q2xhc3MpIHx8IGlzUHJvcGVydHkuY2FsbCh2YWx1ZSwgXCJ0b0pTT05cIikpKSB7XG4gICAgICAgICAgICAgIC8vIFByb3RvdHlwZSA8PSAxLjYuMSBhZGRzIG5vbi1zdGFuZGFyZCBgdG9KU09OYCBtZXRob2RzIHRvIHRoZVxuICAgICAgICAgICAgICAvLyBgTnVtYmVyYCwgYFN0cmluZ2AsIGBEYXRlYCwgYW5kIGBBcnJheWAgcHJvdG90eXBlcy4gSlNPTiAzXG4gICAgICAgICAgICAgIC8vIGlnbm9yZXMgYWxsIGB0b0pTT05gIG1ldGhvZHMgb24gdGhlc2Ugb2JqZWN0cyB1bmxlc3MgdGhleSBhcmVcbiAgICAgICAgICAgICAgLy8gZGVmaW5lZCBkaXJlY3RseSBvbiBhbiBpbnN0YW5jZS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04ocHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIElmIGEgcmVwbGFjZW1lbnQgZnVuY3Rpb24gd2FzIHByb3ZpZGVkLCBjYWxsIGl0IHRvIG9idGFpbiB0aGUgdmFsdWVcbiAgICAgICAgICAgIC8vIGZvciBzZXJpYWxpemF0aW9uLlxuICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpO1xuICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gYm9vbGVhbkNsYXNzKSB7XG4gICAgICAgICAgICAvLyBCb29sZWFucyBhcmUgcmVwcmVzZW50ZWQgbGl0ZXJhbGx5LlxuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBudW1iZXJDbGFzcykge1xuICAgICAgICAgICAgLy8gSlNPTiBudW1iZXJzIG11c3QgYmUgZmluaXRlLiBgSW5maW5pdHlgIGFuZCBgTmFOYCBhcmUgc2VyaWFsaXplZCBhc1xuICAgICAgICAgICAgLy8gYFwibnVsbFwiYC5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA+IC0xIC8gMCAmJiB2YWx1ZSA8IDEgLyAwID8gXCJcIiArIHZhbHVlIDogXCJudWxsXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MpIHtcbiAgICAgICAgICAgIC8vIFN0cmluZ3MgYXJlIGRvdWJsZS1xdW90ZWQgYW5kIGVzY2FwZWQuXG4gICAgICAgICAgICByZXR1cm4gcXVvdGUoXCJcIiArIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhpcyBpcyBhIGxpbmVhciBzZWFyY2g7IHBlcmZvcm1hbmNlXG4gICAgICAgICAgICAvLyBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2YgdW5pcXVlIG5lc3RlZCBvYmplY3RzLlxuICAgICAgICAgICAgZm9yIChsZW5ndGggPSBzdGFjay5sZW5ndGg7IGxlbmd0aC0tOykge1xuICAgICAgICAgICAgICBpZiAoc3RhY2tbbGVuZ3RoXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDeWNsaWMgc3RydWN0dXJlcyBjYW5ub3QgYmUgc2VyaWFsaXplZCBieSBgSlNPTi5zdHJpbmdpZnlgLlxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBZGQgdGhlIG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgaW5kZW50YXRpb24gbGV2ZWwgYW5kIGluZGVudCBvbmUgYWRkaXRpb25hbCBsZXZlbC5cbiAgICAgICAgICAgIHByZWZpeCA9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgaW5kZW50YXRpb24gKz0gd2hpdGVzcGFjZTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgYXJyYXkgZWxlbWVudHMuXG4gICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IHNlcmlhbGl6ZShpbmRleCwgdmFsdWUsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChlbGVtZW50ID09PSB1bmRlZiA/IFwibnVsbFwiIDogZWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5sZW5ndGggPyAod2hpdGVzcGFjZSA/IFwiW1xcblwiICsgaW5kZW50YXRpb24gKyByZXN1bHRzLmpvaW4oXCIsXFxuXCIgKyBpbmRlbnRhdGlvbikgKyBcIlxcblwiICsgcHJlZml4ICsgXCJdXCIgOiAoXCJbXCIgKyByZXN1bHRzLmpvaW4oXCIsXCIpICsgXCJdXCIpKSA6IFwiW11cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBvYmplY3QgbWVtYmVycy4gTWVtYmVycyBhcmUgc2VsZWN0ZWQgZnJvbVxuICAgICAgICAgICAgICAvLyBlaXRoZXIgYSB1c2VyLXNwZWNpZmllZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzLCBvciB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgIC8vIGl0c2VsZi5cbiAgICAgICAgICAgICAgZm9yRWFjaChwcm9wZXJ0aWVzIHx8IHZhbHVlLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHNlcmlhbGl6ZShwcm9wZXJ0eSwgdmFsdWUsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSB1bmRlZikge1xuICAgICAgICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjM6IFwiSWYgYGdhcGAge3doaXRlc3BhY2V9XG4gICAgICAgICAgICAgICAgICAvLyBpcyBub3QgdGhlIGVtcHR5IHN0cmluZywgbGV0IGBtZW1iZXJgIHtxdW90ZShwcm9wZXJ0eSkgKyBcIjpcIn1cbiAgICAgICAgICAgICAgICAgIC8vIGJlIHRoZSBjb25jYXRlbmF0aW9uIG9mIGBtZW1iZXJgIGFuZCB0aGUgYHNwYWNlYCBjaGFyYWN0ZXIuXCJcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBcImBzcGFjZWAgY2hhcmFjdGVyXCIgcmVmZXJzIHRvIHRoZSBsaXRlcmFsIHNwYWNlXG4gICAgICAgICAgICAgICAgICAvLyBjaGFyYWN0ZXIsIG5vdCB0aGUgYHNwYWNlYCB7d2lkdGh9IGFyZ3VtZW50IHByb3ZpZGVkIHRvXG4gICAgICAgICAgICAgICAgICAvLyBgSlNPTi5zdHJpbmdpZnlgLlxuICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHF1b3RlKHByb3BlcnR5KSArIFwiOlwiICsgKHdoaXRlc3BhY2UgPyBcIiBcIiA6IFwiXCIpICsgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5sZW5ndGggPyAod2hpdGVzcGFjZSA/IFwie1xcblwiICsgaW5kZW50YXRpb24gKyByZXN1bHRzLmpvaW4oXCIsXFxuXCIgKyBpbmRlbnRhdGlvbikgKyBcIlxcblwiICsgcHJlZml4ICsgXCJ9XCIgOiAoXCJ7XCIgKyByZXN1bHRzLmpvaW4oXCIsXCIpICsgXCJ9XCIpKSA6IFwie31cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgb2JqZWN0IGZyb20gdGhlIHRyYXZlcnNlZCBvYmplY3Qgc3RhY2suXG4gICAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFB1YmxpYzogYEpTT04uc3RyaW5naWZ5YC4gU2VlIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMuXG4gICAgICAgIGV4cG9ydHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHNvdXJjZSwgZmlsdGVyLCB3aWR0aCkge1xuICAgICAgICAgIHZhciB3aGl0ZXNwYWNlLCBjYWxsYmFjaywgcHJvcGVydGllcywgY2xhc3NOYW1lO1xuICAgICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgZmlsdGVyID09IFwib2JqZWN0XCIgJiYgZmlsdGVyKSB7XG4gICAgICAgICAgICBpZiAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwoZmlsdGVyKSkgPT0gZnVuY3Rpb25DbGFzcykge1xuICAgICAgICAgICAgICBjYWxsYmFjayA9IGZpbHRlcjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcHJvcGVydHkgbmFtZXMgYXJyYXkgaW50byBhIG1ha2VzaGlmdCBzZXQuXG4gICAgICAgICAgICAgIHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBmaWx0ZXIubGVuZ3RoLCB2YWx1ZTsgaW5kZXggPCBsZW5ndGg7IHZhbHVlID0gZmlsdGVyW2luZGV4KytdLCAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpKSwgY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzIHx8IGNsYXNzTmFtZSA9PSBudW1iZXJDbGFzcykgJiYgKHByb3BlcnRpZXNbdmFsdWVdID0gMSkpeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh3aWR0aCkge1xuICAgICAgICAgICAgaWYgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHdpZHRoKSkgPT0gbnVtYmVyQ2xhc3MpIHtcbiAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgYHdpZHRoYCB0byBhbiBpbnRlZ2VyIGFuZCBjcmVhdGUgYSBzdHJpbmcgY29udGFpbmluZ1xuICAgICAgICAgICAgICAvLyBgd2lkdGhgIG51bWJlciBvZiBzcGFjZSBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICBpZiAoKHdpZHRoIC09IHdpZHRoICUgMSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yICh3aGl0ZXNwYWNlID0gXCJcIiwgd2lkdGggPiAxMCAmJiAod2lkdGggPSAxMCk7IHdoaXRlc3BhY2UubGVuZ3RoIDwgd2lkdGg7IHdoaXRlc3BhY2UgKz0gXCIgXCIpeyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7XG4gICAgICAgICAgICAgIHdoaXRlc3BhY2UgPSB3aWR0aC5sZW5ndGggPD0gMTAgPyB3aWR0aCA6IHdpZHRoLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gT3BlcmEgPD0gNy41NHUyIGRpc2NhcmRzIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIGVtcHR5IHN0cmluZyBrZXlzXG4gICAgICAgICAgLy8gKGBcIlwiYCkgb25seSBpZiB0aGV5IGFyZSB1c2VkIGRpcmVjdGx5IHdpdGhpbiBhbiBvYmplY3QgbWVtYmVyIGxpc3RcbiAgICAgICAgICAvLyAoZS5nLiwgYCEoXCJcIiBpbiB7IFwiXCI6IDF9KWApLlxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoXCJcIiwgKHZhbHVlID0ge30sIHZhbHVlW1wiXCJdID0gc291cmNlLCB2YWx1ZSksIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBcIlwiLCBbXSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFB1YmxpYzogUGFyc2VzIGEgSlNPTiBzb3VyY2Ugc3RyaW5nLlxuICAgICAgaWYgKCFoYXMoXCJqc29uLXBhcnNlXCIpKSB7XG4gICAgICAgIHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4gICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBlc2NhcGVkIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgdGhlaXIgdW5lc2NhcGVkXG4gICAgICAgIC8vIGVxdWl2YWxlbnRzLlxuICAgICAgICB2YXIgVW5lc2NhcGVzID0ge1xuICAgICAgICAgIDkyOiBcIlxcXFxcIixcbiAgICAgICAgICAzNDogJ1wiJyxcbiAgICAgICAgICA0NzogXCIvXCIsXG4gICAgICAgICAgOTg6IFwiXFxiXCIsXG4gICAgICAgICAgMTE2OiBcIlxcdFwiLFxuICAgICAgICAgIDExMDogXCJcXG5cIixcbiAgICAgICAgICAxMDI6IFwiXFxmXCIsXG4gICAgICAgICAgMTE0OiBcIlxcclwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFN0b3JlcyB0aGUgcGFyc2VyIHN0YXRlLlxuICAgICAgICB2YXIgSW5kZXgsIFNvdXJjZTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVzZXRzIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHRocm93cyBhIGBTeW50YXhFcnJvcmAuXG4gICAgICAgIHZhciBhYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmV0dXJucyB0aGUgbmV4dCB0b2tlbiwgb3IgYFwiJFwiYCBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkXG4gICAgICAgIC8vIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBzdHJpbmcuIEEgdG9rZW4gbWF5IGJlIGEgc3RyaW5nLCBudW1iZXIsIGBudWxsYFxuICAgICAgICAvLyBsaXRlcmFsLCBvciBCb29sZWFuIGxpdGVyYWwuXG4gICAgICAgIHZhciBsZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IFNvdXJjZSwgbGVuZ3RoID0gc291cmNlLmxlbmd0aCwgdmFsdWUsIGJlZ2luLCBwb3NpdGlvbiwgaXNTaWduZWQsIGNoYXJDb2RlO1xuICAgICAgICAgIHdoaWxlIChJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHdoaXRlc3BhY2UgdG9rZW5zLCBpbmNsdWRpbmcgdGFicywgY2FycmlhZ2UgcmV0dXJucywgbGluZVxuICAgICAgICAgICAgICAgIC8vIGZlZWRzLCBhbmQgc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEyMzogY2FzZSAxMjU6IGNhc2UgOTE6IGNhc2UgOTM6IGNhc2UgNTg6IGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYSBwdW5jdHVhdG9yIHRva2VuIChge2AsIGB9YCwgYFtgLCBgXWAsIGA6YCwgb3IgYCxgKSBhdFxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gY2hhckluZGV4QnVnZ3kgPyBzb3VyY2UuY2hhckF0KEluZGV4KSA6IHNvdXJjZVtJbmRleF07XG4gICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgLy8gYFwiYCBkZWxpbWl0cyBhIEpTT04gc3RyaW5nOyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNoYXJhY3RlciBhbmRcbiAgICAgICAgICAgICAgICAvLyBiZWdpbiBwYXJzaW5nIHRoZSBzdHJpbmcuIFN0cmluZyB0b2tlbnMgYXJlIHByZWZpeGVkIHdpdGggdGhlXG4gICAgICAgICAgICAgICAgLy8gc2VudGluZWwgYEBgIGNoYXJhY3RlciB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gcHVuY3R1YXRvcnMgYW5kXG4gICAgICAgICAgICAgICAgLy8gZW5kLW9mLXN0cmluZyB0b2tlbnMuXG4gICAgICAgICAgICAgICAgZm9yICh2YWx1ZSA9IFwiQFwiLCBJbmRleCsrOyBJbmRleCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5lc2NhcGVkIEFTQ0lJIGNvbnRyb2wgY2hhcmFjdGVycyAodGhvc2Ugd2l0aCBhIGNvZGUgdW5pdFxuICAgICAgICAgICAgICAgICAgICAvLyBsZXNzIHRoYW4gdGhlIHNwYWNlIGNoYXJhY3RlcikgYXJlIG5vdCBwZXJtaXR0ZWQuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID09IDkyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgcmV2ZXJzZSBzb2xpZHVzIChgXFxgKSBtYXJrcyB0aGUgYmVnaW5uaW5nIG9mIGFuIGVzY2FwZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udHJvbCBjaGFyYWN0ZXIgKGluY2x1ZGluZyBgXCJgLCBgXFxgLCBhbmQgYC9gKSBvciBVbmljb2RlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTI6IGNhc2UgMzQ6IGNhc2UgNDc6IGNhc2UgOTg6IGNhc2UgMTE2OiBjYXNlIDExMDogY2FzZSAxMDI6IGNhc2UgMTE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIGVzY2FwZWQgY29udHJvbCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gVW5lc2NhcGVzW2NoYXJDb2RlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBcXHVgIG1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgYSBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgdmFsaWRhdGUgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IGNvZGUgcG9pbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbiA9ICsrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXggKyA0OyBJbmRleCA8IHBvc2l0aW9uOyBJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHZhbGlkIHNlcXVlbmNlIGNvbXByaXNlcyBmb3VyIGhleGRpZ2l0cyAoY2FzZS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5zZW5zaXRpdmUpIHRoYXQgZm9ybSBhIHNpbmdsZSBoZXhhZGVjaW1hbCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcgfHwgY2hhckNvZGUgPj0gOTcgJiYgY2hhckNvZGUgPD0gMTAyIHx8IGNoYXJDb2RlID49IDY1ICYmIGNoYXJDb2RlIDw9IDcwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGZyb21DaGFyQ29kZShcIjB4XCIgKyBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBBbiB1bmVzY2FwZWQgZG91YmxlLXF1b3RlIGNoYXJhY3RlciBtYXJrcyB0aGUgZW5kIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSBhIHN0cmluZyBpcyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoYXJDb2RlID49IDMyICYmIGNoYXJDb2RlICE9IDkyICYmIGNoYXJDb2RlICE9IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIHN0cmluZyBhcy1pcy5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChJbmRleCkgPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZCByZXR1cm4gdGhlIHJldml2ZWQgc3RyaW5nLlxuICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW50ZXJtaW5hdGVkIHN0cmluZy5cbiAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIG51bWJlcnMgYW5kIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIGJlZ2luID0gSW5kZXg7XG4gICAgICAgICAgICAgICAgLy8gQWR2YW5jZSBwYXN0IHRoZSBuZWdhdGl2ZSBzaWduLCBpZiBvbmUgaXMgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgaXNTaWduZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYW4gaW50ZWdlciBvciBmbG9hdGluZy1wb2ludCB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpIHtcbiAgICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgemVyb2VzIGFyZSBpbnRlcnByZXRlZCBhcyBvY3RhbCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0OCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXggKyAxKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIG9jdGFsIGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGludGVnZXIgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgZm9yICg7IEluZGV4IDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCkpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IEluZGV4KyspeyB9XG4gICAgICAgICAgICAgICAgICAvLyBGbG9hdHMgY2Fubm90IGNvbnRhaW4gYSBsZWFkaW5nIGRlY2ltYWwgcG9pbnQ7IGhvd2V2ZXIsIHRoaXNcbiAgICAgICAgICAgICAgICAgIC8vIGNhc2UgaXMgYWxyZWFkeSBhY2NvdW50ZWQgZm9yIGJ5IHRoZSBwYXJzZXIuXG4gICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpID09IDQ2KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gKytJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGRlY2ltYWwgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgcG9zaXRpb24gPCBsZW5ndGggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KHBvc2l0aW9uKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgcG9zaXRpb24rKyl7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09IEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbCB0cmFpbGluZyBkZWNpbWFsLlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgSW5kZXggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIGV4cG9uZW50cy4gVGhlIGBlYCBkZW5vdGluZyB0aGUgZXhwb25lbnQgaXNcbiAgICAgICAgICAgICAgICAgIC8vIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSAxMDEgfHwgY2hhckNvZGUgPT0gNjkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCBwYXN0IHRoZSBzaWduIGZvbGxvd2luZyB0aGUgZXhwb25lbnQsIGlmIG9uZSBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0MyB8fCBjaGFyQ29kZSA9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGV4cG9uZW50aWFsIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChwb3NpdGlvbiA9IEluZGV4OyBwb3NpdGlvbiA8IGxlbmd0aCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocG9zaXRpb24pKSwgY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpOyBwb3NpdGlvbisrKXsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIGVtcHR5IGV4cG9uZW50LlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgSW5kZXggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vIENvZXJjZSB0aGUgcGFyc2VkIHZhbHVlIHRvIGEgSmF2YVNjcmlwdCBudW1iZXIuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gK3NvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBIG5lZ2F0aXZlIHNpZ24gbWF5IG9ubHkgcHJlY2VkZSBudW1iZXJzLlxuICAgICAgICAgICAgICAgIGlmIChpc1NpZ25lZCkge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYHRydWVgLCBgZmFsc2VgLCBhbmQgYG51bGxgIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNCkgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA1KSA9PSBcImZhbHNlXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNCkgPT0gXCJudWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW5yZWNvZ25pemVkIHRva2VuLlxuICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJldHVybiB0aGUgc2VudGluZWwgYCRgIGNoYXJhY3RlciBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkIHRoZSBlbmRcbiAgICAgICAgICAvLyBvZiB0aGUgc291cmNlIHN0cmluZy5cbiAgICAgICAgICByZXR1cm4gXCIkXCI7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFBhcnNlcyBhIEpTT04gYHZhbHVlYCB0b2tlbi5cbiAgICAgICAgdmFyIGdldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHRzLCBoYXNNZW1iZXJzO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIiRcIikge1xuICAgICAgICAgICAgLy8gVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQuXG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmICgoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5jaGFyQXQoMCkgOiB2YWx1ZVswXSkgPT0gXCJAXCIpIHtcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzZW50aW5lbCBgQGAgY2hhcmFjdGVyLlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQYXJzZSBvYmplY3QgYW5kIGFycmF5IGxpdGVyYWxzLlxuICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiW1wiKSB7XG4gICAgICAgICAgICAgIC8vIFBhcnNlcyBhIEpTT04gYXJyYXksIHJldHVybmluZyBhIG5ldyBKYXZhU2NyaXB0IGFycmF5LlxuICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgIGZvciAoOzsgaGFzTWVtYmVycyB8fCAoaGFzTWVtYmVycyA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBBIGNsb3Npbmcgc3F1YXJlIGJyYWNrZXQgbWFya3MgdGhlIGVuZCBvZiB0aGUgYXJyYXkgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXJyYXkgbGl0ZXJhbCBjb250YWlucyBlbGVtZW50cywgdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0aW5nIHRoZSBwcmV2aW91cyBlbGVtZW50IGZyb20gdGhlXG4gICAgICAgICAgICAgICAgLy8gbmV4dC5cbiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdHJhaWxpbmcgYCxgIGluIGFycmF5IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBgLGAgbXVzdCBzZXBhcmF0ZSBlYWNoIGFycmF5IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEVsaXNpb25zIGFuZCBsZWFkaW5nIGNvbW1hcyBhcmUgbm90IHBlcm1pdHRlZC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChnZXQodmFsdWUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgLy8gUGFyc2VzIGEgSlNPTiBvYmplY3QsIHJldHVybmluZyBhIG5ldyBKYXZhU2NyaXB0IG9iamVjdC5cbiAgICAgICAgICAgICAgcmVzdWx0cyA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKDs7IGhhc01lbWJlcnMgfHwgKGhhc01lbWJlcnMgPSB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgLy8gQSBjbG9zaW5nIGN1cmx5IGJyYWNlIG1hcmtzIHRoZSBlbmQgb2YgdGhlIG9iamVjdCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIn1cIikge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgbGl0ZXJhbCBjb250YWlucyBtZW1iZXJzLCB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBhIGNvbW1hIHNlcGFyYXRvci5cbiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIn1cIikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdHJhaWxpbmcgYCxgIGluIG9iamVjdCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYCxgIG11c3Qgc2VwYXJhdGUgZWFjaCBvYmplY3QgbWVtYmVyLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBMZWFkaW5nIGNvbW1hcyBhcmUgbm90IHBlcm1pdHRlZCwgb2JqZWN0IHByb3BlcnR5IG5hbWVzIG11c3QgYmVcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUtcXVvdGVkIHN0cmluZ3MsIGFuZCBhIGA6YCBtdXN0IHNlcGFyYXRlIGVhY2ggcHJvcGVydHlcbiAgICAgICAgICAgICAgICAvLyBuYW1lIGFuZCB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIgfHwgdHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIgfHwgKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuY2hhckF0KDApIDogdmFsdWVbMF0pICE9IFwiQFwiIHx8IGxleCgpICE9IFwiOlwiKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRzW3ZhbHVlLnNsaWNlKDEpXSA9IGdldChsZXgoKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRva2VuIGVuY291bnRlcmVkLlxuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBVcGRhdGVzIGEgdHJhdmVyc2VkIG9iamVjdCBtZW1iZXIuXG4gICAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiAoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IHdhbGsoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spO1xuICAgICAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZikge1xuICAgICAgICAgICAgZGVsZXRlIHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZVtwcm9wZXJ0eV0gPSBlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVjdXJzaXZlbHkgdHJhdmVyc2VzIGEgcGFyc2VkIEpTT04gb2JqZWN0LCBpbnZva2luZyB0aGVcbiAgICAgICAgLy8gYGNhbGxiYWNrYCBmdW5jdGlvbiBmb3IgZWFjaCB2YWx1ZS4gVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGVcbiAgICAgICAgLy8gYFdhbGsoaG9sZGVyLCBuYW1lKWAgb3BlcmF0aW9uIGRlZmluZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMi5cbiAgICAgICAgdmFyIHdhbGsgPSBmdW5jdGlvbiAoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbcHJvcGVydHldLCBsZW5ndGg7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBgZm9yRWFjaGAgY2FuJ3QgYmUgdXNlZCB0byB0cmF2ZXJzZSBhbiBhcnJheSBpbiBPcGVyYSA8PSA4LjU0XG4gICAgICAgICAgICAvLyBiZWNhdXNlIGl0cyBgT2JqZWN0I2hhc093blByb3BlcnR5YCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIGBmYWxzZWBcbiAgICAgICAgICAgIC8vIGZvciBhcnJheSBpbmRpY2VzIChlLmcuLCBgIVsxLCAyLCAzXS5oYXNPd25Qcm9wZXJ0eShcIjBcIilgKS5cbiAgICAgICAgICAgIGlmIChnZXRDbGFzcy5jYWxsKHZhbHVlKSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgIGZvciAobGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUsIGxlbmd0aCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzb3VyY2UsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHVibGljOiBgSlNPTi5wYXJzZWAuIFNlZSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLlxuICAgICAgICBleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHNvdXJjZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgcmVzdWx0LCB2YWx1ZTtcbiAgICAgICAgICBJbmRleCA9IDA7XG4gICAgICAgICAgU291cmNlID0gXCJcIiArIHNvdXJjZTtcbiAgICAgICAgICByZXN1bHQgPSBnZXQobGV4KCkpO1xuICAgICAgICAgIC8vIElmIGEgSlNPTiBzdHJpbmcgY29udGFpbnMgbXVsdGlwbGUgdG9rZW5zLCBpdCBpcyBpbnZhbGlkLlxuICAgICAgICAgIGlmIChsZXgoKSAhPSBcIiRcIikge1xuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVzZXQgdGhlIHBhcnNlciBzdGF0ZS5cbiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGdldENsYXNzLmNhbGwoY2FsbGJhY2spID09IGZ1bmN0aW9uQ2xhc3MgPyB3YWxrKCh2YWx1ZSA9IHt9LCB2YWx1ZVtcIlwiXSA9IHJlc3VsdCwgdmFsdWUpLCBcIlwiLCBjYWxsYmFjaykgOiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0c1tcInJ1bkluQ29udGV4dFwiXSA9IHJ1bkluQ29udGV4dDtcbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfVxuXG4gIGlmIChleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmICFpc0xvYWRlcikge1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgZW52aXJvbm1lbnRzLlxuICAgIHJ1bkluQ29udGV4dChyb290LCBleHBvcnRzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBFeHBvcnQgZm9yIHdlYiBicm93c2VycyBhbmQgSmF2YVNjcmlwdCBlbmdpbmVzLlxuICAgIHZhciBuYXRpdmVKU09OID0gcm9vdC5KU09OO1xuICAgIHZhciBKU09OMyA9IHJ1bkluQ29udGV4dChyb290LCAocm9vdFtcIkpTT04zXCJdID0ge1xuICAgICAgLy8gUHVibGljOiBSZXN0b3JlcyB0aGUgb3JpZ2luYWwgdmFsdWUgb2YgdGhlIGdsb2JhbCBgSlNPTmAgb2JqZWN0IGFuZFxuICAgICAgLy8gcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgYEpTT04zYCBvYmplY3QuXG4gICAgICBcIm5vQ29uZmxpY3RcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICByb290LkpTT04gPSBuYXRpdmVKU09OO1xuICAgICAgICByZXR1cm4gSlNPTjM7XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgcm9vdC5KU09OID0ge1xuICAgICAgXCJwYXJzZVwiOiBKU09OMy5wYXJzZSxcbiAgICAgIFwic3RyaW5naWZ5XCI6IEpTT04zLnN0cmluZ2lmeVxuICAgIH07XG4gIH1cbn0oY29tbW9uanNHbG9iYWwpKTtcbn0pO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogTWFrZSBzdXJlIGBPYmplY3Qua2V5c2Agd29yayBmb3IgYHVuZGVmaW5lZGBcbiAqIHZhbHVlcyB0aGF0IGFyZSBzdGlsbCB0aGVyZSwgbGlrZSBgZG9jdW1lbnQuYWxsYC5cbiAqIGh0dHA6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3B1YmxpYy1odG1sLzIwMDlKdW4vMDU0Ni5odG1sXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gb2JqZWN0S2V5cyQxKHZhbCl7XG4gIGlmIChPYmplY3Qua2V5cykgeyByZXR1cm4gT2JqZWN0LmtleXModmFsKTsgfVxuICByZXR1cm4gb2JqZWN0S2V5cyh2YWwpO1xufVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbnZhciB1dGlsSW5zcGVjdCA9IGluc3BlY3Q7XG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKiBAbGljZW5zZSBNSVQgKMKpIEpveWVudClcbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgeyBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07IH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgeyBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdOyB9XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBfZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSB7IGN0eC5zaG93SGlkZGVuID0gZmFsc2U7IH1cbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIHsgY3R4LmRlcHRoID0gMjsgfVxuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIHsgY3R4LmNvbG9ycyA9IGZhbHNlOyB9XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIHsgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlOyB9XG4gIGlmIChjdHguY29sb3JzKSB7IGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjsgfVxuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uJDEoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGhhc093biQ0KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGZvcmVhY2goYXJyYXksIGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd24kNCh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBmb3JlYWNoKGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbiQxKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyQxKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoaW5kZXhvZihrZXlzLCAnbWVzc2FnZScpID49IDAgfHwgaW5kZXhvZihrZXlzLCAnZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uJDEodmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbiQxKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0gYXJyYXlNYXAoa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgZGVzYztcbiAgfVxuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duJDQodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGluZGV4b2YoY3R4LnNlZW4sIGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IGFycmF5TWFwKHN0ci5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBhcnJheU1hcChzdHIuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBqc29uMy5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICB7IHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpOyB9XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBqc29uMy5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgeyByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpOyB9XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHsgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7IH1cbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICB7IHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7IH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5UmVkdWNlKG91dHB1dCwgZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSA7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cbmZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgeyByZXR1cm4gb3JpZ2luOyB9XG5cbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzJDEoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufVxuXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QkMSAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCQxICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmckNCAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biQ1IChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdHJpbmcgY29udGFpbmluZyBzdGF0aWMga2V5cyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0JDEoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdCQxKGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXIgPSBmYWxzZTtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QkMSh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093biQ1KHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24kNSh0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24kNSh0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duJDUocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duJDUoYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24kNShhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093biQ1KGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duJDUocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duJDUocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duJDUocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0JDEoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuJDEoZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4kMSAoKSB7XG4gIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAvLyBEZWFjdGl2YXRlIGRlcHMgdHJhY2tpbmcgd2hpbGUgcHJvY2Vzc2luZyBlcnJvciBoYW5kbGVyIHRvIGF2b2lkIHBvc3NpYmxlIGluZmluaXRlIHJlbmRlcmluZy5cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNVxuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgaWYgKHZtKSB7XG4gICAgICB2YXIgY3VyID0gdm07XG4gICAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcgKFxuICBoYW5kbGVyLFxuICBjb250ZXh0LFxuICBhcmdzLFxuICB2bSxcbiAgaW5mb1xuKSB7XG4gIHZhciByZXM7XG4gIHRyeSB7XG4gICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XG4gICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7XG4gICAgICByZXMuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvICsgXCIgKFByb21pc2UvYXN5bmMpXCIpOyB9KTtcbiAgICAgIC8vIGlzc3VlICM5NTExXG4gICAgICAvLyBhdm9pZCBjYXRjaCB0cmlnZ2VyaW5nIG11bHRpcGxlIHRpbWVzIHdoZW4gbmVzdGVkIGNhbGxzXG4gICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAvLyBkbyBub3QgbG9nIGl0IHR3aWNlXG4gICAgICBpZiAoZSAhPT0gZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxudmFyIHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaGluaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCQxKHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzJDEgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyQxID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXMkMVtpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhcyQxW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzJDFbaWRdID09IG51bGwpIHtcbiAgICBoYXMkMVtpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDEgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMTsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0JDEodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duJDUoYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24kNShoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24kNShoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscycgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogbm9vcCxcbiAgc2V0OiBub29wXG59O1xuXG5mdW5jdGlvbiBwcm94eSAodGFyZ2V0LCBzb3VyY2VLZXksIGtleSkge1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gZnVuY3Rpb24gcHJveHlHZXR0ZXIgKCkge1xuICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICB9O1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xuICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHtcbiAgdm0uX3dhdGNoZXJzID0gW107XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH1cbiAgaWYgKG9wdHMubWV0aG9kcykgeyBpbml0TWV0aG9kcyh2bSwgb3B0cy5tZXRob2RzKTsgfVxuICBpZiAob3B0cy5kYXRhKSB7XG4gICAgaW5pdERhdGEodm0pO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuICBpZiAob3B0cy5jb21wdXRlZCkgeyBpbml0Q29tcHV0ZWQodm0sIG9wdHMuY29tcHV0ZWQpOyB9XG4gIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XG4gIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBpZiAoIWlzUm9vdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gIH1cbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZShwcm9wcywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGVcbiAgICAvLyBkdXJpbmcgVnVlLmV4dGVuZCgpLiBXZSBvbmx5IG5lZWQgdG8gcHJveHkgcHJvcHMgZGVmaW5lZCBhdFxuICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBwcm94eSh2bSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzT3B0aW9ucykgbG9vcCgga2V5ICk7XG4gIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGdldERhdGEoZGF0YSwgdm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChtZXRob2RzICYmIGhhc093biQ1KG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24kNShwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093biQ1KHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duJDUoc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDIgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQyKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QkMSh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QkMShiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0JDEodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVpY2FsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmckNDtcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093biQ1KHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0JDEoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0JDEoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QkMShkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdWVzIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QkMShjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QkMShyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAkMShpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50KHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZikpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikge1xuICAgIHZhciBzZWVuS2V5cyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleTtcbiAgICAgIGlmIChpc0RlZihrZXkpKSB7XG4gICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIChcIkR1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnXCIgKyBrZXkgKyBcIicuIFRoaXMgbWF5IGNhdXNlIGFuIHVwZGF0ZSBlcnJvci5cIiksXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGMgPSBvbGRDaFtpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKFxuICAgIG9sZFZub2RlLFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4LFxuICAgIHJlbW92ZU9ubHlcbiAgKSB7XG4gICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIGNsb25lIHJldXNlZCB2bm9kZVxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmICghb2xkVm5vZGUuZGF0YS5hdHRycyAmJiAhdm5vZGUuZGF0YS5hdHRycykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGF0dHJzLl9fb2JfXykge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBlbG0uc2V0QXR0cmlidXRlKGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoYXR0cnNba2V5XSA9PSBudWxsKSB7XG4gICAgICBlbG0uc2V0QXR0cmlidXRlKGtleSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCQxKHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3Mob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICAhZGF0YS5zdGF0aWNDbGFzcyAmJlxuICAgICFkYXRhLmNsYXNzICYmXG4gICAgKCFvbGREYXRhIHx8ICghb2xkRGF0YS5zdGF0aWNDbGFzcyAmJiAhb2xkRGF0YS5jbGFzcykpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKHRyYW5zaXRpb25DbGFzcykge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIgY2xhc3NfID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGFkZCQxKGV2ZW50LCBoYW5kbGVyLCBvbmNlLCBjYXB0dXJlKSB7XG4gIGlmIChjYXB0dXJlKSB7XG4gICAgY29uc29sZS5sb2coJ2J1YmJsZSBwaGFzZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKG9uY2UpIHtcbiAgICB2YXIgb2xkSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICB2YXIgcmVzID0gb2xkSGFuZGxlci5jYWxsLmFwcGx5KG9sZEhhbmRsZXIsIFsgbnVsbCBdLmNvbmNhdCggYXJncyApKTtcbiAgICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmVtb3ZlJDIoZXZlbnQsIG51bGwsIG51bGwsIHRhcmdldCQxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMihldmVudCwgaGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCkge1xuICBpZiAoIF90YXJnZXQgPT09IHZvaWQgMCApIF90YXJnZXQgPSB0YXJnZXQkMTtcblxuICBfdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmICghb2xkVm5vZGUuZGF0YS5vbiAmJiAhdm5vZGUuZGF0YS5vbikge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIHZub2RlLmNvbnRleHQpO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbnZhciBub3JtYWxpemUgPSBjYWNoZWQoY2FtZWxpemUpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpIHtcbiAgLy8gY29uc29sZS5sb2coYFxcdFxcdCA9PT0+IGNyZWF0ZVN0eWxlKCR7b2xkVm5vZGV9LCAke3Zub2RlfSlgKVxuICBpZiAoIXZub2RlLmRhdGEuc3RhdGljU3R5bGUpIHtcbiAgICB1cGRhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBzdGF0aWNTdHlsZSA9IHZub2RlLmRhdGEuc3RhdGljU3R5bGU7XG4gIGZvciAodmFyIG5hbWUgaW4gc3RhdGljU3R5bGUpIHtcbiAgICBpZiAoc3RhdGljU3R5bGVbbmFtZV0pIHtcbiAgICAgIGVsbS5zZXRTdHlsZShub3JtYWxpemUobmFtZSksIHN0YXRpY1N0eWxlW25hbWVdKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmICghb2xkVm5vZGUuZGF0YS5zdHlsZSAmJiAhdm5vZGUuZGF0YS5zdHlsZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdHlsZSA9IG9sZFZub2RlLmRhdGEuc3R5bGUgfHwge307XG4gIHZhciBzdHlsZSA9IHZub2RlLmRhdGEuc3R5bGUgfHwge307XG5cbiAgdmFyIG5lZWRDbG9uZSA9IHN0eWxlLl9fb2JfXztcblxuICAvLyBoYW5kbGUgYXJyYXkgc3ludGF4XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgIHN0eWxlID0gdm5vZGUuZGF0YS5zdHlsZSA9IHRvT2JqZWN0JDEoc3R5bGUpO1xuICB9XG5cbiAgLy8gY2xvbmUgdGhlIHN0eWxlIGZvciBmdXR1cmUgdXBkYXRlcyxcbiAgLy8gaW4gY2FzZSB0aGUgdXNlciBtdXRhdGVzIHRoZSBzdHlsZSBvYmplY3QgaW4tcGxhY2UuXG4gIGlmIChuZWVkQ2xvbmUpIHtcbiAgICBzdHlsZSA9IHZub2RlLmRhdGEuc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcbiAgfVxuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmICghc3R5bGVbbmFtZV0pIHtcbiAgICAgIGVsbS5zZXRTdHlsZShub3JtYWxpemUobmFtZSksICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIHN0eWxlKSB7XG4gICAgY3VyID0gc3R5bGVbbmFtZV07XG4gICAgZWxtLnNldFN0eWxlKG5vcm1hbGl6ZShuYW1lKSwgY3VyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b09iamVjdCQxKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogY3JlYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIDtcbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSA7XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiBlbnRlcih2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcblxuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3MgPyBhcHBlYXJDbGFzcyA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9XG4gICAgaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3MgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzcyA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyID8gYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gdHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBhcHBlYXJcbiAgICAgIDogZW50ZXJcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhciA/IGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZFxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0JDEoZHVyYXRpb24pID8gZHVyYXRpb24uZW50ZXIgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gKGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSkpO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID1cbiAgICAgICAgcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChcbiAgICAgICAgcGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QkMShkdXJhdGlvbikgPyBkdXJhdGlvbi5sZWF2ZSA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSAoZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSkpO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4oZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbXG4gICAgICAgIHZub2RlLmtleVxuICAgICAgXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24odmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKSA/IGludm9rZXJGbnNbMF0gOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlcihfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFthdHRycywgY2xhc3NfLCBldmVudHMsIHN0eWxlLCB0cmFuc2l0aW9uXTtcblxudmFyIGFjdGlvbkJhciA9IHtcbiAgdGVtcGxhdGU6IFwiXFxuICAgIDxOYXRpdmVBY3Rpb25CYXIgfmFjdGlvbkJhciB2LWJpbmQ9XFxcIiRhdHRyc1xcXCIgdi1vbj1cXFwiJGxpc3RlbmVyc1xcXCI+XFxuICAgICAgPHNsb3QgLz5cXG4gICAgPC9OYXRpdmVBY3Rpb25CYXI+XFxuICBcIlxufTtcblxudmFyIGFuZHJvaWQgPSB7XG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgsIHJlZikge1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcblxuICAgIGlmIChyZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtJykuaXNBbmRyb2lkKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5cbiAgICB9XG4gIH1cbn07XG5cbnZhciBmcmFtZXMgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIHNldEZyYW1lKGlkLCBmcmFtZSkge1xuICByZXR1cm4gZnJhbWVzLnNldChpZCwgZnJhbWUpXG59XG5cbmZ1bmN0aW9uIGdldEZyYW1lKGlkKSB7XG4gIHJldHVybiBmcmFtZXMuZ2V0KGlkKVxufVxuXG5mdW5jdGlvbiBkZWxldGVGcmFtZShpZCkge1xuICByZXR1cm4gZnJhbWVzLmRlbGV0ZShpZClcbn1cblxudmFyIGlkQ291bnRlciA9IDE7XG5cbnZhciBmcmFtZSA9IHtcbiAgcHJvcHM6IHtcbiAgICBpZDoge1xuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfSxcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgJ2lvczp0cmFuc2l0aW9uJzoge1xuICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgICdhbmRyb2lkOnRyYW5zaXRpb24nOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgY2xlYXJIaXN0b3J5OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGJhY2tzdGFja1Zpc2libGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvLyBpbmplY3RlZCBieSB0aGUgdGVtcGxhdGUgY29tcGlsZXJcbiAgICBoYXNSb3V0ZXJWaWV3OiB7XG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvcGVydGllczoge31cbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcblxuICAgIGlmIChnZXRGcmFtZSh0aGlzLiRwcm9wcy5pZCkpIHtcbiAgICAgIHByb3BlcnRpZXMuaWQgPSB0aGlzLiRwcm9wcy5pZCArIGlkQ291bnRlcisrO1xuICAgIH1cblxuICAgIHRoaXMucHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuJGF0dHJzLCB0aGlzLiRwcm9wcywgcHJvcGVydGllcyk7XG5cbiAgICBzZXRGcmFtZSh0aGlzLnByb3BlcnRpZXMuaWQsIHRoaXMpO1xuICB9LFxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCgpIHtcbiAgICBkZWxldGVGcmFtZSh0aGlzLnByb3BlcnRpZXMuaWQpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlRnJhbWUnLFxuICAgICAge1xuICAgICAgICBhdHRyczogdGhpcy5wcm9wZXJ0aWVzLFxuICAgICAgICBvbjogdGhpcy4kbGlzdGVuZXJzXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIF9nZXRGcmFtZTogZnVuY3Rpb24gX2dldEZyYW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLm5hdGl2ZVZpZXdcbiAgICB9LFxuXG4gICAgX2Vuc3VyZVRyYW5zaXRpb25PYmplY3Q6IGZ1bmN0aW9uIF9lbnN1cmVUcmFuc2l0aW9uT2JqZWN0KHRyYW5zaXRpb24pIHtcbiAgICAgIGlmICh0eXBlb2YgdHJhbnNpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogdHJhbnNpdGlvbiB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblxuICAgIH0sXG5cbiAgICBfY29tcG9zZVRyYW5zaXRpb246IGZ1bmN0aW9uIF9jb21wb3NlVHJhbnNpdGlvbihlbnRyeSkge1xuICAgICAgdmFyIGlzQW5kcm9pZCA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm0nKS5pc0FuZHJvaWQ7XG4gICAgICB2YXIgcGxhdGZvcm1FbnRyeVByb3AgPSBcInRyYW5zaXRpb25cIiArIChpc0FuZHJvaWQgPyAnQW5kcm9pZCcgOiAnaU9TJyk7XG4gICAgICB2YXIgZW50cnlQcm9wID0gZW50cnlbcGxhdGZvcm1FbnRyeVByb3BdXG4gICAgICAgID8gcGxhdGZvcm1FbnRyeVByb3BcbiAgICAgICAgOiAndHJhbnNpdGlvbic7XG4gICAgICB2YXIgcGxhdGZvcm1Qcm9wID0gKGlzQW5kcm9pZCA/ICdhbmRyb2lkJyA6ICdpb3MnKSArIFwiOnRyYW5zaXRpb25cIjtcbiAgICAgIHZhciBwcm9wID0gdGhpc1twbGF0Zm9ybVByb3BdID8gcGxhdGZvcm1Qcm9wIDogJ3RyYW5zaXRpb24nO1xuXG4gICAgICBpZiAoZW50cnlbZW50cnlQcm9wXSkge1xuICAgICAgICBlbnRyeVtlbnRyeVByb3BdID0gdGhpcy5fZW5zdXJlVHJhbnNpdGlvbk9iamVjdChlbnRyeVtlbnRyeVByb3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpc1twcm9wXSkge1xuICAgICAgICBlbnRyeVtlbnRyeVByb3BdID0gdGhpcy5fZW5zdXJlVHJhbnNpdGlvbk9iamVjdCh0aGlzW3Byb3BdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5XG4gICAgfSxcblxuICAgIG5vdGlmeVBhZ2VNb3VudGVkOiBmdW5jdGlvbiBub3RpZnlQYWdlTW91bnRlZChwYWdlVm0pIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgYmFja3N0YWNrVmlzaWJsZTogdGhpcy5iYWNrc3RhY2tWaXNpYmxlLFxuICAgICAgICBjbGVhckhpc3Rvcnk6IHRoaXMuY2xlYXJIaXN0b3J5LFxuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhZ2VWbS4kZWwubmF0aXZlVmlldzsgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzJDEubmF2aWdhdGUob3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKGVudHJ5LCBiYWNrKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgIGlmICggYmFjayA9PT0gdm9pZCAwICkgYmFjayA9IGZhbHNlO1xuXG4gICAgICB2YXIgZnJhbWUgPSB0aGlzLl9nZXRGcmFtZSgpO1xuXG4gICAgICBpZiAoYmFjaykge1xuICAgICAgICByZXR1cm4gZnJhbWUuZ29CYWNrKGVudHJ5KVxuICAgICAgfVxuXG4gICAgICAvLyByZXNvbHZlIHRoZSBwYWdlIGZyb20gdGhlIGVudHJ5IGFuZCBhdHRhY2ggYSBuYXZpZ2F0ZWRUbyBsaXN0ZW5lclxuICAgICAgLy8gdG8gZmlyZSB0aGUgZnJhbWUgZXZlbnRzXG4gICAgICB2YXIgcGFnZSA9IGVudHJ5LmNyZWF0ZSgpO1xuICAgICAgcGFnZS5vbmNlKCduYXZpZ2F0ZWRUbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLiRlbWl0KCduYXZpZ2F0ZWQnLCBlbnRyeSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICBpZiAoYXJncy5pc0JhY2tOYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgcGFnZS5vZmYoJ25hdmlnYXRlZEZyb20nLCBoYW5kbGVyKTtcblxuICAgICAgICAgIHRoaXMkMS4kZW1pdCgnbmF2aWdhdGVkQmFjaycsIGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHBhZ2Uub24oJ25hdmlnYXRlZEZyb20nLCBoYW5kbGVyKTtcblxuICAgICAgZW50cnkuY3JlYXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZTsgfTtcblxuICAgICAgdGhpcy5fY29tcG9zZVRyYW5zaXRpb24oZW50cnkpO1xuICAgICAgZnJhbWUubmF2aWdhdGUoZW50cnkpO1xuICAgIH0sXG5cbiAgICBiYWNrOiBmdW5jdGlvbiBiYWNrKGJhY2tzdGFja0VudHJ5KSB7XG4gICAgICBpZiAoIGJhY2tzdGFja0VudHJ5ID09PSB2b2lkIDAgKSBiYWNrc3RhY2tFbnRyeSA9IG51bGw7XG5cbiAgICAgIHRoaXMubmF2aWdhdGUoYmFja3N0YWNrRW50cnksIHRydWUpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGlvcyA9IHtcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCwgcmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgaWYgKHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm0nKS5pc0lPUykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuICB9XG59O1xuXG52YXIgVlVFX1ZJRVcgPSAnX192dWVWTm9kZVJlZl9fJztcblxudmFyIHRpZCA9IDA7XG52YXIgdlRlbXBsYXRlID0ge1xuICBwcm9wczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgaWY6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIGlmICghdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy4kdGVtcGxhdGVzID0gdGhpcy4kZWwucGFyZW50Tm9kZS4kdGVtcGxhdGVzID0gdGhpcy4kcGFyZW50LiR0ZW1wbGF0ZXMgPVxuICAgICAgdGhpcy4kcGFyZW50LiR0ZW1wbGF0ZXMgfHwgbmV3IFRlbXBsYXRlQmFnKCk7XG4gICAgdGhpcy4kdGVtcGxhdGVzLnJlZ2lzdGVyVGVtcGxhdGUoXG4gICAgICB0aGlzLiRwcm9wcy5uYW1lIHx8ICh0aGlzLiRwcm9wcy5pZiA/IChcInYtdGVtcGxhdGUtXCIgKyAodGlkKyspKSA6ICdkZWZhdWx0JyksXG4gICAgICB0aGlzLiRwcm9wcy5pZixcbiAgICAgIHRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHRcbiAgICApO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHt9XG59O1xuXG52YXIgVGVtcGxhdGVCYWcgPSBmdW5jdGlvbiBUZW1wbGF0ZUJhZygpIHtcbiAgdGhpcy5fdGVtcGxhdGVNYXAgPSBuZXcgTWFwKCk7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHNlbGVjdG9yRm46IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLnJlZ2lzdGVyVGVtcGxhdGUgPSBmdW5jdGlvbiByZWdpc3RlclRlbXBsYXRlIChuYW1lLCBjb25kaXRpb24sIHNjb3BlZEZuKSB7XG4gIHRoaXMuX3RlbXBsYXRlTWFwLnNldChuYW1lLCB7XG4gICAgc2NvcGVkRm46IHNjb3BlZEZuLFxuICAgIGNvbmRpdGlvbkZuOiB0aGlzLmdldENvbmRpdGlvbkZuKGNvbmRpdGlvbiksXG4gICAga2V5ZWRUZW1wbGF0ZTogbmV3IFZ1ZUtleWVkVGVtcGxhdGUobmFtZSwgc2NvcGVkRm4pXG4gIH0pO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEuc2VsZWN0b3JGbi5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uIHRlbXBsYXRlU2VsZWN0b3JGbihpdGVtKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gc2VsZi5fdGVtcGxhdGVNYXAuZW50cmllcygpO1xuICAgIHZhciBjdXJyO1xuICAgIHdoaWxlICgoY3VyciA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gY3VyclswXTtcbiAgICAgICAgdmFyIGNvbmRpdGlvbkZuID0gY3VyclsxXS5jb25kaXRpb25GbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChjb25kaXRpb25GbihpdGVtKSkge1xuICAgICAgICAgIHJldHVybiBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICB9XG4gICAgcmV0dXJuICdkZWZhdWx0J1xuICB9XG59O1xuXG5UZW1wbGF0ZUJhZy5wcm90b3R5cGUuZ2V0Q29uZGl0aW9uRm4gPSBmdW5jdGlvbiBnZXRDb25kaXRpb25GbiAoY29uZGl0aW9uKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ2N0eCcsIChcIndpdGgoY3R4KSB7IHJldHVybiAhIShcIiArIGNvbmRpdGlvbiArIFwiKSB9XCIpKVxufTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLmdldEtleWVkVGVtcGxhdGUgPSBmdW5jdGlvbiBnZXRLZXllZFRlbXBsYXRlIChuYW1lKSB7XG4gIHJldHVybiB0aGlzLl90ZW1wbGF0ZU1hcC5nZXQobmFtZSkua2V5ZWRUZW1wbGF0ZVxufTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLnBhdGNoVGVtcGxhdGUgPSBmdW5jdGlvbiBwYXRjaFRlbXBsYXRlIChuYW1lLCBjb250ZXh0LCBvbGRWbm9kZSkge1xuICB2YXIgdm5vZGUgPSB0aGlzLl90ZW1wbGF0ZU1hcC5nZXQobmFtZSkuc2NvcGVkRm4oY29udGV4dCk7XG4gIC8vIGluIDIuNiBzY29wZWRGbiByZXR1cm5zIGFuIGFycmF5IVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2bm9kZSA9IHZub2RlWzBdO1xuICB9XG5cbiAgdmFyIG5hdGl2ZVZpZXcgPSBwYXRjaChvbGRWbm9kZSwgdm5vZGUpLm5hdGl2ZVZpZXc7XG4gIG5hdGl2ZVZpZXdbVlVFX1ZJRVddID0gdm5vZGU7XG5cbiAgcmV0dXJuIG5hdGl2ZVZpZXdcbn07XG5cblRlbXBsYXRlQmFnLnByb3RvdHlwZS5nZXRBdmFpbGFibGUgPSBmdW5jdGlvbiBnZXRBdmFpbGFibGUgKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl90ZW1wbGF0ZU1hcC5rZXlzKCkpXG59O1xuXG5UZW1wbGF0ZUJhZy5wcm90b3R5cGUuZ2V0S2V5ZWRUZW1wbGF0ZXMgPSBmdW5jdGlvbiBnZXRLZXllZFRlbXBsYXRlcyAoKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX3RlbXBsYXRlTWFwLnZhbHVlcygpKS5tYXAoXG4gICAgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIga2V5ZWRUZW1wbGF0ZSA9IHJlZi5rZXllZFRlbXBsYXRlO1xuXG4gICAgICAgIHJldHVybiBrZXllZFRlbXBsYXRlO1xuICAgIH1cbiAgKVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRlbXBsYXRlQmFnLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxudmFyIFZ1ZUtleWVkVGVtcGxhdGUgPSBmdW5jdGlvbiBWdWVLZXllZFRlbXBsYXRlKGtleSwgc2NvcGVkRm4pIHtcbiAgdGhpcy5fa2V5ID0ga2V5O1xuICB0aGlzLl9zY29wZWRGbiA9IHNjb3BlZEZuO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxJDEgPSB7IGtleTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMSQxLmtleS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9rZXlcbn07XG5cblZ1ZUtleWVkVGVtcGxhdGUucHJvdG90eXBlLmNyZWF0ZVZpZXcgPSBmdW5jdGlvbiBjcmVhdGVWaWV3ICgpIHtcbiAgLy8gd2UgYXJlIHJldHVybmluZyBudWxsIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGUgZGF0YSBoZXJlXG4gIC8vIHRoZSB2aWV3IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGUgYHBhdGNoVGVtcGxhdGVgIG1ldGhvZCBhYm92ZS5cbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uYXRpdmVzY3JpcHQtdnVlL25hdGl2ZXNjcmlwdC12dWUvaXNzdWVzLzIyOSNpc3N1ZWNvbW1lbnQtMzkwMzMwNDc0XG4gIHJldHVybiBudWxsXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlS2V5ZWRUZW1wbGF0ZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxJDEgKTtcblxudmFyIGxpc3RWaWV3ID0ge1xuICBwcm9wczoge1xuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBbQXJyYXksIE9iamVjdF0sXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFyIE9ic2VydmFibGVBcnJheSA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlLWFycmF5JylcbiAgICAgICAgICAuT2JzZXJ2YWJsZUFycmF5O1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIE9ic2VydmFibGVBcnJheVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICAnK2FsaWFzJzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2l0ZW0nXG4gICAgfSxcbiAgICAnK2luZGV4Jzoge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfVxuICB9LFxuXG4gIHRlbXBsYXRlOiBcIlxcbiAgICA8TmF0aXZlTGlzdFZpZXdcXG4gICAgICByZWY9XFxcImxpc3RWaWV3XFxcIlxcbiAgICAgIDppdGVtcz1cXFwiaXRlbXNcXFwiXFxuICAgICAgdi1iaW5kPVxcXCIkYXR0cnNcXFwiXFxuICAgICAgdi1vbj1cXFwibGlzdGVuZXJzXFxcIlxcbiAgICAgIEBpdGVtVGFwPVxcXCJvbkl0ZW1UYXBcXFwiXFxuICAgICAgQGl0ZW1Mb2FkaW5nPVxcXCJvbkl0ZW1Mb2FkaW5nXFxcIlxcbiAgICA+XFxuICAgICAgPHNsb3QgLz5cXG4gICAgPC9OYXRpdmVMaXN0Vmlldz5cXG4gIFwiLFxuXG4gIHdhdGNoOiB7XG4gICAgaXRlbXM6IHtcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIobmV3VmFsKSB7XG4gICAgICAgIHRoaXMuJHJlZnMubGlzdFZpZXcuc2V0QXR0cmlidXRlKCdpdGVtcycsIG5ld1ZhbCk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgfSxcbiAgICAgIGRlZXA6IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgaXRlbVRhcCBoYW5kbGVyIGZyb20gYSBjbG9uZSBvZiB0aGUgJGxpc3RlbmVyc1xuICAgIC8vIG9iamVjdCBiZWNhdXNlIHdlIGFyZSBlbWl0dGluZyB0aGUgZXZlbnQgb3Vyc2VsdmVzIHdpdGggYWRkZWQgZGF0YS5cbiAgICB2YXIgbGlzdGVuZXJzID0gZXh0ZW5kKHt9LCB0aGlzLiRsaXN0ZW5lcnMpO1xuICAgIGRlbGV0ZSBsaXN0ZW5lcnMuaXRlbVRhcDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycztcblxuICAgIHRoaXMuZ2V0SXRlbUNvbnRleHQgPSBnZXRJdGVtQ29udGV4dC5iaW5kKHRoaXMpO1xuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuJHRlbXBsYXRlcykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy4kcmVmcy5saXN0Vmlldy5zZXRBdHRyaWJ1dGUoXG4gICAgICAnX2l0ZW1UZW1wbGF0ZXNJbnRlcm5hbCcsXG4gICAgICB0aGlzLiR0ZW1wbGF0ZXMuZ2V0S2V5ZWRUZW1wbGF0ZXMoKVxuICAgICk7XG4gICAgdGhpcy4kcmVmcy5saXN0Vmlldy5zZXRBdHRyaWJ1dGUoJ19pdGVtVGVtcGxhdGVTZWxlY3RvcicsIGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMkMS4kdGVtcGxhdGVzLnNlbGVjdG9yRm4odGhpcyQxLmdldEl0ZW1Db250ZXh0KGl0ZW0sIGluZGV4KSlcbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgb25JdGVtVGFwOiBmdW5jdGlvbiBvbkl0ZW1UYXAoYXJncykge1xuICAgICAgdGhpcy4kZW1pdCgnaXRlbVRhcCcsIGV4dGVuZCh7IGl0ZW06IHRoaXMuZ2V0SXRlbShhcmdzLmluZGV4KSB9LCBhcmdzKSk7XG4gICAgfSxcbiAgICBvbkl0ZW1Mb2FkaW5nOiBmdW5jdGlvbiBvbkl0ZW1Mb2FkaW5nKGFyZ3MpIHtcbiAgICAgIGlmICghdGhpcy4kdGVtcGxhdGVzKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSBhcmdzLmluZGV4O1xuICAgICAgdmFyIGl0ZW1zID0gYXJncy5vYmplY3QuaXRlbXM7XG5cbiAgICAgIHZhciBjdXJyZW50SXRlbSA9IHRoaXMuZ2V0SXRlbShpbmRleCk7XG5cbiAgICAgIHZhciBuYW1lID0gYXJncy5vYmplY3QuX2l0ZW1UZW1wbGF0ZVNlbGVjdG9yKGN1cnJlbnRJdGVtLCBpbmRleCwgaXRlbXMpO1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldEl0ZW1Db250ZXh0KGN1cnJlbnRJdGVtLCBpbmRleCk7XG4gICAgICB2YXIgb2xkVm5vZGUgPSBhcmdzLnZpZXcgJiYgYXJncy52aWV3W1ZVRV9WSUVXXTtcblxuICAgICAgYXJncy52aWV3ID0gdGhpcy4kdGVtcGxhdGVzLnBhdGNoVGVtcGxhdGUobmFtZSwgY29udGV4dCwgb2xkVm5vZGUpO1xuICAgIH0sXG4gICAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHRoaXMuJHJlZnMubGlzdFZpZXcubmF0aXZlVmlldy5yZWZyZXNoKCk7XG4gICAgfSxcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiBnZXRJdGVtKGlkeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLml0ZW1zLmdldEl0ZW0gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB0aGlzLml0ZW1zLmdldEl0ZW0oaWR4KVxuICAgICAgICA6IHRoaXMuaXRlbXNbaWR4XVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0SXRlbUNvbnRleHQoXG4gIGl0ZW0sXG4gIGluZGV4LFxuICBhbGlhcyxcbiAgaW5kZXhfYWxpYXNcbikge1xuICB2YXIgb2JqO1xuXG4gIGlmICggYWxpYXMgPT09IHZvaWQgMCApIGFsaWFzID0gdGhpcy4kcHJvcHNbJythbGlhcyddO1xuICBpZiAoIGluZGV4X2FsaWFzID09PSB2b2lkIDAgKSBpbmRleF9hbGlhcyA9IHRoaXMuJHByb3BzWycraW5kZXgnXTtcbiAgcmV0dXJuICggb2JqID0ge30sIG9ialthbGlhc10gPSBpdGVtLCBvYmpbaW5kZXhfYWxpYXMgfHwgJyRpbmRleCddID0gaW5kZXgsIG9iai4kZXZlbiA9IGluZGV4ICUgMiA9PT0gMCwgb2JqLiRvZGQgPSBpbmRleCAlIDIgIT09IDAsIG9iaiApXG59XG5cbnZhciBQQUdFX1JFRiA9ICdfX3Z1ZVBhZ2VSZWZfXyc7XG5cbnZhciBwYWdlID0ge1xuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlUGFnZScsXG4gICAgICB7XG4gICAgICAgIGF0dHJzOiB0aGlzLiRhdHRycyxcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVyc1xuICAgICAgfSxcbiAgICAgIHRoaXMuJHNsb3RzLmRlZmF1bHRcbiAgICApXG4gIH0sXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbC5uYXRpdmVWaWV3W1BBR0VfUkVGXSA9IHRoaXM7XG5cbiAgICB2YXIgZnJhbWUgPSB0aGlzLl9maW5kUGFyZW50RnJhbWUoKTtcblxuICAgIGlmIChmcmFtZSkge1xuICAgICAgZnJhbWUubm90aWZ5UGFnZU1vdW50ZWQodGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUuaXNCYWNrTmF2aWdhdGlvbikge1xuICAgICAgICB0aGlzJDEuJGVsLm5hdGl2ZVZpZXcub2ZmKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG4gICAgICAgIHRoaXMkMS4kcGFyZW50LiRkZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuJGVsLm5hdGl2ZVZpZXcub24oJ25hdmlnYXRlZEZyb20nLCBoYW5kbGVyKTtcblxuICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBwYXJlbnQgdnVlIGluc3RhbmNlIGlzIGRlc3Ryb3llZCB3aGVuIHRoZVxuICAgIC8vIHBhZ2UgaXMgZGlzcG9zZWQgKGNsZWFySGlzdG9yeTogdHJ1ZSBmb3IgZXhhbXBsZSlcbiAgICB2YXIgZGlzcG9zZSA9IHRoaXMuJGVsLm5hdGl2ZVZpZXcuZGlzcG9zZU5hdGl2ZVZpZXc7XG4gICAgdGhpcy4kZWwubmF0aXZlVmlldy5kaXNwb3NlTmF0aXZlVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICB0aGlzJDEuJHBhcmVudC4kZGVzdHJveSgpO1xuICAgICAgZGlzcG9zZS5jYWxsKHRoaXMkMS4kZWwubmF0aXZlVmlldywgYXJncyk7XG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIF9maW5kUGFyZW50RnJhbWU6IGZ1bmN0aW9uIF9maW5kUGFyZW50RnJhbWUoKSB7XG4gICAgICB2YXIgZnJhbWUgPSB0aGlzLiRwYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChmcmFtZSAmJiBmcmFtZS4kb3B0aW9ucy5uYW1lICE9PSAnRnJhbWUnKSB7XG4gICAgICAgIGZyYW1lID0gZnJhbWUuJHBhcmVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZyYW1lXG4gICAgfVxuICB9XG59O1xuXG52YXIgdGFiVmlldyA9IHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgZXZlbnQ6ICdzZWxlY3RlZEluZGV4Q2hhbmdlJ1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHtcbiAgICByZXR1cm4gaChcbiAgICAgICdOYXRpdmVUYWJWaWV3JyxcbiAgICAgIHtcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVycyxcbiAgICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgcmVnaXN0ZXJUYWI6IGZ1bmN0aW9uIHJlZ2lzdGVyVGFiKHRhYlZpZXcpIHtcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXcuaXRlbXMgfHwgW107XG5cbiAgICAgIHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgnaXRlbXMnLCBpdGVtcy5jb25jYXQoW3RhYlZpZXddKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdGFiVmlld0l0ZW0gPSB7XG4gIHRlbXBsYXRlOiBcIjxOYXRpdmVUYWJWaWV3SXRlbT48c2xvdCAvPjwvTmF0aXZlVGFiVmlld0l0ZW0+XCIsXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICBpZiAodGhpcy4kZWwuY2hpbGROb2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKCdUYWJWaWV3SXRlbSBzaG91bGQgY29udGFpbiBvbmx5IDEgcm9vdCBlbGVtZW50JywgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIF9uYXRpdmVWaWV3ID0gdGhpcy4kZWwubmF0aXZlVmlldztcbiAgICBfbmF0aXZlVmlldy52aWV3ID0gdGhpcy4kZWwuY2hpbGROb2Rlc1swXS5uYXRpdmVWaWV3O1xuICAgIHRoaXMuJHBhcmVudC5yZWdpc3RlclRhYihfbmF0aXZlVmlldyk7XG4gIH1cbn07XG5cbnZhciBib3R0b21OYXZpZ2F0aW9uID0ge1xuICBtb2RlbDoge1xuICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkge1xuICAgIHJldHVybiBoKFxuICAgICAgJ05hdGl2ZUJvdHRvbU5hdmlnYXRpb24nLFxuICAgICAge1xuICAgICAgICBvbjogdGhpcy4kbGlzdGVuZXJzLFxuICAgICAgICBhdHRyczogdGhpcy4kYXR0cnNcbiAgICAgIH0sXG4gICAgICB0aGlzLiRzbG90cy5kZWZhdWx0XG4gICAgKVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICByZWdpc3RlclRhYlN0cmlwOiBmdW5jdGlvbiByZWdpc3RlclRhYlN0cmlwKHRhYlN0cmlwKSB7XG4gICAgICB0aGlzLiRlbC5zZXRBdHRyaWJ1dGUoJ3RhYlN0cmlwJywgdGFiU3RyaXApO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJUYWJDb250ZW50SXRlbTogZnVuY3Rpb24gcmVnaXN0ZXJUYWJDb250ZW50SXRlbSh0YWJDb250ZW50SXRlbSkge1xuICAgICAgdmFyIGl0ZW1zID0gdGhpcy4kZWwubmF0aXZlVmlldy5pdGVtcyB8fCBbXTtcblxuICAgICAgdGhpcy4kZWwuc2V0QXR0cmlidXRlKCdpdGVtcycsIGl0ZW1zLmNvbmNhdChbdGFiQ29udGVudEl0ZW1dKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdGFicyA9IHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgZXZlbnQ6ICdzZWxlY3RlZEluZGV4Q2hhbmdlJ1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHtcbiAgICByZXR1cm4gaChcbiAgICAgICdOYXRpdmVUYWJzJyxcbiAgICAgIHtcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVycyxcbiAgICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgcmVnaXN0ZXJUYWJTdHJpcDogZnVuY3Rpb24gcmVnaXN0ZXJUYWJTdHJpcCh0YWJTdHJpcCkge1xuICAgICAgdGhpcy4kZWwuc2V0QXR0cmlidXRlKCd0YWJTdHJpcCcsIHRhYlN0cmlwKTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyVGFiQ29udGVudEl0ZW06IGZ1bmN0aW9uIHJlZ2lzdGVyVGFiQ29udGVudEl0ZW0odGFiQ29udGVudEl0ZW0pIHtcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXcuaXRlbXMgfHwgW107XG5cbiAgICAgIHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgnaXRlbXMnLCBpdGVtcy5jb25jYXQoW3RhYkNvbnRlbnRJdGVtXSkpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRhYlN0cmlwID0ge1xuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlVGFiU3RyaXAnLFxuICAgICAge1xuICAgICAgICBvbjogdGhpcy4kbGlzdGVuZXJzLFxuICAgICAgICBhdHRyczogdGhpcy4kYXR0cnNcbiAgICAgIH0sXG4gICAgICB0aGlzLiRzbG90cy5kZWZhdWx0XG4gICAgKVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdmFyIF9uYXRpdmVWaWV3ID0gdGhpcy4kZWwubmF0aXZlVmlldztcbiAgICB0aGlzLiRwYXJlbnQucmVnaXN0ZXJUYWJTdHJpcChfbmF0aXZlVmlldyk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIHJlZ2lzdGVyVGFiU3RyaXBJdGVtOiBmdW5jdGlvbiByZWdpc3RlclRhYlN0cmlwSXRlbSh0YWJTdHJpcEl0ZW0pIHtcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXcuaXRlbXMgfHwgW107XG5cbiAgICAgIHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgnaXRlbXMnLCBpdGVtcy5jb25jYXQoW3RhYlN0cmlwSXRlbV0pKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0YWJTdHJpcEl0ZW0gPSB7XG4gIHRlbXBsYXRlOiBcIjxOYXRpdmVUYWJTdHJpcEl0ZW0+PHNsb3QgLz48L05hdGl2ZVRhYlN0cmlwSXRlbT5cIixcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHZhciBfbmF0aXZlVmlldyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXc7XG4gICAgdGhpcy4kcGFyZW50LnJlZ2lzdGVyVGFiU3RyaXBJdGVtKF9uYXRpdmVWaWV3KTtcbiAgfVxufTtcblxudmFyIHRhYkNvbnRlbnRJdGVtID0ge1xuICB0ZW1wbGF0ZTogXCI8TmF0aXZlVGFiQ29udGVudEl0ZW0+PHNsb3QgLz48L05hdGl2ZVRhYkNvbnRlbnRJdGVtPlwiLFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgaWYgKHRoaXMuJGVsLmNoaWxkTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgd2FybignVGFiQ29udGVudEl0ZW0gc2hvdWxkIGNvbnRhaW4gb25seSAxIHJvb3QgZWxlbWVudCcsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBfbmF0aXZlVmlldyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXc7XG4gICAgX25hdGl2ZVZpZXcudmlldyA9IHRoaXMuJGVsLmNoaWxkTm9kZXNbMF0ubmF0aXZlVmlldztcbiAgICB0aGlzLiRwYXJlbnQucmVnaXN0ZXJUYWJDb250ZW50SXRlbShfbmF0aXZlVmlldyk7XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxudmFyIGVsZW1lbnRNYXAgPSB7fTtcbnZhciBuYXRpdmVSZWdFeHAgPSAvTmF0aXZlL2dpO1xudmFyIGRhc2hSZWdFeHAgPSAvLS9nO1xuXG52YXIgZGVmYXVsdFZpZXdNZXRhID0ge1xuICBza2lwQWRkVG9Eb206IGZhbHNlLFxuICBpc1VuYXJ5VGFnOiBmYWxzZSxcbiAgdGFnTmFtZXNwYWNlOiAnJyxcbiAgY2FuQmVMZWZ0T3BlblRhZzogZmFsc2UsXG4gIG1vZGVsOiBudWxsLFxuICBjb21wb25lbnQ6IG51bGxcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKSB7XG4gIHJldHVybiAoXCJuYXRpdmVcIiArIChlbGVtZW50TmFtZVxuICAgIC5yZXBsYWNlKG5hdGl2ZVJlZ0V4cCwgJycpXG4gICAgLnJlcGxhY2UoZGFzaFJlZ0V4cCwgJycpXG4gICAgLnRvTG93ZXJDYXNlKCkpKVxufVxuXG5mdW5jdGlvbiByZWdpc3RlckVsZW1lbnQoZWxlbWVudE5hbWUsIHJlc29sdmVyLCBtZXRhKSB7XG4gIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKTtcblxuICBtZXRhID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFZpZXdNZXRhLCBtZXRhKTtcblxuICBpZiAoZWxlbWVudE1hcFtub3JtYWxpemVkTmFtZV0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKFwiRWxlbWVudCBmb3IgXCIgKyBlbGVtZW50TmFtZSArIFwiIGFscmVhZHkgcmVnaXN0ZXJlZC5cIikpXG4gIH1cblxuICBpZiAoIW1ldGEuY29tcG9uZW50KSB7XG4gICAgLy8gaWYgbm8gVnVlIGNvbXBvbmVudCBpcyBwYXNzZWQsIHdyYXAgdGhlIHNpbXBsZXIgdnVlIGNvbXBvbmVudFxuICAgIC8vIHdoaWNoIGJpbmQgdGhlIGV2ZW50cyBhbmQgYXR0cmlidXRlcyB0byB0aGUgTlMgb25lXG4gICAgbWV0YS5jb21wb25lbnQgPSB7XG4gICAgICBmdW5jdGlvbmFsOiB0cnVlLFxuICAgICAgbW9kZWw6IG1ldGEubW9kZWwsXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIChoLCByZWYpIHtcbiAgICAgICAgdmFyIGRhdGEgPSByZWYuZGF0YTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgICAgIHJldHVybiBoKG5vcm1hbGl6ZWROYW1lLCBkYXRhLCBjaGlsZHJlbilcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIG1ldGEuY29tcG9uZW50Lm5hbWUgPSBlbGVtZW50TmFtZTtcblxuICB2YXIgZW50cnkgPSB7XG4gICAgcmVzb2x2ZXI6IHJlc29sdmVyLFxuICAgIG1ldGE6IG1ldGFcbiAgfTtcbiAgZWxlbWVudE1hcFtub3JtYWxpemVkTmFtZV0gPSBlbnRyeTtcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudE1hcCgpIHtcbiAgcmV0dXJuIGVsZW1lbnRNYXBcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld0NsYXNzKGVsZW1lbnROYW1lKSB7XG4gIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKTtcbiAgdmFyIGVudHJ5ID0gZWxlbWVudE1hcFtub3JtYWxpemVkTmFtZV07XG5cbiAgaWYgKCFlbnRyeSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKFwiTm8ga25vd24gY29tcG9uZW50IGZvciBlbGVtZW50IFwiICsgZWxlbWVudE5hbWUgKyBcIi5cIikpXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBlbnRyeS5yZXNvbHZlcigpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChcIkNvdWxkIG5vdCBsb2FkIHZpZXcgZm9yOiBcIiArIGVsZW1lbnROYW1lICsgXCIuIFwiICsgZSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Vmlld01ldGEoZWxlbWVudE5hbWUpIHtcbiAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplRWxlbWVudE5hbWUoZWxlbWVudE5hbWUpO1xuXG4gIHZhciBtZXRhID0gZGVmYXVsdFZpZXdNZXRhO1xuICB2YXIgZW50cnkgPSBlbGVtZW50TWFwW25vcm1hbGl6ZWROYW1lXTtcblxuICBpZiAoZW50cnkgJiYgZW50cnkubWV0YSkge1xuICAgIG1ldGEgPSBlbnRyeS5tZXRhO1xuICB9XG5cbiAgcmV0dXJuIG1ldGFcbn1cblxuZnVuY3Rpb24gaXNLbm93blZpZXcoZWxlbWVudE5hbWUpIHtcbiAgcmV0dXJuIGVsZW1lbnRNYXBbbm9ybWFsaXplRWxlbWVudE5hbWUoZWxlbWVudE5hbWUpXVxufVxuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdBY3Rpb25CYXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2FjdGlvbi1iYXInKS5BY3Rpb25CYXI7IH0sXG4gIHtcbiAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24gcmVtb3ZlQ2hpbGQocGFyZW50LCBjaGlsZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGFyZW50Lm5hdGl2ZVZpZXcuX3JlbW92ZVZpZXcoY2hpbGQubmF0aXZlVmlldyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSBleGNlcHRpb24gLSBjaGlsZCBpcyBsaWtlbHkgYWxyZWFkeSByZW1vdmVkL3JlcGxhY2VkXG4gICAgICAgIC8vIGZpeGVzICM3NlxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcG9uZW50OiBhY3Rpb25CYXJcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnQWN0aW9uSXRlbScsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYWN0aW9uLWJhcicpLkFjdGlvbkl0ZW07IH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudCgnYW5kcm9pZCcsIG51bGwsIHtcbiAgY29tcG9uZW50OiBhbmRyb2lkXG59KTtcblxucmVnaXN0ZXJFbGVtZW50KCdpb3MnLCBudWxsLCB7XG4gIGNvbXBvbmVudDogaW9zXG59KTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnTGlzdFZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xpc3QtdmlldycpLkxpc3RWaWV3OyB9LFxuICB7XG4gICAgY29tcG9uZW50OiBsaXN0Vmlld1xuICB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdOYXZpZ2F0aW9uQnV0dG9uJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9hY3Rpb24tYmFyJykuTmF2aWdhdGlvbkJ1dHRvbjsgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGFiVmlldycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGFiLXZpZXcnKS5UYWJWaWV3OyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgICB9LFxuICAgIGNvbXBvbmVudDogdGFiVmlld1xuICB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdUYWJWaWV3SXRlbScsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGFiLXZpZXcnKS5UYWJWaWV3SXRlbTsgfSxcbiAge1xuICAgIHNraXBBZGRUb0RvbTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IHRhYlZpZXdJdGVtXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0JvdHRvbU5hdmlnYXRpb24nLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2JvdHRvbS1uYXZpZ2F0aW9uJykuQm90dG9tTmF2aWdhdGlvbjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gICAgfSxcbiAgICBjb21wb25lbnQ6IGJvdHRvbU5hdmlnYXRpb25cbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KCdUYWJzJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90YWJzJykuVGFiczsgfSwge1xuICBtb2RlbDoge1xuICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gIH0sXG4gIGNvbXBvbmVudDogdGFic1xufSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RhYlN0cmlwJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90YWItbmF2aWdhdGlvbi1iYXNlL3RhYi1zdHJpcCcpLlRhYlN0cmlwOyB9LFxuICB7XG4gICAgc2tpcEFkZFRvRG9tOiB0cnVlLFxuICAgIGNvbXBvbmVudDogdGFiU3RyaXBcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGFiU3RyaXBJdGVtJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90YWItbmF2aWdhdGlvbi1iYXNlL3RhYi1zdHJpcC1pdGVtJylcbiAgICAgIC5UYWJTdHJpcEl0ZW07IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWUsXG4gICAgY29tcG9uZW50OiB0YWJTdHJpcEl0ZW1cbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGFiQ29udGVudEl0ZW0nLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RhYi1uYXZpZ2F0aW9uLWJhc2UvdGFiLWNvbnRlbnQtaXRlbScpXG4gICAgICAuVGFiQ29udGVudEl0ZW07IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWUsXG4gICAgY29tcG9uZW50OiB0YWJDb250ZW50SXRlbVxuICB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoJ3RyYW5zaXRpb24nLCBudWxsLCB7XG4gIGNvbXBvbmVudDogVHJhbnNpdGlvblxufSk7XG5cbnJlZ2lzdGVyRWxlbWVudCgndi10ZW1wbGF0ZScsIG51bGwsIHtcbiAgY29tcG9uZW50OiB2VGVtcGxhdGVcbn0pO1xuXG4vLyBOUyBjb21wb25lbnRzIHdoaWNoIHVzZXMgdGhlIGF1dG9tYXRpYyByZWdpc3RlckVsZW1lbnQgVnVlIHdyYXBwZXJcbi8vIGFzIHRoZXkgZG8gbm90IG5lZWQgYW55IHNwZWNpYWwgbG9naWNcblxucmVnaXN0ZXJFbGVtZW50KCdMYWJlbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGFiZWwnKS5MYWJlbDsgfSwge1xuICBtb2RlbDoge1xuICAgIHByb3A6ICd0ZXh0JyxcbiAgICBldmVudDogJ3RleHRDaGFuZ2UnXG4gIH1cbn0pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdEYXRlUGlja2VyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9kYXRlLXBpY2tlcicpLkRhdGVQaWNrZXI7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ2RhdGUnLFxuICAgICAgZXZlbnQ6ICdkYXRlQ2hhbmdlJ1xuICAgIH1cbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnQWJzb2x1dGVMYXlvdXQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvYWJzb2x1dGUtbGF5b3V0JykuQWJzb2x1dGVMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdBY3Rpdml0eUluZGljYXRvcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYWN0aXZpdHktaW5kaWNhdG9yJykuQWN0aXZpdHlJbmRpY2F0b3I7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ0JvcmRlcicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYm9yZGVyJykuQm9yZGVyOyB9KTtcbnJlZ2lzdGVyRWxlbWVudCgnQnV0dG9uJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9idXR0b24nKS5CdXR0b247IH0pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnQ29udGVudFZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2NvbnRlbnQtdmlldycpLkNvbnRlbnRWaWV3OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnRG9ja0xheW91dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9kb2NrLWxheW91dCcpLkRvY2tMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdHcmlkTGF5b3V0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2dyaWQtbGF5b3V0JykuR3JpZExheW91dDsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0h0bWxWaWV3JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9odG1sLXZpZXcnKS5IdG1sVmlldzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnSW1hZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlJykuSW1hZ2U7IH0pO1xucmVnaXN0ZXJFbGVtZW50KCdpbWcnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlJykuSW1hZ2U7IH0pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnTGlzdFBpY2tlcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGlzdC1waWNrZXInKS5MaXN0UGlja2VyOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ1BhZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnKS5QYWdlOyB9LCB7XG4gIHNraXBBZGRUb0RvbTogdHJ1ZSxcbiAgY29tcG9uZW50OiBwYWdlXG59KTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnUGxhY2Vob2xkZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3BsYWNlaG9sZGVyJykuUGxhY2Vob2xkZXI7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdQcm9ncmVzcycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcHJvZ3Jlc3MnKS5Qcm9ncmVzczsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndmFsdWUnLFxuICAgICAgZXZlbnQ6ICd2YWx1ZUNoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdQcm94eVZpZXdDb250YWluZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3Byb3h5LXZpZXctY29udGFpbmVyJykuUHJveHlWaWV3Q29udGFpbmVyOyB9XG4pO1xuLy8gcmVnaXN0ZXJFbGVtZW50KFxuLy8gICAnUmVwZWF0ZXInLFxuLy8gICAoKSA9PiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3JlcGVhdGVyJykuUmVwZWF0ZXJcbi8vIClcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1Njcm9sbFZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3Njcm9sbC12aWV3JykuU2Nyb2xsVmlldzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1NlYXJjaEJhcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvc2VhcmNoLWJhcicpLlNlYXJjaEJhcjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndGV4dCcsXG4gICAgICBldmVudDogJ3RleHRDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnU2VnbWVudGVkQmFyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zZWdtZW50ZWQtYmFyJykuU2VnbWVudGVkQmFyOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICdzZWxlY3RlZEluZGV4JyxcbiAgICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdTZWdtZW50ZWRCYXJJdGVtJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zZWdtZW50ZWQtYmFyJykuU2VnbWVudGVkQmFySXRlbTsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnU2xpZGVyJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zbGlkZXInKS5TbGlkZXI7IH0sIHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAndmFsdWUnLFxuICAgIGV2ZW50OiAndmFsdWVDaGFuZ2UnXG4gIH1cbn0pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnU3RhY2tMYXlvdXQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvc3RhY2stbGF5b3V0JykuU3RhY2tMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdGbGV4Ym94TGF5b3V0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2ZsZXhib3gtbGF5b3V0JykuRmxleGJveExheW91dDsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnU3dpdGNoJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zd2l0Y2gnKS5Td2l0Y2g7IH0sIHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAnY2hlY2tlZCcsXG4gICAgZXZlbnQ6ICdjaGVja2VkQ2hhbmdlJ1xuICB9XG59KTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGV4dEZpZWxkJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90ZXh0LWZpZWxkJykuVGV4dEZpZWxkOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICd0ZXh0JyxcbiAgICAgIGV2ZW50OiAndGV4dENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdUZXh0VmlldycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGV4dC12aWV3JykuVGV4dFZpZXc7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ3RleHQnLFxuICAgICAgZXZlbnQ6ICd0ZXh0Q2hhbmdlJ1xuICAgIH1cbiAgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RpbWVQaWNrZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RpbWUtcGlja2VyJykuVGltZVBpY2tlcjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndGltZScsXG4gICAgICBldmVudDogJ3RpbWVDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnV2ViVmlldycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvd2ViLXZpZXcnKS5XZWJWaWV3OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnV3JhcExheW91dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy93cmFwLWxheW91dCcpLldyYXBMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdGb3JtYXR0ZWRTdHJpbmcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3RleHQvZm9ybWF0dGVkLXN0cmluZycpLkZvcm1hdHRlZFN0cmluZzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudCgnU3BhbicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdGV4dC9zcGFuJykuU3BhbjsgfSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0RldGFjaGVkQ29udGFpbmVyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wcm94eS12aWV3LWNvbnRhaW5lcicpLlByb3h5Vmlld0NvbnRhaW5lcjsgfSxcbiAge1xuICAgIHNraXBBZGRUb0RvbTogdHJ1ZVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnRGV0YWNoZWRUZXh0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wbGFjZWhvbGRlcicpLlBsYWNlaG9sZGVyOyB9LFxuICB7XG4gICAgc2tpcEFkZFRvRG9tOiB0cnVlXG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdDb21tZW50JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wbGFjZWhvbGRlcicpLlBsYWNlaG9sZGVyOyB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdEb2N1bWVudCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcHJveHktdmlldy1jb250YWluZXInKS5Qcm94eVZpZXdDb250YWluZXI7IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWVcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KCdGcmFtZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWUnKS5GcmFtZTsgfSwge1xuICBpbnNlcnRDaGlsZDogZnVuY3Rpb24gaW5zZXJ0Q2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBhdEluZGV4KSB7XG4gICAgLy8gaWYgKG5vcm1hbGl6ZUVsZW1lbnROYW1lKGNoaWxkTm9kZS50YWdOYW1lKSA9PT0gJ25hdGl2ZXBhZ2UnKSB7XG4gICAgLy8gcGFyZW50Tm9kZS5uYXRpdmVWaWV3Lm5hdmlnYXRlKHsgY3JlYXRlOiAoKSA9PiBjaGlsZE5vZGUubmF0aXZlVmlldyB9KVxuICAgIC8vIH1cbiAgfSxcbiAgY29tcG9uZW50OiBmcmFtZVxufSk7XG5cbi8qIVxuICogaXNvYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG52YXIgaXNvYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodmFsKSA9PT0gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiBpc09iamVjdE9iamVjdChvKSB7XG4gIHJldHVybiBpc29iamVjdChvKSA9PT0gdHJ1ZVxuICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbnZhciBpc1BsYWluT2JqZWN0JDEgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuICBjdG9yID0gby5jb25zdHJ1Y3RvcjtcbiAgaWYgKHR5cGVvZiBjdG9yICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBwcm90b3R5cGVcbiAgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuICBpZiAoaXNPYmplY3RPYmplY3QocHJvdCkgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gc2V0JDEodGFyZ2V0LCBwYXRoLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIWlzT2JqZWN0JDIodGFyZ2V0KSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShwYXRoKTtcbiAgaWYgKCFpc0FycmF5ICYmIHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICB2YXIgbWVyZ2UgPSBvcHRzLm1lcmdlO1xuICBpZiAobWVyZ2UgJiYgdHlwZW9mIG1lcmdlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgbWVyZ2UgPSBPYmplY3QuYXNzaWduO1xuICB9XG5cbiAgdmFyIGtleXMgPSBpc0FycmF5ID8gcGF0aCA6IHNwbGl0KHBhdGgsIG9wdHMpO1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIHZhciBvcmlnID0gdGFyZ2V0O1xuXG4gIGlmICghb3B0aW9ucyAmJiBrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJlc3VsdCh0YXJnZXQsIGtleXNbMF0sIHZhbHVlLCBtZXJnZSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IGtleXNbaV07XG5cbiAgICBpZiAoIWlzT2JqZWN0JDIodGFyZ2V0W3Byb3BdKSkge1xuICAgICAgdGFyZ2V0W3Byb3BdID0ge307XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IGxlbiAtIDEpIHtcbiAgICAgIHJlc3VsdCh0YXJnZXQsIHByb3AsIHZhbHVlLCBtZXJnZSk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0YXJnZXRbcHJvcF07XG4gIH1cblxuICByZXR1cm4gb3JpZztcbn1cblxuZnVuY3Rpb24gcmVzdWx0KHRhcmdldCwgcGF0aCwgdmFsdWUsIG1lcmdlKSB7XG4gIGlmIChtZXJnZSAmJiBpc1BsYWluT2JqZWN0JDEodGFyZ2V0W3BhdGhdKSAmJiBpc1BsYWluT2JqZWN0JDEodmFsdWUpKSB7XG4gICAgdGFyZ2V0W3BhdGhdID0gbWVyZ2Uoe30sIHRhcmdldFtwYXRoXSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFtwYXRoXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGlkID0gY3JlYXRlS2V5KHBhdGgsIG9wdGlvbnMpO1xuICBpZiAoc2V0JDEubWVtb1tpZF0pIHsgcmV0dXJuIHNldCQxLm1lbW9baWRdOyB9XG5cbiAgdmFyIGNoYXIgPSAob3B0aW9ucyAmJiBvcHRpb25zLnNlcGFyYXRvcikgPyBvcHRpb25zLnNlcGFyYXRvciA6ICcuJztcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuXG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnNwbGl0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAga2V5cyA9IG9wdGlvbnMuc3BsaXQocGF0aCk7XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IHBhdGguc3BsaXQoY2hhcik7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IGtleXNbaV07XG4gICAgd2hpbGUgKHByb3AgJiYgcHJvcC5zbGljZSgtMSkgPT09ICdcXFxcJyAmJiBrZXlzW2kgKyAxXSkge1xuICAgICAgcHJvcCA9IHByb3Auc2xpY2UoMCwgLTEpICsgY2hhciArIGtleXNbKytpXTtcbiAgICB9XG4gICAgcmVzLnB1c2gocHJvcCk7XG4gIH1cbiAgc2V0JDEubWVtb1tpZF0gPSByZXM7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleShwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBpZCA9IHBhdHRlcm47XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gaWQgKyAnJztcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZCArPSAnOycgKyBrZXkgKyAnPScgKyBTdHJpbmcob3B0aW9uc1trZXldKTtcbiAgfVxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0JDIodmFsKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgIGNhc2UgJ251bGwnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbnNldCQxLm1lbW8gPSB7fTtcbnZhciBzZXRWYWx1ZSA9IHNldCQxO1xuXG5mdW5jdGlvbiBpc1ZpZXcodmlldykge1xuICByZXR1cm4gdmlldyBpbnN0YW5jZW9mIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29yZS92aWV3JykuVmlld1xufVxuXG5mdW5jdGlvbiBpc0xheW91dCh2aWV3KSB7XG4gIHJldHVybiAoXG4gICAgdmlldyBpbnN0YW5jZW9mXG4gICAgcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2xheW91dC1iYXNlJykuTGF5b3V0QmFzZVxuICApXG59XG5cbmZ1bmN0aW9uIGlzQ29udGVudFZpZXcodmlldykge1xuICByZXR1cm4gdmlldyBpbnN0YW5jZW9mIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29udGVudC12aWV3JykuQ29udGVudFZpZXdcbn1cblxuZnVuY3Rpb24gaW5zZXJ0Q2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBhdEluZGV4KSB7XG4gIGlmICggYXRJbmRleCA9PT0gdm9pZCAwICkgYXRJbmRleCA9IC0xO1xuXG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHBhcmVudE5vZGUubWV0YSAmJiB0eXBlb2YgcGFyZW50Tm9kZS5tZXRhLmluc2VydENoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHBhcmVudE5vZGUubWV0YS5pbnNlcnRDaGlsZChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGF0SW5kZXgpXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLm1ldGEuc2tpcEFkZFRvRG9tKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgcGFyZW50VmlldyA9IHBhcmVudE5vZGUubmF0aXZlVmlldztcbiAgdmFyIGNoaWxkVmlldyA9IGNoaWxkTm9kZS5uYXRpdmVWaWV3O1xuXG4gIGlmIChpc0xheW91dChwYXJlbnRWaWV3KSkge1xuICAgIGlmIChjaGlsZFZpZXcucGFyZW50ID09PSBwYXJlbnRWaWV3KSB7XG4gICAgICB2YXIgaW5kZXggPSBwYXJlbnRWaWV3LmdldENoaWxkSW5kZXgoY2hpbGRWaWV3KTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcGFyZW50Vmlldy5yZW1vdmVDaGlsZChjaGlsZFZpZXcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXRJbmRleCAhPT0gLTEpIHtcbiAgICAgIHBhcmVudFZpZXcuaW5zZXJ0Q2hpbGQoY2hpbGRWaWV3LCBhdEluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Vmlldy5hZGRDaGlsZChjaGlsZFZpZXcpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnRlbnRWaWV3KHBhcmVudFZpZXcpKSB7XG4gICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgcGFyZW50Vmlldy5fYWRkVmlldyhjaGlsZFZpZXcsIGF0SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRWaWV3LmNvbnRlbnQgPSBjaGlsZFZpZXc7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmVudFZpZXcgJiYgcGFyZW50Vmlldy5fYWRkQ2hpbGRGcm9tQnVpbGRlcikge1xuICAgIHBhcmVudFZpZXcuX2FkZENoaWxkRnJvbUJ1aWxkZXIoXG4gICAgICBjaGlsZE5vZGUuX25hdGl2ZVZpZXcuY29uc3RydWN0b3IubmFtZSxcbiAgICAgIGNoaWxkVmlld1xuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlKSB7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHBhcmVudE5vZGUubWV0YSAmJiB0eXBlb2YgcGFyZW50Tm9kZS5tZXRhLnJlbW92ZUNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHBhcmVudE5vZGUubWV0YS5yZW1vdmVDaGlsZChwYXJlbnROb2RlLCBjaGlsZE5vZGUpXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLm1ldGEuc2tpcEFkZFRvRG9tKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgcGFyZW50VmlldyA9IHBhcmVudE5vZGUubmF0aXZlVmlldztcbiAgdmFyIGNoaWxkVmlldyA9IGNoaWxkTm9kZS5uYXRpdmVWaWV3O1xuXG4gIGlmIChpc0xheW91dChwYXJlbnRWaWV3KSkge1xuICAgIHBhcmVudFZpZXcucmVtb3ZlQ2hpbGQoY2hpbGRWaWV3KTtcbiAgfSBlbHNlIGlmIChpc0NvbnRlbnRWaWV3KHBhcmVudFZpZXcpKSB7XG4gICAgaWYgKHBhcmVudFZpZXcuY29udGVudCA9PT0gY2hpbGRWaWV3KSB7XG4gICAgICBwYXJlbnRWaWV3LmNvbnRlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgIHBhcmVudFZpZXcuX3JlbW92ZVZpZXcoY2hpbGRWaWV3KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNWaWV3KHBhcmVudFZpZXcpKSB7XG4gICAgcGFyZW50Vmlldy5fcmVtb3ZlVmlldyhjaGlsZFZpZXcpO1xuICB9XG59XG5cbnZhciBYTUxfQVRUUklCVVRFUyA9IE9iamVjdC5mcmVlemUoW1xuICAnc3R5bGUnLFxuICAncm93cycsXG4gICdjb2x1bW5zJyxcbiAgJ2ZvbnRBdHRyaWJ1dGVzJ1xuXSk7XG5cbnZhciBWaWV3Tm9kZSA9IGZ1bmN0aW9uIFZpZXdOb2RlKCkge1xuICB0aGlzLm5vZGVUeXBlID0gbnVsbDtcbiAgdGhpcy5fdGFnTmFtZSA9IG51bGw7XG4gIHRoaXMucGFyZW50Tm9kZSA9IG51bGw7XG4gIHRoaXMuY2hpbGROb2RlcyA9IFtdO1xuICB0aGlzLnByZXZTaWJsaW5nID0gbnVsbDtcbiAgdGhpcy5uZXh0U2libGluZyA9IG51bGw7XG5cbiAgdGhpcy5fb3duZXJEb2N1bWVudCA9IG51bGw7XG4gIHRoaXMuX25hdGl2ZVZpZXcgPSBudWxsO1xuICB0aGlzLl9tZXRhID0gbnVsbDtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgKiBtYWtlIHZ1ZSBoYXBweSA6KVxuICAgKi9cbiAgdGhpcy5oYXNBdHRyaWJ1dGUgPSB0aGlzLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9O1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQyID0geyB0YWdOYW1lOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGZpcnN0Q2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbGFzdENoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG5hdGl2ZVZpZXc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbWV0YTogeyBjb25maWd1cmFibGU6IHRydWUgfSxvd25lckRvY3VtZW50OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5WaWV3Tm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHJldHVybiAoKHRoaXMuY29uc3RydWN0b3IubmFtZSkgKyBcIihcIiArICh0aGlzLnRhZ05hbWUpICsgXCIpXCIpXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi50YWdOYW1lLnNldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHRoaXMuX3RhZ05hbWUgPSBub3JtYWxpemVFbGVtZW50TmFtZShuYW1lKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLnRhZ05hbWUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fdGFnTmFtZVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIuZmlyc3RDaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoID8gdGhpcy5jaGlsZE5vZGVzWzBdIDogbnVsbFxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIubGFzdENoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGhcbiAgICA/IHRoaXMuY2hpbGROb2Rlc1t0aGlzLmNoaWxkTm9kZXMubGVuZ3RoIC0gMV1cbiAgICA6IG51bGxcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLm5hdGl2ZVZpZXcuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fbmF0aXZlVmlld1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIubmF0aXZlVmlldy5zZXQgPSBmdW5jdGlvbiAodmlldykge1xuICBpZiAodGhpcy5fbmF0aXZlVmlldykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IG92ZXJyaWRlIG5hdGl2ZSB2aWV3LlwiKVxuICB9XG5cbiAgdGhpcy5fbmF0aXZlVmlldyA9IHZpZXc7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5tZXRhLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX21ldGEpIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YVxuICB9XG5cbiAgcmV0dXJuICh0aGlzLl9tZXRhID0gZ2V0Vmlld01ldGEodGhpcy50YWdOYW1lKSlcbn07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5vd25lckRvY3VtZW50LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX293bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5fb3duZXJEb2N1bWVudFxuICB9XG5cbiAgdmFyIGVsID0gdGhpcztcbiAgd2hpbGUgKChlbCA9IGVsLnBhcmVudE5vZGUpLm5vZGVUeXBlICE9PSA5KSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgcmV0dXJuICh0aGlzLl9vd25lckRvY3VtZW50ID0gZWwpXG59O1xuXG5WaWV3Tm9kZS5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMubmF0aXZlVmlld1trZXldXG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZSAoa2V5LCB2YWx1ZSkge1xuICB2YXIgcmVmID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9wbGF0Zm9ybScpO1xuICAgIHZhciBpc0FuZHJvaWQgPSByZWYuaXNBbmRyb2lkO1xuICAgIHZhciBpc0lPUyA9IHJlZi5pc0lPUztcbiAgdmFyIG52ID0gdGhpcy5uYXRpdmVWaWV3O1xuXG4gIHRyeSB7XG4gICAgaWYgKFhNTF9BVFRSSUJVVEVTLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgIG52W2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZGV0ZWN0IGV4cGFuZGFibGUgYXR0cnMgZm9yIGJvb2xlYW4gdmFsdWVzXG4gICAgICAvLyBTZWUgaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1wcm9wcy5odG1sI1Bhc3NpbmctYS1Cb29sZWFuXG4gICAgICBpZiAoXG4gICAgICAgIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdXRpbHMvdHlwZXMnKS5pc0Jvb2xlYW4obnZba2V5XSkgJiZcbiAgICAgICAgdmFsdWUgPT09ICcnXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBbmRyb2lkICYmIGtleS5zdGFydHNXaXRoKCdhbmRyb2lkOicpKSB7XG4gICAgICAgIHNldFZhbHVlKG52LCBrZXkuc3Vic3RyKDgpLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzSU9TICYmIGtleS5zdGFydHNXaXRoKCdpb3M6JykpIHtcbiAgICAgICAgc2V0VmFsdWUobnYsIGtleS5zdWJzdHIoNCksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5LmVuZHNXaXRoKCcuZGVjb2RlJykpIHtcbiAgICAgICAgc2V0VmFsdWUoXG4gICAgICAgICAgbnYsXG4gICAgICAgICAga2V5LnNsaWNlKDAsIC03KSxcbiAgICAgICAgICByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3htbCcpLlhtbFBhcnNlci5fZGVyZWZlcmVuY2VFbnRpdGllcyhcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VmFsdWUobnYsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZVxuICB9XG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24gc2V0U3R5bGUgKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAoISh2YWx1ZSA9IHZhbHVlLnRyaW0oKSkubGVuZ3RoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvcGVydHkuZW5kc1dpdGgoJ0FsaWduJykpIHtcbiAgICAvLyBOYXRpdmVTY3JpcHQgdXNlcyBBbGlnbm1lbnQgaW5zdGVhZCBvZiBBbGlnbiwgdGhpcyBlbnN1cmVzIHRoYXQgdGV4dC1hbGlnbiB3b3Jrc1xuICAgIHByb3BlcnR5ICs9ICdtZW50JztcbiAgfVxuICB0aGlzLm5hdGl2ZVZpZXcuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnNldFRleHQgPSBmdW5jdGlvbiBzZXRUZXh0ICh0ZXh0KSB7XG4gIGlmICh0aGlzLm5vZGVUeXBlID09PSAzKSB7XG4gICAgdGhpcy5wYXJlbnROb2RlLnNldFRleHQodGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RleHQnLCB0ZXh0KTtcbiAgfVxufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZpZXdOb2RlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lciAoZXZlbnQsIGhhbmRsZXIpIHtcbiAgdGhpcy5uYXRpdmVWaWV3Lm9uKGV2ZW50LCBoYW5kbGVyKTtcbn07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5WaWV3Tm9kZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIgKGV2ZW50KSB7XG4gIHRoaXMubmF0aXZlVmlldy5vZmYoZXZlbnQpO1xufTtcblxuVmlld05vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZSAoY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIGlmICghY2hpbGROb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgaW5zZXJ0IGNoaWxkLlwiKVxuICB9XG5cbiAgLy8gaW4gc29tZSByYXJlIGNhc2VzIGluc2VydEJlZm9yZSBpcyBjYWxsZWQgd2l0aCBhIG51bGwgcmVmZXJlbmNlTm9kZVxuICAvLyB0aGlzIG1ha2VzIHN1cmUgdGhhdCBpdCBnZXQncyBhcHBlbmRlZCBhcyB0aGUgbGFzdCBjaGlsZFxuICBpZiAoIXJlZmVyZW5jZU5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjaGlsZE5vZGUpXG4gIH1cblxuICBpZiAocmVmZXJlbmNlTm9kZS5wYXJlbnROb2RlICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDYW4ndCBpbnNlcnQgY2hpbGQsIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBub2RlIGhhcyBhIGRpZmZlcmVudCBwYXJlbnQuXCJcbiAgICApXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLnBhcmVudE5vZGUgJiYgY2hpbGROb2RlLnBhcmVudE5vZGUgIT09IHRoaXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNhbid0IGluc2VydCBjaGlsZCwgYmVjYXVzZSBpdCBhbHJlYWR5IGhhcyBhIGRpZmZlcmVudCBwYXJlbnQuXCJcbiAgICApXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLnBhcmVudE5vZGUgPT09IHRoaXMpIDtcblxuICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihyZWZlcmVuY2VOb2RlKTtcblxuICBjaGlsZE5vZGUucGFyZW50Tm9kZSA9IHRoaXM7XG4gIGNoaWxkTm9kZS5uZXh0U2libGluZyA9IHJlZmVyZW5jZU5vZGU7XG4gIGNoaWxkTm9kZS5wcmV2U2libGluZyA9IHRoaXMuY2hpbGROb2Rlc1tpbmRleCAtIDFdO1xuXG4gIHJlZmVyZW5jZU5vZGUucHJldlNpYmxpbmcgPSBjaGlsZE5vZGU7XG4gIHRoaXMuY2hpbGROb2Rlcy5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkTm9kZSk7XG5cbiAgaW5zZXJ0Q2hpbGQodGhpcywgY2hpbGROb2RlLCBpbmRleCk7XG59O1xuXG5WaWV3Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiBhcHBlbmRDaGlsZCAoY2hpbGROb2RlKSB7XG4gIGlmICghY2hpbGROb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgYXBwZW5kIGNoaWxkLlwiKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5wYXJlbnROb2RlICYmIGNoaWxkTm9kZS5wYXJlbnROb2RlICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDYW4ndCBhcHBlbmQgY2hpbGQsIGJlY2F1c2UgaXQgYWxyZWFkeSBoYXMgYSBkaWZmZXJlbnQgcGFyZW50LlwiXG4gICAgKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5wYXJlbnROb2RlID09PSB0aGlzKSA7XG5cbiAgY2hpbGROb2RlLnBhcmVudE5vZGUgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmxhc3RDaGlsZCkge1xuICAgIGNoaWxkTm9kZS5wcmV2U2libGluZyA9IHRoaXMubGFzdENoaWxkO1xuICAgIHRoaXMubGFzdENoaWxkLm5leHRTaWJsaW5nID0gY2hpbGROb2RlO1xuICB9XG5cbiAgdGhpcy5jaGlsZE5vZGVzLnB1c2goY2hpbGROb2RlKTtcblxuICBpbnNlcnRDaGlsZCh0aGlzLCBjaGlsZE5vZGUsIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggLSAxKTtcbn07XG5cblZpZXdOb2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkJDEgKGNoaWxkTm9kZSkge1xuICBpZiAoIWNoaWxkTm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlbW92ZSBjaGlsZC5cIilcbiAgfVxuXG4gIGlmICghY2hpbGROb2RlLnBhcmVudE5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCByZW1vdmUgY2hpbGQsIGJlY2F1c2UgaXQgaGFzIG5vIHBhcmVudC5cIilcbiAgfVxuXG4gIGlmIChjaGlsZE5vZGUucGFyZW50Tm9kZSAhPT0gdGhpcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlbW92ZSBjaGlsZCwgYmVjYXVzZSBpdCBoYXMgYSBkaWZmZXJlbnQgcGFyZW50LlwiKVxuICB9XG5cbiAgY2hpbGROb2RlLnBhcmVudE5vZGUgPSBudWxsO1xuXG4gIGlmIChjaGlsZE5vZGUucHJldlNpYmxpbmcpIHtcbiAgICBjaGlsZE5vZGUucHJldlNpYmxpbmcubmV4dFNpYmxpbmcgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gIH1cblxuICBpZiAoY2hpbGROb2RlLm5leHRTaWJsaW5nKSB7XG4gICAgY2hpbGROb2RlLm5leHRTaWJsaW5nLnByZXZTaWJsaW5nID0gY2hpbGROb2RlLnByZXZTaWJsaW5nO1xuICB9XG5cbiAgLy8gcmVzZXQgdGhlIHByZXZTaWJsaW5nIGFuZCBuZXh0U2libGluZy4gSWYgbm90LCBhIGtlZXAtYWxpdmVkIGNvbXBvbmVudCB3aWxsXG4gIC8vIHN0aWxsIGhhdmUgYSBmaWxsZWQgbmV4dFNpYmxpbmcgYXR0cmlidXRlIHNvIHZ1ZSB3aWxsIG5vdFxuICAvLyBpbnNlcnQgdGhlIG5vZGUgYWdhaW4gdG8gdGhlIHBhcmVudC4gU2VlICMyMjBcbiAgY2hpbGROb2RlLnByZXZTaWJsaW5nID0gbnVsbDtcbiAgY2hpbGROb2RlLm5leHRTaWJsaW5nID0gbnVsbDtcblxuICB0aGlzLmNoaWxkTm9kZXMgPSB0aGlzLmNoaWxkTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlICE9PSBjaGlsZE5vZGU7IH0pO1xuXG4gIHJlbW92ZUNoaWxkKHRoaXMsIGNoaWxkTm9kZSk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmlld05vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMiApO1xuXG52YXIgVlVFX0VMRU1FTlRfUkVGID0gJ19fdnVlX2VsZW1lbnRfcmVmX18nO1xuXG52YXIgRWxlbWVudE5vZGUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3Tm9kZSkge1xuICBmdW5jdGlvbiBFbGVtZW50Tm9kZSh0YWdOYW1lKSB7XG4gICAgVmlld05vZGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSAxO1xuICAgIHRoaXMudGFnTmFtZSA9IHRhZ05hbWU7XG5cbiAgICB2YXIgdmlld0NsYXNzID0gZ2V0Vmlld0NsYXNzKHRhZ05hbWUpO1xuICAgIHRoaXMuX25hdGl2ZVZpZXcgPSBuZXcgdmlld0NsYXNzKCk7XG4gICAgdGhpcy5fbmF0aXZlVmlld1tWVUVfRUxFTUVOVF9SRUZdID0gdGhpcztcbiAgfVxuXG4gIGlmICggVmlld05vZGUgKSBFbGVtZW50Tm9kZS5fX3Byb3RvX18gPSBWaWV3Tm9kZTtcbiAgRWxlbWVudE5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVmlld05vZGUgJiYgVmlld05vZGUucHJvdG90eXBlICk7XG4gIEVsZW1lbnROb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVsZW1lbnROb2RlO1xuXG4gIEVsZW1lbnROb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIGFwcGVuZENoaWxkIChjaGlsZE5vZGUpIHtcbiAgICBWaWV3Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQuY2FsbCh0aGlzLCBjaGlsZE5vZGUpO1xuXG4gICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgdGhpcy5zZXRUZXh0KGNoaWxkTm9kZS50ZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgRWxlbWVudE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZSAoY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgVmlld05vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZS5jYWxsKHRoaXMsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSk7XG5cbiAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICB0aGlzLnNldFRleHQoY2hpbGROb2RlLnRleHQpO1xuICAgIH1cbiAgfTtcblxuICBFbGVtZW50Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoY2hpbGROb2RlKSB7XG4gICAgVmlld05vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkLmNhbGwodGhpcywgY2hpbGROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHRoaXMuc2V0VGV4dCgnJyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBFbGVtZW50Tm9kZTtcbn0oVmlld05vZGUpKTtcblxudmFyIENvbW1lbnROb2RlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRWxlbWVudE5vZGUpIHtcbiAgZnVuY3Rpb24gQ29tbWVudE5vZGUodGV4dCkge1xuICAgIEVsZW1lbnROb2RlLmNhbGwodGhpcywgJ2NvbW1lbnQnKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSA4O1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gIH1cblxuICBpZiAoIEVsZW1lbnROb2RlICkgQ29tbWVudE5vZGUuX19wcm90b19fID0gRWxlbWVudE5vZGU7XG4gIENvbW1lbnROb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEVsZW1lbnROb2RlICYmIEVsZW1lbnROb2RlLnByb3RvdHlwZSApO1xuICBDb21tZW50Tm9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb21tZW50Tm9kZTtcblxuICByZXR1cm4gQ29tbWVudE5vZGU7XG59KEVsZW1lbnROb2RlKSk7XG5cbnZhciBUZXh0Tm9kZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFZpZXdOb2RlKSB7XG4gIGZ1bmN0aW9uIFRleHROb2RlKHRleHQpIHtcbiAgICBWaWV3Tm9kZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5ub2RlVHlwZSA9IDM7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcblxuICAgIHRoaXMuX21ldGEgPSB7XG4gICAgICBza2lwQWRkVG9Eb206IHRydWVcbiAgICB9O1xuICB9XG5cbiAgaWYgKCBWaWV3Tm9kZSApIFRleHROb2RlLl9fcHJvdG9fXyA9IFZpZXdOb2RlO1xuICBUZXh0Tm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBWaWV3Tm9kZSAmJiBWaWV3Tm9kZS5wcm90b3R5cGUgKTtcbiAgVGV4dE5vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dE5vZGU7XG5cbiAgVGV4dE5vZGUucHJvdG90eXBlLnNldFRleHQgPSBmdW5jdGlvbiBzZXRUZXh0ICh0ZXh0KSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLnBhcmVudE5vZGUuc2V0VGV4dCh0ZXh0KTtcbiAgfTtcblxuICByZXR1cm4gVGV4dE5vZGU7XG59KFZpZXdOb2RlKSk7XG5cbnZhciBEb2N1bWVudE5vZGUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3Tm9kZSkge1xuICBmdW5jdGlvbiBEb2N1bWVudE5vZGUoKSB7XG4gICAgVmlld05vZGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSA5O1xuICAgIHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbmV3IEVsZW1lbnROb2RlKCdkb2N1bWVudCcpO1xuXG4gICAgLy8gbWFrZSBzdGF0aWMgbWV0aG9kcyBhY2Nlc3NpYmxlIHZpYSB0aGlzXG4gICAgdGhpcy5jcmVhdGVDb21tZW50ID0gdGhpcy5jb25zdHJ1Y3Rvci5jcmVhdGVDb21tZW50O1xuICAgIHRoaXMuY3JlYXRlRWxlbWVudCA9IHRoaXMuY29uc3RydWN0b3IuY3JlYXRlRWxlbWVudDtcbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnROUyA9IHRoaXMuY29uc3RydWN0b3IuY3JlYXRlRWxlbWVudE5TO1xuICAgIHRoaXMuY3JlYXRlVGV4dE5vZGUgPSB0aGlzLmNvbnN0cnVjdG9yLmNyZWF0ZVRleHROb2RlO1xuICB9XG5cbiAgaWYgKCBWaWV3Tm9kZSApIERvY3VtZW50Tm9kZS5fX3Byb3RvX18gPSBWaWV3Tm9kZTtcbiAgRG9jdW1lbnROb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFZpZXdOb2RlICYmIFZpZXdOb2RlLnByb3RvdHlwZSApO1xuICBEb2N1bWVudE5vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9jdW1lbnROb2RlO1xuXG4gIERvY3VtZW50Tm9kZS5jcmVhdGVDb21tZW50ID0gZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICAgIHJldHVybiBuZXcgQ29tbWVudE5vZGUodGV4dClcbiAgfTtcblxuICBEb2N1bWVudE5vZGUuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKHRhZ05hbWUpIHtcbiAgICByZXR1cm4gbmV3IEVsZW1lbnROb2RlKHRhZ05hbWUpXG4gIH07XG5cbiAgRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnROUyA9IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50Tm9kZShuYW1lc3BhY2UgKyAnOicgKyB0YWdOYW1lKVxuICB9O1xuXG4gIERvY3VtZW50Tm9kZS5jcmVhdGVUZXh0Tm9kZSA9IGZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0Tm9kZSh0ZXh0KVxuICB9O1xuXG4gIHJldHVybiBEb2N1bWVudE5vZGU7XG59KFZpZXdOb2RlKSk7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gbWFrZU1hcCgndGVtcGxhdGUnLCB0cnVlKTtcblxudmFyIF9WdWU7XG5cbmZ1bmN0aW9uIHNldFZ1ZShWdWUpIHtcbiAgX1Z1ZSA9IFZ1ZTtcbn1cblxudmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBmdW5jdGlvbihlbCkge1xuICByZXR1cm4gZ2V0Vmlld01ldGEoZWwpLmNhbkJlTGVmdE9wZW5UYWdcbn07XG5cbnZhciBpc1VuYXJ5VGFnID0gZnVuY3Rpb24oZWwpIHtcbiAgcmV0dXJuIGdldFZpZXdNZXRhKGVsKS5pc1VuYXJ5VGFnXG59O1xuXG5mdW5jdGlvbiBtdXN0VXNlUHJvcCgpIHtcbiAgLy8gY29uc29sZS5sb2coJ211c3RVc2VQcm9wJylcbn1cblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlKGVsKSB7XG4gIHJldHVybiBnZXRWaWV3TWV0YShlbCkudGFnTmFtZXNwYWNlXG59XG5cbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuICFpc0tub3duVmlldyhlbClcbn1cblxudmFyIFZVRV9WRVJTSU9OID0gcHJvY2Vzcy5lbnYuVlVFX1ZFUlNJT04gfHwgJzIuNi4xMCc7XG52YXIgTlNfVlVFX1ZFUlNJT04gPSBwcm9jZXNzLmVudi5OU19WVUVfVkVSU0lPTiB8fCAnMi40LjAnO1xuXG52YXIgaW5mb1RyYWNlID0gb25jZShmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKFxuICAgIFwiTmF0aXZlU2NyaXB0LVZ1ZSBoYXMgXFxcIlZ1ZS5jb25maWcuc2lsZW50XFxcIiBzZXQgdG8gdHJ1ZSwgdG8gc2VlIG91dHB1dCBsb2dzIHNldCBpdCB0byBmYWxzZS5cIlxuICApO1xufSk7XG5cbmZ1bmN0aW9uIHRyYWNlKG1lc3NhZ2UpIHtcbiAgaWYgKF9WdWUgJiYgX1Z1ZS5jb25maWcuc2lsZW50KSB7XG4gICAgcmV0dXJuIGluZm9UcmFjZSgpXG4gIH1cblxuICBjb25zb2xlLmxvZyhcbiAgICAoXCJ7TlNWdWUgKFZ1ZTogXCIgKyBWVUVfVkVSU0lPTiArIFwiIHwgTlNWdWU6IFwiICsgTlNfVlVFX1ZFUlNJT04gKyBcIil9IC0+IFwiICsgbWVzc2FnZSlcbiAgKTtcbn1cblxudmFyIG5hbWVzcGFjZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEodGFnTmFtZSwgdm5vZGUpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlRWxlbWVudChcIiArIHRhZ05hbWUgKyBcIilcIikpO1xuICByZXR1cm4gRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICB0cmFjZSgoXCJDcmVhdGVFbGVtZW50TlMoXCIgKyBuYW1lc3BhY2UgKyBcIiNcIiArIHRhZ05hbWUgKyBcIilcIikpO1xuICByZXR1cm4gRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHRleHQpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlVGV4dE5vZGUoXCIgKyB0ZXh0ICsgXCIpXCIpKTtcbiAgcmV0dXJuIERvY3VtZW50Tm9kZS5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50KHRleHQpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlQ29tbWVudChcIiArIHRleHQgKyBcIilcIikpO1xuXG4gIHJldHVybiBEb2N1bWVudE5vZGUuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICB0cmFjZSgoXCJJbnNlcnRCZWZvcmUoXCIgKyBwYXJlbnROb2RlICsgXCIsIFwiICsgbmV3Tm9kZSArIFwiLCBcIiArIHJlZmVyZW5jZU5vZGUgKyBcIilcIikpO1xuICByZXR1cm4gcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSlcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQkMShub2RlLCBjaGlsZCkge1xuICB0cmFjZSgoXCJSZW1vdmVDaGlsZChcIiArIG5vZGUgKyBcIiwgXCIgKyBjaGlsZCArIFwiKVwiKSk7XG4gIHJldHVybiBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKVxufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlLCBjaGlsZCkge1xuICB0cmFjZSgoXCJBcHBlbmRDaGlsZChcIiArIG5vZGUgKyBcIiwgXCIgKyBjaGlsZCArIFwiKVwiKSk7XG5cbiAgcmV0dXJuIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpXG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUobm9kZSkge1xuICB0cmFjZSgoXCJQYXJlbnROb2RlKFwiICsgbm9kZSArIFwiKSAtPiBcIiArIChub2RlLnBhcmVudE5vZGUpKSk7XG5cbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyhub2RlKSB7XG4gIHRyYWNlKChcIk5leHRTaWJsaW5nKFwiICsgbm9kZSArIFwiKSAtPiBcIiArIChub2RlLm5leHRTaWJsaW5nKSkpO1xuXG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUoZWxlbWVudE5vZGUpIHtcbiAgdHJhY2UoKFwiVGFnTmFtZShcIiArIGVsZW1lbnROb2RlICsgXCIpIC0+IFwiICsgKGVsZW1lbnROb2RlLnRhZ05hbWUpKSk7XG5cbiAgcmV0dXJuIGVsZW1lbnROb2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQobm9kZSwgdGV4dCkge1xuICB0cmFjZSgoXCJTZXRUZXh0Q29udGVudChcIiArIG5vZGUgKyBcIiwgXCIgKyB0ZXh0ICsgXCIpXCIpKTtcblxuICBub2RlLnNldFRleHQodGV4dCk7XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShub2RlLCBrZXksIHZhbCkge1xuICB0cmFjZSgoXCJTZXRBdHRyaWJ1dGUoXCIgKyBub2RlICsgXCIsIFwiICsga2V5ICsgXCIsIFwiICsgdmFsICsgXCIpXCIpKTtcblxuICBub2RlLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgIG5hbWVzcGFjZU1hcDogbmFtZXNwYWNlTWFwLFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gICAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQkMSxcbiAgICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gICAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gICAgc2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGUsXG4gICAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oe1xuICBub2RlT3BzOiBub2RlT3BzLFxuICBtb2R1bGVzOiBtb2R1bGVzXG59KTtcblxudmFyIGhlID0ge1xuICBkZWNvZGU6IGRlY29kZVxufTtcblxuZnVuY3Rpb24gZGVjb2RlKGh0bWwpIHtcbiAgLy8gdG9kbz9cbiAgcmV0dXJuIGh0bWxcbn1cblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnJDEgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicidcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxudmFyIGNhbkJlTGVmdE9wZW5UYWckMSA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJ1xuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBhdHRyaWJ1dGUgPSAvXlxccyooW15cXHNcIic8PlxcLz1dKykoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIG5jbmFtZSA9IFwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKlwiO1xudmFyIHFuYW1lQ2FwdHVyZSA9IFwiKCg/OlwiICsgbmNuYW1lICsgXCJcXFxcOik/XCIgKyBuY25hbWUgKyBcIilcIjtcbnZhciBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKChcIl48XCIgKyBxbmFtZUNhcHR1cmUpKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgoXCJePFxcXFwvXCIgKyBxbmFtZUNhcHR1cmUgKyBcIltePl0qPlwiKSk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxudmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGRlY29kaW5nTWFwID0ge1xuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJmFtcDsnOiAnJicsXG4gICcmIzEwOyc6ICdcXG4nLFxuICAnJiM5Oyc6ICdcXHQnLFxuICAnJiMzOTsnOiBcIidcIlxufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbnZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbi8vICM1OTkyXG52YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRLZWVwQ29tbWVudCkge1xuICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0LCBpbmRleCAtIHRleHQubGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgcmVzdCQxID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgIG9wdGlvbnMud2FybigoXCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFxcXCJcIiArIGh0bWwgKyBcIlxcXCJcIiksIHsgc3RhcnQ6IGluZGV4ICsgaHRtbC5sZW5ndGggfSk7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChkeW5hbWljQXJnQXR0cmlidXRlKSB8fCBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIGF0dHIuZW5kID0gaW5kZXg7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICA6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXM7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBhcmdzLnN0YXJ0ICsgYXJnc1swXS5tYXRjaCgvXlxccyovKS5sZW5ndGg7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGFyZ3MuZW5kO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzLCBzdGFydDogbWF0Y2guc3RhcnQsIGVuZDogbWF0Y2guZW5kIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgKGkgPiBwb3MgfHwgIXRhZ05hbWUpICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIiksXG4gICAgICAgICAgICB7IHN0YXJ0OiBzdGFja1tpXS5zdGFydCwgZW5kOiBzdGFja1tpXS5lbmQgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbmZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7XG4gIHZhciBpblNpbmdsZSA9IGZhbHNlO1xuICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgdmFyIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcbiAgdmFyIGluUmVnZXggPSBmYWxzZTtcbiAgdmFyIGN1cmx5ID0gMDtcbiAgdmFyIHNxdWFyZSA9IDA7XG4gIHZhciBwYXJlbiA9IDA7XG4gIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICB2YXIgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVycztcblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJldiA9IGM7XG4gICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChpblNpbmdsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgeyBpbkRvdWJsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICBpZiAoYyA9PT0gMHg2MCAmJiBwcmV2ICE9PSAweDVDKSB7IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5SZWdleCkge1xuICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYyA9PT0gMHg3QyAmJiAvLyBwaXBlXG4gICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3QyAmJlxuICAgICAgIWN1cmx5ICYmICFzcXVhcmUgJiYgIXBhcmVuXG4gICAgKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGZpcnN0IGZpbHRlciwgZW5kIG9mIGV4cHJlc3Npb25cbiAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAweDIyOiBpbkRvdWJsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gXCJcbiAgICAgICAgY2FzZSAweDI3OiBpblNpbmdsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gJ1xuICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgIGNhc2UgMHgyODogcGFyZW4rKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIChcbiAgICAgICAgY2FzZSAweDI5OiBwYXJlbi0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKVxuICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgIGNhc2UgMHg1RDogc3F1YXJlLS07IGJyZWFrICAgICAgICAgICAgICAgIC8vIF1cbiAgICAgICAgY2FzZSAweDdCOiBjdXJseSsrOyBicmVhayAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gMHgyZikgeyAvLyAvXG4gICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgIHZhciBwID0gKHZvaWQgMCk7XG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgcHJldiBjaGFyXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuICAgICAgICAgIGlmIChwICE9PSAnICcpIHsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcCB8fCAhdmFsaWREaXZpc2lvbkNoYXJSRS50ZXN0KHApKSB7XG4gICAgICAgICAgaW5SZWdleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgcHVzaEZpbHRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgKGZpbHRlcnMgfHwgKGZpbHRlcnMgPSBbXSkpLnB1c2goZXhwLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpKTtcbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHByZXNzaW9uXG59XG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyAoYXJncyAhPT0gJyknID8gJywnICsgYXJncyA6IGFyZ3MpKVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2c7XG52YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbnZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG4gIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcbn0pO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgdGV4dCxcbiAgZGVsaW1pdGVyc1xuKSB7XG4gIHZhciB0YWdSRSA9IGRlbGltaXRlcnMgPyBidWlsZFJlZ2V4KGRlbGltaXRlcnMpIDogZGVmYXVsdFRhZ1JFO1xuICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG4gIHZhciBtYXRjaCwgaW5kZXgsIHRva2VuVmFsdWU7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSk7XG4gICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gICAgfVxuICAgIC8vIHRhZyB0b2tlblxuICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcbiAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgcmF3VG9rZW5zLnB1c2goeyAnQGJpbmRpbmcnOiBleHAgfSk7XG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gIH1cbiAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4KSk7XG4gICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICB0b2tlbnM6IHJhd1Rva2Vuc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuXG4gIHZhciBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgIFwiOiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIHZhciBhc3NpZ25tZW50ID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgZWwubW9kZWwgPSB7XG4gICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICBjYWxsYmFjazogKFwiZnVuY3Rpb24gKFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKSB7XCIgKyBhc3NpZ25tZW50ICsgXCJ9XCIpXG4gIH07XG59XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlIChcbiAgdmFsdWUsXG4gIGFzc2lnbm1lbnRcbikge1xuICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gIGlmIChyZXMua2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiJHNldChcIiArIChyZXMuZXhwKSArIFwiLCBcIiArIChyZXMua2V5KSArIFwiLCBcIiArIGFzc2lnbm1lbnQgKyBcIilcIilcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGEgdi1tb2RlbCBleHByZXNzaW9uIGludG8gYSBiYXNlIHBhdGggYW5kIGEgZmluYWwga2V5IHNlZ21lbnQuXG4gKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBQb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtrZXldXG4gKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAqIC0gdGVzdFtcImFcIl1ba2V5XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2tleV1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAqXG4gKi9cblxudmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvcHVsbC83NzMwXG4gIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICB2YWwgPSB2YWwudHJpbSgpO1xuICBsZW4gPSB2YWwubGVuZ3RoO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICBpbmRleCQxID0gdmFsLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKGluZGV4JDEgPiAtMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwuc2xpY2UoMCwgaW5kZXgkMSksXG4gICAgICAgIGtleTogJ1wiJyArIHZhbC5zbGljZShpbmRleCQxICsgMSkgKyAnXCInXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLFxuICAgICAgICBrZXk6IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHIgPSB2YWw7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnLCByYW5nZSkge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgY29tcGlsZXJdOiBcIiArIG1zZykpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG5mdW5jdGlvbiBhZGRSYXdBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgaXNEeW5hbWljQXJnLFxuICBtb2RpZmllcnMsXG4gIHJhbmdlXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd05hbWU6IHJhd05hbWUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGFyZzogYXJnLFxuICAgIGlzRHluYW1pY0FyZzogaXNEeW5hbWljQXJnLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgOiBzeW1ib2wgKyBuYW1lIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50LFxuICB3YXJuLFxuICByYW5nZSxcbiAgZHluYW1pY1xuKSB7XG4gIG1vZGlmaWVycyA9IG1vZGlmaWVycyB8fCBlbXB0eU9iamVjdDtcbiAgLy8gd2FybiBwcmV2ZW50IGFuZCBwYXNzaXZlIG1vZGlmaWVyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuICYmXG4gICAgbW9kaWZpZXJzLnByZXZlbnQgJiYgbW9kaWZpZXJzLnBhc3NpdmVcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdwYXNzaXZlIGFuZCBwcmV2ZW50IGNhblxcJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArXG4gICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChtb2RpZmllcnMucmlnaHQpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ2NvbnRleHRtZW51JztcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vZGlmaWVycy5taWRkbGUpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J21vdXNldXAnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICBpZiAobW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIGlmIChtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCd+JywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChtb2RpZmllcnMucGFzc2l2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMucGFzc2l2ZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cblxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG5cbiAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHtcbiAgICBuZXdIYW5kbGVyLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGV2ZW50c1tuYW1lXTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIGltcG9ydGFudCA/IGhhbmRsZXJzLnVuc2hpZnQobmV3SGFuZGxlcikgOiBoYW5kbGVycy5wdXNoKG5ld0hhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG4gICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcbiAgfVxuXG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWVcbikge1xuICByZXR1cm4gZWwucmF3QXR0cnNNYXBbJzonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFsndi1iaW5kOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJlbW92ZUZyb21NYXBcbikge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlbW92ZUZyb21NYXApIHtcbiAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGxpc3RbaV07XG4gICAgaWYgKG5hbWUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiBhdHRyXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoXG4gIGl0ZW0sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICB9XG4gICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1cbn1cblxuLyogICovXG5cbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgZGlyUkUgPSAvXnYtfF5AfF46LztcbnZhciBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG52YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbnZhciBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbnZhciBhcmdSRSA9IC86KC4qKSQvO1xudmFyIGJpbmRSRSA9IC9eOnxeXFwufF52LWJpbmQ6LztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLlxcXV0rKD89W15cXF1dKiQpL2c7XG5cbnZhciBzbG90UkUgPSAvXnYtc2xvdCg6fCQpfF4jLztcblxudmFyIGxpbmVCcmVha1JFID0gL1tcXHJcXG5dLztcbnZhciB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbnZhciBpbnZhbGlkQXR0cmlidXRlUkUgPSAvW1xcc1wiJzw+XFwvPV0vO1xuXG52YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpO1xuXG52YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9IFwiX2VtcHR5X1wiO1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDE7XG52YXIgZGVsaW1pdGVycztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHByZVRyYW5zZm9ybXM7XG52YXIgcG9zdFRyYW5zZm9ybXM7XG52YXIgcGxhdGZvcm1Jc1ByZVRhZztcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xudmFyIG1heWJlQ29tcG9uZW50O1xuXG5mdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgdGFnLFxuICBhdHRycyxcbiAgcGFyZW50XG4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxLFxuICAgIHRhZzogdGFnLFxuICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgcmF3QXR0cnNNYXA6IHt9LFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDEgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgbWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICB2YXIgcm9vdDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgdmFyIGluUHJlID0gZmFsc2U7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgd2FybiQxKG1zZywgcmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuICAgIGlmICghaW5WUHJlICYmICFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyB0cmVlIG1hbmFnZW1lbnRcbiAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgIGlmIChyb290LmlmICYmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNsb3RTY29wZSkge1xuICAgICAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgLy8gZmluZCBpdCBhcyB0aGUgcHJldiBub2RlLlxuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdcImRlZmF1bHRcIidcbiAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgLy8gZmlsdGVyIG91dCBzY29wZWQgc2xvdHNcbiAgICBlbGVtZW50LmNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICEoYykuc2xvdFNjb3BlOyB9KTtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG5cbiAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvc3RUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkge1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICBpZiAoIWluUHJlKSB7XG4gICAgICB2YXIgbGFzdE5vZGU7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIChsYXN0Tm9kZSA9IGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmXG4gICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLicsXG4gICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgd2Fybjogd2FybiQxLFxuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSwgc3RhcnQkMSwgZW5kKSB7XG4gICAgICAvLyBjaGVjayBuYW1lc3BhY2UuXG4gICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgIC8vIGhhbmRsZSBJRSBzdmcgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICBhdHRycyA9IGd1YXJkSUVTVkdCdWcoYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGVsZW1lbnQuc3RhcnQgPSBzdGFydCQxO1xuICAgICAgICAgIGVsZW1lbnQuZW5kID0gZW5kO1xuICAgICAgICAgIGVsZW1lbnQucmF3QXR0cnNNYXAgPSBlbGVtZW50LmF0dHJzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1bXVsYXRlZCwgYXR0cikge1xuICAgICAgICAgICAgY3VtdWxhdGVkW2F0dHIubmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgcmV0dXJuIGN1bXVsYXRlZFxuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgaWYgKGludmFsaWRBdHRyaWJ1dGVSRS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIGR5bmFtaWMgYXJndW1lbnQgZXhwcmVzc2lvbjogYXR0cmlidXRlIG5hbWVzIGNhbm5vdCBjb250YWluIFwiICtcbiAgICAgICAgICAgICAgXCJzcGFjZXMsIHF1b3RlcywgPCwgPiwgLyBvciA9LlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUuaW5kZXhPZihcIltcIiksXG4gICAgICAgICAgICAgICAgZW5kOiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZvcmJpZGRlblRhZyhlbGVtZW50KSAmJiAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSkge1xuICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQxKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXNcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGVsZW1lbnQuZW5kID0gZW5kJDE7XG4gICAgICB9XG4gICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgIChcInRleHQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZU9wdGlvbikge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgLy8gbGluZSBicmVhaywgb3RoZXJ3aXNlIGNvbmRlbnNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gJyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gcHJlc2VydmVXaGl0ZXNwYWNlID8gJyAnIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBpZiAoIWluUHJlICYmIHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBjb25kZW5zZSBjb25zZWN1dGl2ZSB3aGl0ZXNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hpdGVzcGFjZVJFJDEsICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCAhY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAvLyBhZGRpbmcgYW55dGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBpc0NvbW1lbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZm9yKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGVsLml0ZXJhdG9yMiB8fCBlbC5pdGVyYXRvcjE7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgXCJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLlwiLFxuICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSxcbiAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbC5rZXkgPSBleHA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JlZiAoZWwpIHtcbiAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gIGlmIChyZWYpIHtcbiAgICBlbC5yZWYgPSByZWY7XG4gICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICB2YXIgZXhwO1xuICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7XG4gICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoWzJdKSB7XG4gICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDEoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgY2hpbGRyZW5baV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbi8vIGhhbmRsZSBjb250ZW50IGJlaW5nIHBhc3NlZCB0byBhIGNvbXBvbmVudCBhcyBzbG90LFxuLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG5mdW5jdGlvbiBwcm9jZXNzU2xvdENvbnRlbnQgKGVsKSB7XG4gIHZhciBzbG90U2NvcGU7XG4gIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICBzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2NvcGUnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJ0aGUgXFxcInNjb3BlXFxcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgXCIgK1xuICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgXCJkZW5vdGUgc2NvcGVkIHNsb3RzLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGVsLnNsb3RUYXJnZXQgfHwgZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGUgdi1zbG90PiBjYW4gb25seSBhcHBlYXIgYXQgdGhlIHJvb3QgbGV2ZWwgaW5zaWRlIFwiICtcbiAgICAgICAgICAgICAgXCJ0aGUgcmVjZWl2aW5nIHRoZSBjb21wb25lbnRcIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyk7XG4gICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljID0gcmVmLmR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RUYXJnZXQgPSBuYW1lO1xuICAgICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47IC8vIGZvcmNlIGl0IGludG8gYSBzY29wZWQgc2xvdCBmb3IgcGVyZlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB2LXNsb3Qgb24gY29tcG9uZW50LCBkZW5vdGVzIGRlZmF1bHQgc2xvdFxuICAgICAgdmFyIHNsb3RCaW5kaW5nJDEgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZyQxKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFtYXliZUNvbXBvbmVudChlbCkpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJ2LXNsb3QgY2FuIG9ubHkgYmUgdXNlZCBvbiBjb21wb25lbnRzIG9yIDx0ZW1wbGF0ZT4uXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJUbyBhdm9pZCBzY29wZSBhbWJpZ3VpdHksIHRoZSBkZWZhdWx0IHNsb3Qgc2hvdWxkIGFsc28gdXNlIFwiICtcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGU+IHN5bnRheCB3aGVuIHRoZXJlIGFyZSBvdGhlciBuYW1lZCBzbG90cy5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiB0byBpdHMgZGVmYXVsdCBzbG90XG4gICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTtcbiAgICAgICAgdmFyIHJlZiQxID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmckMSk7XG4gICAgICAgIHZhciBuYW1lJDEgPSByZWYkMS5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYztcbiAgICAgICAgdmFyIHNsb3RDb250YWluZXIgPSBzbG90c1tuYW1lJDFdID0gY3JlYXRlQVNURWxlbWVudCgndGVtcGxhdGUnLCBbXSwgZWwpO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXQgPSBuYW1lJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBpZiAoIWMuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmckMS52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuO1xuICAgICAgICAvLyByZW1vdmUgY2hpbGRyZW4gYXMgdGhleSBhcmUgcmV0dXJuZWQgZnJvbSBzY29wZWRTbG90cyBub3dcbiAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgLy8gbWFyayBlbCBub24tcGxhaW4gc28gZGF0YSBnZXRzIGdlbmVyYXRlZFxuICAgICAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykge1xuICB2YXIgbmFtZSA9IGJpbmRpbmcubmFtZS5yZXBsYWNlKHNsb3RSRSwgJycpO1xuICBpZiAoIW5hbWUpIHtcbiAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHtcbiAgICAgIG5hbWUgPSAnZGVmYXVsdCc7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKVxuICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAvLyBzdGF0aWMgbmFtZVxuICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG59XG5cbi8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHNcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmtleSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuICAgICAgICBcImFuZCBjYW4gcG9zc2libHkgZXhwYW5kIGludG8gbXVsdGlwbGUgZWxlbWVudHMuIFwiICtcbiAgICAgICAgXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIixcbiAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudCAoZWwpIHtcbiAgdmFyIGJpbmRpbmc7XG4gIGlmICgoYmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnaXMnKSkpIHtcbiAgICBlbC5jb21wb25lbnQgPSBiaW5kaW5nO1xuICB9XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAnaW5saW5lLXRlbXBsYXRlJykgIT0gbnVsbCkge1xuICAgIGVsLmlubGluZVRlbXBsYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc3luYykge1xuICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMSxcbiAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChoeXBoZW5hdGUobmFtZSkgIT09IGNhbWVsaXplKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGh5cGhlbmF0ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHdhcm4kMSxcbiAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBoYW5kbGVyIHcvIGR5bmFtaWMgZXZlbnQgbmFtZVxuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcIlxcXCJ1cGRhdGU6XFxcIisoXCIgKyBuYW1lICsgXCIpXCIpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDEsXG4gICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKVxuICAgICAgICApKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDEsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgIC8vIHBhcnNlIGFyZ1xuICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTtcbiAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiZcbiAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQxKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1N0YXRpY0tleTtcbnZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc7XG5cbnZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkID0gY2FjaGVkKGdlblN0YXRpY0tleXMkMSk7XG5cbi8qKlxuICogR29hbCBvZiB0aGUgb3B0aW1pemVyOiB3YWxrIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgQVNUIHRyZWVcbiAqIGFuZCBkZXRlY3Qgc3ViLXRyZWVzIHRoYXQgYXJlIHB1cmVseSBzdGF0aWMsIGkuZS4gcGFydHMgb2ZcbiAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG4gKlxuICogT25jZSB3ZSBkZXRlY3QgdGhlc2Ugc3ViLXRyZWVzLCB3ZSBjYW46XG4gKlxuICogMS4gSG9pc3QgdGhlbSBpbnRvIGNvbnN0YW50cywgc28gdGhhdCB3ZSBubyBsb25nZXIgbmVlZCB0b1xuICogICAgY3JlYXRlIGZyZXNoIG5vZGVzIGZvciB0aGVtIG9uIGVhY2ggcmUtcmVuZGVyO1xuICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplIChyb290LCBvcHRpb25zKSB7XG4gIGlmICghcm9vdCkgeyByZXR1cm4gfVxuICBpc1N0YXRpY0tleSA9IGdlblN0YXRpY0tleXNDYWNoZWQob3B0aW9ucy5zdGF0aWNLZXlzIHx8ICcnKTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuICBtYXJrU3RhdGljJDEocm9vdCk7XG4gIC8vIHNlY29uZCBwYXNzOiBtYXJrIHN0YXRpYyByb290cy5cbiAgbWFya1N0YXRpY1Jvb3RzKHJvb3QsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyQxIChrZXlzKSB7XG4gIHJldHVybiBtYWtlTWFwKFxuICAgICd0eXBlLHRhZyxhdHRyc0xpc3QsYXR0cnNNYXAscGxhaW4scGFyZW50LGNoaWxkcmVuLGF0dHJzLHN0YXJ0LGVuZCxyYXdBdHRyc01hcCcgK1xuICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICApXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMkMSAobm9kZSkge1xuICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpO1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG4gICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2Rlc1xuICAgIC8vIDIuIHN0YXRpYyBzbG90IGNvbnRlbnQgZmFpbHMgZm9yIGhvdC1yZWxvYWRpbmdcbiAgICBpZiAoXG4gICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJlxuICAgICAgbm9kZS50YWcgIT09ICdzbG90JyAmJlxuICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBtYXJrU3RhdGljJDEoY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgdmFyIGJsb2NrID0gbm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaztcbiAgICAgICAgbWFya1N0YXRpYyQxKGJsb2NrKTtcbiAgICAgICAgaWYgKCFibG9jay5zdGF0aWMpIHtcbiAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyAobm9kZSwgaXNJbkZvcikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUuc3RhdGljIHx8IG5vZGUub25jZSkge1xuICAgICAgbm9kZS5zdGF0aWNJbkZvciA9IGlzSW5Gb3I7XG4gICAgfVxuICAgIC8vIEZvciBhIG5vZGUgdG8gcXVhbGlmeSBhcyBhIHN0YXRpYyByb290LCBpdCBzaG91bGQgaGF2ZSBjaGlsZHJlbiB0aGF0XG4gICAgLy8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcbiAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guXG4gICAgaWYgKG5vZGUuc3RhdGljICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICEoXG4gICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzXG4gICAgKSkge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gdHJ1ZTtcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrLCBpc0luRm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuICAgICFub2RlLmhhc0JpbmRpbmdzICYmIC8vIG5vIGR5bmFtaWMgYmluZGluZ3NcbiAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlXG4gICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cbiAgICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGNvbXBvbmVudFxuICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJlxuICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkge1xuICB3aGlsZSAobm9kZS5wYXJlbnQpIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbnZhciBmbkV4cFJFID0gL14oW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqKD86W1xcdyRdKyk/XFxzKlxcKC87XG52YXIgZm5JbnZva2VSRSA9IC9cXChbXildKj9cXCk7KiQvO1xudmFyIHNpbXBsZVBhdGhSRSA9IC9eW0EtWmEtel8kXVtcXHckXSooPzpcXC5bQS1aYS16XyRdW1xcdyRdKnxcXFsnW14nXSo/J118XFxbXCJbXlwiXSo/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqJC87XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5Q29kZSBhbGlhc2VzXG52YXIga2V5Q29kZXMgPSB7XG4gIGVzYzogMjcsXG4gIHRhYjogOSxcbiAgZW50ZXI6IDEzLFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgbGVmdDogMzcsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gICdkZWxldGUnOiBbOCwgNDZdXG59O1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleSBhbGlhc2VzXG52YXIga2V5TmFtZXMgPSB7XG4gIC8vICM3ODgwOiBJRTExIGFuZCBFZGdlIHVzZSBgRXNjYCBmb3IgRXNjYXBlIGtleSBuYW1lLlxuICBlc2M6IFsnRXNjJywgJ0VzY2FwZSddLFxuICB0YWI6ICdUYWInLFxuICBlbnRlcjogJ0VudGVyJyxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgU3BhY2ViYXJgIGZvciBTcGFjZSBrZXkgbmFtZS5cbiAgc3BhY2U6IFsnICcsICdTcGFjZWJhciddLFxuICAvLyAjNzgwNjogSUUxMSB1c2VzIGtleSBuYW1lcyB3aXRob3V0IGBBcnJvd2AgcHJlZml4IGZvciBhcnJvdyBrZXlzLlxuICB1cDogWydVcCcsICdBcnJvd1VwJ10sXG4gIGxlZnQ6IFsnTGVmdCcsICdBcnJvd0xlZnQnXSxcbiAgcmlnaHQ6IFsnUmlnaHQnLCAnQXJyb3dSaWdodCddLFxuICBkb3duOiBbJ0Rvd24nLCAnQXJyb3dEb3duJ10sXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYERlbGAgZm9yIERlbGV0ZSBrZXkgbmFtZS5cbiAgJ2RlbGV0ZSc6IFsnQmFja3NwYWNlJywgJ0RlbGV0ZScsICdEZWwnXVxufTtcblxuLy8gIzQ4Njg6IG1vZGlmaWVycyB0aGF0IHByZXZlbnQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbGlzdGVuZXJcbi8vIG5lZWQgdG8gZXhwbGljaXRseSByZXR1cm4gbnVsbCBzbyB0aGF0IHdlIGNhbiBkZXRlcm1pbmUgd2hldGhlciB0byByZW1vdmVcbi8vIHRoZSBsaXN0ZW5lciBmb3IgLm9uY2VcbnZhciBnZW5HdWFyZCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHsgcmV0dXJuIChcImlmKFwiICsgY29uZGl0aW9uICsgXCIpcmV0dXJuIG51bGw7XCIpOyB9O1xuXG52YXIgbW9kaWZpZXJDb2RlID0ge1xuICBzdG9wOiAnJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOycsXG4gIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICBzZWxmOiBnZW5HdWFyZChcIiRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0XCIpLFxuICBjdHJsOiBnZW5HdWFyZChcIiEkZXZlbnQuY3RybEtleVwiKSxcbiAgc2hpZnQ6IGdlbkd1YXJkKFwiISRldmVudC5zaGlmdEtleVwiKSxcbiAgYWx0OiBnZW5HdWFyZChcIiEkZXZlbnQuYWx0S2V5XCIpLFxuICBtZXRhOiBnZW5HdWFyZChcIiEkZXZlbnQubWV0YUtleVwiKSxcbiAgbGVmdDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMFwiKSxcbiAgbWlkZGxlOiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAxXCIpLFxuICByaWdodDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMlwiKVxufTtcblxuZnVuY3Rpb24gZ2VuSGFuZGxlcnMgKFxuICBldmVudHMsXG4gIGlzTmF0aXZlXG4pIHtcbiAgdmFyIHByZWZpeCA9IGlzTmF0aXZlID8gJ25hdGl2ZU9uOicgOiAnb246JztcbiAgdmFyIHN0YXRpY0hhbmRsZXJzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNIYW5kbGVycyA9IFwiXCI7XG4gIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pO1xuICAgIGlmIChldmVudHNbbmFtZV0gJiYgZXZlbnRzW25hbWVdLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNIYW5kbGVycyArPSBuYW1lICsgXCIsXCIgKyBoYW5kbGVyQ29kZSArIFwiLFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNIYW5kbGVycyArPSBcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCI6XCIgKyBoYW5kbGVyQ29kZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNIYW5kbGVycyA9IFwie1wiICsgKHN0YXRpY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNIYW5kbGVycykge1xuICAgIHJldHVybiBwcmVmaXggKyBcIl9kKFwiICsgc3RhdGljSGFuZGxlcnMgKyBcIixbXCIgKyAoZHluYW1pY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJlZml4ICsgc3RhdGljSGFuZGxlcnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5IYW5kbGVyIChoYW5kbGVyKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiAnZnVuY3Rpb24oKXt9J1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG4gIH1cblxuICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25JbnZvY2F0aW9uID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZS5yZXBsYWNlKGZuSW52b2tlUkUsICcnKSk7XG5cbiAgaWYgKCFoYW5kbGVyLm1vZGlmaWVycykge1xuICAgIGlmIChpc01ldGhvZFBhdGggfHwgaXNGdW5jdGlvbkV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBoYW5kbGVyLnZhbHVlXG4gICAgfVxuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgKGlzRnVuY3Rpb25JbnZvY2F0aW9uID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpKSA6IGhhbmRsZXIudmFsdWUpICsgXCJ9XCIpIC8vIGlubGluZSBzdGF0ZW1lbnRcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29kZSA9ICcnO1xuICAgIHZhciBnZW5Nb2RpZmllckNvZGUgPSAnJztcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgaWYgKG1vZGlmaWVyQ29kZVtrZXldKSB7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBtb2RpZmllckNvZGVba2V5XTtcbiAgICAgICAgLy8gbGVmdC9yaWdodFxuICAgICAgICBpZiAoa2V5Q29kZXNba2V5XSkge1xuICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2V4YWN0Jykge1xuICAgICAgICB2YXIgbW9kaWZpZXJzID0gKGhhbmRsZXIubW9kaWZpZXJzKTtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IGdlbkd1YXJkKFxuICAgICAgICAgIFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gIW1vZGlmaWVyc1trZXlNb2RpZmllcl07IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gKFwiJGV2ZW50LlwiICsga2V5TW9kaWZpZXIgKyBcIktleVwiKTsgfSlcbiAgICAgICAgICAgIC5qb2luKCd8fCcpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBjb2RlICs9IGdlbktleUZpbHRlcihrZXlzKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIG1vZGlmaWVycyBsaWtlIHByZXZlbnQgYW5kIHN0b3AgZ2V0IGV4ZWN1dGVkIGFmdGVyIGtleSBmaWx0ZXJpbmdcbiAgICBpZiAoZ2VuTW9kaWZpZXJDb2RlKSB7XG4gICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTtcbiAgICB9XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gaXNNZXRob2RQYXRoXG4gICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKCRldmVudClcIilcbiAgICAgIDogaXNGdW5jdGlvbkV4cHJlc3Npb25cbiAgICAgICAgPyAoXCJyZXR1cm4gKFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIpKCRldmVudClcIilcbiAgICAgICAgOiBpc0Z1bmN0aW9uSW52b2NhdGlvblxuICAgICAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpKVxuICAgICAgICAgIDogaGFuZGxlci52YWx1ZTtcbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIGNvZGUgKyBoYW5kbGVyQ29kZSArIFwifVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykge1xuICByZXR1cm4gKFxuICAgIC8vIG1ha2Ugc3VyZSB0aGUga2V5IGZpbHRlcnMgb25seSBhcHBseSB0byBLZXlib2FyZEV2ZW50c1xuICAgIC8vICM5NDQxOiBjYW4ndCB1c2UgJ2tleUNvZGUnIGluICRldmVudCBiZWNhdXNlIENocm9tZSBhdXRvZmlsbCBmaXJlcyBmYWtlXG4gICAgLy8ga2V5IGV2ZW50cyB0aGF0IGRvIG5vdCBoYXZlIGtleUNvZGUgcHJvcGVydHkuLi5cbiAgICBcImlmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmXCIgK1xuICAgIChrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpKSArIFwiKXJldHVybiBudWxsO1wiXG4gIClcbn1cblxuZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICB9XG4gIHZhciBrZXlDb2RlID0ga2V5Q29kZXNba2V5XTtcbiAgdmFyIGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICByZXR1cm4gKFxuICAgIFwiX2soJGV2ZW50LmtleUNvZGUsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArIFwiLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5Q29kZSkpICsgXCIsXCIgK1xuICAgIFwiJGV2ZW50LmtleSxcIiArXG4gICAgXCJcIiArIChKU09OLnN0cmluZ2lmeShrZXlOYW1lKSkgK1xuICAgIFwiKVwiXG4gIClcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG9uIChlbCwgZGlyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRpci5tb2RpZmllcnMpIHtcbiAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgfVxuICBlbC53cmFwTGlzdGVuZXJzID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcIl9nKFwiICsgY29kZSArIFwiLFwiICsgKGRpci52YWx1ZSkgKyBcIilcIik7IH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgXCIsXCIgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAndHJ1ZScgOiAnZmFsc2UnKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMuc3luYyA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgb246IG9uLFxuICBiaW5kOiBiaW5kJDEsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxuXG5cblxuXG52YXIgQ29kZWdlblN0YXRlID0gZnVuY3Rpb24gQ29kZWdlblN0YXRlIChvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMud2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdGhpcy50cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Db2RlJyk7XG4gIHRoaXMuZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICB0aGlzLmRpcmVjdGl2ZXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlRGlyZWN0aXZlcyksIG9wdGlvbnMuZGlyZWN0aXZlcyk7XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICB0aGlzLm1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuICB0aGlzLm9uY2VJZCA9IDA7XG4gIHRoaXMuc3RhdGljUmVuZGVyRm5zID0gW107XG4gIHRoaXMucHJlID0gZmFsc2U7XG59O1xuXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGUgKFxuICBhc3QsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICB2YXIgY29kZSA9IGFzdCA/IGdlbkVsZW1lbnQoYXN0LCBzdGF0ZSkgOiAnX2MoXCJkaXZcIiknO1xuICByZXR1cm4ge1xuICAgIHJlbmRlcjogKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyBjb2RlICsgXCJ9XCIpLFxuICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwsIHN0YXRlKSB7XG4gIGlmIChlbC5wYXJlbnQpIHtcbiAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTtcbiAgfVxuXG4gIGlmIChlbC5zdGF0aWNSb290ICYmICFlbC5zdGF0aWNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkge1xuICAgIHJldHVybiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpXG4gIH0gZWxzZSB7XG4gICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICB2YXIgY29kZTtcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwsIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBpZiAoIWVsLnBsYWluIHx8IChlbC5wcmUgJiYgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpKSkge1xuICAgICAgICBkYXRhID0gZ2VuRGF0YShlbCwgc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgLy8gU29tZSBlbGVtZW50cyAodGVtcGxhdGVzKSBuZWVkIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBpbnNpZGUgb2YgYSB2LXByZVxuICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICB2YXIgb3JpZ2luYWxQcmVTdGF0ZSA9IHN0YXRlLnByZTtcbiAgaWYgKGVsLnByZSkge1xuICAgIHN0YXRlLnByZSA9IGVsLnByZTtcbiAgfVxuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRlLndhcm4oXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkgJiZcbiAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICFlbC5rZXlcbiAgKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyBhbGlhcyArIFwiIGluIFwiICsgZXhwICsgXCJcXFwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggXCIgK1xuICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXSxcbiAgICAgIHRydWUgLyogdGlwICovXG4gICAgKTtcbiAgfVxuXG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwsIHN0YXRlKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczpcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCIsXCI7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gXCJkb21Qcm9wczpcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCIsXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNsb3RUYXJnZXQgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLCBlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICB9XG4gIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gIGlmIChlbC5tb2RlbCkge1xuICAgIGRhdGEgKz0gXCJtb2RlbDp7dmFsdWU6XCIgKyAoZWwubW9kZWwudmFsdWUpICsgXCIsY2FsbGJhY2s6XCIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgXCIsZXhwcmVzc2lvbjpcIiArIChlbC5tb2RlbC5leHByZXNzaW9uKSArIFwifSxcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LlxuICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgZGF0YSA9IFwiX2IoXCIgKyBkYXRhICsgXCIsXFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCIgKyAoZ2VuUHJvcHMoZWwuZHluYW1pY0F0dHJzKSkgKyBcIilcIjtcbiAgfVxuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICAvLyB2LW9uIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcExpc3RlbmVycykge1xuICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgc3RhdGUud2Fybik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcIiArIChkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IChcIlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSkpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgfVxuICB9XG4gIGlmIChoYXNSdW50aW1lKSB7XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwsIHN0YXRlKSB7XG4gIHZhciBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLFxuICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICk7XG4gIH1cbiAgaWYgKGFzdCAmJiBhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICBlbCxcbiAgc2xvdHMsXG4gIHN0YXRlXG4pIHtcbiAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgXCJzdGFibGVcIiwgdGhpcyBhbGxvd3MgY2hpbGRcbiAgLy8gY29tcG9uZW50cyB3aXRoIG9ubHkgc2NvcGVkIHNsb3RzIHRvIHNraXAgZm9yY2VkIHVwZGF0ZXMgZnJvbSBwYXJlbnQuXG4gIC8vIGJ1dCBpbiBzb21lIGNhc2VzIHdlIGhhdmUgdG8gYmFpbC1vdXQgb2YgdGhpcyBvcHRpbWl6YXRpb25cbiAgLy8gZm9yIGV4YW1wbGUgaWYgdGhlIHNsb3QgY29udGFpbnMgZHluYW1pYyBuYW1lcywgaGFzIHYtaWYgb3Igdi1mb3Igb24gdGhlbS4uLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9IGVsLmZvciB8fCBPYmplY3Qua2V5cyhzbG90cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHNsb3QgPSBzbG90c1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBzbG90LnNsb3RUYXJnZXREeW5hbWljIHx8XG4gICAgICBzbG90LmlmIHx8XG4gICAgICBzbG90LmZvciB8fFxuICAgICAgY29udGFpbnNTbG90Q2hpbGQoc2xvdCkgLy8gaXMgcGFzc2luZyBkb3duIHNsb3QgZnJvbSBwYXJlbnQgd2hpY2ggbWF5IGJlIGR5bmFtaWNcbiAgICApXG4gIH0pO1xuXG4gIC8vICM5NTM0OiBpZiBhIGNvbXBvbmVudCB3aXRoIHNjb3BlZCBzbG90cyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBicmFuY2gsXG4gIC8vIGl0J3MgcG9zc2libGUgZm9yIHRoZSBzYW1lIGNvbXBvbmVudCB0byBiZSByZXVzZWQgYnV0IHdpdGggZGlmZmVyZW50XG4gIC8vIGNvbXBpbGVkIHNsb3QgY29udGVudC4gVG8gYXZvaWQgdGhhdCwgd2UgZ2VuZXJhdGUgYSB1bmlxdWUga2V5IGJhc2VkIG9uXG4gIC8vIHRoZSBnZW5lcmF0ZWQgY29kZSBvZiBhbGwgdGhlIHNsb3QgY29udGVudHMuXG4gIHZhciBuZWVkc0tleSA9ICEhZWwuaWY7XG5cbiAgLy8gT1Igd2hlbiBpdCBpcyBpbnNpZGUgYW5vdGhlciBzY29wZWQgc2xvdCBvciB2LWZvciAodGhlIHJlYWN0aXZpdHkgbWF5IGJlXG4gIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSlcbiAgLy8gIzk0MzgsICM5NTA2XG4gIC8vIFRPRE86IHRoaXMgY2FuIGJlIGZ1cnRoZXIgb3B0aW1pemVkIGJ5IHByb3Blcmx5IGFuYWx5emluZyBpbi1zY29wZSBiaW5kaW5nc1xuICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuXG4gIGlmICghbmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocGFyZW50LnNsb3RTY29wZSAmJiBwYXJlbnQuc2xvdFNjb3BlICE9PSBlbXB0eVNsb3RTY29wZVRva2VuKSB8fFxuICAgICAgICBwYXJlbnQuZm9yXG4gICAgICApIHtcbiAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LmlmKSB7XG4gICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGdlbmVyYXRlZFNsb3RzID0gT2JqZWN0LmtleXMoc2xvdHMpXG4gICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KHNsb3RzW2tleV0sIHN0YXRlKTsgfSlcbiAgICAuam9pbignLCcpO1xuXG4gIHJldHVybiAoXCJzY29wZWRTbG90czpfdShbXCIgKyBnZW5lcmF0ZWRTbG90cyArIFwiXVwiICsgKG5lZWRzRm9yY2VVcGRhdGUgPyBcIixudWxsLHRydWVcIiA6IFwiXCIpICsgKCFuZWVkc0ZvcmNlVXBkYXRlICYmIG5lZWRzS2V5ID8gKFwiLG51bGwsZmFsc2UsXCIgKyAoaGFzaChnZW5lcmF0ZWRTbG90cykpKSA6IFwiXCIpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MTtcbiAgdmFyIGkgPSBzdHIubGVuZ3RoO1xuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuICByZXR1cm4gaGFzaCA+Pj4gMFxufVxuXG5mdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBlbC5jaGlsZHJlbi5zb21lKGNvbnRhaW5zU2xvdENoaWxkKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCAmJiAhaXNMZWdhY3lTeW50YXgpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90LCBcIm51bGxcIilcbiAgfVxuICBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdClcbiAgfVxuICB2YXIgc2xvdFNjb3BlID0gZWwuc2xvdFNjb3BlID09PSBlbXB0eVNsb3RTY29wZVRva2VuXG4gICAgPyBcIlwiXG4gICAgOiBTdHJpbmcoZWwuc2xvdFNjb3BlKTtcbiAgdmFyIGZuID0gXCJmdW5jdGlvbihcIiArIHNsb3RTY29wZSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGVsLmlmICYmIGlzTGVnYWN5U3ludGF4XG4gICAgICAgID8gKFwiKFwiICsgKGVsLmlmKSArIFwiKT9cIiArIChnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnKSArIFwiOnVuZGVmaW5lZFwiKVxuICAgICAgICA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCdcbiAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiO1xuICAvLyByZXZlcnNlIHByb3h5IHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gIHZhciByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBcIlwiIDogXCIscHJveHk6dHJ1ZVwiO1xuICByZXR1cm4gKFwie2tleTpcIiArIChlbC5zbG90VGFyZ2V0IHx8IFwiXFxcImRlZmF1bHRcXFwiXCIpICsgXCIsZm46XCIgKyBmbiArIHJldmVyc2VQcm94eSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGVsJDEuZm9yICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgZWwkMS50YWcgIT09ICdzbG90J1xuICAgICkge1xuICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gY2hlY2tTa2lwXG4gICAgICAgID8gc3RhdGUubWF5YmVDb21wb25lbnQoZWwkMSkgPyBcIiwxXCIgOiBcIiwwXCJcbiAgICAgICAgOiBcIlwiO1xuICAgICAgcmV0dXJuIChcIlwiICsgKChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKSkgKyBub3JtYWxpemF0aW9uVHlwZSlcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlJDEgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSQxID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUkMSkgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChcbiAgY2hpbGRyZW4sXG4gIG1heWJlQ29tcG9uZW50XG4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWwgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG59XG5cbmZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUsIHN0YXRlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7XG4gIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgfHwgZWwuZHluYW1pY0F0dHJzXG4gICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHtcbiAgICAgICAgLy8gc2xvdCBwcm9wcyBhcmUgY2FtZWxpemVkXG4gICAgICAgIG5hbWU6IGNhbWVsaXplKGF0dHIubmFtZSksXG4gICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLFxuICAgICAgICBkeW5hbWljOiBhdHRyLmR5bmFtaWNcbiAgICAgIH0pOyB9KSlcbiAgICA6IG51bGw7XG4gIHZhciBiaW5kID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZDtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoXG4gIGNvbXBvbmVudE5hbWUsXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhKGVsLCBzdGF0ZSkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblByb3BzIChwcm9wcykge1xuICB2YXIgc3RhdGljUHJvcHMgPSBcIlwiO1xuICB2YXIgZHluYW1pY1Byb3BzID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgdmFyIHZhbHVlID0gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKHByb3AudmFsdWUpO1xuICAgIGlmIChwcm9wLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNQcm9wcyArPSAocHJvcC5uYW1lKSArIFwiLFwiICsgdmFsdWUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljUHJvcHMgKz0gXCJcXFwiXCIgKyAocHJvcC5uYW1lKSArIFwiXFxcIjpcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY1Byb3BzID0gXCJ7XCIgKyAoc3RhdGljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY1Byb3BzKSB7XG4gICAgcmV0dXJuIChcIl9kKFwiICsgc3RhdGljUHJvcHMgKyBcIixbXCIgKyAoZHluYW1pY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YXRpY1Byb3BzXG4gIH1cbn1cblxuLy8gIzM4OTUsICM0MjY4XG5mdW5jdGlvbiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMgKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JylcbiAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jylcbn1cblxuLyogICovXG5cblxuXG4vLyB0aGVzZSBrZXl3b3JkcyBzaG91bGQgbm90IGFwcGVhciBpbnNpZGUgZXhwcmVzc2lvbnMsIGJ1dCBvcGVyYXRvcnMgbGlrZVxuLy8gdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxudmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG5cbi8vIHRoZXNlIHVuYXJ5IG9wZXJhdG9ycyBzaG91bGQgbm90IGJlIHVzZWQgYXMgcHJvcGVydHkvbWV0aG9kIG5hbWVzXG52YXIgdW5hcnlPcGVyYXRvcnNSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RlbGV0ZSx0eXBlb2Ysdm9pZCdcbikuc3BsaXQoJywnKS5qb2luKCdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpfFxcXFxiJykgKyAnXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKScpO1xuXG4vLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG52YXIgc3RyaXBTdHJpbmdSRSA9IC8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nO1xuXG4vLyBkZXRlY3QgcHJvYmxlbWF0aWMgZXhwcmVzc2lvbnMgaW4gYSB0ZW1wbGF0ZVxuZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QsIHdhcm4pIHtcbiAgaWYgKGFzdCkge1xuICAgIGNoZWNrTm9kZShhc3QsIHdhcm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTm9kZSAobm9kZSwgd2Fybikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBub2RlLnJhd0F0dHJzTWFwW25hbWVdO1xuICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG4gICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoXCJ2LWZvcj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICBjaGVja0V2ZW50KHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoZWNrTm9kZShub2RlLmNoaWxkcmVuW2ldLCB3YXJuKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCB3YXJuLCBub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V2ZW50IChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHZhciBzdGlwcGVkID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpO1xuICB2YXIga2V5d29yZE1hdGNoID0gc3RpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdGlwcGVkLmNoYXJBdChrZXl3b3JkTWF0Y2guaW5kZXggLSAxKSAhPT0gJyQnKSB7XG4gICAgd2FybihcbiAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCB1bmFyeSBvcGVyYXRvciBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiIGluIGV4cHJlc3Npb24gXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG4gIGNoZWNrRXhwcmVzc2lvbihleHAsIHRleHQsIHdhcm4sIHJhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWRlbnRpZmllciAoXG4gIGlkZW50LFxuICB0eXBlLFxuICB0ZXh0LFxuICB3YXJuLFxuICByYW5nZVxuKSB7XG4gIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGdW5jdGlvbigoXCJ2YXIgXCIgKyBpZGVudCArIFwiPV9cIikpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oKFwiaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkpLCByYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXhwcmVzc2lvbiAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbigoXCJyZXR1cm4gXCIgKyBleHApKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiXFxuICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgXCJpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgKGUubWVzc2FnZSkgKyBcIiBpblxcblxcblwiICtcbiAgICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgICAgXCIgIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkgKyBcIlxcblwiLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciByYW5nZSA9IDI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgc291cmNlLFxuICBzdGFydCxcbiAgZW5kXG4pIHtcbiAgaWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQgPSAwO1xuICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gc291cmNlLmxlbmd0aDtcblxuICB2YXIgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgMTtcbiAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgIGZvciAodmFyIGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgcmVzLnB1c2goKFwiXCIgKyAoaiArIDEpICsgKHJlcGVhdCQxKFwiIFwiLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpKSArIFwifCAgXCIgKyAobGluZXNbal0pKSk7XG4gICAgICAgIHZhciBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgdmFyIHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydDtcbiAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCIgXCIsIHBhZCkgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGgkMSA9IE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoJDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gcmVwZWF0JDEgKHN0ciwgbikge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmIChuID4gMCkge1xuICAgIHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChuICYgMSkgeyByZXN1bHQgKz0gc3RyOyB9XG4gICAgICBuID4+Pj0gMTtcbiAgICAgIGlmIChuIDw9IDApIHsgYnJlYWsgfVxuICAgICAgc3RyICs9IHN0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGNvZGUpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9ycy5wdXNoKHsgZXJyOiBlcnIsIGNvZGU6IGNvZGUgfSk7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIChjb21waWxlKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gICAgdGVtcGxhdGUsXG4gICAgb3B0aW9ucyxcbiAgICB2bVxuICApIHtcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICB2YXIgd2FybiQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgZGVsZXRlIG9wdGlvbnMud2FybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgJ0l0IHNlZW1zIHlvdSBhcmUgdXNpbmcgdGhlIHN0YW5kYWxvbmUgYnVpbGQgb2YgVnVlLmpzIGluIGFuICcgK1xuICAgICAgICAgICAgJ2Vudmlyb25tZW50IHdpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgdGhhdCBwcm9oaWJpdHMgdW5zYWZlLWV2YWwuICcgK1xuICAgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAgICdyZWxheGluZyB0aGUgcG9saWN5IHRvIGFsbG93IHVuc2FmZS1ldmFsIG9yIHByZS1jb21waWxpbmcgeW91ciAnICtcbiAgICAgICAgICAgICd0ZW1wbGF0ZXMgaW50byByZW5kZXIgZnVuY3Rpb25zLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgY2FjaGVcbiAgICB2YXIga2V5ID0gb3B0aW9ucy5kZWxpbWl0ZXJzXG4gICAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICAgIDogdGVtcGxhdGU7XG4gICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgIHJldHVybiBjYWNoZVtrZXldXG4gICAgfVxuXG4gICAgLy8gY29tcGlsZVxuICAgIHZhciBjb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuXG4gICAgLy8gY2hlY2sgY29tcGlsYXRpb24gZXJyb3JzL3RpcHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBpbGVkLmVycm9ycyAmJiBjb21waWxlZC5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY29tcGlsZWQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyAoZS5tc2cpICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICAgIGdlbmVyYXRlQ29kZUZyYW1lKHRlbXBsYXRlLCBlLnN0YXJ0LCBlLmVuZCksXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmVuZGVyIGZ1bmN0aW9uOlxcblxcblwiICtcbiAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGVyciA9IHJlZi5lcnI7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHJlZi5jb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXJDcmVhdG9yIChiYXNlQ29tcGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXIgKGJhc2VPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciBmaW5hbE9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zKTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0aXBzID0gW107XG5cbiAgICAgIHZhciB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChtc2cpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICAgIHZhciBsZWFkaW5nU3BhY2VMZW5ndGggPSB0ZW1wbGF0ZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGg7XG5cbiAgICAgICAgICB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7IG1zZzogbXNnIH07XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5lbmQgPSByYW5nZS5lbmQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKGRhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIG1vZHVsZXNcbiAgICAgICAgaWYgKG9wdGlvbnMubW9kdWxlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5tb2R1bGVzID1cbiAgICAgICAgICAgIChiYXNlT3B0aW9ucy5tb2R1bGVzIHx8IFtdKS5jb25jYXQob3B0aW9ucy5tb2R1bGVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gZGlyZWN0aXZlc1xuICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLmRpcmVjdGl2ZXMgPSBleHRlbmQoXG4gICAgICAgICAgICBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zLmRpcmVjdGl2ZXMgfHwgbnVsbCksXG4gICAgICAgICAgICBvcHRpb25zLmRpcmVjdGl2ZXNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvcHkgb3RoZXIgb3B0aW9uc1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgIGlmIChrZXkgIT09ICdtb2R1bGVzJyAmJiBrZXkgIT09ICdkaXJlY3RpdmVzJykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gd2FybjtcblxuICAgICAgdmFyIGNvbXBpbGVkID0gYmFzZUNvbXBpbGUodGVtcGxhdGUudHJpbSgpLCBmaW5hbE9wdGlvbnMpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCwgd2Fybik7XG4gICAgICB9XG4gICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICBjb21waWxlZC50aXBzID0gdGlwcztcbiAgICAgIHJldHVybiBjb21waWxlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBjb21waWxlLFxuICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBgY3JlYXRlQ29tcGlsZXJDcmVhdG9yYCBhbGxvd3MgY3JlYXRpbmcgY29tcGlsZXJzIHRoYXQgdXNlIGFsdGVybmF0aXZlXG4vLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4vLyBIZXJlIHdlIGp1c3QgZXhwb3J0IGEgZGVmYXVsdCBjb21waWxlciB1c2luZyB0aGUgZGVmYXVsdCBwYXJ0cy5cbnZhciBjcmVhdGVDb21waWxlciA9IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcihmdW5jdGlvbiBiYXNlQ29tcGlsZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLm9wdGltaXplICE9PSBmYWxzZSkge1xuICAgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIH1cbiAgdmFyIGNvZGUgPSBnZW5lcmF0ZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIGFzdDogYXN0LFxuICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjb2RlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZShlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgaWYgKGV4cHJlc3Npb24pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRpY0NsYXNzKSB7XG4gICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gIH1cbiAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMShlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGNsYXNzXyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxudmFyIG5vcm1hbGl6ZSQxID0gY2FjaGVkKGNhbWVsaXplKTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgdmFyIHJlZiA9IHBhcnNlU3RhdGljU3R5bGUoc3RhdGljU3R5bGUsIG9wdGlvbnMpO1xuICB2YXIgZHluYW1pYyA9IHJlZi5keW5hbWljO1xuICB2YXIgc3R5bGVSZXN1bHQgPSByZWYuc3R5bGVSZXN1bHQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGR5bmFtaWMpIHtcbiAgICB3YXJuKFxuICAgICAgXCJzdHlsZT1cXFwiXCIgKyAoU3RyaW5nKHN0YXRpY1N0eWxlKSkgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICBpZiAoIWR5bmFtaWMgJiYgc3R5bGVSZXN1bHQpIHtcbiAgICBlbC5zdGF0aWNTdHlsZSA9IHN0eWxlUmVzdWx0O1xuICB9XG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfSBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgZWwuc3R5bGVCaW5kaW5nID0gc3R5bGVSZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOlwiICsgKGVsLnN0eWxlQmluZGluZykgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0YXRpY1N0eWxlKHN0YXRpY1N0eWxlLCBvcHRpb25zKSB7XG4gIC8vIFwid2lkdGg6IDIwMHB4OyBoZWlnaHQ6IDIwMHB4O1wiIC0+IHt3aWR0aDogMjAwLCBoZWlnaHQ6IDIwMH1cbiAgLy8gXCJ3aWR0aDogMjAwcHg7IGhlaWdodDoge3t5fX1cIiAtPiB7d2lkdGg6IDIwMCwgaGVpZ2h0OiB5fVxuICB2YXIgZHluYW1pYyA9IGZhbHNlO1xuICB2YXIgc3R5bGVSZXN1bHQgPSAnJztcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgdmFyIHN0eWxlTGlzdCA9IHN0YXRpY1N0eWxlXG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoJzsnKVxuICAgICAgLm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHN0eWxlLnRyaW0oKS5zcGxpdCgnOicpO1xuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBub3JtYWxpemUkMShyZXN1bHRbMF0udHJpbSgpKTtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0WzFdLnRyaW0oKTtcbiAgICAgICAgdmFyIGR5bmFtaWNWYWx1ZSA9IHBhcnNlVGV4dCh2YWx1ZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgaWYgKGR5bmFtaWNWYWx1ZSkge1xuICAgICAgICAgIGR5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBrZXkgKyAnOicgKyBkeW5hbWljVmFsdWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5ICsgJzonICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgICB9KVxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQ7IH0pO1xuICAgIGlmIChzdHlsZUxpc3QubGVuZ3RoKSB7XG4gICAgICBzdHlsZVJlc3VsdCA9ICd7JyArIHN0eWxlTGlzdC5qb2luKCcsJykgKyAnfSc7XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGR5bmFtaWM6IGR5bmFtaWMsIHN0eWxlUmVzdWx0OiBzdHlsZVJlc3VsdCB9XG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQyXG59O1xuXG5mdW5jdGlvbiBwcmVUcmFuc2Zvcm1Ob2RlKGVsKSB7XG4gIHZhciB2Zm9yO1xuXG4gIGlmIChub3JtYWxpemVFbGVtZW50TmFtZShlbC50YWcpID09PSAnbmF0aXZlbGlzdHZpZXcnKSB7XG4gICAgdmZvciA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpO1xuICAgIGRlbGV0ZSBlbC5hdHRyc01hcFsndi1mb3InXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2Zm9yKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIlRoZSB2LWZvciBkaXJlY3RpdmUgaXMgbm90IHN1cHBvcnRlZCBvbiBhIFwiICsgKGVsLnRhZykgKyBcIiwgXCIgK1xuICAgICAgICAgICdVc2UgdGhlIFwiZm9yXCIgYXR0cmlidXRlIGluc3RlYWQuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mICcgK1xuICAgICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyB2Zm9yICsgXCJcXFwiPiB1c2UgPFwiICsgKGVsLnRhZykgKyBcIiBmb3I9XFxcIlwiICsgdmZvciArIFwiXFxcIj4uXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdmb3InKSB8fCB2Zm9yO1xuICBpZiAoIWV4cCkgeyByZXR1cm4gfVxuXG4gIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICBpZiAoIXJlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgZm9yIGV4cHJlc3Npb246IFwiICsgZXhwKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgYWRkUmF3QXR0cihlbCwgJzppdGVtcycsIHJlcy5mb3IpO1xuICBhZGRSYXdBdHRyKGVsLCAnK2FsaWFzJywgcmVzLmFsaWFzKTtcblxuICBpZiAocmVzLml0ZXJhdG9yMSkge1xuICAgIGFkZFJhd0F0dHIoZWwsICcraW5kZXgnLCByZXMuaXRlcmF0b3IxKTtcbiAgfVxufVxuXG52YXIgZm9yXyA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufTtcblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSQxKGVsKSB7XG4gIGlmIChlbC50YWcgIT09ICdyb3V0ZXItdmlldycpIHsgcmV0dXJuIH1cbiAgaWYgKG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsLnBhcmVudC50YWcpID09PSAnbmF0aXZlZnJhbWUnKSB7XG4gICAgYWRkQXR0cihlbC5wYXJlbnQsICdoYXNSb3V0ZXJWaWV3JywgJ3RydWUnKTtcbiAgfVxufVxuXG52YXIgcm91dGVyID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlJDFcbn07XG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUkMihlbCkge1xuICBpZiAoZWwucGFyZW50ICYmIGVsLnBhcmVudC50YWcgPT09ICd2LXRlbXBsYXRlJykge1xuICAgIHZhciBhbGlhcyA9IGVsLnBhcmVudC5wYXJlbnQuYXR0cnNNYXBbJythbGlhcyddIHx8ICdpdGVtJztcbiAgICB2YXIgaW5kZXggPSBlbC5wYXJlbnQucGFyZW50LmF0dHJzTWFwWycraW5kZXgnXSB8fCAnJGluZGV4JztcbiAgICBlbC5zbG90U2NvcGUgPSBidWlsZFNjb3BlU3RyaW5nKGFsaWFzLCBpbmRleCk7XG4gIH1cbn1cblxudmFyIHZUZW1wbGF0ZSQxID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlJDJcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkU2NvcGVTdHJpbmcoYWxpYXMsIGluZGV4KSB7XG4gIHJldHVybiAoXCJ7IFwiICsgYWxpYXMgKyBcIiwgXCIgKyBpbmRleCArIFwiLCAkZXZlbiwgJG9kZCB9XCIpXG59XG5cbi8vIHRyYW5zZm9ybXMgfnRlc3QgLT4gdi12aWV3OnRlc3RcbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMihlbCkge1xuICB2YXIgYXR0ciA9IE9iamVjdC5rZXlzKGVsLmF0dHJzTWFwKS5maW5kKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBhdHRyLnN0YXJ0c1dpdGgoJ34nKTsgfSk7XG5cbiAgaWYgKGF0dHIpIHtcbiAgICB2YXIgYXR0ck5hbWUgPSBhdHRyLnN1YnN0cigxKTtcbiAgICB2YXIgcmVmID0gYXR0ck5hbWUuc3BsaXQoJy4nKTtcbiAgICB2YXIgYXJnID0gcmVmWzBdO1xuICAgIHZhciBtb2RpZmllcnMgPSByZWYuc2xpY2UoMSk7XG4gICAgbW9kaWZpZXJzID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobW9kcywgbW9kKSB7XG4gICAgICBtb2RzW21vZF0gPSB0cnVlO1xuICAgICAgcmV0dXJuIG1vZHNcbiAgICB9LCB7fSk7XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgYXR0ciwgdHJ1ZSk7XG4gICAgYWRkRGlyZWN0aXZlKGVsLCAndmlldycsIChcInYtdmlldzpcIiArIGF0dHJOYW1lKSwgJycsIGFyZywgZmFsc2UsIG1vZGlmaWVycyk7XG4gIH1cbn1cblxudmFyIHZpZXcgPSB7XG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMlxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtjbGFzc18kMSwgc3R5bGUkMSwgdlRlbXBsYXRlJDEsIGZvcl8sIHJvdXRlciwgdmlld107XG5cbmZ1bmN0aW9uIG1vZGVsKGVsLCBkaXIpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEgJiYgaXNLbm93blZpZXcoZWwudGFnKSkge1xuICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgZGlyLnZhbHVlLCBkaXIubW9kaWZpZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBnZW5Db21wb25lbnRNb2RlbChlbCwgZGlyLnZhbHVlLCBkaXIubW9kaWZpZXJzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpIHtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciByZWYkMSA9IGdldFZpZXdNZXRhKGVsLnRhZykubW9kZWw7XG4gIHZhciBwcm9wID0gcmVmJDEucHJvcDtcbiAgdmFyIGV2ZW50ID0gcmVmJDEuZXZlbnQ7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnZhbHVlXCIgKyAodHJpbSA/ICcudHJpbSgpJyA6ICcnKTtcblxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBhZGRBdHRyKGVsLCBwcm9wLCAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxudmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgbW9kZWw6IG1vZGVsXG59O1xuXG52YXIgYmFzZU9wdGlvbnMgPSB7XG4gIG1vZHVsZXM6IG1vZHVsZXMkMSxcbiAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGNhbkJlTGVmdE9wZW5UYWcsXG4gIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2U6IGZhbHNlLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSlcbn07XG5cbnZhciByZWYkMSA9IGNyZWF0ZUNvbXBpbGVyKGJhc2VPcHRpb25zKTtcbnZhciBjb21waWxlVG9GdW5jdGlvbnMgPSByZWYkMS5jb21waWxlVG9GdW5jdGlvbnM7XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwJDEocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbFZpc2liaWxpdHkgPSAoZWwuX192T3JpZ2luYWxWaXNpYmlsaXR5ID1cbiAgICAgIGVsLmdldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScpID09PSAnbm9uZSdcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IGVsLmdldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScpKTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbikge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIG9yaWdpbmFsVmlzaWJpbGl0eSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCd2aXNpYmlsaXR5JywgdmFsdWUgPyBvcmlnaW5hbFZpc2liaWxpdHkgOiAnY29sbGFwc2VkJyk7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIGVsLl9fdk9yaWdpbmFsVmlzaWJpbGl0eSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknLCAnY29sbGFwc2VkJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICd2aXNpYmlsaXR5JyxcbiAgICAgICAgdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbFZpc2liaWxpdHkgOiAnY29sbGFwc2VkJ1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIGVsLl9fdk9yaWdpbmFsVmlzaWJpbGl0eSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmlldyQxID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQoZWwsIHJlZikge1xuICAgIHZhciBhcmcgPSByZWYuYXJnO1xuICAgIHZhciBtb2RpZmllcnMgPSByZWYubW9kaWZpZXJzO1xuXG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGUubmF0aXZlVmlldztcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChtb2RpZmllcnMuYXJyYXkpIHtcbiAgICAgICAgcGFyZW50W2FyZ10gPSAocGFyZW50W2FyZ10gfHwgW10pLnB1c2goZWwubmF0aXZlVmlldyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRbYXJnXSA9IGVsLm5hdGl2ZVZpZXc7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBzaG93OiBzaG93LFxuICB2aWV3OiB2aWV3JDFcbn07XG5cbi8vIEVuc3VyZSBgYXBwbGljYXRpb25gIGFuZCBgZnJhbWVgIG1vZHVsZXMgYXJlIGxvYWRlZFxuXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuVnVlLiRkb2N1bWVudCA9IFZ1ZS5wcm90b3R5cGUuJGRvY3VtZW50ID0gbmV3IERvY3VtZW50Tm9kZSgpO1xuXG5WdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblZ1ZS5yZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckVsZW1lbnQ7XG5cbk9iamVjdC5hc3NpZ24oVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBwYXRjaDtcblxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbihlbCwgaHlkcmF0aW5nKSB7XG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlICYmIHR5cGVvZiB0ZW1wbGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOiAnICsgdGVtcGxhdGUsIHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnMoXG4gICAgICAgIHRlbXBsYXRlLFxuICAgICAgICB7XG4gICAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cblZ1ZS5wcm90b3R5cGUuJHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIEFwcENvbnN0cnVjdG9yID0gVnVlLmV4dGVuZCh0aGlzLiRvcHRpb25zKTtcblxuICAvLyByZWdpc3RlciBOUyBjb21wb25lbnRzIGludG8gVnVlXG4gIE9iamVjdC52YWx1ZXMoZ2V0RWxlbWVudE1hcCgpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIFZ1ZS5jb21wb25lbnQoZW50cnkubWV0YS5jb21wb25lbnQubmFtZSwgZW50cnkubWV0YS5jb21wb25lbnQpO1xuICB9KTtcblxuICBhcHBsaWNhdGlvbi5vbihhcHBsaWNhdGlvbi5sYXVuY2hFdmVudCwgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoc2VsZi4kZWwpIHtcbiAgICAgIHNlbGYuJGRlc3Ryb3koKTtcbiAgICAgIHNlbGYgPSBuZXcgQXBwQ29uc3RydWN0b3IoKTtcbiAgICB9XG5cbiAgICBzZWxmLiRtb3VudCgpO1xuICAgIGFyZ3Mucm9vdCA9IHNlbGYuJGVsLm5hdGl2ZVZpZXc7XG4gIH0pO1xuXG4gIGFwcGxpY2F0aW9uLnJ1bigpO1xufTtcblxuLy8gRGVmaW5lIGEgYG5hdGl2ZVZpZXdgIGdldHRlciBpbiBldmVyeSBOUyB2dWUgaW5zdGFuY2Vcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnbmF0aXZlVmlldycsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLm5hdGl2ZVZpZXdcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIF9maW5kUGFyZW50TW9kYWxFbnRyeSh2bSkge1xuICBpZiAoIXZtKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgZW50cnkgPSB2bS4kcGFyZW50O1xuICB3aGlsZSAoZW50cnkgJiYgZW50cnkuJG9wdGlvbnMubmFtZSAhPT0gJ01vZGFsRW50cnknKSB7XG4gICAgZW50cnkgPSBlbnRyeS4kcGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5XG59XG5cbnZhciBNb2RhbFBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICBWdWUubWl4aW4oe1xuICAgICAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLiRtb2RhbCA9IHtcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoZGF0YSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2ZpbmRQYXJlbnRNb2RhbEVudHJ5KHNlbGYpO1xuXG4gICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgZW50cnkuY2xvc2VDYihkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBWdWUucHJvdG90eXBlLiRzaG93TW9kYWwgPSBmdW5jdGlvbihjb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBjbG9zZUNiID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZWQpIHsgcmV0dXJuIH1cblxuICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIG1vZGFsUGFnZS5jbG9zZU1vZGFsKCk7XG5cbiAgICAgICAgICAvLyBlbWl0dGVkIHRvIHNob3cgdXAgaW4gZGV2dG9vbHNcbiAgICAgICAgICAvLyBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4gICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZW1pdCgnbW9kYWw6Y2xvc2UnLCBkYXRhKTtcbiAgICAgICAgICBuYXZFbnRyeUluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gYnVpbGQgb3B0aW9ucyBvYmplY3Qgd2l0aCBkZWZhdWx0c1xuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgICAgY2xvc2VDYWxsYmFjazogY2xvc2VDYlxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmF2RW50cnlJbnN0YW5jZSA9IG5ldyBWdWUoe1xuICAgICAgICAgIG5hbWU6ICdNb2RhbEVudHJ5JyxcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMkMS4kcm9vdCxcbiAgICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICBjbG9zZUNiOiBjbG9zZUNiXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChoKSB7IHJldHVybiBoKGNvbXBvbmVudCwge1xuICAgICAgICAgICAgICBwcm9wczogb3B0aW9ucy5wcm9wc1xuICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtb2RhbFBhZ2UgPSBuYXZFbnRyeUluc3RhbmNlLiRtb3VudCgpLiRlbC5uYXRpdmVWaWV3O1xuXG4gICAgICAgIHRoaXMkMS4kZWwubmF0aXZlVmlldy5zaG93TW9kYWwobW9kYWxQYWdlLCBvcHRpb25zKTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0RnJhbWVJbnN0YW5jZShmcmFtZSkge1xuICAvLyBnZXQgdGhlIGZyYW1lIHRoYXQgd2UgbmVlZCB0byBuYXZpZ2F0ZVxuICAvLyB0aGlzIGNhbiBiZSBhIGZyYW1lIGlkIChTdHJpbmcpXG4gIC8vIGEgVnVlIHJlZiB0byBhIGZyYW1lXG4gIC8vIGEgRnJhbWUgVmlld05vZGVcbiAgLy8gb3IgYSBGcmFtZSBpbnN0YW5jZVxuICBpZiAoaXNPYmplY3QkMShmcmFtZSkgJiYgaXNEZWYoZnJhbWUuJGVsKSkge1xuICAgIGZyYW1lID0gZnJhbWUuJGVsLm5hdGl2ZVZpZXc7XG4gIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoZnJhbWUpKSB7XG4gICAgZnJhbWUgPSByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lJykuZ2V0RnJhbWVCeUlkKGZyYW1lKTtcbiAgfSBlbHNlIGlmIChpc0RlZihmcmFtZS5uYXRpdmVWaWV3KSkge1xuICAgIGZyYW1lID0gZnJhbWUubmF0aXZlVmlldztcbiAgfVxuICAvLyBmaW5hbGx5IGdldCB0aGUgY29tcG9uZW50IGluc3RhbmNlIGZvciB0aGlzIGZyYW1lXG4gIHJldHVybiBnZXRGcmFtZShmcmFtZS5pZClcbn1cblxuZnVuY3Rpb24gZmluZFBhcmVudE5hdmlnYXRpb25FbnRyeSh2bSkge1xuICBpZiAoIXZtKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgZW50cnkgPSB2bS4kcGFyZW50O1xuICB3aGlsZSAoZW50cnkgJiYgZW50cnkuJG9wdGlvbnMubmFtZSAhPT0gJ05hdmlnYXRpb25FbnRyeScpIHtcbiAgICBlbnRyeSA9IGVudHJ5LiRwYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gZW50cnlcbn1cblxudmFyIE5hdmlnYXRvclBsdWdpbiA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgICBWdWUucHJvdG90eXBlLiRuYXZpZ2F0ZUJhY2sgPSBmdW5jdGlvbihvcHRpb25zLCBiYWNrc3RhY2tFbnRyeSkge1xuICAgICAgaWYgKCBiYWNrc3RhY2tFbnRyeSA9PT0gdm9pZCAwICkgYmFja3N0YWNrRW50cnkgPSBudWxsO1xuXG4gICAgICB2YXIgbmF2RW50cnkgPSBmaW5kUGFyZW50TmF2aWdhdGlvbkVudHJ5KHRoaXMpO1xuICAgICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICBmcmFtZTogbmF2RW50cnkgPyBuYXZFbnRyeS4kb3B0aW9ucy5mcmFtZSA6ICdkZWZhdWx0J1xuICAgICAgfTtcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICB2YXIgZnJhbWUgPSBnZXRGcmFtZUluc3RhbmNlKG9wdGlvbnMuZnJhbWUpO1xuXG4gICAgICBmcmFtZS5iYWNrKGJhY2tzdGFja0VudHJ5KTtcbiAgICB9O1xuXG4gICAgVnVlLnByb3RvdHlwZS4kbmF2aWdhdGVUbyA9IGZ1bmN0aW9uKGNvbXBvbmVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgZnJhbWU6ICdkZWZhdWx0J1xuICAgICAgfTtcbiAgICAgIC8vIGJ1aWxkIG9wdGlvbnMgb2JqZWN0IHdpdGggZGVmYXVsdHNcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgZnJhbWUgPSBnZXRGcmFtZUluc3RhbmNlKG9wdGlvbnMuZnJhbWUpO1xuICAgICAgICB2YXIgbmF2RW50cnlJbnN0YW5jZSA9IG5ldyBWdWUoe1xuICAgICAgICAgIG5hbWU6ICdOYXZpZ2F0aW9uRW50cnknLFxuICAgICAgICAgIHBhcmVudDogdGhpcyQxLiRyb290LFxuICAgICAgICAgIGZyYW1lOiBmcmFtZSxcbiAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZnJhbWU6IHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogZnJhbWUuaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgoY29tcG9uZW50LCB7IHByb3BzOiBvcHRpb25zLnByb3BzIH0pOyB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcGFnZSA9IG5hdkVudHJ5SW5zdGFuY2UuJG1vdW50KCkuJGVsLm5hdGl2ZVZpZXc7XG5cbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgIGlmIChhcmdzLmlzQmFja05hdmlnYXRpb24pIHtcbiAgICAgICAgICAgIHBhZ2Uub2ZmKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG4gICAgICAgICAgICBuYXZFbnRyeUluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwYWdlLm9uKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG5cbiAgICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIG5hdkVudHJ5SW5zdGFuY2UgdnVlIGluc3RhbmNlIGlzIGRlc3Ryb3llZCB3aGVuIHRoZVxuICAgICAgICAvLyBwYWdlIGlzIGRpc3Bvc2VkIChjbGVhckhpc3Rvcnk6IHRydWUgZm9yIGV4YW1wbGUpXG4gICAgICAgIHZhciBkaXNwb3NlID0gcGFnZS5kaXNwb3NlTmF0aXZlVmlldztcbiAgICAgICAgcGFnZS5kaXNwb3NlTmF0aXZlVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICBuYXZFbnRyeUluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICAgICAgZGlzcG9zZS5jYWxsKHBhZ2UsIGFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZyYW1lLm5hdmlnYXRlKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgY3JlYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWdlOyB9IH0pKTtcbiAgICAgICAgcmVzb2x2ZShwYWdlKTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufTtcblxuVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuXG5zZXRWdWUoVnVlKTtcblxuVnVlLnVzZShNb2RhbFBsdWdpbik7XG5WdWUudXNlKE5hdmlnYXRvclBsdWdpbik7XG5cbnZhciBuZXdMaW5lUmVnRXhwID0gL1xcXFxuL2c7XG5cbmNvbnNvbGUubG9nID0gKGZ1bmN0aW9uKGxvZywgaW5zcGVjdCwgVnVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICByZXR1cm4gbG9nLmNhbGwuYXBwbHkoXG4gICAgICBsb2csIFsgdGhpcyBdLmNvbmNhdCggQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFyZ3MsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdChhcmcsIHtcbiAgICAgICAgICBkZXB0aDogMixcbiAgICAgICAgICBjb2xvcnM6IFZ1ZS5jb25maWcuZGVidWcsXG4gICAgICAgICAgc2hvd0hpZGRlbjogdHJ1ZVxuICAgICAgICB9KS5yZXBsYWNlKG5ld0xpbmVSZWdFeHAsICdcXG4nKVxuICAgICAgfSkgKVxuICAgIClcbiAgfVxufSkoY29uc29sZS5sb2csIHV0aWxJbnNwZWN0LCBWdWUpO1xuXG5nbG9iYWwuX19vbkxpdmVTeW5jQ29yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZyYW1lID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZScpLnRvcG1vc3QoKTtcbiAgaWYgKGZyYW1lKSB7XG4gICAgaWYgKGZyYW1lLmN1cnJlbnRQYWdlICYmIGZyYW1lLmN1cnJlbnRQYWdlLm1vZGFsKSB7XG4gICAgICBmcmFtZS5jdXJyZW50UGFnZS5tb2RhbC5jbG9zZU1vZGFsKCk7XG4gICAgfVxuXG4gICAgaWYgKGZyYW1lLmN1cnJlbnRQYWdlKSB7XG4gICAgICBmcmFtZS5jdXJyZW50UGFnZS5hZGRDc3NGaWxlKFxuICAgICAgICByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uJykuZ2V0Q3NzRmlsZU5hbWUoKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIEZpeCBhIHJvbGx1cCBwcm9ibGVtIHdoaWNoIGRvZXMgbm90IGRlZmluZVxuLy8gbW9kdWxlLmV4cG9ydC5kZWZhdWx0ID0gVnVlXG4vLyBzbyBhIGBpbXBvcnQgVnVlIGZyb20gJ25hdGl2ZXNjcmlwdC12dWUnYCB3aWxsXG4vLyBmYWlsIGZyb20gYSBUeXBlc2NyaXB0IGZpbGVcblZ1ZS5kZWZhdWx0ID0gVnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZTtcbiIsInZhciBWdWUgLy8gbGF0ZSBiaW5kXG52YXIgdmVyc2lvblxudmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbClcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuX19WVUVfSE9UX01BUF9fID0gbWFwXG59XG52YXIgaW5zdGFsbGVkID0gZmFsc2VcbnZhciBpc0Jyb3dzZXJpZnkgPSBmYWxzZVxudmFyIGluaXRIb29rTmFtZSA9ICdiZWZvcmVDcmVhdGUnXG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uICh2dWUsIGJyb3dzZXJpZnkpIHtcbiAgaWYgKGluc3RhbGxlZCkgeyByZXR1cm4gfVxuICBpbnN0YWxsZWQgPSB0cnVlXG5cbiAgVnVlID0gdnVlLl9fZXNNb2R1bGUgPyB2dWUuZGVmYXVsdCA6IHZ1ZVxuICB2ZXJzaW9uID0gVnVlLnZlcnNpb24uc3BsaXQoJy4nKS5tYXAoTnVtYmVyKVxuICBpc0Jyb3dzZXJpZnkgPSBicm93c2VyaWZ5XG5cbiAgLy8gY29tcGF0IHdpdGggPCAyLjAuMC1hbHBoYS43XG4gIGlmIChWdWUuY29uZmlnLl9saWZlY3ljbGVIb29rcy5pbmRleE9mKCdpbml0JykgPiAtMSkge1xuICAgIGluaXRIb29rTmFtZSA9ICdpbml0J1xuICB9XG5cbiAgZXhwb3J0cy5jb21wYXRpYmxlID0gdmVyc2lvblswXSA+PSAyXG4gIGlmICghZXhwb3J0cy5jb21wYXRpYmxlKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tITVJdIFlvdSBhcmUgdXNpbmcgYSB2ZXJzaW9uIG9mIHZ1ZS1ob3QtcmVsb2FkLWFwaSB0aGF0IGlzICcgK1xuICAgICAgICAnb25seSBjb21wYXRpYmxlIHdpdGggVnVlLmpzIGNvcmUgXjIuMC4wLidcbiAgICApXG4gICAgcmV0dXJuXG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSByZWNvcmQgZm9yIGEgaG90IG1vZHVsZSwgd2hpY2gga2VlcHMgdHJhY2sgb2YgaXRzIGNvbnN0cnVjdG9yXG4gKiBhbmQgaW5zdGFuY2VzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmV4cG9ydHMuY3JlYXRlUmVjb3JkID0gZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIGlmKG1hcFtpZF0pIHsgcmV0dXJuIH1cblxuICB2YXIgQ3RvciA9IG51bGxcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgQ3RvciA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zXG4gIH1cbiAgbWFrZU9wdGlvbnNIb3QoaWQsIG9wdGlvbnMpXG4gIG1hcFtpZF0gPSB7XG4gICAgQ3RvcjogQ3RvcixcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIGluc3RhbmNlczogW11cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIG1vZHVsZSBpcyByZWNvcmRlZFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICovXG5cbmV4cG9ydHMuaXNSZWNvcmRlZCA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gdHlwZW9mIG1hcFtpZF0gIT09ICd1bmRlZmluZWQnXG59XG5cbi8qKlxuICogTWFrZSBhIENvbXBvbmVudCBvcHRpb25zIG9iamVjdCBob3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmZ1bmN0aW9uIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICB2YXIgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIChoLCBjdHgpIHtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBtYXBbaWRdLmluc3RhbmNlc1xuICAgICAgaWYgKGN0eCAmJiBpbnN0YW5jZXMuaW5kZXhPZihjdHgucGFyZW50KSA8IDApIHtcbiAgICAgICAgaW5zdGFuY2VzLnB1c2goY3R4LnBhcmVudClcbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIoaCwgY3R4KVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbmplY3RIb29rKG9wdGlvbnMsIGluaXRIb29rTmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbWFwW2lkXVxuICAgICAgaWYgKCFyZWNvcmQuQ3Rvcikge1xuICAgICAgICByZWNvcmQuQ3RvciA9IHRoaXMuY29uc3RydWN0b3JcbiAgICAgIH1cbiAgICAgIHJlY29yZC5pbnN0YW5jZXMucHVzaCh0aGlzKVxuICAgIH0pXG4gICAgaW5qZWN0SG9vayhvcHRpb25zLCAnYmVmb3JlRGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluc3RhbmNlcyA9IG1hcFtpZF0uaW5zdGFuY2VzXG4gICAgICBpbnN0YW5jZXMuc3BsaWNlKGluc3RhbmNlcy5pbmRleE9mKHRoaXMpLCAxKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3QgYSBob29rIHRvIGEgaG90IHJlbG9hZGFibGUgY29tcG9uZW50IHNvIHRoYXRcbiAqIHdlIGNhbiBrZWVwIHRyYWNrIG9mIGl0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gaG9va1xuICovXG5cbmZ1bmN0aW9uIGluamVjdEhvb2sob3B0aW9ucywgbmFtZSwgaG9vaykge1xuICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zW25hbWVdXG4gIG9wdGlvbnNbbmFtZV0gPSBleGlzdGluZ1xuICAgID8gQXJyYXkuaXNBcnJheShleGlzdGluZykgPyBleGlzdGluZy5jb25jYXQoaG9vaykgOiBbZXhpc3RpbmcsIGhvb2tdXG4gICAgOiBbaG9va11cbn1cblxuZnVuY3Rpb24gdHJ5V3JhcChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgZm4oaWQsIGFyZylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nXG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMgKG9sZE9wdGlvbnMsIG5ld09wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9sZE9wdGlvbnMpIHtcbiAgICBpZiAoIShrZXkgaW4gbmV3T3B0aW9ucykpIHtcbiAgICAgIGRlbGV0ZSBvbGRPcHRpb25zW2tleV1cbiAgICB9XG4gIH1cbiAgZm9yICh2YXIga2V5JDEgaW4gbmV3T3B0aW9ucykge1xuICAgIG9sZE9wdGlvbnNba2V5JDFdID0gbmV3T3B0aW9uc1trZXkkMV1cbiAgfVxufVxuXG5leHBvcnRzLnJlcmVuZGVyID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kZm9yY2VVcGRhdGUoKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMub3B0aW9uc1xuICB9XG4gIGlmIChyZWNvcmQuQ3Rvcikge1xuICAgIHJlY29yZC5DdG9yLm9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICByZWNvcmQuQ3Rvci5vcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kb3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgaW5zdGFuY2UuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNcbiAgICAgIC8vIHJlc2V0IHN0YXRpYyB0cmVlc1xuICAgICAgLy8gcHJlIDIuNSwgYWxsIHN0YXRpYyB0cmVlcyBhcmUgY2FjaGVkIHRvZ2V0aGVyIG9uIHRoZSBpbnN0YW5jZVxuICAgICAgaWYgKGluc3RhbmNlLl9zdGF0aWNUcmVlcykge1xuICAgICAgICBpbnN0YW5jZS5fc3RhdGljVHJlZXMgPSBbXVxuICAgICAgfVxuICAgICAgLy8gMi41LjBcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZC5DdG9yLm9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICByZWNvcmQuQ3Rvci5vcHRpb25zLmNhY2hlZCA9IFtdXG4gICAgICB9XG4gICAgICAvLyAyLjUuM1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5zdGFuY2UuJG9wdGlvbnMuY2FjaGVkKSkge1xuICAgICAgICBpbnN0YW5jZS4kb3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuXG4gICAgICAvLyBwb3N0IDIuNS40OiB2LW9uY2UgdHJlZXMgYXJlIGNhY2hlZCBvbiBpbnN0YW5jZS5fc3RhdGljVHJlZXMuXG4gICAgICAvLyBQdXJlIHN0YXRpYyB0cmVlcyBhcmUgY2FjaGVkIG9uIHRoZSBzdGF0aWNSZW5kZXJGbnMgYXJyYXlcbiAgICAgIC8vIChib3RoIGFscmVhZHkgcmVzZXQgYWJvdmUpXG5cbiAgICAgIC8vIDIuNjogdGVtcG9yYXJpbHkgbWFyayByZW5kZXJlZCBzY29wZWQgc2xvdHMgYXMgdW5zdGFibGUgc28gdGhhdFxuICAgICAgLy8gY2hpbGQgY29tcG9uZW50cyBjYW4gYmUgZm9yY2VkIHRvIHVwZGF0ZVxuICAgICAgdmFyIHJlc3RvcmUgPSBwYXRjaFNjb3BlZFNsb3RzKGluc3RhbmNlKVxuICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICAgIGluc3RhbmNlLiRuZXh0VGljayhyZXN0b3JlKVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgLy8gZnVuY3Rpb25hbCBvciBubyBpbnN0YW5jZSBjcmVhdGVkIHlldFxuICAgIHJlY29yZC5vcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgcmVjb3JkLm9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNcblxuICAgIC8vIGhhbmRsZSBmdW5jdGlvbmFsIGNvbXBvbmVudCByZS1yZW5kZXJcbiAgICBpZiAocmVjb3JkLm9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gcmVyZW5kZXIgd2l0aCBmdWxsIG9wdGlvbnNcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnMocmVjb3JkLm9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0ZW1wbGF0ZS1vbmx5IHJlcmVuZGVyLlxuICAgICAgICAvLyBuZWVkIHRvIGluamVjdCB0aGUgc3R5bGUgaW5qZWN0aW9uIGNvZGUgZm9yIENTUyBtb2R1bGVzXG4gICAgICAgIC8vIHRvIHdvcmsgcHJvcGVybHkuXG4gICAgICAgIHZhciBpbmplY3RTdHlsZXMgPSByZWNvcmQub3B0aW9ucy5faW5qZWN0U3R5bGVzXG4gICAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgICB2YXIgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgICAgICByZWNvcmQub3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiAoaCwgY3R4KSB7XG4gICAgICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChjdHgpXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyKGgsIGN0eClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlY29yZC5vcHRpb25zLl9DdG9yID0gbnVsbFxuICAgICAgLy8gMi41LjNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZC5vcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgcmVjb3JkLm9wdGlvbnMuY2FjaGVkID0gW11cbiAgICAgIH1cbiAgICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS4kZm9yY2VVcGRhdGUoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydHMucmVsb2FkID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnNcbiAgICB9XG4gICAgbWFrZU9wdGlvbnNIb3QoaWQsIG9wdGlvbnMpXG4gICAgaWYgKHJlY29yZC5DdG9yKSB7XG4gICAgICBpZiAodmVyc2lvblsxXSA8IDIpIHtcbiAgICAgICAgLy8gcHJlc2VydmUgcHJlIDIuMiBiZWhhdmlvciBmb3IgZ2xvYmFsIG1peGluIGhhbmRsaW5nXG4gICAgICAgIHJlY29yZC5DdG9yLmV4dGVuZE9wdGlvbnMgPSBvcHRpb25zXG4gICAgICB9XG4gICAgICB2YXIgbmV3Q3RvciA9IHJlY29yZC5DdG9yLnN1cGVyLmV4dGVuZChvcHRpb25zKVxuICAgICAgLy8gcHJldmVudCByZWNvcmQub3B0aW9ucy5fQ3RvciBmcm9tIGJlaW5nIG92ZXJ3cml0dGVuIGFjY2lkZW50YWxseVxuICAgICAgbmV3Q3Rvci5vcHRpb25zLl9DdG9yID0gcmVjb3JkLm9wdGlvbnMuX0N0b3JcbiAgICAgIHJlY29yZC5DdG9yLm9wdGlvbnMgPSBuZXdDdG9yLm9wdGlvbnNcbiAgICAgIHJlY29yZC5DdG9yLmNpZCA9IG5ld0N0b3IuY2lkXG4gICAgICByZWNvcmQuQ3Rvci5wcm90b3R5cGUgPSBuZXdDdG9yLnByb3RvdHlwZVxuICAgICAgaWYgKG5ld0N0b3IucmVsZWFzZSkge1xuICAgICAgICAvLyB0ZW1wb3JhcnkgZ2xvYmFsIG1peGluIHN0cmF0ZWd5IHVzZWQgaW4gPCAyLjAuMC1hbHBoYS42XG4gICAgICAgIG5ld0N0b3IucmVsZWFzZSgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnMocmVjb3JkLm9wdGlvbnMsIG9wdGlvbnMpXG4gICAgfVxuICB9XG4gIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmIChpbnN0YW5jZS4kdm5vZGUgJiYgaW5zdGFuY2UuJHZub2RlLmNvbnRleHQpIHtcbiAgICAgIGluc3RhbmNlLiR2bm9kZS5jb250ZXh0LiRmb3JjZVVwZGF0ZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1Jvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJ1xuICAgICAgKVxuICAgIH1cbiAgfSlcbn0pXG5cbi8vIDIuNiBvcHRpbWl6ZXMgdGVtcGxhdGUtY29tcGlsZWQgc2NvcGVkIHNsb3RzIGFuZCBza2lwcyB1cGRhdGVzIGlmIGNoaWxkXG4vLyBvbmx5IHVzZXMgc2NvcGVkIHNsb3RzLiBXZSBuZWVkIHRvIHBhdGNoIHRoZSBzY29wZWQgc2xvdHMgcmVzb2x2aW5nIGhlbHBlclxuLy8gdG8gdGVtcG9yYXJpbHkgbWFyayBhbGwgc2NvcGVkIHNsb3RzIGFzIHVuc3RhYmxlIGluIG9yZGVyIHRvIGZvcmNlIGNoaWxkXG4vLyB1cGRhdGVzLlxuZnVuY3Rpb24gcGF0Y2hTY29wZWRTbG90cyAoaW5zdGFuY2UpIHtcbiAgaWYgKCFpbnN0YW5jZS5fdSkgeyByZXR1cm4gfVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL2Jsb2IvZGV2L3NyYy9jb3JlL2luc3RhbmNlL3JlbmRlci1oZWxwZXJzL3Jlc29sdmUtc2NvcGVkLXNsb3RzLmpzXG4gIHZhciBvcmlnaW5hbCA9IGluc3RhbmNlLl91XG4gIGluc3RhbmNlLl91ID0gZnVuY3Rpb24gKHNsb3RzKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIDIuNi40IH4gMi42LjZcbiAgICAgIHJldHVybiBvcmlnaW5hbChzbG90cywgdHJ1ZSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyAyLjUgLyA+PSAyLjYuN1xuICAgICAgcmV0dXJuIG9yaWdpbmFsKHNsb3RzLCBudWxsLCB0cnVlKVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGluc3RhbmNlLl91ID0gb3JpZ2luYWxcbiAgfVxufVxuIiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9